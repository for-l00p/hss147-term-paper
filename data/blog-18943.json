{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1435522932,"rating":86,"authorHandle":"fcspartakm","modificationTimeSeconds":1435689041,"id":18943,"title":"\u003cp\u003eCodeforces Round #311 (Div.2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/557/A\"\u003e557A — Ilya and Diplomas\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThis problem can be solved in the different ways. We consider one of them — parsing cases.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + \u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e then the optimal solution is (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - \u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eElse if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + \u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e then the optimal solution is (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - \u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eElse the optimal solution is (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eThis solution is correct because of statement. It is guaranteed that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + \u003ci\u003emin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e ≤ \u003ci\u003en\u003c/i\u003e ≤ \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — O(1).\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/557/B\"\u003e557B — Pasha and Tea\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThis problem can be solved in different ways too. We consider the simplest solution whici fits in the given restrictions.\u003c/p\u003e\u003cp\u003eAt first we sort all cups in non-decreasing order of their volumes. Due to reasons of greedy it is correct thatsorted cups with numbers from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e will be given to girls and cups with numbers from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e2 * \u003ci\u003en\u003c/i\u003e\u003c/span\u003e will be given to boys. \u003c/p\u003e\u003cp\u003eNow we need to use binary search and iterate on volume of tea which will be poured for every girl. Let on current iteration \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003elf\u003c/i\u003e + \u003ci\u003erg\u003c/i\u003e) / 2 \u003d \u003ci\u003emid\u003c/i\u003e\u003c/span\u003e. Then if for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e it is correct that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emid\u003c/i\u003e ≤ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e2 * \u003ci\u003en\u003c/i\u003e\u003c/span\u003e it is correct that \u003cspan class\u003d\"tex-span\"\u003e2 * \u003ci\u003emid\u003c/i\u003e ≤ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e then we need to make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elf\u003c/i\u003e \u003d \u003ci\u003emid\u003c/i\u003e\u003c/span\u003e. Else we need to make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erg\u003c/i\u003e \u003d \u003ci\u003emid\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — O(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e * \u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e) where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e — count of cups.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/557/C\"\u003e557C — Arthur and Table\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThis problem can be solved as follows. At first we need to sort all legs in non-descending order of their length. Also we need to use array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet iterate on length of legs (which will stand table) from the least. Let this lenght is equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxlen\u003c/i\u003e\u003c/span\u003e. Count of units of energy which we need for this we will store in variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eObviously that we must unscrew all legs with lenght more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxlen\u003c/i\u003e\u003c/span\u003e. For calculate count of units of energy for doing it we can use array with suffix sums, for exapmle. Then we add this value to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eIf count of legs with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxlen\u003c/i\u003e\u003c/span\u003e is not strictly greater than the number of the remaining legs then we need to unscrew some count of legs with length less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxlen\u003c/i\u003e\u003c/span\u003e. For this we can use array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[]\u003c/span\u003e. In \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e we will store count of legs with difficulty of unscrew equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. In this array will store information about legs which already viewed.\u003c/p\u003e\u003cp\u003eWe will iterate on difficulty of unscrew from one and unscrew legs with this difficulties (and add this difficulties to variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e) while count of legs with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxlen\u003c/i\u003e\u003c/span\u003e will not be strictly greater than the number of the remaining legs. \u003c/p\u003e\u003cp\u003eWhen it happens we need to update answer with variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — O(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e * \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e), where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e — count of legs and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e — difference between maximal and minimal units of energy which needed to unscrew some legs.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/557/D\"\u003e557D — Vitaliy and Cycle\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTo solve this problem we can use dfs which will check every connected component of graph on bipartite. It is clearly that count of edges which we need to add in graph to get the odd cycle is no more than three. \u003c/p\u003e\u003cp\u003eAnswer to this problem is three if count of edges in graph is zero. Then the number of ways to add three edges in graph to make odd cycle is equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e * (\u003ci\u003en\u003c/i\u003e - 1) * (\u003ci\u003en\u003c/i\u003e - 2) / 6\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e — count of vertices in graph.\u003c/p\u003e\u003cp\u003eAnswer to this problem is two if there is no connected component with number of vertices more than two. Then the number of ways to add two edges in graph to make odd cycle is equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e * (\u003ci\u003en\u003c/i\u003e - 2)\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e — number of edges in graph.\u003c/p\u003e\u003cp\u003eNow we have one case when there is at least one connected component with number of vertices more than two. Now we need to use dfs and try to split every component in two part. If for some component we can\u0027t do it that means that graph already has odd cycle and we need to print \u003cspan class\u003d\"tex-span\"\u003e\u0026quot;0\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e1\u0026quot;\u003c/span\u003e and we can now finish our algorithm. \u003c/p\u003e\u003cp\u003eIf all connected components in graph are bipartite then we need to iterate on them. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e is the count of vertices in one part of current component and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e — count of vertices in the other part. If number of vertices in this component more than two we need to add to answer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e * (\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - 1) / 2\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e * (\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - 1) / 2\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — O(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e\u003c/span\u003e), where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e — number of vertices in graph and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e — number of edges.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/557/E\"\u003e557E — Anya and Half-palindrome\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThis problem can be solved with help of dynamic programming. \u003c/p\u003e\u003cp\u003eAt first we calculate matrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egood\u003c/i\u003e[][]\u003c/span\u003e. In \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egood\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e we put \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e, if substring from position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e half-palindrome. Else we put in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egood\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003ci\u003efalse\u003c/i\u003e\u003c/span\u003e. We can do it with iterating on \u0026quot;middle\u0026quot; of half-palindrome and expanding it to the left and to the right. There are \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e cases of \u0026quot;middle\u0026quot; but we omit it because they are simple enough. \u003c/p\u003e\u003cp\u003eNow we need to use Trie and we will put in it suffixes of given string. Also we will store array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[]\u003c/span\u003e. In \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e]\u003c/span\u003e we will store number of half-palindromes which ends in vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e of our Trie. Let now we put in tree suffix which starts in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, current symbol of string which we put is in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e and we go in vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e of out Trie. Then if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egood\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d \u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e we add one to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e]\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eNow with help of dfs let calculate for every vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e]\u003c/span\u003e — sum of numbers which stored in array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[]\u003c/span\u003e for vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e and for vertices in all subtrees of vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIt is left only to restore answer. Start from root of our Trie. We will store answer in variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e. In variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e store number of required substring. Let now we in vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, by letter \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003ea\u003c/i\u003e\u0027\u003c/span\u003e we can go in vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eto\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and by letter \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003eb\u003c/i\u003e\u0027\u003c/span\u003e — in vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eto\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eThen if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e[\u003ci\u003eto\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e] ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e we make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e +  \u003d \u0027\u003ci\u003ea\u003c/i\u003e\u0027\u003c/span\u003e and go in vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eto\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of our Trie. Else we need to make as follows: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e — \u003cspan class\u003d\"tex-span\"\u003e \u003d \u003ci\u003esum\u003c/i\u003e[\u003ci\u003eto\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e +  \u003d \u0027\u003ci\u003eb\u003c/i\u003e\u0027\u003c/span\u003e and go in vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eto\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of our Trie. \u003c/p\u003e\u003cp\u003eWhen \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e will be \u003cspan class\u003d\"tex-span\"\u003e ≤ 0\u003c/span\u003e print resulting string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e and finish algorithm.\u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — O(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eszalph\u003c/i\u003e * \u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e) where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eszalph\u003c/i\u003e\u003c/span\u003e — size of input alphabet (in this problem it equals to two) and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e — length of given string.\u003c/p\u003e\u003c/div\u003e","tags":["editorial","311","div2"]}}