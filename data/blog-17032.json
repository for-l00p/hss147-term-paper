{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1426807459,"rating":10,"authorHandle":"aslf010990","modificationTimeSeconds":1426808742,"id":17032,"title":"\u003cp\u003ePermutations in java.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello everyone, I am trying to solve the following problem: \u003ca href\u003d\"http://poj.org/problem?id\u003d1256\"\u003elink\u003c/a\u003e but I\u0027m getting time limit exceeded, I am using the following code.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport java.io.*;\nimport java.util.*;\npublic class Main {\n    static boolean used[];\n    static TreeSet\u0026lt;String\u0026gt;ts;\n    public static void main(String[] args) throws IOException {\n        BufferedReader cin\u003dnew BufferedReader(new InputStreamReader(System.in));\n        int n\u003dInteger.parseInt(cin.readLine());\n        while(n--\u0026gt;0)\n        {\n            String s\u003dcin.readLine();\n            ts\u003dnew TreeSet();\n            used\u003dnew boolean[s.length()];\n            permutations(\u0026quot;\u0026quot;,s,s.length(),0);\n            Iterator it\u003dts.iterator();\n            while(it.hasNext())\n                System.out.println(it.next());\n        }\n    }\n    private static void permutations(String per, String s, int t, int l) {\n        if(l\u003d\u003dt)\n            ts.add(per);\n        else\n        {\n            for(int i\u003d0;i\u0026lt;t;i++)\n            {\n                if(!used[i])\n                {\n                    used[i]\u003dtrue;\n                    permutations(per+s.charAt(i),s,s.length(),l+1);\n                    used[i]\u003dfalse;\n                }\n            }\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ethe problem is when generating the permutations, I have the following question, what is the fastest way to generate the permutations in java?, hope you can help me, greetings and sorry for my bad English.\u003c/p\u003e\u003c/div\u003e","tags":["permutations","algorihm","fast method"]}}