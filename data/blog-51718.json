{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1493136242,"rating":22,"authorHandle":"kobae964","modificationTimeSeconds":1493140977,"id":51718,"title":"\u003cp\u003e2-3 tree on Rust\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi, everyone!\u003c/p\u003e\u003cp\u003eI recently implemented \u003ca href\u003d\"https://en.wikipedia.org/wiki/2%E2%80%933_tree\"\u003e2-3 tree\u003c/a\u003e, a balanced tree data structure, on Rust. The key feature of this tree is, that all the leaves are at the same depth. The implementation is available here: \u003ca href\u003d\"https://github.com/koba-e964/contest/blob/61af81645a9c1287e3302642696f4fb5e5db47fb/comm/TwoThreeTree.rs\"\u003eGitHub\u003c/a\u003e\u003c/p\u003e\u003ch2\u003eImplementation Details\u003c/h2\u003e\u003cp\u003e2-3 tree data structure is represented by an enum with three constructors: \u003ccode\u003eTip\u003c/code\u003e, \u003ccode\u003eTwo\u003c/code\u003e and \u003ccode\u003eThree\u003c/code\u003e. \u003ccode\u003eTip\u003c/code\u003e is a leaf, with no elements inside. \u003ccode\u003eTwo\u003c/code\u003e is a node with one element and two children, and \u003ccode\u003eThree\u003c/code\u003e is a node with two elements and three children. \u003c/p\u003e\u003cp\u003eThe current implementation supports \u003ccode\u003einsert()\u003c/code\u003e operation only. It uses a helper function, named \u003ccode\u003einsert_sub()\u003c/code\u003e. \u003ccode\u003etree.insert_sub(x)\u003c/code\u003e inserts an element \u003ccode\u003ex\u003c/code\u003e to a tree \u003ccode\u003etree\u003c/code\u003e, and returns either:\u003cbr /\u003e (1) \u003ccode\u003eOk(ret)\u003c/code\u003e, meaning \u003ccode\u003eret\u003c/code\u003e is the resulting tree, or\u003cbr /\u003e (2) \u003ccode\u003eErr((t1, t2, val))\u003c/code\u003e, meaning that the resulting tree has an overcrowded node, so it must be split into two trees \u003ccode\u003et1\u003c/code\u003e, \u003ccode\u003et2\u003c/code\u003e, with the middle element \u003ccode\u003eval\u003c/code\u003e moved up.\u003cbr /\u003e \u003ccode\u003einsert()\u003c/code\u003e invokes \u003ccode\u003einsert_sub()\u003c/code\u003e, and\u003cbr /\u003e (1) if the result was \u003ccode\u003eOk(ret)\u003c/code\u003e, returns \u003ccode\u003eret\u003c/code\u003e, or\u003cbr /\u003e (2) if the result was \u003ccode\u003eErr((t1, t2, val))\u003c/code\u003e, returns \u003ccode\u003eTwo(_, val, t1, t2)\u003c/code\u003e.\u003cbr /\u003e\u003c/p\u003e\u003ch2\u003eExperiments\u003c/h2\u003e\u003cp\u003eTwo kinds of experiments were conducted. 1 million elements were inserted into a 2-3 tree, (1) in the ascending order and (2) in a random order. In each iteration, the depth of the 2-3 tree is checked, and if there is a change, the new depth is displayed. The experiment itself took \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/78/cb/78cbd240f0f43a574eca1a110cf408f9808f17ab.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e-time, because the depth of a 2-3 tree can be calculated by checking its leftmost leaf only. (\u003ca href\u003d\"//codeforces.com/blog/entry/51148\"\u003eExperiments of treap\u003c/a\u003e took \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e-time.)\u003c/p\u003e\u003cp\u003e(1) in the ascending order: \u003ca href\u003d\"http://ideone.com/62Seqz\"\u003ehttp://ideone.com/62Seqz\u003c/a\u003e\u003c/p\u003e\u003cp\u003e(2) in a random order: \u003ca href\u003d\"http://ideone.com/6DHM21\"\u003ehttp://ideone.com/6DHM21\u003c/a\u003e\u003c/p\u003e\u003cp\u003eHere is a graph that illustrates how the depth grows as elements are inserted. The horizontal line shows the number of nodes in the 2-3 tree and the vertical one shows the depth of the 2-3 tree. \u003cimg alt\u003d\" \" src\u003d\"/predownloaded/59/a4/59a4c3c0056e8c40f42830388dc563e138444ad3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eNote that one has not only an asymptotic upper bound \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e of the depth, but also a strict upper bound \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9b/65/9b6515b9726cbd85a2b6046ffa98e3f3dc4d932e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. That is because all the leaves of the 2-3 tree are at the same depth. (From this property, it can be shown that a 2-3 tree of depth \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e has at least \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e nodes.) It is also worth noting that unlike \u003ca href\u003d\"//codeforces.com/blog/entry/51148\"\u003eexperiments on treap\u003c/a\u003e, there is no decrease of depth in the random case.\u003c/p\u003e\u003ch2\u003eConclusion\u003c/h2\u003e\u003cp\u003eWe have the 2-3 tree data structure, implemented on Rust!\u003c/p\u003e\u003ch2\u003eReferences\u003c/h2\u003e\u003cp\u003eThe code is available here: \u003ca href\u003d\"https://github.com/koba-e964/contest/blob/61af81645a9c1287e3302642696f4fb5e5db47fb/comm/TwoThreeTree.rs\"\u003ehttps://github.com/koba-e964/contest/blob/61af81645a9c1287e3302642696f4fb5e5db47fb/comm/TwoThreeTree.rs\u003c/a\u003e \u003cbr /\u003e \u003ca href\u003d\"http://ideone.com/62Seqz\"\u003ehttp://ideone.com/62Seqz\u003c/a\u003e \u003cbr /\u003e \u003ca href\u003d\"http://ideone.com/6DHM21\"\u003ehttp://ideone.com/6DHM21\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe implementation was done with the aid of this slide: \u003ca href\u003d\"https://www.slideshare.net/sandpoonia/23-tree\"\u003ehttps://www.slideshare.net/sandpoonia/23-tree\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["rust","b-trees","balanced","experiment"]}}