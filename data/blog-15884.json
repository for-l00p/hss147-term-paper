{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1421665763,"rating":7,"authorHandle":"NeverSayNever","modificationTimeSeconds":1421666535,"id":15884,"title":"\u003cp\u003eFastest Way to multiply two Numbers\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello all ,\u003c/p\u003e\u003cp\u003eHope you all are doing well .\u003c/p\u003e\u003cp\u003eI am looking for an efficient way to multiply two numbers A and B mod C where A,B,C can be in the range [1,10\u003csup\u003e15\u003c/sup\u003e] .\u003c/p\u003e\u003cp\u003eHere are the list of the solution which i think can think off but there must be some more fast methods .\u003c/p\u003e\u003cp\u003eSolution 1 : simplest and easiest solution is two switch language to jave,python or to use big int in c++ . I don\u0027t fill it is a good technique and would like to do it in c .\u003c/p\u003e\u003cp\u003eSolution 2 : Russian Peasant Multiplication \u003c/p\u003e \u003cpre\u003e\n\nlong long int mulmod(long long int a,long long int b) {\n    if (M \u0026lt;\u003d 1000000009) return a * b % M;\n \n    long long int res \u003d 0;\n    while (a \u0026gt; 0) {\n        if (a \u0026amp; 1) {\n            res +\u003d b;\n            if (res \u0026gt;\u003d M) res -\u003d M;\n        }\n        a \u0026gt;\u0026gt;\u003d 1;\n        b \u0026lt;\u0026lt;\u003d 1;\n        if (b \u0026gt;\u003d M) b -\u003d M;\n    }\n    return res;\n}\n\n\u003c/pre\u003e\u003cp\u003ewhich works in O(log(min(A,B))) time .\u003c/p\u003e\u003cp\u003eI heard of karatsuba algorithm which is very fast. Is it faster than the russian multiplication .. can anyone provide me some implementation stuff or some motivation ..\u003c/p\u003e\u003cp\u003eAny kind of help is appreciated :D :D \u003c/p\u003e\u003ch3\u003eEDIT1\u003c/h3\u003e : Is there any constant time algo exist .\u003ch3\u003eEDIT2 \u003c/h3\u003e: I also find this .. but i think it is not correct for the values upto 10^18 ..  \u003cpre\u003e\n\nlong long int mulmod(long long int val, long long int n,long long int mod)\n{\n    long long int q\u003d((double)val*(double)n/(double)mod);\n    long long int res\u003dval*n-mod*q;\n    res\u003d(res%mod+mod)%mod;\n    return res;\n}\n\n\u003c/pre\u003e\u003c/div\u003e","tags":[]}}