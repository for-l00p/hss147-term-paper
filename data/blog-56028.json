{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1511725809,"rating":91,"authorHandle":"NBAH","modificationTimeSeconds":1511807241,"id":56028,"title":"\u003cp\u003eCodeforces Round #448(Div.2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/895/problem/A\" title\u003d\"Codeforces Round 448 (Div. 2)\"\u003e895A - Pizza Separation\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eWe can notice that if one of the sectors is continuous then all the remaining pieces also form a continuous sector.If angle of the first sector is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e then difference between angles of first and second sectors is \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ex\u003c/i\u003e - (360 - \u003ci\u003ex\u003c/i\u003e)| \u003d |2 * \u003ci\u003ex\u003c/i\u003e - 360| \u003d 2 * |\u003ci\u003ex\u003c/i\u003e - 180|\u003c/span\u003e. So for each possible continuous sector we can count it\u0027s angle and update answer.\u003c/p\u003e\u003cp\u003eTime complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/dX19Vz\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/895/problem/B\" title\u003d\"Codeforces Round 448 (Div. 2)\"\u003e895B - XK Segments\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eFirst, we need to understand how to find the number of integers in \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e segment which are divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. It is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e / \u003ci\u003ex\u003c/i\u003e–(\u003ci\u003el\u003c/i\u003e - 1) / \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. After that we should sort array in ascending order. For each left boundary of the segment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e \u003d \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e we need to find minimal and maximal index of good right boundaries. All right boundaries \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e \u003d \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e should satisfy the following condition \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] / \u003ci\u003ex\u003c/i\u003e–(\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - 1) / \u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. We already know \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - 1) / \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] / \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is increasing while \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e increases. So we can do binary search on sorted array to find minimal/maximal index of good right boundaries and that mean we can find the number of good right boundaries.\u003c/p\u003e\u003cp\u003eTime complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/du1pd3\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/895/problem/C\" title\u003d\"Codeforces Round 448 (Div. 2)\"\u003e895C - Square Subsets\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eWe can notice that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is a perfect square of some integer if and only if each prime number enters decomposition of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e into prime factors even times. There are only \u003cspan class\u003d\"tex-span\"\u003e19\u003c/span\u003e prime numbers less than \u003cspan class\u003d\"tex-span\"\u003e70\u003c/span\u003e. Now we should find the bitmask for each integer in \u003cspan class\u003d\"tex-span\"\u003e[1, 70]\u003c/span\u003e by the following way: There is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e in bit representation of mask in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-th place if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-th prime number enters decomposition of that number odd times. Else there is \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. For each integer between \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e70\u003c/span\u003e we need to find the number of ways we can take odd and even amount of it from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e1[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e0[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e be that number of ways relatively. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e be the number of ways to choose some elements which are \u0026lt;\u003d \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, and their product has only those prime numbers in odd degree on whose index number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e has \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e in binary representation. Initially \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[0][0] \u003d 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d9/07/d907be2fa1e1a943a5a0eb4dab5742b72c4550fe.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e] +  \u003d \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] * \u003ci\u003ef\u003c/i\u003e0[\u003ci\u003ei\u003c/i\u003e + 1]\u003c/span\u003e\u003c/p\u003e\u003cp\u003eThe answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[70][0]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTime complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e\u003c/span\u003e(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/span\u003e*2^cnt(max)), where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/span\u003e is maximal integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e(\u003ci\u003emax\u003c/i\u003e)\u003c/span\u003e is the number of prime numbers less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/VfEMOp\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/895/problem/D\" title\u003d\"Codeforces Round 448 (Div. 2)\"\u003e895D - String Mark\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eSuppose that we can calculate the function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003c/span\u003e equal to the number of permutations of the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e strictly less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. Then the answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e) - \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e) - 1\u003c/span\u003e. Now we need to understand how to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003c/span\u003e. First we should count the number of occurrences of each letter in the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[26]\u003c/span\u003e.Than we can iterate through the position of the first different symbol in the permutation \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and update the number of remaining symbols \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[26]\u003c/span\u003e. For each such position, we need to iterate through the symbol in the permutation of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e which will stand in this position. It must be less than the character at this position in the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e string. For each such situation we can calculate and add to the answer the number of different permutations that can be obtained using symbols not currently involved. Their number is stored in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[26]\u003c/span\u003e. In its simplest form, this solution works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003ek\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is the size of the alphabet. Such a solution can\u0027t pass the tests, but it can be optimized to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e, and that is enough to solve the problem.\u003c/p\u003e\u003cp\u003eTime complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is the size of alphabet.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/fjz8E0\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Arpa\" title\u003d\"Candidate Master Arpa\"\u003eArpa\u003c/a\u003e\u0027s \u003ca href\u003d\"//codeforces.com/contest/895/submission/32695728\"\u003esolution\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/895/problem/E\" title\u003d\"Codeforces Round 448 (Div. 2)\"\u003e895E - Eyes Closed\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eFor each position we need to maintain mathematical expectation of the value on it. Initially, for position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, it is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. Let\u0027s process the query of the first type. Each number from the interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e1, \u003ci\u003er\u003c/i\u003e1]\u003c/span\u003e remains on its place with probability \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003er\u003c/i\u003e1 - \u003ci\u003el\u003c/i\u003e1) / (\u003ci\u003er\u003c/i\u003e1 - \u003ci\u003el\u003c/i\u003e1 + 1)\u003c/span\u003e. The probability that it will be replaced by a number from \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e2, \u003ci\u003er\u003c/i\u003e2]\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e1 / (\u003ci\u003er\u003c/i\u003e1 - \u003ci\u003el\u003c/i\u003e1 + 1)\u003c/span\u003e. The mathematical expectation of the number to which it will be replaced is the arithmetic mean of sum of the mathematical expectation of numbers in \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e2, \u003ci\u003er\u003c/i\u003e2]\u003c/span\u003e, let it be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Then, to update the expectation of a number from \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e1, \u003ci\u003er\u003c/i\u003e1]\u003c/span\u003e, we need to multiply it by \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003er\u003c/i\u003e1 - \u003ci\u003el\u003c/i\u003e1) / (\u003ci\u003er\u003c/i\u003e1 - \u003ci\u003el\u003c/i\u003e1 + 1)\u003c/span\u003e and add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e / (\u003ci\u003er\u003c/i\u003e1 - \u003ci\u003el\u003c/i\u003e1 + 1)\u003c/span\u003e to it. That is, the query of the first type is reduced to the query multiplying all the numbers in a segment and adding to them a number. To process the second type query, you must find the sum of the numbers in the segment. All these queries can be processed with the help of segment tree.\u003c/p\u003e\u003cp\u003eTime complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e * \u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/nGpGqY\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Arpa\" title\u003d\"Candidate Master Arpa\"\u003eArpa\u003c/a\u003e\u0027s \u003ca href\u003d\"//codeforces.com/contest/895/submission/32695726\"\u003esolution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}