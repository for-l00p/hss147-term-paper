{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1489930271,"rating":23,"authorHandle":"RussianCodeCup","modificationTimeSeconds":1489930703,"id":51089,"title":"\u003cp\u003eRussian Code Cup 2017 Warmup — Problems (and testing queue length) analysis\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e Hello, everyone and thank you for participation! \u003c/p\u003e \u003cp\u003e First of all we would like to say sorry for the length of the testing queue during the first hour. We have selected IOIP problems for the Warmup Round — there are many common problemsetters for IOIP and RCC — the round was prepared by Victoria Erokhina (\u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/viktoria\" title\u003d\"Expert viktoria\"\u003eviktoria\u003c/a\u003e), Dmitry Filippov (\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/DimaPhil\" title\u003d\"Candidate Master DimaPhil\"\u003eDimaPhil\u003c/a\u003e), Stanislav Naumov (\u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/josdas\" title\u003d\"Grandmaster josdas\"\u003ejosdas\u003c/a\u003e), Mikhail Putilin (\u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/SpyCheese\" title\u003d\"International Grandmaster SpyCheese\"\u003eSpyCheese\u003c/a\u003e), Grigory Shovkoplyas (\u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/GShark\" title\u003d\"Expert GShark\"\u003eGShark\u003c/a\u003e), Andrew Stankevich (\u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/andrewzta\" title\u003d\"Grandmaster andrewzta\"\u003eandrewzta\u003c/a\u003e), Ilya Zban (\u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/izban\" title\u003d\"International Grandmaster izban\"\u003eizban\u003c/a\u003e). We wanted to let everyone solve our interesting problems. \u003c/p\u003e \u003cp\u003e But one small glitch lead to a big failure. You might have noticed that we usually make multiple tests in one input data for RCC. That is because the most expensive operation is to run user solution. But IOIP has fewer participants, so the easiest problem had 32 tests. It is not too many for a problem, but during 15 minutes 400 participants submitted the correct solution and our testing machines capacity was not enough. \u003c/p\u003e \u003cp\u003e We decreased the number of tests in the problem, and the situation got better. We will take this into account when preparing problems for future contests. \u003c/p\u003e \u003cp\u003e Now let us proceed to problem analysis. \u003c/p\u003e\u003cdiv class\u003d\"problem-statement\"\u003e\u003cdiv class\u003d\"header\"\u003e\u003cdiv class\u003d\"title\"\u003eA. Spaceship\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003eNote that if the last enemy to destroy has power equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, the sum of powers of all enemies is \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Therefore to find the power of the enemy to destroy last, let us find the sum of all powers and divide it by two. After that just pick any enemy with such power and swap it with the last one.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problem-statement\"\u003e\u003cdiv class\u003d\"header\"\u003e\u003cdiv class\u003d\"title\"\u003eB. Rangers in the Bus\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003eLet us process passengers one by one. Since Pink Ranger could take any seat, any passenger can be Pink Ranger.\u003c/p\u003e\u003cp\u003eFor each seat we want to be able to quickly answer if it is free. Let us use std::set that stores the set of occupied seats. To check whether the current passenger can be Red Ranger let us find the seat that Red Ranger would choose. Iterate row from 1 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, and if there is a free seat in the current row, take the left seat if it is free, or the right seat in the other case. If the current passenger chose that seat, he could be Red Ranger. Similarly we can check whether the current passenger could be Blue, Black or Yellow Ranger. After processing the passenger, add the seat he chose to the set of occupied seats.\u003c/p\u003e\u003cp\u003eThe solution described uses \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enk\u003c/i\u003e)\u003c/span\u003e time and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e memory. \u003c/p\u003e\u003cp\u003eTo get rid of time limit, let us note that all we need is to store the minimal and the maximal row that have free seats. Use two indices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efirst\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elast\u003c/i\u003e\u003c/span\u003e to store them. Initially \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efirst\u003c/i\u003e \u003d 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elast\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. After each passenger update these values. Increase \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efirst\u003c/i\u003e\u003c/span\u003e by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, until the row pointed by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efirst\u003c/i\u003e\u003c/span\u003e is completely occupied, then similarly decreaser \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elast\u003c/i\u003e\u003c/span\u003e. There are at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e / 2\u003c/span\u003e occupied rows, so both indices will be changed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e times.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problem-statement\"\u003e\u003cdiv class\u003d\"header\"\u003e\u003cdiv class\u003d\"title\"\u003eC. Magic Weapon\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003ePrecalculate arrays: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e — the number of red details that have the first digit of the model number equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and the last digit equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e; \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e]\u003c/span\u003e — the number of green details that have the last digit equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e; и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e — the number of blue details that have the first digit equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIt model numbers of different colors were distinct, the answer would be equal to the sum for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e of values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e]·\u003ci\u003eR\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e]·\u003ci\u003eB\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eTo resolve the situation when some pair of details have the same model number, calculate the number of red-blue pairs with the same model number, red-green pairs and green-blue pairs. Note that only model numbers with the same first and last digit need to be considered. You can use std::map to calculate the number of such model numbers. Now use inclusion-exclusion principle to find the answer: subtract the number of pairs of each type and add back twice the number of triples that all three rangers use detail with the same model number.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problem-statement\"\u003e\u003cdiv class\u003d\"header\"\u003e\u003cdiv class\u003d\"title\"\u003eD. Knights and Knaves\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003eLet us use dynamic programming with mask of the last two columns as a state. Consider for example subtask of calculating the maximal number of knights.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e_\u003ci\u003eprev\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e_\u003ci\u003ecur\u003c/i\u003e]\u003c/span\u003e be the maximal number of knights that can be positined among the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e columns, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e_\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e is the mask of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th column, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e_\u003ci\u003eprev\u003c/i\u003e\u003c/span\u003e is the mask of the \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - 1)\u003c/span\u003e-th. Use bit equal to 1 to denote a knight and 0 to denote a knave.\u003c/p\u003e\u003cp\u003eTry all possible masks for the \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1)\u003c/span\u003e-th column, check whether constraints for the soldiers in the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th column are satisfied, because now we know all of their neighbors.\u003c/p\u003e\u003cp\u003eThe first and the last columns must be considered separately, because soldiers there don\u0027t have one of the neighbors.\u003c/p\u003e\u003cp\u003eInitial values: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[2][\u003ci\u003emask\u003c/i\u003e_\u003ci\u003eprev\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e_\u003ci\u003ecur\u003c/i\u003e]\u003c/span\u003e the number of ones in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e_\u003ci\u003eprev\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e_\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e_\u003ci\u003eprev\u003c/i\u003e\u003c/span\u003e can be before \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e_\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eUpdating values: relax \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003emask\u003c/i\u003e_\u003ci\u003ecur\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e_\u003ci\u003enext\u003c/i\u003e]\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e_\u003ci\u003eprev\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e_\u003ci\u003ecur\u003c/i\u003e] + \u003ci\u003eones\u003c/i\u003e(\u003ci\u003emask\u003c/i\u003e_\u003ci\u003enext\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eones\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is the number of ones in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe answer is the maximum among \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e_\u003ci\u003eprev\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e_\u003ci\u003ecur\u003c/i\u003e]\u003c/span\u003e, such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e_\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e can be after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e_\u003ci\u003eprev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFinally, we probably need to consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 1\u003c/span\u003e separately, because there is no previsous column for any column in this case.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problem-statement\"\u003e\u003cdiv class\u003d\"header\"\u003e\u003cdiv class\u003d\"title\"\u003eE. Parallelepiped\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003eLet us give a sketch of the main solution idea. First, separately consider all parallelepipeds that have two or three equal sides. This can be done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eNow let us consider the case where all three sides are different. Let us build the following undirected graph: vertices are side length, connect \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e if there are at least two sheets of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e × \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Now the problem is reduced to considering all triangles in this graph which can be done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e / \u003ci\u003ew\u003c/i\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ensqrt\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e time (here \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e is the word size, 32 or 64 which comes up from bit compression).\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}