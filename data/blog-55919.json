{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1511220732,"rating":22,"authorHandle":"Med0b1011","modificationTimeSeconds":1511220824,"id":55919,"title":"\u003cp\u003eAbout 2D Bits query/update\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello recently I attempted this problem: \u003ca href\u003d\"//codeforces.com/contest/341/problem/D\"\u003ehttp://codeforces.com/contest/341/problem/D\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI understand editorial\u0027s solution, but I found in comments a very nice solution, that appears it can be generalized to query sums or higher dimensions. Here is it.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSpoiler\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eNotice that we could do  +  and  -  subtraction interval-wise. But Fenwick tree could only update per range and query per element or vice versa. If, for each element, say, ft(x, y) hold the sum of prefix sum of the matrix (1, 1, x, y) (ie. prefix sum of prefix sum of (x, y)), then for each query, ft(x1, y1) - ft(x0 - 1, y1) - ft(x1, y0 - 1) + ft(x0 - 1, y0 - 1) would be the result. As the difference between prefix-sum is the sum of the corresponding interval. And it\u0027s easy to xor a v to elements in submatrix (x0, y0, x1, y1). Consider 1 dimension version of this problem. For a sequence a, the prefix sum of x is and the prefix sum of prefix sum of x is . Hence, all we have to do is to maintain an extra sequnce i * ai. Then expand method above to arbitrary dimension.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eLink to code : \u003ca href\u003d\"//codeforces.com/contest/341/submission/4391987\"\u003ehttp://codeforces.com/contest/341/submission/4391987\u003c/a\u003e \u003c/p\u003e\u003cp\u003eI could only get a vague idea, but not much into detail of what\u0027s going on especially the code. With this being a 4 years old comment, I don\u0027t think it\u0027s a good idea to ask the guy who posted, but can anyone please clarify in an easier way, or provide similar problems/blogs to it? Perhaps how to solve this problem if it was for sum queries instead of xor using this technique.\u003c/p\u003e\u003cp\u003eThanks.\u003c/p\u003e\u003c/div\u003e","tags":[]}}