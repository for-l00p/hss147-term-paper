{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1433809628,"rating":-3,"authorHandle":"milesstevenson","modificationTimeSeconds":1433809820,"id":18423,"title":"\u003cp\u003eDijkstra\u0027s Algorithm in Java without a custom Heap/PriorityQueue? LightOJ Problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI\u0027m working on \u003ca href\u003d\"http://lightoj.com/volume_showproblem.php?problem\u003d1002\"\u003eLightOJ problem 1002\u003c/a\u003e and I can see that the problem requires a variant of Dijkstra\u0027s algorithm. When I refer to books, however, they require a different type of PriorirtyQueue than what is included in Java\u0027s Collections library.\u003c/p\u003e\u003cp\u003eMy question is, for those of you who have had to implement Dijkstra\u0027s in a contest or even from an OJ while practicing, have you had to write your own Heap and PriorityQueue implementation usually, or is there a quicker way? I\u0027ve been told before that TreeSet could be used in replacement for PriorityQueue. I\u0027ve tried to look around a bit for shortest path tagged problems and how people have used Dijkstra\u0027s here on Codeforces, but implementations seem to vary so drastically, and it makes it quite confusing to know which style to follow and study. Could someone show me an example of how they implement Dijkstra\u0027s algorithm for contests in Java. It would be really helpful to learn from and reference from. Thanks.\u003c/p\u003e\u003c/div\u003e","tags":[]}}