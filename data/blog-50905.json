{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1489173741,"rating":17,"authorHandle":"egor.okhterov","modificationTimeSeconds":1489175902,"id":50905,"title":"\u003cp\u003eLongest path in a tree using k vertices\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eWe have a tree with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e(2 ≤ \u003ci\u003en\u003c/i\u003e ≤ 1000)\u003c/span\u003e nodes and we need to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e(1 ≤ \u003ci\u003ek\u003c/i\u003e ≤ 100\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e - 1)\u003c/span\u003e vertices such that the path going through all of these vertices has the maximum length.\u003c/p\u003e\u003cp\u003eNote: \u003c/p\u003e \u003cul\u003e   \u003cli\u003eThe path should start at vertex \u003ccode\u003e1\u003c/code\u003e and finish also at vertex \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e   \u003cli\u003eThe algorithm has to return just the length of the maximum path (the path itself is not needed).\u003c/li\u003e   \u003cli\u003eThe weight for an edge has following restrictions: \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ew\u003c/i\u003e ≤ 100000\u003c/span\u003e.\u003c/li\u003e \u003c/ul\u003e \u003chr /\u003e\u003cp\u003eLet\u0027s say we have the following tree with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 5\u003c/span\u003e vertices:\u003cbr /\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/e8/f5/e8f5e65be03a10fa23150c4ce5b8a59988cced8b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWe need to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 3\u003c/span\u003e vertices which will give us the longest path.\u003c/p\u003e\u003cp\u003eFor this tree the maximal path is the following:\u003cbr /\u003e\u003ccode\u003e1\u003c/code\u003e ⟶ \u003ccode\u003e5\u003c/code\u003e ⟶ \u003ccode\u003e2\u003c/code\u003e ⟶ \u003ccode\u003e4\u003c/code\u003e ⟶ \u003ccode\u003e1\u003c/code\u003e\u003c/p\u003e\u003cp\u003eIt has the total length of \u003cspan class\u003d\"tex-span\"\u003e13 + 18 + 10 + 5 \u003d 46\u003c/span\u003e.\u003cbr /\u003eSo, for that particular tree we have to print \u003cspan class\u003d\"tex-span\"\u003e46\u003c/span\u003e as our result.\u003c/p\u003e \u003chr /\u003e\u003cp\u003eI came up with a following \u003cem\u003egreedy/dp-like\u003c/em\u003e solution. First we solve the problem for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 1\u003c/span\u003e and we remember this solution in a linked list \u003ccode\u003e1\u003c/code\u003e ⟶ \u003ccode\u003ev\u003c/code\u003e ⟶ \u003ccode\u003e1\u003c/code\u003e. After that we try to solve the problem for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 2\u003c/span\u003e by trying all of the remaining \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 2\u003c/span\u003e vertices and insert it in the current path: \u003ccode\u003e1\u003c/code\u003e ⟶ \u003ccode\u003eu\u003c/code\u003e ⟶ \u003ccode\u003ev\u003c/code\u003e ⟶ \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e ⟶ \u003ccode\u003ev\u003c/code\u003e ⟶ \u003ccode\u003eu\u003c/code\u003e ⟶ \u003ccode\u003e1\u003c/code\u003e. After going through all of the vertices we choose the one which gave us the best result. Then we proceed to solve \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 3\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe problem is that it looks like \u003ca href\u003d\"http://pastebin.com/kvhPSSUw\"\u003ethis solution\u003c/a\u003e is not correct, because it fails the tests for \u003ca href\u003d\"https://icpcarchive.ecs.baylor.edu/index.php?option\u003dcom_onlinejudge\u0026amp;Itemid\u003d8\u0026amp;category\u003d633\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d5184\"\u003ethis problem\u003c/a\u003e. I cannot prove that my solution is correct and I cannot disprove it. All I managed to do is to generate millions of different random trees and in all of these cases my clever solution matched bruteforce solution.\u003c/p\u003e\u003cp\u003eFor now all my effort is directed towards generating a counter example in which my method will fail, but if it is correct I\u0027d be glad to see the reasoning why is it correct.\u003c/p\u003e\u003c/div\u003e","tags":["weighted tree","dynamic programming","all-shortest-path"]}}