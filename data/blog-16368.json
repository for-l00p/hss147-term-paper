{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1423869288,"rating":0,"authorHandle":"HardW3ll","modificationTimeSeconds":1423912543,"id":16368,"title":"\u003cp\u003eRound 2 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e[problem:202476A]\u003c/h2\u003e\u003cp\u003eAs the new brackets will be added only at the end, the problem will be about checking if there exist an index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e where the closed brackets will be more than the opened brackets so it can\u0027t be fixed. otherwise you have to add \u003cspan class\u003d\"tex-span\"\u003e)\u003c/span\u003e until both counts of opened and closed brackets are equal.\u003c/p\u003e\u003ch2\u003e[problem:202476B]\u003c/h2\u003e\u003cp\u003eThere a lot of approaches to this problem one of them is to try all possible permutations for one triangle and check if the two triangles are similar.\u003c/p\u003e\u003ch2\u003e[problem:202476C]\u003c/h2\u003e\u003cp\u003eComplete search problem. You\u0027ll try to take either one or two digits (\u003cspan class\u003d\"tex-span\"\u003e ≤ 50\u003c/span\u003e) every time such that no element will be repeated and keep backtracking until you reach a solution where all elements from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e were visited.\u003c/p\u003e\u003ch2\u003e[problem:202476D]\u003c/h2\u003e\u003cp\u003eBinary search problem. We\u0027ll binary search for the answer which is the number of hits required. The check part is the tricky part. Assume that we want to check if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e hits are enough. Now for every monster he\u0027ll be hit by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e hits, some of them are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e - \u003ci\u003etype\u003c/i\u003e\u003c/span\u003e hits and the others are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e - \u003ci\u003etype\u003c/i\u003e\u003c/span\u003e hits. No for each monster we want to get the minimal direct hits of type \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e that are sufficient to kill him which can be easily calculated via the equation \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/76/c8/76c807ab822d21de5ed66a176e5cac0b2a792371.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Now sum all the minimal numbers of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e - \u003ci\u003etype\u003c/i\u003e\u003c/span\u003e hits for all the monsters if it\u0027s larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e then it\u0027s not possible to kill all the monsters with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e hits and clearly we need a larger number.\u003c/p\u003e\u003cp\u003eBe careful of setting the higher bound in the binary search. (It\u0027s always better to set it to a very large number (e.g \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e14\u003c/sup\u003e\u003c/span\u003e) without calculating it)\u003c/p\u003e\u003ch2\u003e[problem:202476E]\u003c/h2\u003e\u003cp\u003eSort the coordinates of the people and the vaults. Let\u0027s begin assigning the people into the vaults from the beginning of both the people and the vaults. From the first look there is an easy \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b3/63/b363c857921753294549dffa46c3203f807cd1d4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e implementation but it can be easily transformed into an \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1a/45/1a4555254742a18a14d898339e62ef3a4cb6e45e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e one. Assume that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e person couldn\u0027t be assigned to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e vault and the position of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e vault was less than the position of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e person then clearly it won\u0027t be useful for any other person with index larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. So it\u0027s not necessary to begin iterating from the beginning of the vaults but only from the last vault assigned.\u003c/p\u003e\u003ch2\u003e[problem:202476F]\u003c/h2\u003e\u003cp\u003eThe first observation is that there is no answer for any even number. otherwise the answer will be \u003cspan class\u003d\"tex-span\"\u003e2, \u003ci\u003ex\u003c/i\u003e + 2\u003c/span\u003e as you can\u0027t construct \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e but you can construct any even number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e by using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e / 2\u003c/span\u003e coins of \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e and any odd number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e by using one coin of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + 2\u003c/span\u003e and the rest from the \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e coin.\u003c/p\u003e\u003ch2\u003e[problem:202476G]\u003c/h2\u003e\u003cp\u003eCool problem solve it on your own :P\u003c/p\u003e\u003ch2\u003e[problem:202476H]\u003c/h2\u003e\u003cp\u003eComplete search problem. Let\u0027s construct the number using recursion. Be this way we can always avoid the number which has a prime number in it\u0027s sequence quickly\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif ((num % 10) * 10 + i) is not prime\n   recurse\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe can do the same for the gcd part\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif ((num % 10) * 10 + i) and (num % 100) are coprime\n   recurse\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe rest of the solution is left as an exercise.\u003c/p\u003e\u003c/div\u003e","tags":[]}}