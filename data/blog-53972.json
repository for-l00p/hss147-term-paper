{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1503251453,"rating":8,"authorHandle":"md.ashif313","modificationTimeSeconds":1503251453,"id":53972,"title":"\u003cp\u003eShortest path in weighted graph with maximum edge limit\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI\u0027m trying to find efficient algorithm for finding shortest path in weighted(Positive/Negative) graph with maximum edge limit.\u003c/p\u003e\u003cp\u003eFor example, in the graph below if we demand the shortest path from A to C with restriction the path can contain at most two edges. It would be A-\u0026gt;B-\u0026gt;C and total cost 5 (Which is greater than A-\u0026gt;D-\u0026gt;E-\u0026gt;C)\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"Weighted graph without negative edge.\" src\u003d\"/predownloaded/39/50/395082f3ae61c189441f0831cd91e8687df6e66b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eI think when the graph is (directed or undirected) has no negative edge, we can use Dijkstra with little modification, such that we will keep the number of edges in the currently discovered shortest path from source to currently used vertex for relaxation. Is my idea OK? Or there is much better something?\u003c/p\u003e\u003cp\u003eAnd how can we solve the similar problem when the graph(directed) consists of negative edges(but no negative cycle)?\u003c/p\u003e\u003c/div\u003e","tags":["#graph","shortest path","dijkstra","bellman-ford"]}}