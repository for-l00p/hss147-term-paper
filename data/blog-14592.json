{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1415164615,"rating":66,"authorHandle":"Bugman","modificationTimeSeconds":1415278520,"id":14592,"title":"\u003cp\u003eCodeforces Round #276 — Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/485/problem/A\" title\u003d\"Codeforces Round 276 (Div. 2)\"\u003e485A - Factory\u003c/a\u003e\u003c/p\u003e\u003cp\u003eProduction will stops iff exists integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e ≥ 0\u003c/span\u003e such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e·2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e is divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e. From this fact follows that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e maximum will be about \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003em\u003c/i\u003e))\u003c/span\u003e. So if we modeling some, for example, 20 days and production does not stop, then it will never stop and answer is \u0026quot;No\u0026quot;. Otherwise answer is \u0026quot;Yes\u0026quot;.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/485/problem/B\" title\u003d\"Codeforces Round 276 (Div. 2)\"\u003e485B - Valuable Resources\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet us find minimum length needed to cover points by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eOx\u003c/i\u003e\u003c/span\u003e. It is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMaximum\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e) - \u003ci\u003eMinumum\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. The same in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eOy\u003c/i\u003e\u003c/span\u003e — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMaximum\u003c/i\u003e(\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e) - \u003ci\u003eMinumum\u003c/i\u003e(\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. Since we need a square city to cover all the mines, then we need to set length of this square to the maximum from those two values.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/484/problem/A\" title\u003d\"Codeforces Round 276 (Div. 1)\"\u003e484A - Bits\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet us define function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eL\u003c/i\u003e, \u003ci\u003eR\u003c/i\u003e)\u003c/span\u003e, that gives answer to the query. It looks follows:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eif \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e \u003d \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eL\u003c/i\u003e, \u003ci\u003eR\u003c/i\u003e) \u003d \u003ci\u003eL\u003c/i\u003e\u003c/span\u003e;\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eelse if \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sup\u003e ≤ \u003ci\u003eL\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e — maximum integer such \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sup\u003e ≤ \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eL\u003c/i\u003e, \u003ci\u003eR\u003c/i\u003e) \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003eL\u003c/i\u003e - 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sup\u003e, \u003ci\u003eR\u003c/i\u003e - 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sup\u003e) + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e;\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eelse if \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e + 1\u003c/sup\u003e - 1 ≤ \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eL\u003c/i\u003e, \u003ci\u003eR\u003c/i\u003e) \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e + 1\u003c/sup\u003e - 1\u003c/span\u003e;\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eelse \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eL\u003c/i\u003e, \u003ci\u003eR\u003c/i\u003e) \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eTotal complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elogR\u003c/i\u003e)\u003c/span\u003e per query.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/484/problem/B\" title\u003d\"Codeforces Round 276 (Div. 1)\"\u003e484B - Maximum Value\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet us iterate over all different \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Since we need to maximize \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/78/b3/78b367327f7d7a7eba50f5e1ebfaf0cb199e1837.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, then iterate all integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e (such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e) in range from \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e — doubled maximum value of the sequence. For each such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e we need to find maximum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Limits for numbers allow to do this in time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e with an array. After that, update answer by value \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/78/b3/78b367327f7d7a7eba50f5e1ebfaf0cb199e1837.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Total time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlogn\u003c/i\u003e + \u003ci\u003eMlogM\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/484/problem/C\" title\u003d\"Codeforces Round 276 (Div. 1)\"\u003e484C - Strange Sorting\u003c/a\u003e\u003c/p\u003e\u003cp\u003eNote, that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e-sorting is just a permutation (call it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e), because it does not depends on characters in string. Look at shuffling operation in different way: instead of going to the next substring and sort it, we will shift string to one character left. It remains to understand that shift of string the permutation too (call it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e). Now its clear, we need to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e·\u003ci\u003eP\u003c/i\u003e·\u003ci\u003eC\u003c/i\u003e·\u003ci\u003eP\u003c/i\u003e·\u003ci\u003eC\u003c/i\u003e... \u003d \u003ci\u003eS\u003c/i\u003e·(\u003ci\u003eP\u003c/i\u003e·\u003ci\u003eC\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e + 1\u003c/sup\u003e\u003c/span\u003e. And after that shift string for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e character to the left for making answer to the shuffling operation. Here we use the multiplication of permutations. Since they are associative, that we can use binary algorithm to calculate \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eP\u003c/i\u003e·\u003ci\u003eC\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e + 1\u003c/sup\u003e\u003c/span\u003e. Total time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enmlogn\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/484/problem/D\" title\u003d\"Codeforces Round 276 (Div. 1)\"\u003e484D - Kindergarten\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet us note, that in optimal answer any segment that making a group contains their minimum and maximum values on borders. Otherwise it will be better to split this segment to two other segments. Another note that is every segment in optimal solution is strictly monotonic (increasing or decreasing). Paying attention to the interesting points in sequence which making local maximums (i. e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e), local minimums (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e \u0026gt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e), and point adjacent to them. Solve the problem by dynamic programming: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the answer in the prefix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. To calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e we need to look at no more than three previous interesting points and to previous \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e. Total time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/484/problem/E\" title\u003d\"Codeforces Round 276 (Div. 1)\"\u003e484E - Sign on Fence\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet us note that we can use binary search to find answer to the one query. Suppose at some moment was fixed height \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e and need to know will fit the rectangle with width \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e and height \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e to the segment of fence from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e-th to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e-th panel. Let us build data structure that can answer to this question. This will be persistent segment tree with unusual function inside: maximum number of consecutive ones in segment (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxOnes\u003c/i\u003e\u003c/span\u003e). In leaves of segment tree will be only numbers 0 and 1. To calculate this function need to know some other values, specifically:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e\u003c/span\u003e — length of the segment in vertex of segment tree, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefOnes\u003c/i\u003e\u003c/span\u003e — length of prefix that consists only of ones, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufOnes\u003c/i\u003e\u003c/span\u003e — length of the suffix consist only of ones.\u003c/p\u003e\u003cp\u003eThese functions are computed as follows:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxOnes\u003c/i\u003e\u003c/span\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(\u003ci\u003emaxOnes\u003c/i\u003e(\u003ci\u003eLeft\u003c/i\u003e), \u003ci\u003emaxOnes\u003c/i\u003e(\u003ci\u003eRight\u003c/i\u003e), \u003ci\u003esufOnes\u003c/i\u003e(\u003ci\u003eLeft\u003c/i\u003e) + \u003ci\u003eprefOnes\u003c/i\u003e(\u003ci\u003eRight\u003c/i\u003e))\u003c/span\u003e;\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefOnes\u003c/i\u003e\u003c/span\u003e equals \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefOnes\u003c/i\u003e(\u003ci\u003eRight\u003c/i\u003e) + \u003ci\u003elen\u003c/i\u003e(\u003ci\u003eLeft\u003c/i\u003e)\u003c/span\u003e in case of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e(\u003ci\u003eLeft\u003c/i\u003e) \u003d \u003ci\u003eprefOnes\u003c/i\u003e(\u003ci\u003eLeft\u003c/i\u003e)\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefOnes\u003c/i\u003e(\u003ci\u003eLeft\u003c/i\u003e)\u003c/span\u003e otherwise;\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufOnes\u003c/i\u003e\u003c/span\u003e equals \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufOnes\u003c/i\u003e(\u003ci\u003eLeft\u003c/i\u003e) + \u003ci\u003elen\u003c/i\u003e(\u003ci\u003eRight\u003c/i\u003e)\u003c/span\u003e in case of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e(\u003ci\u003eRight\u003c/i\u003e) \u003d \u003ci\u003esufOnes\u003c/i\u003e(\u003ci\u003eRight\u003c/i\u003e)\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufOnes\u003c/i\u003e(\u003ci\u003eRight\u003c/i\u003e)\u003c/span\u003e otherwise;\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e \u003d \u003ci\u003elen\u003c/i\u003e(\u003ci\u003eleft\u003c/i\u003e) + \u003ci\u003elen\u003c/i\u003e(\u003ci\u003eRight\u003c/i\u003e)\u003c/span\u003e;\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eLeft\u003c/i\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eRight\u003c/i\u003e\u003c/span\u003e — it is left and right sons of vertex in segment tree.\u003c/p\u003e\u003cp\u003eAs mentioned above, tree must be persistent, and it must be built as follows. First, builded empty tree of zeros. Next in position of highest plank need to put 1. The same doing for planks in decreasing order. For example if fence described with sequence \u003cspan class\u003d\"tex-span\"\u003e[2, 5, 5, 1, 3]\u003c/span\u003e then bottom of segment tree will changed as follows:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e[0, 0, 0, 0, 0]\u003c/span\u003e -\u0026gt; \u003cspan class\u003d\"tex-span\"\u003e[0, 1, 0, 0, 0]\u003c/span\u003e -\u0026gt; \u003cspan class\u003d\"tex-span\"\u003e[0, 1, 1, 0, 0]\u003c/span\u003e -\u0026gt; \u003cspan class\u003d\"tex-span\"\u003e[0, 1, 1, 0, 1]\u003c/span\u003e -\u0026gt; \u003cspan class\u003d\"tex-span\"\u003e[1, 1, 1, 0, 1]\u003c/span\u003e -\u0026gt; \u003cspan class\u003d\"tex-span\"\u003e[1, 1, 1, 1, 1]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAnd we need to remember for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e their version of tree. Now to answer the question we need to make query in our segment tree (that corresponding to height \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e) on segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxOnes\u003c/i\u003e\u003c/span\u003e form this query less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e, then rectangle impossible to put (otherwise possible).\u003c/p\u003e\u003cp\u003eBuilding of tree will take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlogn\u003c/i\u003e)\u003c/span\u003e time and memory. Time complexity to the one query will take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e time.\u003c/p\u003e\u003c/div\u003e","tags":["276","editorial"]}}