{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1522167797,"rating":4,"authorHandle":"prac64","modificationTimeSeconds":1522167797,"id":58594,"title":"\u003cp\u003eExplanation needed for Boyer-Moore Majority Element, and one of its extensions.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHey CodeForces, recently I came accross a problem, finding an element in an array which occurs more than n/3 times, while using constant space and linear time. Now I admit, this is a well known interview problem and plenty of articles exist which cover this, however I have struggled to find one that offers proof of correctness or any explanation.\u003c/p\u003e\u003cp\u003ePlease help me understand the correctness.\u003c/p\u003e\u003cp\u003eArticle: \u003ca href\u003d\"https://www.geeksforgeeks.org/given-an-array-of-of-size-n-finds-all-the-elements-that-appear-more-than-nk-times/\"\u003ehttps://www.geeksforgeeks.org/given-an-array-of-of-size-n-finds-all-the-elements-that-appear-more-than-nk-times/\u003c/a\u003e\u003c/p\u003e\u003cp\u003eBasic Idea: Like we do in Boyer-Moore algorithm, however instead of keeping one element and counter, keep 2 , then update them similar to the original algorithm.\u003c/p\u003e\u003cp\u003eThank you CodeForces!\u003c/p\u003e\u003c/div\u003e","tags":[]}}