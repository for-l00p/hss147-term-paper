{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1504364934,"rating":-1,"authorHandle":"priyesh001","modificationTimeSeconds":1504460482,"id":54259,"title":"\u003cp\u003eTwo subsets with maximum equal sum\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eGiven an array S of N positive integers, divide the array into two subsets such that the sums of subsets is maximum and equal. \u003cstrong\u003eIt is not necessary to include all the elements in the two subsets. Same element should not appear in both the subsets.\u003c/strong\u003e The output of the program should be the maximum possible sum.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eConstraints:\n1 \u0026lt;\u003d N \u0026lt;\u003d 50\n1 \u0026lt;\u003d S[i] \u0026lt;\u003d 1000\nSum of elements of S will not be greater than 1000.\nExample:\nInput:\n5\n2 3 4 1 6\nOutput:\n8 {Explanation: The two subsets with maximum sum are [1,3,4] and [2,6]}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI found this question in one of the interview challenge. I used the traditional sum of subsets logic to find all the possible sum for n elements and then tried to reconstruct non-overlapping subsets for a sum from the 2D DP array. I couldn\u0027t get all tc to pass. Is there any better easier solution for this?\u003c/p\u003e\u003c/div\u003e","tags":["dynamic programming","sum of subsets"]}}