{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1500084275,"rating":0,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1500084275,"id":53306,"title":"\u003cp\u003eNotes on Codeforces Beta Round #61, A, B, D, E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/66/problem/A\" title\u003d\"Codeforces Beta Round 61 (Div. 2)\"\u003e66A - Петя и Java\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAs the input only contains positive integers, it is sufficient to just consider the right border of each type, and we can store them as strings. Similarly, the input should be stored as a string as well. Then, we compare the input with the right borders from small to large. For each border, if the length of the input is smaller, this type is just the answer, while if they have the same length, then we can compare them using the \u0026quot;string comparison\u0026quot;.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/66/problem/B\" title\u003d\"Codeforces Beta Round 61 (Div. 2)\"\u003e66B - Петя и деревня\u003c/a\u003e\u003c/p\u003e\u003cp\u003eA straightforward solution has complexity O(N^2). We check every element, and find the longest non-increasing sub-arrays that both start from this element but extend to the right and left direction. Then, we add their length together, and the answer is just the maximum one. In fact, the longest non-increasing sub-arrays mentioned above can be computed with complexity O(N) in advance, and thus an improved solution has linear complexity.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/66/problem/D\" title\u003d\"Codeforces Beta Round 61 (Div. 2)\"\u003e66D - Петя и его друзья\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFor any n that is larger than 2, the required sequence always exists. One feasible sequence is 3*2, 5*2, 3*5, 3*2*2, 3*2*2*2, 3*2*2...*2.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/66/problem/E\" title\u003d\"Codeforces Beta Round 61 (Div. 2)\"\u003e66E - Петя и почта\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is really a well designed problem. One can check \u003ca href\u003d\"//codeforces.com/blog/entry/1452\"\u003ehttp://codeforces.com/blog/entry/1452\u003c/a\u003e for more details. I think the most tricky part is that \u003c/p\u003e\u003cp\u003e(a1+a2+...an)-(b1+b2+...bn)\u003d0\u003c/p\u003e\u003cp\u003eThus, we have \u003c/p\u003e\u003cp\u003e0-(a1-b1)\u003d(a2+a3+...an)-(b2+b3+...bn)\u003c/p\u003e\u003cp\u003ewhich is just the metric calculated if we start from position a2.\u003c/p\u003e\u003c/div\u003e","tags":[]}}