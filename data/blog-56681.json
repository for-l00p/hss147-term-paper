{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1514447290,"rating":13,"authorHandle":"phoaiphuthinh","modificationTimeSeconds":1514480922,"id":56681,"title":"\u003cp\u003eMaximum Sum Subsequence Non-Adjacent\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI\u0027ve a big problem: Given N number \u003cem\u003ea[1],a[2],..,a[N]\u003c/em\u003e and M queries. \u003cstrong\u003e(N,M \u0026lt;\u003d 10^5)\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eEach query, change a[v] to x, and find the maximum sum subsequence such that no two elements are adjacent.\u003c/p\u003e\u003cp\u003eExample: a \u003d {1,1,1,1,1,1}\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eFirst query, change a[5] to 3, thus a \u003d {1,1,1,1,3,1} -\u0026gt; the answer is 5 (choose a[1],a[3],a[5])\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eSecond query, change a[2] to 4, thus a \u003d {1,4,1,1,3,1} -\u0026gt; the answer is 7 (choose a[2],a[5])\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eAnd so on..\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eI think use DP to solve this problem, but the complexity is \u003cstrong\u003eO(N*M)\u003c/strong\u003e can\u0027t run with N,M \u0026lt;\u003d 10^5.\u003c/p\u003e\u003cp\u003eCould you help me? Thanks all.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD:\u003c/strong\u003e I\u0027ve solved this problem, thanks for all. \u003c/p\u003e\u003c/div\u003e","tags":["dynamic programming","dp","maximum sum subsequence","complexity optimization"]}}