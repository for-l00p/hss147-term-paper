{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1521448115,"rating":0,"authorHandle":"strawberrry","modificationTimeSeconds":1521448115,"id":58448,"title":"\u003cp\u003eRound #237 solution\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cblockquote\u003e\u003cp\u003eall problems are solved at 3.19\u003c/p\u003e \u003c/blockquote\u003e\u003ch3\u003eA — Valera and X\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eTag:\u003c/strong\u003e \u003ccode\u003eimplementation\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e直接按题目意思模拟，判断对角线是否是同一个字母，其他区与是否是同一个字母，注意的trick是两个区域的字母不能相同！\u003c/p\u003e\u003ch3\u003eB — Marathon\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eTag:\u003c/strong\u003e \u003ccode\u003emath\u003c/code\u003e \u003ccode\u003ebinary search\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e模拟，每次叠加 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e 的距离，算一下位于这个圈圈的哪个位置，如果当前长度比周长长，显然就要取模一个周长，但因为是浮点数，所以可以去二分减去周长大几倍，还要注意\u003ccode\u003elong double\u003c/code\u003e不然爆精度，总之还是比较多坑的...\u003c/p\u003e\u003ch3\u003eC — Restore Graph\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eTag:\u003c/strong\u003e \u003ccode\u003econstructive algorithm\u003c/code\u003e \u003ccode\u003egreedy\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e容易想到的是先找距离为0的点就是起点，然后向着距离为1的点连边，再由距离为1的边向距离为2的边连边。但是注意每个点度数必须小于 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e ，这里我用栈存了一下每层的点，每次拿栈顶的点先贪心地连，如果这个点度数不够了则出栈......\u003c/p\u003e\u003ch3\u003eD — Minesweeper 1D\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eTag:\u003c/strong\u003e \u003ccode\u003edp\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e常见的计数dp，状态很容易想到 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e 表示前 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e 个字符组成的扫雷块，第 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e 个位置的字符状态为 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e 的方案数，最开始没想到\u003ccode\u003e1\u003c/code\u003e这个状态有两种，不能一并统计，总是得不到答案，想清楚就比较好设计转移了。显然如果这个位置是\u003ccode\u003e0\u003c/code\u003e，它只能由\u003ccode\u003e0\u003c/code\u003e或者地雷在左侧的\u003ccode\u003e1\u003c/code\u003e转移，如果这个位置是\u003ccode\u003e1\u003c/code\u003e，如果地雷在左侧，显然只能由地雷转移，如果地雷在右侧则可以由\u003ccode\u003e0\u003c/code\u003e或者地雷在左侧的\u003ccode\u003e1\u003c/code\u003e组成，如果这个位置是\u003ccode\u003e2\u003c/code\u003e，显然它也只能由地雷转移，如果这个位置是地雷，那么它可以由地雷在右侧的\u003ccode\u003e1\u003c/code\u003e或者\u003ccode\u003e2\u003c/code\u003e或者地雷转移，那么我们不妨设计状态j：\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003e0-该处是0\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e1-该处表示地雷在左侧的1\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e2-该处是2\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e3-该处表示地雷在右侧的1\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e4-该处是地雷\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e那么转移方程很容易得出来：\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, 0) \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1, 0) + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1, 1)\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, 1) \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1, 4)\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, 2) \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1, 4)\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, 3) \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1, 0) + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1, 1)\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, 4) \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1, 2) + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1, 3) + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1, 4)\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch3\u003eE — Maze 1D\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eTag:\u003c/strong\u003e \u003ccode\u003ebinary search\u003c/code\u003e \u003ccode\u003eimplementation\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e开始只想到只可能放一个石头，没有意识到单调性，后来才意识到，假设最后是向右走（如果向左取个反就类似了），石头显然要向左侧放，而且如果位置 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e 可以放，位置 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e 也一定可以放，因为它只可能让机器人更靠右侧！因此我们可以考虑二分石头可以放的最左侧位置 \u003cspan class\u003d\"tex-span\"\u003e - \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e ，那么答案就是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e + 1\u003c/span\u003e ！\u003c/p\u003e\u003c/div\u003e","tags":[]}}