{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1456253503,"rating":0,"authorHandle":"Fcdkbear","modificationTimeSeconds":1456253503,"id":43311,"title":"\u003cp\u003eРазбор VNTU Training 15\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eЗадача А\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eНам выгодно расставлять кодеров в шахматном порядке, причем начинать нужно из вехней левой клеточки (это важно для нечетного n). То есть на первой строчке — ставим кодеров начиная с первого столбика через один столбик, на второй — начиная со второго столбика через один столбик, на третьей — снова начиная с первой и так далее.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача B\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eДавайти научимся решать задачу вне зависимости от входных массивов. Допустим, нам нужно отсортировать массивы по возрастанию. Тогда просто попробуем сделать все обмены (i; j) для всех j\u0026gt;i. Это по факту аналогично многим квадратичным сортировкам, вот только мы не делаем сами сравнения. Но сравнения делать не нужно — нам гарантируется, что обмен произойдет только если элемент массива с индексом j меньше элемента массива с индексом i.\u003c/p\u003e\u003cp\u003eСлучай сортировки по убыванию решается аналогично.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача С\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eДавайте посмотрим на все возможные пары типов коров и проанализируем, что происходит.\u003c/p\u003e\u003cp\u003e0 0: в таком случае нам выгодно сначала подоить левую корову, потом правую.\u003c/p\u003e\u003cp\u003e0 1: коровы не влияют друг на друга, можно их доить в любом порядке.\u003c/p\u003e\u003cp\u003e1 0: в каком порядке мы бы не доили этих коров, одна из них заберет у другой единицу молока.\u003c/p\u003e\u003cp\u003e1 1: в таком случае нам выгодно сначала подоить правую корову, потом левую.\u003c/p\u003e\u003cp\u003eВидим, что пары 1 0 добавляют к ответу ровно 1. Для того, чтобы все остальные пары не добавяли к ответу ничего, сначала подоим всех 0-коров в порядке слева направо, потом всех 1-коров в порядке спраа налево. Тогда ответ будет равен количеству пар 1 . Этих пар всего может быть O(N^2), однако считать их количество очень несложно можно за O(N) — будем идти по массиву слева направо и поддерживать, сколько 1 мы встретили; когда мы встречаем 0 — прибавляем к ответу посчитанное количество единиц.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача D\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eПереведем оба времени в минуты и отнимем от одного времени другое.если получившееся количество минут вышло отрицательным — значит оно принадлежит к прошедшим суткам (и его несложно посчитать как 24*60 + v, v — наш отрицательный результат), иначе ответ лежит в наши сутках. Далее обратно переведем полученное количество минут в часы и минуты.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача E\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eОтсортируем оба наши массива. Будем стараться подбирать к каждому элементу массива a подходящий элемент массива b. Легко видеть, что для текущего элемента a[i] нам следует использовать наименьший ранее неиспользованный элемент b[j], такой, что b[j]\u0026gt;\u003da[i]. Если такого элемента нет — увеличим ответ на 1.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача F\u003c/strong\u003e Разобьем число на максимальное количество чисел таким образом, чтобы все они были положительными и без ведущи нулей.\u003c/p\u003e\u003cp\u003eНапример строка 300100200 разобьется на набор чисел [300, 100, 200].\u003c/p\u003e\u003cp\u003eДавайте смотреть на процесс склеивания задом наперед — мы будем пробовать расклеивать наше число. Посмотрим на последнее число (v1) и все что шло до него (v2). Если v2 \u0026gt; v1 — то склеить v2 и v1 можно, иначе точно нельзя. Если сделать это удалось — увеличим ответ на 1 и перейдем к рассмотрению прошлого числа, иначе — мы гарантированно дошли до конца нашего процесса. Над формальным доказательством предлагаю подумать вам самостоятельно.\u003c/p\u003e\u003cp\u003eВажно, то числа мы должны сравнивать за O(1). Это можно сделать при помощи длин наших чисел (а в случае их равенства — по первой цифре)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача G\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eДавайте переберем знаменатель b. Найдем ближайшую к x/y дробь со знаментелем b. Посчитаем число v \u003d (x*b)/y. Утверждается, что в качестве a следует рассмотреть числа v и v+1 (v/b — ближйшая к x/y дробь, которая не превосходит x/y, (v+1)/b — гарантировано превосходит)\u003c/p\u003e\u003cp\u003eПроверим єти две дроби на близость к x/y и при надобности обноим ответ. Важный момент сравнивать лучше не используя нецелые числа, а исользуя только long long. Основная идея — будем поддерживать наши дроби как два числа — числитель и знаменатель. Из 7-8 класса мы умеем дроби отнимать, сравнивать с 0 и так далее :)\u003c/p\u003e\u003cp\u003eнапример:\u003c/p\u003e\u003cp\u003ex/y-a/b \u003d (x*b-y*a)/(y*b).\u003c/p\u003e\u003cp\u003eи т.д. Все детали — в коде\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача H\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eПосчитаем, какое минимальное количество людей составляют хотя бы y процентов от n, сравним эту величину с х и выведем ответ.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача I\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eЭта задачка на реализацию, нужно просто очень внимательно реализовать то, что написано в условии.\u003c/p\u003e\u003cp\u003eНам по факту нужно уметь удалять из строки пробелі и узнавать, или она особая (первый непробельный символ — #)\u003c/p\u003e\u003cp\u003eДетали в коде\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача J\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eЭто задача на знание физики.\u003c/p\u003e\u003cp\u003eДавайте для каждого троллейбуса посчитаем, за какое время он разгонется до своей максимальной скорости. Далее посчитаем, какое расстояние он проедет за это время. Если это расстояние меньше чем d — считаем, что дальше он едет на максимальной скорости. Если же нет — ищем за какое время он проехал расстояние ровно d. К полученному времени добавляем время старта.\u003c/p\u003e\u003cp\u003eЕдинственная деталь — мы не учили, что троллейбусы не могут переганять друг друга. ПОэтому если вышло, что очередной троллейбус приедет раньше, чем прошлый — скажем, что они приедут в одно и то же время.\u003c/p\u003e\u003c/div\u003e","tags":["разбор"]}}