{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1489818113,"rating":19,"authorHandle":"haleyk100198","modificationTimeSeconds":1489818113,"id":51054,"title":"\u003cp\u003eHaskell intersection\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eRecently I have been practicing Haskell on CSAcademy, and I was implementing this problem : \u003ca href\u003d\"https://csacademy.com/contest/interview-archive/#task/array-intersection/\"\u003ehttps://csacademy.com/contest/interview-archive/#task/array-intersection/\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIntuitively I tried to use the predefined intersection function to solve the task, yet it does not fit the problem\u0027s requirement as it only considers the frequency of the elements showing up in the first list. After googling for a while I found the replacement using xs \\ (xs \\ ys), yet O(N^2) is not good enough to solve the problem. While the problem could be solved in O(N) by hashing as suggested in the statement, I wonder if there is a predefined way to cope with this task in a Haskell function way? (Dear Haskell god, please spare me from implementing some of the functions)\u003c/p\u003e\u003c/div\u003e","tags":["haskell","csacademy","intersection"]}}