{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1503941732,"rating":17,"authorHandle":"-arma-","modificationTimeSeconds":1503941732,"id":54133,"title":"\u003cp\u003eSQRT decomposition for beginners\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi CodeForces, in this topic i want to tell what sqrt decomposition is, give you an example, and give some problems which can be solved by sqrt.\u003c/p\u003e\u003cp\u003eThe whole thing that sqrt is, is to reduce complexity by divide queries and get better complexity. e.g. I have an algorithm with O(N^2) complexity and another algorithm with O(k.N + N^2 / k) complexity where k is size of blocks i made, then i can have O(N.sqrt(N)) algorithm with set k to sqrt(N). \u003c/p\u003e\u003cp\u003eWe\u0027ll solve a problem to clarify. The problem is this: \u003c/p\u003e\u003cp\u003eyou\u0027re given an array A with n elements and q queries with 2 types: \u0026quot;? l r\u0026quot; you have to print sum of values between l(inclusive) and r(exclusive) ( [l, r) ) \u0026quot;+ l r x\u0026quot; you have to increase all elements between l and r by x. and n \u0026lt;\u003d 1e5, q \u0026lt;\u003d 1e5. (by the way you can solve this problem using segment tree or fenwick tree with more ease.)\u003c/p\u003e\u003cp\u003elet\u0027s consider A as n/k consecutive bucket with each bucket (except of the last) has k elements. then we can do so: if we want to change/process a full bucket, then we\u0027ll change a variable referencing to this bucket and if not, we\u0027ll change elements one by one. so in each query we\u0027ll use at most 2 incomplete buckets and at most n/k complete buckets, so the complexity will be from O(q.n/k + q.k). since product of q.n/k and q.k is constant, the minimum sum is reached when q.n/k \u003d q.k. thus k \u003d sqrt(n) and the complexity is from O(n.sqrt(n)).\u003c/p\u003e\u003cp\u003ethere is a sample code that do so \u003ca href\u003d\"https://paste.ubuntu.com/25418482/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eread \u003ca href\u003d\"/contest/342/problem/E\" title\u003d\"Codeforces Round 199 (Div. 2)\"\u003e342E - Ксюша и дерево\u003c/a\u003e, first think about how you can solve it and then go ahead.\u003c/p\u003e\u003cp\u003ethink about how we can solve if we could use O(q^2) for example.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAnswer\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ewe can check distance with each red node via lca( d(u, v) \u003d h(u) + h(v) — 2 * h(lca(u, v))\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003enow, let\u0027s try to improve the algorithm by partition queries in k-sized groups and see how this can help us.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAnswer\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eOK, we can reunion after k queries and make a variable for answer of queries upon last k multiplier using bfs with first nodes on red nodes.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eso now we have an algorithm from O(n.q/k + qk), thus how we proved before, k \u003d sqrt(n) and the algorithm is from O(q.sqrt(n)).\u003c/p\u003e\u003cp\u003ehere are some other problems that can be solved by sqrt decomposition. \u003ca href\u003d\"/contest/44/problem/C\" title\u003d\"Школьная командная олимпиада 2 (ЗКШ 2010/11)\"\u003e44C - Каникулы\u003c/a\u003e, \u003ca href\u003d\"/contest/13/problem/E\" title\u003d\"Codeforces Beta Round 13\"\u003e13E - Лунки\u003c/a\u003e, \u003ca href\u003d\"/contest/86/problem/D\" title\u003d\"Яндекс.Алгоритм 2011 Раунд 2\"\u003e86D - Мощный массив\u003c/a\u003e, \u003ca href\u003d\"/contest/398/problem/D\" title\u003d\"Codeforces Round 233 (Div. 1)\"\u003e398D - Мгновенные сообщения\u003c/a\u003e and \u003ca href\u003d\"/contest/455/problem/D\" title\u003d\"Codeforces Round 260 (Div. 1)\"\u003e455D - Серега и веселье\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn the end, how you saw in problems there\u0027s not a single type problems which sqrt can solve. another thing that you should notice, is what your bucket sizes should not be sqrt always, think of you have an O(k + n.log/k) algorithm like we proved before, the minimum is when k^2 \u003d n.log or k \u003d sqrt(n.log).\u003c/p\u003e\u003c/div\u003e","tags":["sqrt","sqrt-decomposition","#for_beginners"]}}