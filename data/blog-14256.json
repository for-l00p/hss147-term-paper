{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1413149110,"rating":76,"authorHandle":"drazil","modificationTimeSeconds":1413399956,"id":14256,"title":"\u003cp\u003eCodeforces Round #272 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eFirst I want to thank all the problem solvers!\u003cbr /\u003e Hope you had or are going to have a good time with Dreamoon!\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eIf you think there\u0027s something that can be improved in this editorial please let me know!\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eDefinitions used in this editorial:\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e⌈⌉\u003c/span\u003e stands for ceiling function.\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e⌊⌋\u003c/span\u003e stands for floor function.\u003cbr /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/22/48/22488d5cb457dc2f9b4aad43391b289e7d082922.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e stands for real division.\u003cbr /\u003e For non-negative integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and positive integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ediv\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e stands for integral division, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/36/cd/36cd558c4eac5276726917ae8449ac966a33ff95.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003cbr /\u003e For non-negative integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and positive integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emod\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e stands for module operation, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003ediv\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e) * \u003ci\u003eb\u003c/i\u003e + \u003ci\u003emod\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e.\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elength\u003c/i\u003e(\u003ci\u003estring\u003c/i\u003e)\u003c/span\u003e is the length of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003estring\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e For non-negative integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e..\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e stands for the set of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e], \u003ci\u003eA\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e + 1], \u003ci\u003eA\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e + 2]... \u003ci\u003eA\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e - 1]\u003c/span\u003e when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e is an array and the substring of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e consists of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eb\u003c/i\u003e - 1)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e character(inclusive) of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e is a string. For such substring we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elength\u003c/i\u003e(\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e..\u003ci\u003eb\u003c/i\u003e]) \u003d \u003ci\u003eb\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e stands for the combination function, the ways of selecting a elements from a group of b elements.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/476/problem/A\" title\u003d\"Codeforces Round 272 (Div. 2)\"\u003e476A - Dreamoon and Stairs\u003c/a\u003e\u003cbr /\u003e We can show that the maximum number of moves possible is n and minimal moves needed is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e5/d4/e5d4018d45a31f94e9f6085ba2379d80ca762b3b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, so the problem equals to determine the minimal integer that is a multiple of m in the range \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e8/21/e821ed4c594cbdffc78fdf2ede8552e7ef75a01d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003cbr /\u003e One way to find the minimal number which is a multiple of m and greater than or equal to a number x is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/40/db/40db96b367d554c0ba734e790ac7e185d2439d4d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we can compare this number to the upper bound n to determine if there is a valid solution.\u003cbr /\u003e Although best practice is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e enumeration of each possible number of moves would also work.\u003cbr /\u003e time complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e\u003cbr /\u003e sample code: \u003ca href\u003d\"/contest/476/submission/8212169\" title\u003d\"Submission 8212169 by drazil\"\u003e8212169\u003c/a\u003e\u003cbr /\u003e explanation of sample code:\u003cbr /\u003e The \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/db/5a/db5af236a6e67af040d161c19b5156a57aac5770.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e can be calculated in the following c++ code if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is non-negative and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is positive: \u003ccode\u003e(a+b-1)/b\u003c/code\u003e\u003cbr /\u003eBecause \u003ccode\u003e/\u003c/code\u003e in c++ is integral division so \u003ccode\u003e(a+b-1)/b\u003c/code\u003e would result in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a6/a9/a6a9c421df8979e72332e24567793e3318195e0f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003cbr /\u003e Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003ediv\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003ci\u003eb\u003c/i\u003e + \u003ci\u003emod\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e) \u003d \u003ci\u003edb\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e\u003c/span\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0d/39/0d39ecdec3f88a1a7e0188b1e8c4d90aef90b7f6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003cbr /\u003e Which means if \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2a/ca/2aca1c11a8614fc73ff253e437d2c4a96062ab5f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, otherwise \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ediv\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e - 1, \u003ci\u003eb\u003c/i\u003e) \u003d \u003ci\u003ed\u003c/i\u003e + 1\u003c/span\u003e. Can be translated to if \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/04/35/0435508b7c98bcdb4d03c3ee4aa6d6bde943b65b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, otherwise \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ediv\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e - 1, \u003ci\u003eb\u003c/i\u003e) \u003d \u003ci\u003ediv\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e) + 1\u003c/span\u003e. Which matches the value of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/db/5a/db5af236a6e67af040d161c19b5156a57aac5770.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/476/problem/B\" title\u003d\"Codeforces Round 272 (Div. 2)\"\u003e476B - Dreamoon and WiFi\u003c/a\u003e\u003cbr /\u003e The order of moves won\u0027t change the final position, so we can move all \u0027?\u0027s to the end of the string.\u003cbr /\u003e We have the following information:\u003cbr /\u003e  1. the correct final position\u003cbr /\u003e  2. the position that Dreamoon will be before all \u0027?\u0027s\u003cbr /\u003e  3. the number of \u0027?\u0027s\u003cbr /\u003e We can infer that the distance and direction dreamoon still needs to move in the \u0027?\u0027 part from 1. and 2., and furthur translate that to how many +1s and -1s dreamoon will need to move.\u003cbr /\u003e What\u0027s left is a combinatorial problem, the probability would be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/06/58/065854ae968325b749d417f2be89ecb2aacc40ee.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003cbr /\u003e So we can compute that formula within \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e time assuming n is the length of commands, but since N is small so we can brute force every possible choice of \u0027?\u0027 with some recursive or dfs like search in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e time complexity.\u003cbr /\u003e Note that the problem asks for a precision of \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e - 9\u003c/sup\u003e\u003c/span\u003e, so one should output to \u003cspan class\u003d\"tex-span\"\u003e11\u003c/span\u003e decimal places or more.\u003cbr /\u003e time complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e, assuming \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is the length of commands.\u003cbr /\u003e sample code: \u003ca href\u003d\"/contest/476/submission/8215177\" title\u003d\"Submission 8215177 by drazil\"\u003e8215177\u003c/a\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/476/problem/C\" title\u003d\"Codeforces Round 272 (Div. 2)\"\u003e476C - Dreamoon and Sums\u003c/a\u003e / \u003ca href\u003d\"/contest/477/problem/A\" title\u003d\"Codeforces Round 272 (Div. 1)\"\u003e477A - Dreamoon and Sums\u003c/a\u003e\u003cbr /\u003e If we fix the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, and let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e \u003d \u003ci\u003ediv\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e \u003d \u003ci\u003emod\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e, we have :\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e \u003d \u003ci\u003emk\u003c/i\u003e\u003c/span\u003e\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003edb\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e\u003c/span\u003e\u003cbr /\u003e So we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003emkb\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e \u003d (\u003ci\u003ekb\u003c/i\u003e + 1) * \u003ci\u003em\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e And we know \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e would be in range \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003eb\u003c/i\u003e - 1]\u003c/span\u003e because it\u0027s a remainder and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is positive, so the sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e of that fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e would be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/25/a3/25a3c9adf1518272c31ecd79952bb85d9696dd19.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003cbr /\u003e Next we should notice that if an integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enice\u003c/i\u003e\u003c/span\u003e it can only be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enice\u003c/i\u003e\u003c/span\u003e for a single particular \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e because a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e uniquely defines \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ediv\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emod\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e.\u003cbr /\u003e Thus the final answer would be sum up for all individual \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/68/6b/686bae3e2c35b513e18da39dbd422264004f1d3f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e which can be calculated in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e)\u003c/span\u003e and will pass the time limit of 1.5 seconds.\u003cbr /\u003e Also the formula above can be expanded to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4c/6c/4c6c97c49b52c630a9278321419872a6e402ee01.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Dreamoon says he\u0027s too lazy to do this part, so if you use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e solution you just computed the answer faster than Dreamoon!!!\u003cbr /\u003e Note that no matter which approach one should be very careful of overflowing of the integer data type of the used language. For example one should do a module after every multiplication if using 64-bit integer type. And pay attention to precedence of operations: take c++ for example a+b%c would be executed as a+(b%c) instead of (a+b)%c, another c++ example a*(b*c)%m would be executed as (a*(b*c))%m instead of a*((b*c)%m).\u003cbr /\u003e Thanks \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/saurabhsuniljain\" title\u003d\"Expert saurabhsuniljain\"\u003esaurabhsuniljain\u003c/a\u003e for pointing out the preceding problem and examples in the comment!\u003cbr /\u003e time complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e\u003cbr /\u003e sample code: \u003ca href\u003d\"/contest/476/submission/8215188\" title\u003d\"Submission 8215188 by drazil\"\u003e8215188\u003c/a\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/476/problem/D\" title\u003d\"Codeforces Round 272 (Div. 2)\"\u003e476D - Dreamoon and Sets\u003c/a\u003e / \u003ca href\u003d\"/contest/477/problem/B\" title\u003d\"Codeforces Round 272 (Div. 1)\"\u003e477B - Dreamoon and Sets\u003c/a\u003e\u003cbr /\u003e The first observation is that if we divide each number in a set by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, than the set would be rank \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. So we could find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e sets of rank \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e then multiple every number by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e For how to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e sets of rank 1, we can use \u003cspan class\u003d\"tex-span\"\u003e{6\u003ci\u003ea\u003c/i\u003e + 1, 6\u003ci\u003ea\u003c/i\u003e + 2, 6\u003ci\u003ea\u003c/i\u003e + 3, 6\u003ci\u003ea\u003c/i\u003e + 5}\u003c/span\u003e as a valid rank \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e set and take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d 0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e to form \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e sets and thus \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e \u003d (6\u003ci\u003en\u003c/i\u003e - 1) * \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e The proof that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e is minimal can be shown by the fact that we take three consecutive odd numbers in each set. If we take less odd numbers there will be more than \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e even number in a set which their gcd is obviously a multiple of \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e. And if we take more odd numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e would be larger.\u003cbr /\u003e The output method is straight forward. Overall time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003cbr /\u003e time complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e\u003cbr /\u003e sample code: \u003ca href\u003d\"/contest/476/submission/8215198\" title\u003d\"Submission 8215198 by drazil\"\u003e8215198\u003c/a\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/476/problem/E\" title\u003d\"Codeforces Round 272 (Div. 2)\"\u003e476E - Dreamoon and Strings\u003c/a\u003e / \u003ca href\u003d\"/contest/477/problem/C\" title\u003d\"Codeforces Round 272 (Div. 1)\"\u003e477C - Dreamoon and Strings\u003c/a\u003e\u003cbr /\u003e First let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e to be the minimal length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e needed so that substring \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e..\u003ci\u003ei\u003c/i\u003e + \u003ci\u003eL\u003c/i\u003e]\u003c/span\u003e can become pattern \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e by removing some characters. We can calculate this greedily by keep selecting next occurrence of characters in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elength\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e))\u003c/span\u003e time for a fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, so for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e requires \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elength\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003cbr /\u003e Next we can do a dp \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e is the answer array for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[0..\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e can contribute to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1]\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e removal and to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + \u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]]\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - \u003ci\u003elength\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e)\u003c/span\u003e removal(s). In other words, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e can transition into tree relations \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e] \u003d \u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e //not delete \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e + 1] \u003d \u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e //delete \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + \u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]][\u003ci\u003ej\u003c/i\u003e + \u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - \u003ci\u003elength\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e)] \u003d \u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] + 1\u003c/span\u003e //form a substring \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e by deleting \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - \u003ci\u003elength\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e)\u003c/span\u003e characters. Calculate forwardly from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[0]\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003elength\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e) - 1]\u003c/span\u003e gives the final answer array as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003elength\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)]\u003c/span\u003e. Calculating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e requires \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elength\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e))\u003c/span\u003e time for a fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, so for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e takes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elength\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e time.\u003cbr /\u003e time complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d \u003ci\u003elength\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003c/span\u003e\u003cbr /\u003e sample code: \u003ca href\u003d\"/contest/476/submission/8215203\" title\u003d\"Submission 8215203 by drazil\"\u003e8215203\u003c/a\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eAnother solution:\u003cbr /\u003e Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e \u003d \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ediv\u003c/i\u003e(\u003ci\u003elength\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e), \u003ci\u003elength\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e))\u003c/span\u003e. We can run an edit distance like algorithm as following (omitting the details of initialization and boundary conditions):\u003cbr /\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor(i\u003d0;i\u0026lt;n;i++)\n    for(j\u003d0;j\u0026lt;k*p;j++)\n        if(s[i]\u003d\u003dp[j%length(p)])\n            D[i][j] \u003d D[i-1][j-1]\n         D[i][j] \u003d min(D[i][j], D[i-1][j] + (j%length(p)!\u003dlength(p)-1))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat means remove cost is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e when it is in the middle of a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e elsewhere because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e need to be consecutive(thus no need to be actually remove outside of a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e). Then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][\u003ci\u003et\u003c/i\u003e * \u003ci\u003elength\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e)]\u003c/span\u003e is the minimal number of removals to have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e non-overlapping substring of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e. So we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eanswer\u003c/i\u003e[\u003ci\u003eD\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][\u003ci\u003et\u003c/i\u003e * \u003ci\u003elength\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e)..(\u003ci\u003et\u003c/i\u003e + 1) * \u003ci\u003elength\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e)] \u003d \u003ci\u003et\u003c/i\u003e\u003c/span\u003e. And after the maximal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e is reached, decrease answer by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e for every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elength\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e)\u003c/span\u003e.\u003cbr /\u003e time complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e\u003cbr /\u003e sample code: \u003ca href\u003d\"/contest/476/submission/8215394\" title\u003d\"Submission 8215394 by drazil\"\u003e8215394\u003c/a\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/477/problem/D\" title\u003d\"Codeforces Round 272 (Div. 1)\"\u003e477D - Dreamoon and Binary\u003c/a\u003e\u003cbr /\u003e Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXb\u003c/i\u003e\u003c/span\u003e be the binary string of number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e. An ideal sequence can be expressed as a partition of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXb\u003c/i\u003e\u003c/span\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d \u003ci\u003eXb\u003c/i\u003e[1..\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e], \u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u003d \u003ci\u003eXb\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e..\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e], ... \u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eXb\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eK\u003c/i\u003e - 1\u003c/sub\u003e..\u003ci\u003elength\u003c/i\u003e(\u003ci\u003eXb\u003c/i\u003e)]\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e. The length of operations of such sequence is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eK\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e We can calculate the number of different ideal sequences by dp. State \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e stands for the answer of state that we have print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXb\u003c/i\u003e[1..\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e and last partition is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e..\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e. A possible way of transition is that a state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e can go to state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e + 1]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is the minimal possible position such that value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXb\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e..\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e is equal to or greater than the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e..\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXb\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e since we can\u0027t print any leading \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e.\u003cbr /\u003e Note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e + 1]\u003c/span\u003e can also derived from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e but it will covered by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] → \u003ci\u003eD\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e] → \u003ci\u003eD\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e + 1]\u003c/span\u003e, so we don\u0027t need to consider this case to avoid redundant counts.\u003cbr /\u003e If we can determine \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e pair in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e then we can compute this dp in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elength\u003c/i\u003e(\u003ci\u003eXb\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e in the following manner:\u003cbr /\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor(j\u003d0;j\u0026lt;n;j++)\n    for(i\u003d0;i\u0026lt;j;i++)\n        compute the transitions of D[i][j]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo let\u0027s look into how to calculate the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e for a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e pair. If the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXb\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e..2\u003ci\u003ej\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e is equal to or greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e..\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ej\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e because if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is less than \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ej\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e would make length of the new partition less than the previous partition thus its value would be lesser. And if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e can\u0027t be \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ej\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, the value of \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ej\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e is always a valid choice because it would make the length of the new partition greater than the previous one. So for each length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e if we know the order of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e..\u003ci\u003ei\u003c/i\u003e + \u003ci\u003eL\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + \u003ci\u003eL\u003c/i\u003e..\u003ci\u003ei\u003c/i\u003e + 2\u003ci\u003eL\u003c/i\u003e]\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e time we can calculate k in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e time(can be easily shown by assuming \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e \u003d \u003ci\u003ej\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e).\u003cbr /\u003e One way of doing such is using prefix doubling algorithm for suffix array construction to build a RMQ structure for query in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e time. The prefix doubling algorithm requires \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlgn\u003c/i\u003e)\u003c/span\u003e precompute time. Note there is still a various of ways to do this part of task in the same or better time complexties.\u003cbr /\u003e And for the shortest length part we can compute the minimal parts needed so far for each state along with the preivous dp. Then compare all states ends with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u003d \u003ci\u003elength\u003c/i\u003e(\u003ci\u003eXb\u003c/i\u003e)\u003c/span\u003e.\u003cbr /\u003e Overall we can solve this problem in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elength\u003c/i\u003e(\u003ci\u003eXb\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e with caution in details like boundaries and module operations.\u003cbr /\u003e time complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d \u003ci\u003elength\u003c/i\u003e(\u003ci\u003eXb\u003c/i\u003e)\u003c/span\u003e\u003cbr /\u003e Note the sample code use a nlgnlgn version of prefix doubling algorithm\u003cbr /\u003e sample code: \u003ca href\u003d\"/contest/477/submission/8215216\" title\u003d\"Submission 8215216 by drazil\"\u003e8215216\u003c/a\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/477/problem/E\" title\u003d\"Codeforces Round 272 (Div. 1)\"\u003e477E - Dreamoon and Notepad\u003c/a\u003e\u003cbr /\u003e Although swapping two parts of a query would result in different answer, if we reverse the lines length alltogether then the answer would stay the same. So we only analyze queries where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e2 ≥ \u003ci\u003er\u003c/i\u003e1\u003c/span\u003e.\u003cbr /\u003e The answers would comes in several types, we’ll discuss them one by one:\u003cbr /\u003e 1. HOME key being pressed once: the answer will be \u003cspan class\u003d\"tex-span\"\u003e1(\u003ci\u003eHOME\u003c/i\u003e) + \u003ci\u003er\u003c/i\u003e2 - \u003ci\u003er\u003c/i\u003e1(\u003ci\u003edown\u003c/i\u003e \u003ci\u003ekeys\u003c/i\u003e) + \u003ci\u003ec\u003c/i\u003e2(\u003ci\u003eright\u003c/i\u003e \u003ci\u003ekeys\u003c/i\u003e)\u003c/span\u003e. Note that this is the best answer if the HOME key is ever pressed once, so we won’t consider HOME key anymore. This step is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e for a single query, thus \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e in total.\u003cbr /\u003e 2. direct presses \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e2 - \u003ci\u003er\u003c/i\u003e1\u003c/span\u003e down keys and no or one END key in those rows: because the cursor position will be reset to the row length if we go down to a row with length less than current cursor position, the possible positions that can be at row \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e if we start at end of each previous rows can be track with a stack. The position directly pressing only down keys from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e2\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ec\u003c/i\u003e1, \u003ci\u003ethe\u003c/i\u003e \u003ci\u003elength\u003c/i\u003e \u003ci\u003eof\u003c/i\u003e \u003ci\u003efirst\u003c/i\u003e \u003ci\u003erow\u003c/i\u003e \u003ci\u003eafter\u003c/i\u003e \u003ci\u003er\u003c/i\u003e1 \u003ci\u003ein\u003c/i\u003e \u003ci\u003estack\u003c/i\u003e)\u003c/span\u003e. We can use a binary search to get the first row after or equal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e1\u003c/span\u003e in stack. From that row till \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e2\u003c/span\u003e in the stack are the positions possible when pressing ONE END key (pressing more won’t get more possible positions), we can use a binary search to find the position closest to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e2\u003c/span\u003e which is the best. We can sort all queries and use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eqlgn\u003c/i\u003e)\u003c/span\u003e time for queries and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e time for maintaining stack, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eqlgn\u003c/i\u003e + \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e in total.\u003cbr /\u003e 3. go back some rows and press one or no END key at the row: we only interested in END OF rows in stack constructed in 2.. We can use a binary search in stack to identify the range of rows interested. For those lengths of row less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e2\u003c/span\u003e(also can use a binary search to locate) we only need to consider the first one encountered(closest to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e1\u003c/span\u003e), note still need to consider if it needs an END key for this case. For those lengths of row greater than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e2\u003c/span\u003e, the answer would be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e1 + \u003ci\u003er\u003c/i\u003e2 - 2 * (\u003ci\u003erow\u003c/i\u003e \u003ci\u003ereached\u003c/i\u003e) + (\u003ci\u003elength\u003c/i\u003e \u003ci\u003eof\u003c/i\u003e \u003ci\u003ethe\u003c/i\u003e \u003ci\u003erow\u003c/i\u003e) - \u003ci\u003ec\u003c/i\u003e2 + (1 \u003ci\u003eif\u003c/i\u003e \u003ci\u003elength\u003c/i\u003e \u003ci\u003eof\u003c/i\u003e \u003ci\u003ethe\u003c/i\u003e \u003ci\u003erow\u003c/i\u003e \u003ci\u003egreater\u003c/i\u003e \u003ci\u003ethan\u003c/i\u003e \u003ci\u003ec\u003c/i\u003e1)\u003c/span\u003e. The terms related to row in the previous formula is \u003cspan class\u003d\"tex-span\"\u003e2 * (\u003ci\u003erow\u003c/i\u003e \u003ci\u003ereached\u003c/i\u003e) + (\u003ci\u003elength\u003c/i\u003e \u003ci\u003eof\u003c/i\u003e \u003ci\u003ethe\u003c/i\u003e \u003ci\u003erow\u003c/i\u003e) + (1 \u003ci\u003eif\u003c/i\u003e \u003ci\u003elength\u003c/i\u003e \u003ci\u003eof\u003c/i\u003e \u003ci\u003ethe\u003c/i\u003e \u003ci\u003erow\u003c/i\u003e \u003ci\u003egreater\u003c/i\u003e \u003ci\u003ethan\u003c/i\u003e \u003ci\u003ec\u003c/i\u003e1)\u003c/span\u003e. We can identify the range with and without +1(last term) and query in a segment tree of the minimal value of \u003cspan class\u003d\"tex-span\"\u003e2 * (\u003ci\u003erow\u003c/i\u003e \u003ci\u003ereached\u003c/i\u003e) + (\u003ci\u003elength\u003c/i\u003e \u003ci\u003eof\u003c/i\u003e \u003ci\u003ethe\u003c/i\u003e \u003ci\u003erow\u003c/i\u003e)\u003c/span\u003e for each range. Thus the time need here is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlgn\u003c/i\u003e)\u003c/span\u003e for maintaining segment tree and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eqlgn\u003c/i\u003e)\u003c/span\u003e for query while sharing with the stack of 2., so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlgn\u003c/i\u003e + \u003ci\u003eqlgn\u003c/i\u003e)\u003c/span\u003e in total.\u003cbr /\u003e 4. go beyond r2 some rows and press no or one END at the row: this needs a reversed stack and very similar approach of 3.. The time complexity is the same as 2. and 3..\u003cbr /\u003e So the total time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e((\u003ci\u003en\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e)\u003ci\u003elgn\u003c/i\u003e)\u003c/span\u003e, note this problem is very hard to get the code right.\u003cbr /\u003e time complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e((\u003ci\u003en\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e)\u003ci\u003elgn\u003c/i\u003e)\u003c/span\u003e\u003cbr /\u003e sample code: \u003ca href\u003d\"/contest/477/submission/8212528\" title\u003d\"Submission 8212528 by dreamoon\"\u003e8212528\u003c/a\u003e\u003cbr /\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}