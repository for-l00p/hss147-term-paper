{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1437669465,"rating":109,"authorHandle":"zxqfl","modificationTimeSeconds":1437669465,"id":19400,"title":"\u003cp\u003eSRM 663 Brief Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch4\u003eABBADiv1 (d1 easy)\u003c/h4\u003e\u003cp\u003eThe main idea here is that you should work backwards from the target string to the initial string. Almost any solution based on this idea can work. The simplest solution, conceptually, is to do a recursive backtracking search. It will run in polynomial time without any memoization at all. Why?\u003c/p\u003e\u003cp\u003eIf it runs in exponential time, we need a branch at each step (a choice of whether to try the last move as A or B). But suppose we had the option of picking A, and we picked B. Now we can never pick B again, since the first character in the string will always be A. So that branch will be resolved in polynomial time. The total complexity is something like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eYou can solve it in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e with KMP and prefix sums.\u003c/p\u003e\u003ch4\u003eChangingChange (d1 medium)\u003c/h4\u003e\u003cp\u003eIn this solution we will assume \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003evalueRemoved\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 1\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s use generating functions. Suppose ways \u003d \u003cspan class\u003d\"tex-span\"\u003e{1, 3, 6, 2}\u003c/span\u003e. Then we will view it as the polynomial \u003cspan class\u003d\"tex-span\"\u003e1 + 3\u003ci\u003ex\u003c/i\u003e + 6\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 2\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e\u003c/span\u003e. You can show that adding a coin is equivalent to multiplying by \u003cspan class\u003d\"tex-span\"\u003e(1 + \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e. So removing a coin must be equivalent to multiplying by \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/84/94/84941ae253365711d5293cc3039d674b549011d2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003ca href\u003d\"http://www.wolframalpha.com/input/?i\u003dtaylor+series+of+1%2F%281%2Bx%29\"\u003eThat\u0027s equal to\u003c/a\u003e \u003cspan class\u003d\"tex-span\"\u003e1 - \u003ci\u003ex\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e - \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e...\u003c/span\u003e (if you don\u0027t like calculus, work out the first few terms and you\u0027ll see it\u0027s 1, -1, 1, -1, 1...). So if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enumRemoved\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, we want to find the coefficients of \u003cspan class\u003d\"tex-span\"\u003e(1 - \u003ci\u003ex\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e - \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e + ... ± \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/sup\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e in linear time. You can show by induction that the signs always alternate for any value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, so all we need is the magnitude of the coefficients of \u003cspan class\u003d\"tex-span\"\u003e(1 + \u003ci\u003ex\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e + ... + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/sup\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eHow can we find those coefficients? Multiplying by that polynomial is equivalent to taking the prefix sum of the coefficients. For example, \u003cspan class\u003d\"tex-span\"\u003e(1 + 3\u003ci\u003ex\u003c/i\u003e + 6\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 2\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)(1 + \u003ci\u003ex\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e) \u003d 1 + 4\u003ci\u003ex\u003c/i\u003e + 10\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 12\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e + ...\u003c/span\u003e. There\u0027s a combinatorics problem where the values for a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e are the prefix sums of the values for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e: the number of right-down paths on an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e + 1\u003c/span\u003e grid (where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e is the coefficient we want). And the formula for that is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b7/9e/b79e5bf676c0ad8e4d49f02d8a9bae8bce554526.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eSo, here is the formula that solves the problem: \u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/60/b1/60b1efa4787bb2616dcd07fbd43a992faf2ab660.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eTo solve it when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003evalueRemoved\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] ≠ 1\u003c/span\u003e, just replace \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eways\u003c/i\u003e[\u003ci\u003eD\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e]\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eways\u003c/i\u003e[\u003ci\u003eD\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e·\u003ci\u003evalueRemoved\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]]\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003eWarAndPeas (d1 hard)\u003c/h4\u003e\u003cp\u003eInstead of cards and pairs, call them vertices and edges in a complete graph. Let\u0027s call the lowest-numbered vertex (the one whose owner never changes) the \u003cem\u003esource vertex\u003c/em\u003e. Other vertices that are the same colour as the source are \u003cem\u003egood\u003c/em\u003e. Otherwise they\u0027re \u003cem\u003ebad\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eThe critical observation is this: suppose we know there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e good vertices. Then all distributions of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e good vertices are equally likely. This is true regardless of the number of steps. We can prove it by induction on the number of steps (clearly it\u0027s true after 0 steps, since each vertex is assigned to the two owners with equal probability). Now we make a new move and select edge E. There are a few cases; note that while the relative chances of these cases depend on the value of X, they don\u0027t depend on the distribution of the X good vertices:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eE touches the source vertex. Since all edges touching the source vertex are equally likely to be selected, this preserves the hypothesis.\u003c/li\u003e   \u003cli\u003eE connects a good vertex to a good vertex or a bad vertex to a bad vertex. By the induction hypothesis, all distributions are equally likely. If this outcome happens, the state of the graph is unchanged. Therefore this preserves the hypothesis.\u003c/li\u003e   \u003cli\u003eE connects a good vertex to a bad vertex. Suppose A\u0027s colour is overwritten by B\u0027s colour. For every distribution where A was good and B was bad, there was an equally likely distribution where B was good and A was bad. So this also preserves the hypothesis.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eSo, instead of \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e states, we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e states, where state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e represents the state with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e good vertices. Suppose Carol\u0027s state has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e good vertices. By linearity of expectation, we can find the expected number of times we enter state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, divide by \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/71/3a/713af35c56f4951c64566a5e4112258783dfd524.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and we have the answer. Normally you would do this with a system of linear equations, but solving a general system takes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e. We can speed it up to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e (times log factor for modular inverses) by using the fact that state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e can only enter state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e. Represent the expected value from state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e as a function of the expected value from state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + 1\u003c/span\u003e. It turns out that the function is very simple: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e + 1) + \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e for some constant \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. We can work it out starting from state \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, going to state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e - 1\u003c/span\u003e, then working backwards and representing the function as a constant \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. Add up the expected value from each state, multiplied by the chance of starting in that state, and you are done.\u003c/p\u003e\u003cp\u003eProbably that explanation made no sense, so here is the code: \u003ca href\u003d\"https://ideone.com/ggJ2qd\"\u003ehttps://ideone.com/ggJ2qd\u003c/a\u003e.\u003c/p\u003e\u003ch4\u003eChessFloor (d2 easy)\u003c/h4\u003e\u003cp\u003eTry all possibilities. The tricky case is that you can\u0027t have all tiles the same color, but it was included in samples.\u003c/p\u003e\u003ch4\u003eABBA (d2 medium)\u003c/h4\u003e\u003cp\u003eWork backwards from the target state. The previous move can be uniquely determined by the last character of the string, so simulate it until the strings are the same length and then check if they\u0027re equal.\u003c/p\u003e\u003ch4\u003eCheeseRolling (d2 hard)\u003c/h4\u003e\u003cp\u003eUse DP with \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e·\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e states, and iterate over all \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1c/b6/1cb699607ead6f3c48a9a52222708d62d2dc3ace.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e possibilities for the bracket. The complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/45/26/4526f4f1db26d6787dc83673604f3e94ee630a19.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["srm","topcoder","editorial"]}}