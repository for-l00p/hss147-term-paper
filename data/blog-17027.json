{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1426773895,"rating":25,"authorHandle":"rumman_sust","modificationTimeSeconds":1426824143,"id":17027,"title":"\u003cp\u003ePlaying with data structure\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eRecently in a national contest I\u0027ve found an interesting problem. Given an array of \u003cstrong\u003eN\u003c/strong\u003e elements and \u003cstrong\u003eQ\u003c/strong\u003e queries with a range \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c8/63/c863b927ea41a366dfb7f161891c26b026e1abb2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. You\u0027ve to find how many numbers have the highest frequency in that range? That means if the maximum frequency is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bb/ea/bbea333ca34cbadde5f5bbdb7e3b55bc62d806e7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, then how many numbers have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c8/65/c86589407499fe6549c44b9994c2efa509d2fbf5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e in that range?\u003c/p\u003e\u003cp\u003eLet\u0027s call the i\u0027th element of the array is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/82/1f/821f9ca00a42c2fc3713b6f651384b3583d57ca3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and for each query the range is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c8/63/c863b927ea41a366dfb7f161891c26b026e1abb2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f2/28/f2288795d5ad4896bca810ae75987ad28d615b4b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a2/04/a204137a167f1a980f5d940b98f2efd76003c62c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d9/d9/d9d959aeb284c8e0b1f58ce059ee95ce23153c18.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/01/87/01878ce2459a3f3a115cd1c784791777abb2602b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eI can\u0027t find any feasible solution. I think this problem can be solved using Square Root RMQ with complexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f2/14/f21441a2e4951d7331f58be6bc54b3eac3ebac59.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e per query. But couldn\u0027t find a way. How to solve this type of problem with RMQ? Any idea or hints?\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD\u003c/strong\u003e: Mo\u0027s algorithm is really cool :D\u003c/p\u003e\u003c/div\u003e","tags":["data structures","rmq"]}}