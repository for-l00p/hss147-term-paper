{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1425498522,"rating":104,"authorHandle":"adamant","modificationTimeSeconds":1425513294,"id":16780,"title":"\u003cp\u003eSuffix tree. Ukkonen\u0027s algorithm\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cspan style\u003d\"font-size: 8.0pt;\"\u003e \u003cem\u003e\u003ca href\u003d\"/blog/entry/11337\"\u003eFirst part\u003c/a\u003e, I guess. Even if you think that you are familiar with suffix tree, please, take a look at the code below. It may be interesting to you.\u003c/em\u003e \u003c/span\u003e\u003c/p\u003e\u003cp\u003eHi everyone! Finally I learnt this one :)\u003c/p\u003e\u003cp\u003eIn this entry I would like to avoid long and complex theory which scared me from suffix tree for a long time. So straight to the point. I will not prove algorithm if you want some proofs, you may check \u003ca href\u003d\"https://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english\"\u003estackoverflow\u003c/a\u003e or Dan Gusfield\u0027s book... Or somewhere else, I don\u0027t know. \u003cbr /\u003e\u003cbr /\u003e Suffix tree is a compressed suffix trie, so all vertices which are not corresponding to suffixes and which have only one descendant are omitted. \u003c/p\u003e\u003cp\u003eNow about the algorithm. At each iteration, it makes implicit suffix tree. In implicit suffix tree all vertices which have only one descendant are omitted. Usually edges are stored as a pair of \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eL\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e. Personally I am not very convenient to work with them in this way, so I suggest to store in each node some data corresponding to the edge from its ancestor to it — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efpos\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e \u0026amp; which is the left position of first edge occurence in the string and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e which is the length of the edge. In this case, the length of the edges, leading to leaves will by default be considered equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003einf\u003c/i\u003e\u003c/span\u003e. So we can be sure that at any time the edges to the leaves are correct. Root of the tree will be the vertex numbered \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s at each step of the algorithm keep the longest non-unique suffix of the string. To do this, let\u0027s keep a pair of numbers \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003enode\u003c/i\u003e, \u003ci\u003epos\u003c/i\u003e)\u003c/span\u003e \u0026amp; mdash; vertex in the suffix tree and the number of characters that you need to pass down from it to have this suffix. By default \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e \u003d \u003ci\u003epos\u003c/i\u003e \u003d 0\u003c/span\u003e. When you append a new symbol, let\u0027s increase \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and add all of new unique suffix of the string that appear after adding a new character.\u003c/p\u003e\u003cp\u003eAlso, we need the concept of suffix links. It is defined for internal nodes of the tree. Following suffix link will lead to the vertex corresponding to the same substring, but without first character. For the root vertex suffix link is not defined.\u003c/p\u003e\u003cp\u003eAppending of new character consists of the following stages:\u003c/p\u003e \u003col\u003e \u003cli\u003e If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e \u003d 0\u003c/span\u003e, then all suffixes are added. Return. Otherwise let\u0027s find the vertex after which new suffix will be added (it is not neccessarily node because edge from node may be too short). So while \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e greater then edge from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e\u003c/span\u003e let\u0027s follow this edge and substract its length from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e. \u003c/li\u003e\u003cli\u003e Now let\u0027s try to add new suffix. We will have three options here: \u003col\u003e \u003cli\u003e If we do not have needed outgoing edges at this node, we simply create a new vertex and hung it to the current one. \u003c/li\u003e\u003cli\u003e If there is an edge and a suffix that we want to add lies entirely on it then this and further suffixes are not unique. Return. \u003c/li\u003e\u003cli\u003e If there is an edge and suffix doesn\u0027t lie entirely on it then it differs in only one character, this means that we need to create a new vertex in the middle of the edge and then create another one new vertex (which will be new suffix) and hung it to the vertex in the middle of splitted edge. \u003c/li\u003e\u003c/ol\u003e \u003c/li\u003e\u003cli\u003e If you have not returned on the previous step, go to the next suffix. If node is root, then we reduce the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, otherwise we just follow the suffix link \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e \u003d \u003ci\u003elink\u003c/i\u003e(\u003ci\u003enode\u003c/i\u003e)\u003c/span\u003e without changing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e. After that, we go to step 1. \u003c/li\u003e\u003c/ol\u003e\u003cp\u003eAnd about siffix links. On the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th step we will set suffix link of internal vertex created on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e-th step. If we create a new internal vertex (i.e. split some edge), then the suffix link will lead into it. In two other cases, the suffix link will lead to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e\u003c/span\u003e (I am too lazy to write truly marvellous proof of this, so it is left to the curious reader as an exercise).\u003c/p\u003e\u003cp\u003eAnd, finally the implementation.\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://ideone.com/sT8Vd1\"\u003e#sT8Vd1\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI tried to make the code as simple and clear as possible :) I do not know if I managed to do so and hope for your feedback and questions.\u003c/p\u003e\u003c/div\u003e","tags":["suffix tree","suffix trie","ukkonen","strings"]}}