{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1514991482,"rating":2,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1514991482,"id":56887,"title":"\u003cp\u003eNotes on Codeforces Beta Round #105, Div2- A, B, C, D , E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/148/problem/A\" title\u003d\"Codeforces Round 105 (Div. 2)\"\u003e148A - Insomnia cure\u003c/a\u003e\u003c/p\u003e\u003cp\u003eA straightforward solution is to enumerate every element in the sequence and check whether it can divide at least one of the given four integers.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/148/problem/B\" title\u003d\"Codeforces Round 105 (Div. 2)\"\u003e148B - Escape\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can simply simulate the process until the princess reaches the destinatiin. Be careful that when comparing two “double” types, it is better to use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e + ε\u003c/span\u003e instead of directly checking \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003eε\u003c/span\u003e can be set to \u003cspan class\u003d\"tex-span\"\u003e1\u003ci\u003ee\u003c/i\u003e - 9\u003c/span\u003e (I used this value).\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/148/problem/C\" title\u003d\"Codeforces Round 105 (Div. 2)\"\u003e148C - Terse princess\u003c/a\u003e\u003c/p\u003e\u003cp\u003eA greedy algorithm can solve the problem. The first element can be assigned with value \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. Then, for the next \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e elements, we assign values so that each of them is larger than the sum of all the previous elements. For the next \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e elements, each of them should be larger than the maximum value of the previous elements. Finally, we can assign the remaining elements with the same value.\u003c/p\u003e\u003cp\u003eNote that there are two special cases which are quite tricky to a certain extent. \u003c/p\u003e\u003cp\u003eOne case is that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e (this has implied that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d 0\u003c/span\u003e due to the constraint \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e \u0026lt; \u003ci\u003en\u003c/i\u003e\u003c/span\u003e). In fact, there exists no reasonable sequence since the second element must be larger than the first one, however this means that the second element should belong to type “b” rather than type “a” while \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d 0\u003c/span\u003e here. \u003c/p\u003e\u003cp\u003eThe second case is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d 0, 0 \u0026lt; \u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e. A reasonable sequence exists for this case, but be careful to make sure that the second element should not be larger than the first one (same reason as mentioned above).\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/148/problem/D\" title\u003d\"Codeforces Round 105 (Div. 2)\"\u003e148D - Bag of mice\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI used a classic probability model (I am not sure of the terminology...) to solve it. \u003c/p\u003e\u003cp\u003eGiven \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d \u003ci\u003eb\u003c/i\u003e + \u003ci\u003ew\u003c/i\u003e\u003c/span\u003e elements, there are totally \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e!\u003c/span\u003e permutation and we are going to find all the patterns that the princess wins. It is convenient to define the “first winning event”, i.e., the step at which the princess wins.\u003c/p\u003e\u003cp\u003eNote that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e elements can be divided into multiple groups, each of which consists of three elements (the last group may have less than three). The first winning event must be one of the following patterns, where “x” means that it can be either “w” or “b”.\u003c/p\u003e\u003cp\u003ewxx xxx xxx ...\u003c/p\u003e\u003cp\u003ebbx wxx xxx ...\u003c/p\u003e\u003cp\u003ebbx bbx wxx xxx ...\u003c/p\u003e\u003cp\u003e....\u003c/p\u003e\u003cp\u003eSuppose that we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e groups and the first “w” appears in the first element of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th group, and we are going to calculate its probability \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e. To form such a pattern, we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e1\u003c/sup\u003e\u003c/span\u003e ways to select the first “w”, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003ei\u003c/i\u003e - 2\u003c/sup\u003e\u003c/span\u003e ways to choose the previous “b”s, and finally \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e - 1 - (2\u003ci\u003ei\u003c/i\u003e - 2))!\u003c/span\u003e ways to deal with the remaining elements (\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a9/1b/a91bdc0bfeafd864bb70ea4c58c72d9fa04d9da7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e). Thus, we have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/df/a7/dfa7dea48d1f85d4398bbc23583ef5ac5491bd3e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. In general, it is better to transfer the formula to logarithm domain, i.e., we compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elog\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e))\u003c/span\u003e instead. After some simple deduction, one can find that the main issue is reduced to the computation of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elog\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e!)\u003c/span\u003e for some positive integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. We can calculate it when necessary, which results in complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e, or calculate in previous and maintain a table, which gives \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/148/problem/E\" title\u003d\"Codeforces Round 105 (Div. 2)\"\u003e148E - Porcelain\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFor the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th shelf, we first consider given that we can select \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e elements, what is the maximum value that we can take. According to the problem, we could select \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e elements from left and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e elements from right, with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Thus, we can calculate prefix sum and suffix sum, and enumerate every feasible pair of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e to find out the maximum value.\u003c/p\u003e\u003cp\u003eThen, the original problem is reduced to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e) + \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e) + ... + \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e))\u003c/span\u003e, given that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003em\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e denotes the maximum value given that we can select \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e elements from the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th shelf. \u003c/p\u003e\u003cp\u003eThe reduced problem can be solved based on dp. We use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e to denote the maximum value that we can obtain under the condition that totally \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e elements have been selected from the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e shelves. The recursive formula is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 0, 1, 2, ..\u003c/sub\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e] + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e))\u003c/span\u003e. The final answer is just \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][\u003ci\u003em\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}