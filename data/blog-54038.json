{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1503618776,"rating":69,"authorHandle":"Um_nik","modificationTimeSeconds":1503618776,"id":54038,"title":"\u003cp\u003eRandomized solutions vs Hacks\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI think that most of us know about situation with problem \u003ca href\u003d\"/contest/843/problem/B\" title\u003d\"AIM Tech Round 4 (Div. 1)\"\u003e843B - Interactive LowerBound\u003c/a\u003e. The intended solution (and it looks like all possible solutions) was randomized and it generates huge amount of hacks based on fixed randseeds.\u003c/p\u003e\u003cp\u003eI want to mention that I\u0027m not against good randomized problems and I even set one myself.\u003c/p\u003e\u003cp\u003eBut for me it seems that hacks can ruin such type of problems. The only thing author\u0027s solution is better than contestant\u0027s is that it is invisible during the competition. I can even imagine that some tester\u0027s solutions (maybe not the solution which is used to generate judge answers) was broken by some hacks.\u003c/p\u003e\u003cp\u003eI think that it breaks the problem as art piece and breaks the contest format too. You solved the problem just like authors wanted and now... it depends on is there a hacker in your room. It also breaks the idea of hacking. There is no bug in my solution, why should I be hacked? And why should the guy get 100 points for hacking me? He didn\u0027t crack my solution, he abused CF \u0027Run\u0027 tab.\u003c/p\u003e\u003cp\u003eAnd for me it looks like authors didn\u0027t think about that bug/feature and now they try to protect themselves in comments. For me it could be a good enough reason not to use this problem on CF round. This problem would be a good problem in ACM contest and I know that these guys do ACM contests. But maybe there were a way to prevent such abuse of hack system?\u003c/p\u003e\u003cp\u003eWhat about forbidding hacking this particular problem? It has two obvious flaws (maybe more).\u003cbr /\u003e1. After this post it can give a hint that you should use randomized solution — Yes, this is a problem.\u003cbr /\u003e2, All problems should be equal! You are taking away our sacred right to hack!!!1! — Are they? There are a lot of problems with no hacks on CF. There can be many reasons: the problem was too easy, or too hard, or it has no corner cases, or it can be solved only in one way, or, or... You can say that I propose unnatural way to prohibit hacking and in those cases it was prohibited by the problem itself. But (in my opinion) such randomized problem also naturally prohibits hacks because hacks can ruin the problem.\u003c/p\u003e\u003cp\u003eAnd it is also not true that all problems were \u0027equal\u0027 in this sense before. There were some problems with multitests which allow to hack with only one test in multitest. There can be a bug in handling multitesting but we cannot hack this bug.\u003c/p\u003e\u003cp\u003eThis brings us to less cardinal solution: make some bounds on hacks. Like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 100\u003c/span\u003e or (in this particular problem) let only choose values in list, but not their order.\u003c/p\u003e\u003cp\u003eAnyway, I think that problemsetters and coordinator should think about these matters in the future.\u003c/p\u003e\u003c/div\u003e","tags":["hacks"]}}