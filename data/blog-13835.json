{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1411034541,"rating":0,"authorHandle":"LouisCK","modificationTimeSeconds":1411034541,"id":13835,"title":"\u003cp\u003eHelp debugging SCUBADIV on SPOJ -- Python 2.7 NZEC Error\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI am trying to solve \u003ca href\u003d\"http://www.spoj.com/problems/SCUBADIV/\"\u003ethis problem called SCUBADIV\u003c/a\u003e on SPOJ. I am getting the NZEC error repeatedly. Could someone help me and tell me which part of my code is causing the error?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eT \u003d int(raw_input())\n\n\nclass Cylinder(object):\n    def __init__(self, a, b, c):\n        self.oxygen \u003d a\n        self.nitrogen \u003d b\n        self.weight \u003d c\n        \n    def get_ox(self): return self.oxygen\n    def get_nit(self): return self.nitrogen\n    def get_weight(self): return self.weight\n\n\ndef solver(cylinders, pos, oxygen, nitrogen, map):\n    if pos \u003d\u003d len(cylinders) - 1:\n        if oxygen - cylinders[pos].get_ox() \u0026lt;\u003d 0 and nitrogen - cylinders[pos].get_nit() \u0026lt;\u003d 0: return cylinders[pos].get_weight()\n        else: return float(\u0027inf\u0027)\n        \n    else:\n        if (pos, oxygen, nitrogen) in map: return map[(pos, oxygen, nitrogen)]\n        else:\n            #don\u0027t take the item\n            b \u003d solver(cylinders, pos + 1, oxygen, nitrogen, map)\n            #take the item\n            if oxygen - cylinders[pos].get_ox() \u0026lt;\u003d 0 and nitrogen - cylinders[pos].get_nit() \u0026lt;\u003d 0: a \u003d cylinders[pos].get_weight()\n            else: a \u003d cylinders[pos].get_weight() + solver(cylinders, pos + 1, oxygen - cylinders[pos].get_ox(), nitrogen - cylinders[pos].get_nit(), map)\n            map[(pos, oxygen, nitrogen)] \u003d min(a, b)\n            return min(a, b)\n \nfor i in range(T):\n    t \u003d raw_input().split()\n    o, n \u003d int(t[0]), int(t[1])\n    k \u003d int(raw_input())\n    cylinders \u003d []\n    for j in range(k):\n        inp \u003d raw_input().split()\n        t, a, w \u003d int(inp[0]), int(inp[1]), int(inp[2])\n        cylinders.append(Cylinder(t, a, w))\n    print solver(cylinders, 0, o, n, {})\n    \n    \n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["spoj","nzec","python 2"]}}