{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1492649065,"rating":5,"authorHandle":"bssanches","modificationTimeSeconds":1492649065,"id":51632,"title":"\u003cp\u003eAula 5\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eUma função em programação, funciona da mesma forma que na matemática. Por exemplo a função \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e pode ser escrita em c++ como\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint F(int x)\n{\n    return x * x;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eO primeiro \u003ccode\u003eint\u003c/code\u003e representa o tipo de retorno da função, logo depois devemos definir o nome da função e seus parâmetros. O retorno por sua vez é o resultado calculado que queremos.\u003c/p\u003e\u003cp\u003eUm outro exemplo de função:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint F(int x, int y)\n{\n    return x + y;\n}\n\n\nint main()\n{\n     int a \u003d F(2, 3); //Para chamar a função, quando chamamos ela assim x \u003d 2 e y \u003d 3\n     return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eVale notar que a \u003ccode\u003emain\u003c/code\u003e também é uma função.\u003c/p\u003e\u003cp\u003eQuando declaramos uma variavel dentro da função, ela só vale dentro da mesma, portanto os parâmetros da função não serão reconhecidos fora dela.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint x \u003d 10;\nvoid f(int x) //void é o tipo de retorno que não retorna nada :P, é usado quando não temos retorno na função\n{\n    printf(\u0026quot;x  na funcão \u003d %d\\n\u0026quot;,x);\n}\n\nint main()\n{\n   f(12345);\n   printf(\u0026quot;x na main \u003d %d\\n\u0026quot;,x);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePodemos também chamar outra função de dentro da função:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint ehPar(int x)\n{\n    if (x%2 \u003d\u003d 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return 0;\n    }\n}\n\n\nint calcula(int x) //funcao que se x for par retorna 2 * x e se x for impar retorna x^2\n{\n   int retorno \u003d ehPar(x);\n   if (retorno \u003d\u003d 1)\n   {\n      return 2 * x;\n   }\n   else\n   {\n      return x * x;\n   }\n}\n\nint main()\n{\n    int retorno \u003d calcula(10);\n    return 0;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUtilizando esse pensamento, podemos também chamar a própria função dentro dela mesma. A isso damos o nome de recursão:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint fib(int x) //função que calcula fibonacci de x\n{\n   if (x \u003d\u003d 0)\n   {\n      return 1;\n   }\n   else if (x \u003d\u003d 1)\n   {\n      return 1;\n   }\n   else\n   {\n      return fib(x - 1) + fib(x - 2);\n   }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eVale notar que quando definimos uma recursão, precisamos sempre lembrar de definir o caso base. O caso base é o caso que faz com que a recursão não entre em loop infinito, é o caso em que ja sabemos a resposta e não precisamos chamar a recursão para frente (No exemplo a cima os casos base são \u003ccode\u003ex \u003d\u003d 0\u003c/code\u003e e \u003ccode\u003ex \u003d\u003d 1\u003c/code\u003e)\u003c/p\u003e\u003cp\u003eUm exemplo utilizando varias variaveis, o \u0026quot;escolhe\u0026quot; (ou combinatória)\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint choose(int n, int k)\n{\n   if (n \u0026lt; k)\n   {\n      return 0;\n   }\n   else if (k \u003d\u003d 0)\n   {\n      return 1;\n   }\n   else\n   {\n      return choose(n - 1, k) + choose(n - 1, k - 1);\n   }\n}\n\nint main()\n{\n    int ret \u003d choose(10, 5);\n    printf(\u0026quot;ret \u003d %d\\n\u0026quot;, ret);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":[]}}