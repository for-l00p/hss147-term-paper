{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1405266921,"rating":6,"authorHandle":"dzy493941464","modificationTimeSeconds":1405311668,"id":13036,"title":"\u003cp\u003eCodeforces Round #FF(255) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThe editorial is updated.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/447/problem/A\" title\u003d\"Codeforces Round FF (Div. 2)\"\u003e447A - DZY Loves Hash\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe just need an array to store the numbers inserted and check whether a conflict happens. It\u0027s easy.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/447/problem/B\" title\u003d\"Codeforces Round FF (Div. 2)\"\u003e447B - DZY Loves Strings\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFirstly the optimal way is to insert letter with maximal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Let \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/61/db/61dbb5e547e611db23ddf1814733a93b4315781e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e{\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e}. If we insert this character into the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e\u0027th position, the extra value we could get is equal to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/70/f0/70f0e608d1dbe0c54e093f0393665f9b9995e21b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Because of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e ≤ \u003ci\u003enum\u003c/i\u003e\u003c/span\u003e, when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e, we can get the largest extra value.\u003c/p\u003e\u003cp\u003eSo if we insert the k letters at the end of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e, we will get the largest possible value.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/446/problem/A\" title\u003d\"Codeforces Round FF (Div. 1)\"\u003e446A - DZY Loves Sequences\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe can first calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for each \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, satisfying \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 2\u003c/sub\u003e \u0026lt; ... \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is maximal.\u003c/p\u003e\u003cp\u003eThen calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, satisfying \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e \u0026lt; ... \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1\u003c/sub\u003e\u003c/span\u003e, which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is also maximal.\u003c/p\u003e\u003cp\u003eUpdate the answer \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/45/bb/45bb1a76bbf5ca3ddfe7750608addff497101685.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e + 1 \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIt\u0027s easy to solve this problem in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/446/problem/B\" title\u003d\"Codeforces Round FF (Div. 1)\"\u003e446B - DZY Loves Modification\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d 0\u003c/span\u003e, apperently the best choice is choosing the row or column which can give greatest pleasure value each time.\u003c/p\u003e\u003cp\u003eIgnore \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e first,then we can get a greatest number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e. Then if we choose rows for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e times, choose columns for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e times, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e should subtract \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e) × \u003ci\u003ei\u003c/i\u003e × \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSo we could enumerate i form 0 to k and calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - (\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e) * \u003ci\u003ei\u003c/i\u003e * \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e each time, max \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - (\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e) * \u003ci\u003ei\u003c/i\u003e * \u003ci\u003ep\u003c/i\u003e}\u003c/span\u003e is the maximum possible pleasure value DZY could get.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the maximum pleasure value we can get after choosing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e rows and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the maximum pleasure value we can get after choosing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e columns. Then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. We can use two priority queues to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e quickly.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/446/problem/C\" title\u003d\"Codeforces Round FF (Div. 1)\"\u003e446C - DZY Loves Fibonacci Numbers\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eAs we know, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c1/17/c1170ebdb50f6f444423297e84c0ef46a8396d57.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFortunately, we find that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d4/85/d485df634ecdcea453e3e2b74201cdd94093d539.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/89/0e/890ed243e449adae77f5dc078bc36d4780923a9a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWith multiplicative inverse, we find,\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1a/1f/1a1f0c434e0d480f28139c2ed93e8d23860f841a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ac/9a/ac9adc16ad4df2c72ee1c7236d8d908c80e7a6f8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c3/39/c339e700f0f8b6d7ffb020ac92baa9717d4898c9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eNow, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ce/02/ce02cb685626d171679f25974f48bcbf0c9c89f4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eAs you see, we can just maintain the sum of a Geometric progression \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d8/a4/d8a4b047598fe145ebaa08499c088c5f22a45fff.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThis is a simple problem which can be solved with segment tree in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/45/4a/454a7a031ceeadfddfedabb0660eb325778f30cb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/446/problem/D\" title\u003d\"Codeforces Round FF (Div. 1)\"\u003e446D - DZY Loves Games\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eDefine important room as the trap room. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e be equal to the probability that DZY starts at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e is a important room or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e\u003d1) and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e is the next important room DZY arrived. For each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e, we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e by gauss elimination.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be equal to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e\u0027th important room DZY arrived. So \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/sub\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, specially \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u003d 1\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e be the probability for DZY to open the bonus round. Easily we can know \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/35/55/3555dabd9e10ecb224ec1016d0211818c6ddcefc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. So we can calculate ans in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fb/44/fb4450aa4b46acea5b960e5480a051268874067b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is equal to the number of important rooms) by matrix multiplication.\u003c/p\u003e\u003cp\u003eSo we can solve the problem in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6e/88/6e884512bf0f293b99fe64c7af14d15c92cd2812.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. we should optimize this algorithm.\u003c/p\u003e\u003cp\u003eWe can find that each time we do gauss elimination, the variable matrix is unchanged. So we can do gauss elimination once to do preprocessing in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e. Then for each time calculating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e, the only thing to do is substitute the constants. In this way we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIn this way, we can solve this problem in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d3/f1/d3f1d3973bc6b7ce133972987d171180baa511c5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/446/problem/E\" title\u003d\"Codeforces Round FF (Div. 1)\"\u003e446E - DZY Loves Bridges\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. For convenience, we use indices \u003cspan class\u003d\"tex-span\"\u003e0, 1, ..., \u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e here instead of \u003cspan class\u003d\"tex-span\"\u003e1, 2, ..., \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, so we define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eObviously this problem requires matrix multiplication. We define row vector \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/73/48/734802ce3b607f06003e1ea7a31d368d8aff4fff.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and matrix \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c7/e5/c7e54a6a6e144c22105129b136eff04f5c5f1a24.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eii\u003c/i\u003e\u003c/sub\u003e \u003d 1\u003c/span\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f0/14/f014acdeff59b099022029751bd4f069baae798a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. The answer is row vector \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9f/db/9fdba586176682e25b155caefbaafdd1c4354694.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eSince \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e can be up to \u003cspan class\u003d\"tex-span\"\u003e3 × 10\u003csup class\u003d\"upper-index\"\u003e7\u003c/sup\u003e\u003c/span\u003e, we need a more efficient way to calculate. Let \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f9/a9/f9a9d657cb848449a9e26c7b800dee1734b036cf.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e denote the matrix \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6a/51/6a51c13f48e17b6bb9e43a5eaa5c70fda9c250ea.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e \u003d \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. For example, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/db/49/db492628033a41b2b708500a5a1dae6c0cd89104.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eDefine \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e6/9e/e69e0c1ff5d5fa0e24fd88b158e66255d81ff4d5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, then we can easily find that\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/80/9a/809a1e704fb84ea1278f6b8631a2b7a6b8b464cd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003ewhere \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d4/a8/d4a8095c8ac6c32cc51441afd8b9923f073d3574.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e denotes the identity matrix.\u003c/p\u003e\u003cp\u003eFor an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003ci\u003en\u003c/i\u003e\u003c/span\u003e matrix \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/e3/90e3dda7e786ee7cc69805b191890f1acedf73fa.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and a constant \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, we can prove by induction that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ad/a6/ada62504f387b8a4ef650f7b81fd2c0e26cda68d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003eα\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, α\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e be two \u003cspan class\u003d\"tex-span\"\u003e1 × \u003ci\u003en\u003c/i\u003e\u003c/span\u003e vectors, then we have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/64/89/6489ad47700a81e02da30f12aba0e6e0c670decd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThis result seems useful. Suppose we want to find \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/17/38/1738cc8d6ef3ea8b96ecc2e0c3a64ce5433528fc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bf/c1/bfc1c1e2b763597b1f4cc9032a583033f76822f3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we have\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fc/01/fc01a6f264f157f271e6a72a8fb53390b7a4290d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e so we just need to find \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ef/ad/efad0c99b0ff9fe278451283cd2ece148d5dbdab.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, which is a self-similar problem. By recursion, it can be solved in time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) \u003d \u003ci\u003eT\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e / 2) + \u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) \u003d \u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. \u003c/p\u003e\u003c/div\u003e","tags":["cf 255"]}}