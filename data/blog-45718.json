{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1467113214,"rating":3,"authorHandle":"andreyklimkin","modificationTimeSeconds":1467263062,"id":45718,"title":"\u003cp\u003eДень 1. Поиск в глубину\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eЗадача А. Предок.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eВоспользуемся такими понятиями как время входа и выхода (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etin\u003c/i\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etout\u003c/i\u003e\u003c/span\u003e). Можно заметить, что для каждой вершины \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e в поддереве вершины \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e справедливо неравенство \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etin\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e] \u0026lt; \u003ci\u003etin\u003c/i\u003e[\u003ci\u003eu\u003c/i\u003e]\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etout\u003c/i\u003e[\u003ci\u003eu\u003c/i\u003e] \u0026lt; \u003ci\u003etout\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e]\u003c/span\u003e. Воспользуемся этим фактом, чтобы решить задачу.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача B. Поиск цикла.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eДанная задача на знание базового алгоритма для нахождения цикла в графе. Опишем его кратко. Произведём серию поисков в глубину в графе. Т.е. из каждой вершины, в которую мы ещё ни разу не приходили, запустим поиск в глубину, который при входе в вершину будет красить её в серый цвет, а при выходе — в чёрный. И если поиск в глубину пытается пойти в серую вершину, то это означает, что мы нашли цикл (если граф неориентированный, то случаи, когда поиск в глубину из какой-то вершины пытается пойти в предка, не считаются).Сам цикл можно восстановить проходом по массиву предков.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача C. Конденсация графа.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eКонденсация ориентированного граф — это граф, получаемый из данного графа путем сжатия каждой компоненты сильной связности в одну вершину. Очевидно, что конденсация является ориентированным ацикличным графом (DAG — directed acyclic graph). Чтобы построить конденсацию графа, нам необходимо найти все компоненты сильной связности, пронумеровать их и соединить вершинами, конечно, следя за тем, чтобы не было кратных ребер и петель.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача D. Маленький Артёмка и Кузнечик.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eПростая задача на поиск в глубину. Представим, что наш тренажёр — это граф. Тогда понятно что будет являться вершинами и ребрами. Запустим поиск в глубину из первой вершины и найдем цикл в этом графе. Из-за специфичности графа, цикл здесь ищется просто с использованием массива \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eused\u003c/i\u003e[]\u003c/span\u003e (так как, если мы зашли в вершину, в которой уже были, то это цикл).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача E. Новая реформа.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eНесмотря на хитрое условие данная задача имеет очень простое решение. Во-первых, сделаем из ориентированного графа неориентированный. Во-вторых, можно заметить, что если в компоненте связности имеется цикл, то мы можем переориентировать все ребра таким образом, что в этой компоненте не будет обособленных вершин. Иначе, ответ будет равняться единице.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача F. Ремонт дорог.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eПервое важное наблюдение — ответ равен максимальной степени вершины. Понятно, что быстрее отремонтировать дороги нельзя. Почему нельзя дольше вроде интуитивно понятно. Далее построим жадный алгоритм. Запустим поиск в глубину с параметром, в котором будем запоминать в какой день мы ремонтируем ребро от вершины к предку. Все ребра данной вершины будем ремонтировать подряд в дни от 1 до \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, где \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e — степень вершины. Но только помним, что одно ребро у нас уже ремонтируется в определенный день.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадча G. Противопожарная безопасность.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eСтроим конденсацию графа — сжимаем каждую компоненту в одну вершину. Получим DAG (ациклический ориентированный граф). Теперь смотрим на рёбра в конденсации и ищем такие компоненты из которых не выходит ни одного ребра в другие компоненты сильной связности, в нашем случае — это просто листовые вершины в конденсации. После того как мы нашли все \u0026quot;листовые\u0026quot; компоненты для каждой такой компоненты станции нужно устанавливать в любой, \u003cstrong\u003e\u003cem\u003eРОВНО ОДНОЙ\u003c/em\u003e\u003c/strong\u003e вершине, принадлежащей данной компоненте, например в первой, которую вы добавили в данную компоненту.\u003c/p\u003e\u003c/div\u003e","tags":[]}}