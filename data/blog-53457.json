{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1500912002,"rating":972,"authorHandle":"tourist","modificationTimeSeconds":1500927002,"id":53457,"title":"\u003cp\u003eMy strategy at AtCoder \u0026amp; CS Academy\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThere\u0027s been much controversy lately about the late submission strategy not penalized by scoring systems of AtCoder and CS Academy. Most of the relevant discussion happened earlier at \u003ca href\u003d\"//codeforces.com/blog/entry/53431\"\u003ehttp://codeforces.com/blog/entry/53431\u003c/a\u003e and \u003ca href\u003d\"//codeforces.com/blog/entry/53449\"\u003ehttp://codeforces.com/blog/entry/53449\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eI have a lot of thoughts on the topic, so I\u0027ve decided to share them in a separate blog post.\u003c/p\u003e\u003cp\u003eI really like the strategic part of programming competitions. Of course, problem solving is more important. But every contest consists of multiple problems, so there has to be a way of comparing participants which performed better at different problems. There\u0027s a huge variety of scoring rules, and I find it truly amusing.\u003c/p\u003e\u003cp\u003eThe \u0026quot;submit after solving all problems\u0026quot; strategy looks widely attributed to me now, mostly due to \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/Petr\" title\u003d\"Легендарный гроссмейстер Petr\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003eP\u003c/span\u003eetr\u003c/a\u003e\u0027s remarks regarding my participation in AtCoder contests. In my opinion, it\u0027s wrong for multiple reasons.\u003c/p\u003e\u003cp\u003eA closer five-word description of my strategy is \u0026quot;implement after solving several problems\u0026quot;. It\u0027s still quite inaccurate, though.\u003c/p\u003e\u003cp\u003eHere is my typical behavior during the last few contests:\u003c/p\u003e \u003col\u003e   \u003cli\u003eRead all the problems. Usually starting with the last one, but it\u0027s not important.\u003c/li\u003e   \u003cli\u003eWhile reading each problem, try to understand what it asks for, think about it for a minute.\u003c/li\u003e   \u003cli\u003eStart thinking about problems in random order, frequently jumping from one problem to another.\u003c/li\u003e   \u003cli\u003eStrive to make progress or look at a problem from a different perspective every time you get back to it.  For easy problems, this usually means solving them from the first try, as there\u0027s little progress to be made.\u003c/li\u003e   \u003cli\u003eLook at the scoreboard to get a grasp of the amount of time people typically spend on each problem.  This helps understand whether one should look for a simple solution.\u003c/li\u003e   \u003cli\u003eAt some moment, I feel stuck in every problem I haven\u0027t solved yet (possibly an empty set).  This usually happens during the first half of the contest.  Implement solutions to solved problems in any comfortable order. Submit them.  Here, there are two main options: submit a solution after implementing it, or do a batch submit after implementing all of them.  I\u0027ve tried both, and I think it doesn\u0027t matter too much.  At least the latter option doesn\u0027t make me upset with WA in the process of implementing another solution,  and also saves me from the urge of refreshing the submissions page for each problem separately :)\u003c/li\u003e   \u003cli\u003eTry to solve the rest of the problems, again jumping between problems if there\u0027s more than one, but spending more time on one problem in a row.  Once a problem is solved, implement its solution and submit.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eI feel like this strategy has only one major disadvantage. Time spent in the beginning on problems one doesn\u0027t eventually solve is counted towards the penalty, which doesn\u0027t happen when using the standard \u0026quot;solve -- implement -- submit -- move on to the next problem\u0026quot; working cycle. For example, this could\u0027ve cost me several places during \u003ca href\u003d\"http://agc018.contest.atcoder.jp/standings\"\u003eAtCoder Grand Contest 018\u003c/a\u003e -- I spent more than 10 minutes thinking on E and F before deciding to implement A-D, so if I hadn\u0027t solved problem F, I would\u0027ve taken place 10 instead of place 7 with the normal strategy. It would\u0027ve been even worse if both E and F had turned out to be unsolvable (which happens sometimes too) -- place 5 instead of place 1 for me. So, there\u0027s a prerequisite which one might call a disadvantage too: it\u0027s important to estimate problem difficulty well and feel when it\u0027s time to move from thinking to implementing.\u003c/p\u003e\u003cp\u003eOn the other hand, I see multiple advantages. The first and foremost advantage for me: I feel very comfortable with this kind of behavior. I know that for many people it\u0027s hard and non-profitable to switch between problems too often, as it takes time to change the context. But I\u0027m used, if not say addicted, to switching between problems often, and it seems in this case I come up with new ideas faster and better. Maybe that\u0027s due to subconscious thinking happening in background, or just a fresh look at the problem helps, it\u0027s hard to say. Implementing several solutions in a row also turned out to be comfortable and effective enough for me, as unlikely as it may seem.\u003c/p\u003e\u003cp\u003eAnother slight advantage is, as \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/Petr\" title\u003d\"Легендарный гроссмейстер Petr\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003eP\u003c/span\u003eetr\u003c/a\u003e mentioned, not giving information to other participants. Intentionally withholding submissions to prevent giving information does help sometimes. It\u0027s a rare thing, though. In most cases, if you want to optimize your own result, you want to submit when it feels like you should submit, not when the scoreboard tells that you may submit.\u003c/p\u003e\u003cp\u003eAnd a small advantage I also consider important is seeing the whole picture of the problemset this way. Like, when you come to an exam, you can either start working on the problems one by one until you run out of time, or consider all the stuff you need to do and start with the most important things. The latter option feels better to me, though it might be very subjective.\u003c/p\u003e\u003cp\u003eFinally, the most controversial point is the possibility to bail out of the contest if your performance is poor. I wouldn\u0027t call it an advantage of this strategy. I believe considering the option of leaving the contest without submitting is disadvantageous, as you spend time thinking whether you should submit, while other participants work on the problems at the same time. The only profit you might get is the possibility to save your rating, which is a way of comparing contestants over many rounds but doesn\u0027t influence anything except one\u0027s self-esteem. And leaving the contest doesn\u0027t boost your skill anyway, so this is a meaningless thing to do in the long run.\u003c/p\u003e\u003cp\u003eTo the admins of AtCoder and CS Academy: I think there\u0027s no need to change the rules. In my opinion, the \u0026quot;loophole\u0026quot; of leaving the contest without submitting doesn\u0027t create any big troubles. Clicking on the \u0026quot;Read Problems\u0026quot; button making the round rated for oneself requires a higher level of commitment from contestants which sometimes they aren\u0027t ready to provide. There are people for whom the rating is more important than participating in the contest; let them be. We are not reaching any goals by requiring much commitment, we\u0027re just decreasing participation.\u003c/p\u003e\u003cp\u003eHave fun!\u003c/p\u003e\u003c/div\u003e","tags":["atcoder","csacademy","strategy"]}}