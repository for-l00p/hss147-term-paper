{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1505923960,"rating":3,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1505923960,"id":54662,"title":"\u003cp\u003eNotes on Codeforces Beta Round #79, Div2-A, B, C, D, E, Div1-D\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/102/problem/A\" title\u003d\"Codeforces Beta Round 79 (Div. 2 Only)\"\u003e102A - Clothes\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can adopt a triple loop to enumerate all the reasonable combination, and find out the one with the minimum cost.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/102/problem/B\" title\u003d\"Codeforces Beta Round 79 (Div. 2 Only)\"\u003e102B - Sum of Digits\u003c/a\u003e\u003c/p\u003e\u003cp\u003eA simple implementation problem. Keep adding all the digits to obtain a new integer, and repeat again until it is reduced to an integer with only one digit.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/102/problem/C\" title\u003d\"Codeforces Beta Round 79 (Div. 2 Only)\"\u003e102C - Homework\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAt first, we count the number that each letter has appeared in the string. To eliminate the number of different letters as many as possible, it is straightforward to first delete the letter with the minimum number, and then the one with the second minimum number, and then the one with the third minimum number, and so on.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/102/problem/D\" title\u003d\"Codeforces Beta Round 79 (Div. 2 Only)\"\u003e102D - Buses\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAlthough \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e can be as large as \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e, the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e in fact has determined that at most \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003em\u003c/i\u003e\u003c/span\u003e of the nodes (stops) really affect the result, since the person can only get off the bus at these specified stops. \u003c/p\u003e\u003cp\u003eThus, we should first compress the number of nodes (or stops) to the order of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e)\u003c/span\u003e, which can be achieved by using \u0027map\u0027 of STL in C++. Now we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e1[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e to denote the number of different ways to get to node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Furthermore, we maintain a prefix-sum array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e2[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e which have values \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d4/6b/d46b8ae372586f642efac90dcbbb1e50f870feda.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. For a route from node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, we can calculate \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4b/96/4b96d229f4444f572e3ea27a0d30eb2a8f3c622a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Therefore, to compute any \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e1[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e, we should find all the routes that can reach node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, and add them together as shown above. Besides, the calculation of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e1[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e should be implemented in an increasing order of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, and do not forget updating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e2[\u003ci\u003ek\u003c/i\u003e] \u003d \u003ci\u003edp\u003c/i\u003e2[\u003ci\u003ek\u003c/i\u003e - 1] + \u003ci\u003edp\u003c/i\u003e1[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/102/problem/E\" title\u003d\"Codeforces Beta Round 79 (Div. 2 Only)\"\u003e102E - Vectors\u003c/a\u003e \u003c/p\u003e\u003cp\u003eIt is convenient to denote a point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e with coordinate \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e \u003d \u003ci\u003ex\u003c/i\u003e + \u003ci\u003eiy\u003c/i\u003e\u003c/span\u003e, where the complex form is introduced. Suppose that we have implemented several operations, and whatever the order of the two given operations are, they can always be described as repeating the following steps cyclically: first add vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e to vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e times, and then rotate the resulted vector for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e times (both \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e can have zero values).\u003c/p\u003e\u003cp\u003eThus, after the first cycle, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e becomes \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eA\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003ci\u003eC\u003c/i\u003e)\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e \u003d \u003ci\u003eAi\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e + \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003ci\u003eCi\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e\u003c/span\u003e. After the second cycle, it turns out to be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eAi\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sup\u003e + \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003ci\u003eCi\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sup\u003e + \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003ci\u003eCi\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sup\u003e\u003c/span\u003e. Note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e can only have a form of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. Thus, after several cycles, the resulted vector must have a form of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eAi\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e + \u003ci\u003eaC\u003c/i\u003e + \u003ci\u003ebiC\u003c/i\u003e\u003c/span\u003e, which should be equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. This equation is satisfied if and only if both real and image parts are equal, respectively. \u003c/p\u003e\u003cp\u003eLook out for the case where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e is a zero vector.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/101/problem/D\" title\u003d\"Codeforces Beta Round 79 (Div. 1 Only)\"\u003e101D - Castle\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe main solution consists of two steps.\u003c/p\u003e\u003cp\u003eStep 1. Implement DFS from the root node \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, and during this process, we should compute several variables. \u003c/p\u003e\u003cp\u003echildnode[n]: the number of child nodes that node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e has;\u003c/p\u003e\u003cp\u003etotal_t[n]: the time consumed to visit all the child nodes of node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e while finally returning back to node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e;\u003c/p\u003e\u003cp\u003eStep 2. Implement BFS to calculate the required answer. However the order of visiting next nodes should be carefully optimized, which is more complicated than I thought... One can check the tutorials in \u003ca href\u003d\"//codeforces.com/blog/entry/2393\"\u003ehttp://codeforces.com/blog/entry/2393\u003c/a\u003e, and the necessary variables to determine the visiting order has been obtained in the DFS step.\u003c/p\u003e\u003c/div\u003e","tags":[]}}