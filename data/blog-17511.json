{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1429642484,"rating":7,"authorHandle":"P_Nyagolov","modificationTimeSeconds":1429642484,"id":17511,"title":"\u003cp\u003eImplementing Hungarian Algorithm\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello everybody,\u003c/p\u003e\u003cp\u003eA while ago I decided to learn about Hungarian algorithm. After watching some videos and reading some articles I think I got the main idea:\u003c/p\u003e\u003cp\u003e1) Find the minimum number in each row and subtract it from all elements in the row.\u003c/p\u003e\u003cp\u003e2) Find the minimum number in each column and subtract it from all elements in the column.\u003c/p\u003e\u003cp\u003e3) Cover all zeroes with minimum number of vertical and/or horizontal lines.\u003c/p\u003e\u003cp\u003e4) If the number of the lines is N, then we have found our assignment. Otherwise, find the minimum uncovered number, subtract it from all uncovered numbers and then go back to step 3.\u003c/p\u003e\u003cp\u003eWell, the thing is that I never found a good implementation. I can implement step 1 and 2. For step 3, I think that we can check whether the minimum number of lines is equal to N using bipartite matching. But if the minimum number is less than N, I don\u0027t know how I can find those covering lines. Please, help me with implementing it.\u003c/p\u003e\u003cp\u003eThanks in advance!\u003c/p\u003e\u003c/div\u003e","tags":["implementation","hungarian algorithm","help"]}}