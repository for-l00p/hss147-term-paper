{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1490707738,"rating":43,"authorHandle":"Errichto","modificationTimeSeconds":1490707982,"id":51275,"title":"\u003cp\u003eOnline Convex Hull — queries in C++ set\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi. I recently overcomplicated one easy-ish geometry problem and encountered the following difficulty.\u003c/p\u003e\u003cp\u003eLet\u0027s say I have a set of linear functions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003ci\u003eax\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and two types of online queries:\u003c/p\u003e \u003col\u003e   \u003cli\u003eGiven \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, insert a new linear function.\u003c/li\u003e   \u003cli\u003eGiven \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e, print the maximum value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e)\u003c/span\u003e.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eI can handle both queries in logarithmic time by using BST and maintaining the convex hull of linear functions. Can I do the same (easily?) using \u003ccode\u003eset\u003c/code\u003e in C++? The problem is that the second query requires \u003ccode\u003elower_bound\u003c/code\u003e that is able to say whether a linear function is on the left or on the right from the optimal one. I think it\u0027s impossible because it depends on the neighboring (after sorting CH by slope) functions.\u003c/p\u003e\u003cp\u003eDuring a contest, I implemented something in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e — a lower_bound that runs an internal lower_bound to find the next linear function in the set. Later I came up with an idea to extend a linear-function struct to also store a copy of the next function in the set. It requires some extra work but should work and should be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e)\u003c/span\u003e, right? Do you see any easier way?\u003c/p\u003e\u003c/div\u003e","tags":["convex hull","set","c++","online","queries"]}}