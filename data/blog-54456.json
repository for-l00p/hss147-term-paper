{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1505069175,"rating":1,"authorHandle":"1am","modificationTimeSeconds":1505164667,"id":54456,"title":"\u003cp\u003eDay 4 Contest Tutorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eContest Link: \u003ca href\u003d\"https://a2oj.com/contest?ID\u003d33431\"\u003ehttps://a2oj.com/contest?ID\u003d33431\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eEmail\u003c/h1\u003e\u003cp\u003eThrough observation, you will realize the length of the resulting string is always the sum of the two strings minus the longest common sub-sequence of both strings. This problem can be solved using dynamic programming, our two states are the index of the first string, and the index of the second string. \u003c/p\u003e\u003cp\u003eAfter we get the longest common sub-sequence, we create another dp array that gets us number of ways to get the LCS using the first dp array we made to find if more than one move leads to an optimal solution. \u003c/p\u003e\u003cp\u003eHere are two different implementations: \u003cbr /\u003e \u003ca href\u003d\"https://ideone.com/x2y3n6\"\u003ehttps://ideone.com/x2y3n6\u003c/a\u003e \u003cbr /\u003e \u003ca href\u003d\"https://ideone.com/Y5LZC3\"\u003ehttps://ideone.com/Y5LZC3\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eGarland\u003c/h1\u003e\u003cp\u003eRearrange the equation for H[i+1]. That way we can calculate the new height if I have the previous two. We have the starting height, binary search the second height. The smallest second height that doesn\u0027t make the lamps go below zero will result in the smallest answer. \u003c/p\u003e\u003cp\u003eHere is the code: \u003cbr /\u003e \u003ca href\u003d\"https://ideone.com/TWK8i6\"\u003ehttps://ideone.com/TWK8i6\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eBorya and Hanabi\u003c/h1\u003e\u003cp\u003e\u003cem\u003etaken from tutorial\u003c/em\u003e \u003cbr /\u003e It\u0027s obvious that the order of hints doesn\u0027t matter. There are 10 types of hints, so we can try all 210 variants of what other players should do. Now we need to check if Boris can describe all of his cards. He can do it iff he can distinguish all pairs of different cards. He can do it if somebody told at least one distinction. It can be a hint about color of one of cards (if they don\u0027t have same one) or it can be hint about value of some card.\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"https://ideone.com/R7Abmp\"\u003ehttps://ideone.com/R7Abmp\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eCactus\u003c/h1\u003e\u003cp\u003eChange every cycle to a node. Mark it as cycle. Now that cycles are now nodes, the resulting graph is a tree. Now for every query find the LCA and using cumulative sum you can find the number of cycles on the simple path between the two nodes in the tree. Through observation, you will realize the number of paths between the two nodes in the original cactus graph is 2 ^cycles on simple path in tree.\u003c/p\u003e\u003cp\u003eHere is short code: \u003ca href\u003d\"https://ideone.com/eVxsiI\"\u003ehttps://ideone.com/eVxsiI\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eBattleship\u003c/h1\u003e\u003cp\u003ewe discussed 2 ideas: \u003c/p\u003e\u003cp\u003e1-find the number of all possible locations for the ship for an empty grid, then for every ship find all the squares that our ship\u0027s head can\u0027t be placed in because of this ship and add the to a set(set\u0026lt;pair\u0026lt;int, int\u0026gt; \u0026gt;), one set if our ship is placed horizontally, and another one if it\u0027s placed vertically, the answer is the total ways minus the sizes of the two sets. \u003c/p\u003e\u003cp\u003e2-have an array of sets one for each row, then for every ship add all the squares that our ship can\u0027t be placed inside to the corresponding set, for example if one of the bad squares is (3, 5), then you do set[3].insert(5)\u003cbr /\u003enow for each set, let\u0027s see every two consecutive elements in it, let them be a and b, we add to the answer (b — a — 1 — k + 1)\u003cbr /\u003ewe do the same for each column.\u003c/p\u003e\u003cp\u003ecode: \u003ca href\u003d\"https://ideone.com/Xrwa6E\"\u003ehttps://ideone.com/Xrwa6E\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eExplosion in a Pyramid\u003c/h1\u003e\u003cp\u003ecode: \u003ca href\u003d\"https://ideone.com/fZe7gk\"\u003ehttps://ideone.com/fZe7gk\u003c/a\u003e\u003cbr /\u003eas you can see we first handle some corner cases, then for each face of the pyramid, we first take the cross product of any two vectors on that face(plane) called p in the code, then we make it\u0027s length equal to one, this resembles the planes vector.\u003cbr /\u003ethen we take the dot product between p and the vector that goes from us(the flying person) to a point on the plane, the dot product resembles the shortest distance from us to the plane.\u003cbr /\u003eread these if you are not very familiar with the dot and cross product.\u003cbr /\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Dot_product\"\u003ehttps://en.wikipedia.org/wiki/Dot_product\u003c/a\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Cross_product\"\u003ehttps://en.wikipedia.org/wiki/Cross_product\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eArmy of Mages\u003c/h1\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ethe problem is very nice, so think about it a few times before giving up. \u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eI\u0027m warning you, read it at your own risk. \u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003elet\u0027s play a game :)\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/XkdkaR\"\u003eyou win\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/XkdkaR\"\u003eyou win\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/XkdkaR\"\u003eyou win\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/XkdkaR\"\u003eyou win\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/XkdkaR\"\u003eyou win\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/XkdkaR\"\u003eyou win\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/XkdkaR\"\u003eyou win\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/ztAxmf\"\u003eyou win\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/XkdkaR\"\u003eyou win\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003ch1\u003eSpy\u003c/h1\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/CwreOf\"\u003ehttps://ideone.com/CwreOf\u003c/a\u003e\u003cbr /\u003esort the string, you can see that the first letter in our original string is the kth letter in the sorted string.\u003cbr /\u003enow if you look at the original place of this letter(before sorting), you will see that this place is the place of the original string after doing a single swap(abcde ----swap---\u0026gt; bcdea), so like the original string, to get the first letter of this string, let kk be that place, then the first letter is the kkth letter in the sorted string.\u003cbr /\u003enow look at the original place of this letter, that place is original string after doing 2 swaps, get the first letter in that string like we did for the two before and repeat.\u003c/p\u003e\u003c/div\u003e","tags":[]}}