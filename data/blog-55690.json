{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1510311086,"rating":0,"authorHandle":"TripleM5da","modificationTimeSeconds":1510347622,"id":55690,"title":"\u003cp\u003eMentor\u0027s Weekly Contest #4 Editorial Problems (E — F — G)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003ein this Editorial i will be discussing the the 3 hardest Problem (E-F-G). you might have all realized that this is a binary search contest you are more than welcome to share your thoughts about that here.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem E\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ethe Problem asks you what is the minimum radius of a Circle Such that we can put \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e points on it and the distance between point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e \u003d \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e so the main idea is to binary search on the radius and check that the sum of the center angles of all triangles made from point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and the center of the circle \u003cspan class\u003d\"tex-span\"\u003e ≤ \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e * \u003cspan class\u003d\"tex-span\"\u003eπ\u003c/span\u003e meaning that the sum of angles \u003cspan class\u003d\"tex-span\"\u003e ≤ \u003c/span\u003e that of the Circle.\u003c/p\u003e\u003cp\u003eafter that we check if this radius would actually work that is by checking that no \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is more than the diameter.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eImplementation\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e#include \u0026quot;bits/stdc++.h\u0026quot;  using namespace std;\u003c/p\u003e\u003cp\u003e#define eps 1e-15\u003c/p\u003e\u003cp\u003etypedef long double db;\u003c/p\u003e\u003cp\u003eint a[105], n;  const db PI \u003d acos(-1);\u003c/p\u003e\u003cp\u003edb calc(db radius){\u003c/p\u003e \u003cpre\u003edb ans \u003d 0;\n\nfor(int i \u003d 0; i \u0026lt; n; i++)\n  ans +\u003d asin( 1.0 * a[i] / 2 / radius);\n\nreturn ans;\u003c/pre\u003e\u003cp\u003e}\u003c/p\u003e\u003cp\u003ebool chk(db radius){\u003c/p\u003e \u003cpre\u003efor(int i \u003d 0; i \u0026lt; n; i++){\n\n  if(abs(a[i] - 2 * radius) \u0026lt;\u003d eps)\n    return 0;\n\n}\n\nreturn 1;\u003c/pre\u003e\u003cp\u003e}\u003c/p\u003e\u003cp\u003eint main(){\u003c/p\u003e \u003cpre\u003ecin \u0026gt;\u0026gt; n;\n\nfor(int i \u003d 0; i \u0026lt; n; cin \u0026gt;\u0026gt; a[i++]);\n\ndb lo \u003d 0, hi \u003d 1e9;\n\nfor(int j \u003d 0; j \u0026lt; 500; j++){\n  db md \u003d (lo + hi) / 2;\n\n  if(calc(md) \u0026lt; PI - eps)\n    hi \u003d md;\n  else\n    lo \u003d md;\n\n}\n\nif(!chk(lo))\n  return puts(\u0026quot;-1\u0026quot;);\n\ncout \u0026lt;\u0026lt; fixed \u0026lt;\u0026lt; setprecision(20) \u0026lt;\u0026lt; lo \u0026lt;\u0026lt; \u0027\\n\u0027;\n\n\nreturn 0;\u003c/pre\u003e\u003cp\u003e}\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003ewith Complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eNlog\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e))\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e is the Maximum radius.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem F\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ewhat you wouldn\u0027t expect is that this is just a typical Dynamic Programming Problem with a state of\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eMASK\u003c/i\u003e][\u003ci\u003einversions\u003c/i\u003e][\u003ci\u003efixed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003epoints\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e we can find the current index by calculating the number of ones in the mask.\u003c/p\u003e\u003cp\u003eand loop over all non-used numbers from 1 to n and try putting number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e at the current state then lets declare \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e as the number of 1\u0027s in the mask more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eso add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eMASK\u003c/i\u003e][\u003ci\u003ecur\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003einv\u003c/i\u003e\u003c/sub\u003e][\u003ci\u003ecur\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003efix\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eMask\u003c/i\u003e|2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e][\u003ci\u003ecur\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003einv\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ecnt\u003c/i\u003e][\u003ci\u003ecur\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003efix\u003c/i\u003e\u003c/sub\u003e + (\u003ci\u003ei\u003c/i\u003e \u003d  \u003d \u003ci\u003eindex\u003c/i\u003e)]\u003c/span\u003e .\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eImplementation\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e#include \u0026quot;bits/stdc++.h\u0026quot;\u003c/p\u003e\u003cp\u003eusing namespace std;\u003c/p\u003e\u003cp\u003etypedef long long ll;  int n, m, k;  ll dp[(1 \u0026lt;\u0026lt; 14)][105][15];  ll solve(int msk, int inv, int fix){\u003c/p\u003e \u003cpre\u003eif(msk \u003d\u003d (1 \u0026lt;\u0026lt; n) - 1)\n      return ((inv \u003d\u003d m) \u0026amp;\u0026amp; (fix \u003d\u003d k));\n  ll \u0026amp;ret \u003d dp[msk][inv][fix];\n  if(~ret)\n      return ret;\n  ret \u003d 0;\n  int cnt \u003d  __builtin_popcount(msk);\n  int pos \u003d cnt;\n  for(int i \u003d 0; i \u0026lt; n; i++){\n\n      if((msk \u0026amp; (1 \u0026lt;\u0026lt; i)))cnt--;\n      else\n          ret +\u003d solve(msk | (1 \u0026lt;\u0026lt; i), inv + (cnt), fix + (pos \u003d\u003d i));\n\n  }\n  return ret;\u003c/pre\u003e\u003cp\u003e}\u003c/p\u003e\u003cp\u003eint main(){\u003c/p\u003e \u003cpre\u003escanf(\u0026quot;%d%d%d\u0026quot;, \u0026amp;n, \u0026amp;m, \u0026amp;k);\n  memset(dp, -1, sizeof dp);\n  cout \u0026lt;\u0026lt; solve(0, 0, 0) \u0026lt;\u0026lt; \u0027\\n\u0027;\u003c/pre\u003e\u003cp\u003e}\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003ewith a complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e * 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e * \u003ci\u003eM\u003c/i\u003e * \u003ci\u003eK\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem G\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ethe problem is for short you order all numbers from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e according to theirs sum of digits and if two numbers have the same sum of digits order them according to their value now you need to find the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e-th number and the position of Number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e now lets define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e as the count of numbers with sum of digits \u003cspan class\u003d\"tex-span\"\u003e ≤ \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e so we can binary search the sum of digits of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e-th number and calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e using dp after that we need to define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e2(\u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e which is the count of number with sum of digits digits \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e with value \u003cspan class\u003d\"tex-span\"\u003e ≤ \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e which can be implement using dp this is Solution for the first Problem try to handle the second problem it\u0027s not so far from this one.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eImplementation for both\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e#include \u0026quot;bits/stdc++.h\u0026quot;\nusing namespace std;\n\ntypedef long long ll;\n\nll N, K;\nstring S;\n\nll get_sum(ll x){\n\n    ll ret \u003d 0;\n\n    while(x){\n        ret +\u003d (x%10);\n        x/\u003d10;\n    }\n    return ret;\n}\nll dp[20][205][2];\nstring S2;\n\nll solve1(int idx, int limit, bool f){\n    if(limit \u0026lt; 0)\n        return 0;\n    if(idx \u003d\u003d 20)return 1;\n\n    ll \u0026amp;ret \u003d dp[idx][limit][f];\n\n    if(~ret)\n        return ret;\n\n    ret \u003d 0;\n\n    for(int i \u003d 0; i \u0026lt;\u003d (f? 9: (S2[idx] - \u00270\u0027)); i++){\n        ret +\u003d solve1(idx+1, limit - i, f | (i \u0026lt; (S2[idx] - \u00270\u0027)));\n    }\n\n    return ret;\n}\nll solve2(int idx, int limit, bool f){\n    if(limit \u0026lt; 0)\n        return 0;\n    if(idx \u003d\u003d 20)return limit \u003d\u003d 0;\n\n    ll \u0026amp;ret \u003d dp[idx][limit][f];\n\n    if(~ret)\n        return ret;\n\n    ret \u003d 0;\n\n    for(int i \u003d 0; i \u0026lt;\u003d (f? 9: (S2[idx] - \u00270\u0027)); i++){\n        ret +\u003d solve2(idx+1, limit - i, f | (i \u0026lt; (S2[idx] - \u00270\u0027)));\n    }\n\n    return ret;\n}\n\nstring con(ll x){\n    stringstream ss;\n    ss \u0026lt;\u0026lt; x;\n    S \u003d (ss.str());\n    while(S.size() \u0026lt; 20)S \u003d \u0026quot;0\u0026quot; + S;\n    return S;\n}\n\nint main(){\n\n\n    cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; K;\n\n    S2 \u003d con(N);\n\n    memset(dp, -1, sizeof dp);\n\n    ll b4 \u003d solve1(0, get_sum(K)-1, 0)-1;\n\n    S2 \u003d con(K);\n\n    memset(dp, -1, sizeof dp);\n\n    cout \u0026lt;\u0026lt; b4 + solve2(0, get_sum(K), 0) \u0026lt;\u0026lt; \u0027 \u0027;\n\n    memset(dp, -1, sizeof dp);\n\n    ll lo \u003d 0, hi \u003d 20 * 9;\n\n    S2 \u003d con(N);\n\n    while(lo \u0026lt; hi){\n\n        ll md \u003d lo + (hi - lo)/2;\n\n        if(solve1(0, md, 0) - 1 \u0026gt;\u003d K)\n            hi \u003d md;\n        else\n            lo \u003d md + 1;\n\n\n    }\n\n\n    K -\u003d (solve1(0, (lo-1), 0) - 1);\n\n\n    ll sum \u003d lo;\n\n    lo \u003d 1, hi \u003d N;\n\n    while(lo \u0026lt; hi){\n\n\n        memset(dp, -1, sizeof dp);\n\n        ll md \u003d lo + (hi - lo)/2;\n\n        S2 \u003d con(md);\n\n        if(solve2(0, sum, 0) \u0026gt;\u003d K)\n            hi \u003d md;\n        else\n            lo \u003d md + 1;\n\n\n    }\n\n    cout \u0026lt;\u0026lt; lo \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;;\n\n\n    return 0;\n}\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}