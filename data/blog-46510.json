{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1470943878,"rating":37,"authorHandle":"NBAH","modificationTimeSeconds":1471000210,"id":46510,"title":"\u003cp\u003eCodeforces Round #367 (Editorial)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003cstrong\u003eA\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eWe know that time\u003ddistance/speed. For each car we should find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etime\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, than if it is less than answer we should update it.\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cstrong\u003eO(n)\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastie.org/10935013\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003cstrong\u003eB\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eConsider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e the number of stores in which the price per drink is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. We calculate this array prefix sum. Then the following options:\u003c/p\u003e\u003cp\u003e1) If the current amount of money \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e is larger than the size of the array with the prefix sums than answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e2) Otherwise, the answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e[\u003ci\u003em\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cstrong\u003eO(n+q)\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastie.org/10935012\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003cstrong\u003eC\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eWe will solve the problem with the help of dynamic programming. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e is the minimum amount of energy that should be spent to make first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e strings sorted in lexicographical order and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th of them will be reversed if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e \u003d 1 and not reversed if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e \u003d 0. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e is updated by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][0]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][1]\u003c/span\u003e. It remains to verify that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th string is lexicographically greater than \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - 1)\u003c/span\u003e-th (if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e \u003d 1 then we should check reversed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th string, similar to \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - 1)\u003c/span\u003e-th). Then we update \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e \u003d min(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][0]\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e * \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e), \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e \u003d min(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][1]\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e * \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e). The answer is a minimum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][0]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][1]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cstrong\u003eO(n+sum_length)\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastie.org/10935014\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003cstrong\u003eD\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eLet\u0027s store each number in binary system (each number consists of 32 bits, 0 or 1) in such a data structure as trie.The edges will be the bits 1 and 0, and the vertices will be responsible for whether it is possible to pass the current edge. To reply to a query like \u0026quot;? X\u0026quot; will descend the forest of high-order bits to whether the younger and now we can look XOR in the i-th bit to get one, if we can, then move on, otherwise we go to where we can go.\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cstrong\u003eO(q*log(10^9))\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastie.org/10935015\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003cstrong\u003eE\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eLet\u0027s surround the matrix with the frame of elements. In each element of the matrix, and frame we need to store value, the number of the right element and the number of down element. When a request comes we should change only values of the elements along the perimeter of rectangles.\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cstrong\u003eO(q*(n+m))\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastie.org/10935016\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}