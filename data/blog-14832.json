{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1416751231,"rating":25,"authorHandle":"taorunz","modificationTimeSeconds":1417141951,"id":14832,"title":"\u003cp\u003eCodeforces Round #278 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/488/problem/A\" title\u003d\"Codeforces Round 278 (Div. 2)\"\u003e488A - Giga Tower\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThe answer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is very small (usually no larger than \u003cspan class\u003d\"tex-span\"\u003e10\u003c/span\u003e), because one of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + 1, \u003ci\u003ea\u003c/i\u003e + 2, ..., \u003ci\u003ea\u003c/i\u003e + 10\u003c/span\u003e has its last digit be \u003cspan class\u003d\"tex-span\"\u003e8\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eHowever, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e can exceed \u003cspan class\u003d\"tex-span\"\u003e10\u003c/span\u003e when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is negative and close to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. The worst case is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d  - 8\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d 16\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAnyway \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is rather small, so we can simply try \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, and check whether \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e has a digit 8.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/488/problem/B\" title\u003d\"Codeforces Round 278 (Div. 2)\"\u003e488B - Candy Boxes\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eLet\u0027s sort the four numbers in ascending order: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e, \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e (where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e\u003c/span\u003e are used in problem statement). So \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6a/82/6a8240d197e1139a1011289847c0329a03481228.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eWith some basic math, we can get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e: \u003ci\u003ed\u003c/i\u003e \u003d 1: 3\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003ed\u003c/i\u003e \u003d \u003ci\u003eb\u003c/i\u003e + \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution 1:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 0\u003c/span\u003e, just output any answer (such as \u003cspan class\u003d\"tex-span\"\u003e{1, 1, 3, 3}\u003c/span\u003e). If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e, just output \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e, 3\u003ci\u003ex\u003c/i\u003e, 3\u003ci\u003ex\u003c/i\u003e}\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is the known number. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 4\u003c/span\u003e, just check whether the four known numbers meet the condition.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 2\u003c/span\u003e, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e denote the known numbers (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e ≤ \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e). No solution exists if \u003cspan class\u003d\"tex-span\"\u003e3\u003ci\u003ex\u003c/i\u003e \u0026lt; \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. Otherwise we can construct a solution \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, 4\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e, 3\u003ci\u003ex\u003c/i\u003e}\u003c/span\u003e (certainly other solutions may exist).\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 3\u003c/span\u003e, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, \u003ci\u003ez\u003c/i\u003e\u003c/span\u003e denote the known numbers (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e ≤ \u003ci\u003ey\u003c/i\u003e ≤ \u003ci\u003ez\u003c/i\u003e\u003c/span\u003e). No solution exists if \u003cspan class\u003d\"tex-span\"\u003e3\u003ci\u003ex\u003c/i\u003e \u0026lt; \u003ci\u003ez\u003c/i\u003e\u003c/span\u003e. Otherwise the solution can only be \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, \u003ci\u003ez\u003c/i\u003e, 3\u003ci\u003ex\u003c/i\u003e}\u003c/span\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/19/0c/190cf7004843c1aa06163f27926cae1d535eac44.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e or \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e + \u003ci\u003ez\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e, \u003ci\u003ez\u003c/i\u003e}\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution 2:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe known numbers are no larger than \u003cspan class\u003d\"tex-span\"\u003e500\u003c/span\u003e, so all numbers are no larger than \u003cspan class\u003d\"tex-span\"\u003e1500\u003c/span\u003e if solution exists. We enumerate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e500\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e3\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, 4\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e, 3\u003ci\u003ex\u003c/i\u003e}\u003c/span\u003e is a solution. For each solution, check if it matches the known numbers.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution 3:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 0\u003c/span\u003e, just output any answer (such as \u003cspan class\u003d\"tex-span\"\u003e{1, 1, 3, 3}\u003c/span\u003e). If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e, just output \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e, 3\u003ci\u003ex\u003c/i\u003e, 3\u003ci\u003ex\u003c/i\u003e}\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is the known number. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 4\u003c/span\u003e, just check whether the four known numbers meet the condition.\u003c/p\u003e\u003cp\u003eOtherwise, we can enumerate the \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e missing number(s), and check if the four numbers meet the condition.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/487/problem/A\" title\u003d\"Codeforces Round 278 (Div. 1)\"\u003e487A - Fight the Monster\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIt is no use to make Yang\u0027s ATK \u0026gt; HP_M + DEF_M (Yang already can beat it in a second). And it\u0027s no use to make Yang\u0027s DEF \u0026gt; ATK_M (it cannot deal any damage to him).\u003c/p\u003e\u003cp\u003eAs a result, Yang\u0027s final ATK will not exceed \u003cspan class\u003d\"tex-span\"\u003e200\u003c/span\u003e, and final DEF will not exceed \u003cspan class\u003d\"tex-span\"\u003e100\u003c/span\u003e. So just enumerate final ATK from ATK_Y to \u003cspan class\u003d\"tex-span\"\u003e200\u003c/span\u003e, final DEF from DEF_Y to \u003cspan class\u003d\"tex-span\"\u003e100\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWith final ATK and DEF known, you can calculate how long the battle will last, then calculate HP loss. You can easily find the gold you spend, and then find the optimal answer.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/487/problem/B\" title\u003d\"Codeforces Round 278 (Div. 1)\"\u003e487B - Strip\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eWe can use dynamic programming to solve this problem.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e denote the minimal number of pieces that the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e numbers can be split into. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e denote the maximal length of substrip whose right border is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e(included) and it satisfy the condition.\u003c/p\u003e\u003cp\u003eThen \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003emin\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e]) + 1\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003eg\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] ≤ \u003ci\u003ek\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWe can use monotonic queue to calculate g[i] and f[i]. And this can be implemented in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003eWe can also use sparse table or segment tree to solve the problem, the time complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e or \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ca/4c/ca4c38da7d143fc87534d50aa6d551dd861caae9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e(It should be well-implemented).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eFor more details about monotonic queue, you can see \u003ca href\u003d\"http://people.cs.uct.ac.za/~ksmith/articles/sliding_window_minimum.html\"\u003ehere\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/487/problem/C\" title\u003d\"Codeforces Round 278 (Div. 1)\"\u003e487C - Prefix Product Sequence\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThe answer is YES if and only if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is a prime or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 4\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFirst we can find \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7a/5d/7a5d93593588482c39eb699ed867e4771815d773.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e occurs in {a_1,…,a_{n-1}} in the prefix product sequence \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e will occur twice which do not satisfy the condition. \u003c/p\u003e\u003cp\u003eSo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e must be \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e from which we know \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e... \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/sub\u003e \u003d (\u003ci\u003en\u003c/i\u003e - 1)!\u003c/span\u003e. But for any composite number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026gt; 4\u003c/span\u003e we have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bf/74/bf74f8a026767cd951c6b6d6fbfdcf104dc8b3f8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e(See the proof below). So we can know that for all composite number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026gt; 4\u003c/span\u003e the answer is NO.\u003c/p\u003e\u003cp\u003eFor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e is a solution.\u003c/p\u003e\u003cp\u003eFor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 4\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e1, 3, 2, 4\u003c/span\u003e is a solution.\u003c/p\u003e\u003cp\u003eFor any prime number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e3/a5/e3a511bf53a9d1ef670b0700442968adc11bbc29.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. If there are two same number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Then we get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e / (\u003ci\u003ei\u003c/i\u003e - 1) ≡ \u003ci\u003ej\u003c/i\u003e / (\u003ci\u003ej\u003c/i\u003e - 1)\u003c/span\u003e which leads to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≡ \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, which is a contradiction. So all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e numbers will occur exactly once. And this is a solution.\u003c/p\u003e\u003cp\u003eAlso, we can find a primitive root \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and $g^{0}, g^{1}, g^{n-3}, g^{3}, g^{n-5}, \\cdots } is also a solution.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProof:\u003c/strong\u003e \u003c/p\u003e\u003cp\u003eFor a composite number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026gt; 4\u003c/span\u003e it can either be written as the products of two numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e \u0026gt; 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e ≠ \u003ci\u003eq\u003c/i\u003e\u003c/span\u003e, then we immediately get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epq\u003c/i\u003e|(\u003ci\u003en\u003c/i\u003e - 1)!\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u003ci\u003eq\u003c/i\u003e\u003c/span\u003e, note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026gt; 4\u003c/span\u003e so \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ep\u003c/i\u003e \u0026lt; \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e|(\u003ci\u003en\u003c/i\u003e - 1)!\u003c/span\u003e\u003c/p\u003e\u003cp\u003eSo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e|(\u003ci\u003en\u003c/i\u003e - 1)!\u003c/span\u003e always holds which means \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5f/97/5f97c36723ae1b864a600247696eac3870810cdc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/487/problem/D\" title\u003d\"Codeforces Round 278 (Div. 1)\"\u003e487D - Conveyor Belts\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThis problem can be solved by classic data structures.\u003c/p\u003e\u003cp\u003eFor example, let\u0027s try something like SQRT-decomposition. Let\u0027s divide the map horizontally into some blocks. For each grid, calculate its destination when going out the current block (or infinite loop before going out current block).\u003c/p\u003e\u003cp\u003eFor each modification, recalculate the affected block by brute force. For each query, we can just use the \u0026quot;destination when going out the current block\u0026quot; to speed up simulation.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e be the size of a block, then the time for each modification is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e)\u003c/span\u003e, for each query is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enm\u003c/i\u003e / \u003ci\u003eS\u003c/i\u003e)\u003c/span\u003e, since at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enm\u003c/i\u003e / \u003ci\u003eS\u003c/i\u003e)\u003c/span\u003e blocks, and at most \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e grid of each block are visited.\u003c/p\u003e\u003cp\u003eThe total time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enm\u003c/i\u003e + \u003ci\u003eqnm\u003c/i\u003e / \u003ci\u003eS\u003c/i\u003e + \u003ci\u003epS\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e is the number of modifications. Let \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3c/78/3c78d729ff7b82d5e9c34a56396dc43eff792ef9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, the complexity can be the best: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/49/b8/49b8d1b48272230dcc10cfad07cab1098ecdb6c2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eThis task can also be solve by segment tree. The time complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a7/93/a7932a5fa1c3b7f370df55ca102952f5549fe18a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, or \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9c/4a/9c4a3644158cce3a0d6d14e64ea8f5d203991b00.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, depending on implementation.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/487/problem/E\" title\u003d\"Codeforces Round 278 (Div. 1)\"\u003e487E - Tourists\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eFirst we can find out all cut vertices and biconnected components(BCC) by Tarjan’s Algorithm. And it must form a tree.\u003c/p\u003e\u003cp\u003eFrom the lemma below, we know that if we can pass by a BCC, then we can always pass any point in the BCC.\u003c/p\u003e\u003cp\u003eWe use a priority queue for each BCC to maintain the minimal price in the component.\u003c/p\u003e\u003cp\u003eFor each modification, if the vertex is a cut vertex, then modify itself and its related BCCs’ priority queue. If not, modify the priority queue of its BCC.\u003c/p\u003e\u003cp\u003eFor each query, the answer is the minimal price on the path from x (or its BCC) to y (or its BCC). We can use Link-Cut Trees or Heavy-Light Decomposition with Segment Trees.\u003c/p\u003e\u003cp\u003eTo be more exact, we can only modify the father BCC of the cut vertex in order to guarantee complexity(otherwise it would be hacked by a star graph).When querying, if the LCA of x and y is a BCC. Then the father of the LCA(which is a cut vertex related to the BCC) should also be taken into account.\u003c/p\u003e\u003cp\u003eThe time complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c8/cf/c8cfb6755b3f7a72e431ab280020b2050c21e1ff.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e or \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ee/1f/ee1f3a45c6d3aaa15d91d84f23a466e08c069e9c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLemma:\u003c/strong\u003e In a biconnected graph with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≥ 3\u003c/span\u003e points, for any three different vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, there is a simple path to from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e going through \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProof:\u003c/strong\u003e Consider a biconnected graph with at least 3 vertices. If we remove any vertex or any edge, the graph is still connected.\u003c/p\u003e\u003cp\u003eWe build a network on the graph. Let\u0027s use (u,v,w) to describe a directed edge from u to v with capacity w. For each edge (u,v) of the original graph, we build (u,v,1) and (v,u,1). Build (S,c,2), (a,T,1) and (b,T,1). For each vertex other than S,T,c, we should give a capacity of 1 to the vertex.\u003c/p\u003e\u003cp\u003eIn order to give capacity to vertex u, we build two vertices u1,u2 instead of u. For each (v,u,w), build (v,u1,w). For each (u,v,w), build(u2,v,w). Finally build (u1,u2,1).\u003c/p\u003e\u003cp\u003eHence, if the maximal flow from S to T is 2, there is a simple path from a to b going through c.\u003c/p\u003e\u003cp\u003eNow we consider the minimal cut of the network. It is easy to find that minimal cut \u0026lt;\u003d 2, so let\u0027s prove minimal cut \u0026gt; 1, which means, no matter which edge of capacity 1 we cut, there is still a path from S to T.\u003c/p\u003e\u003cp\u003eIf we cut an edge like (u1,u2,1), it is equivalent to set the capacity of the vertex to 0, and equivalent to remove the vertex from the original graph. The graph is still connected, so there is still a path in the network.\u003c/p\u003e\u003cp\u003eIf we cut other edges, it is equivalent to remove an edge from the original graph. It is still connected, too.\u003c/p\u003e\u003cp\u003eNow we have minimal cut \u0026gt; 1, which means maximal flow \u003d minimal cut \u003d 2. So there is always a simple path from a to b going through c.\u003c/p\u003e\u003c/div\u003e","tags":["codeforces","editorial","round #278"]}}