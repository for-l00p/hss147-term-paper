{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1485456745,"rating":-22,"authorHandle":"asayush67","modificationTimeSeconds":1485456745,"id":50034,"title":"\u003cp\u003eData Structure-Queue\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eQ.)You are given a string. Take the first character of the string and put it at the end of the string.\u003c/p\u003e\u003cp\u003eFind out what the string will be after N\u003c/p\u003e\u003cp\u003esteps.\u003c/p\u003e\u003cp\u003eThe string can be considered as a queue. At each step, dequeue the character from the front and enqueue it at the end. Repeat this process N times. \u003c/p\u003e\u003cp\u003ecode:\u003c/p\u003e\u003ch1\u003einclude\u003c/h1\u003e\u003cp\u003eusing namespace std;  int array_size\u003d20; void enqueue(char queue[],char element,int\u0026amp; rear,int array_size){  if(rear\u003d\u003darray_size)  cout\u0026lt;\u0026lt;\u0026quot;overflow\u0026quot;\u0026lt;\u0026lt;endl;  else{\u003c/p\u003e \u003cpre\u003equeue[rear]\u003delement;\n    rear++;\n }\u003c/pre\u003e\u003cp\u003e} void dequeue(char queue[],int\u0026amp; front,int rear){  if(front\u003d\u003drear)  cout\u0026lt;\u0026lt;\u0026quot;underflow\u0026quot;\u0026lt;\u0026lt;endl;  else{  queue[front]\u003d0;  front++;\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e}\u003c/p\u003e\u003cp\u003echar front1(char queue[],int front){  return queue[front]; }\u003c/p\u003e\u003cp\u003eint main(){  int front\u003d0;  string s;  cin\u0026gt;\u0026gt;s; \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint rear\u003ds.length();\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eint i;  char queue[20];  for(i\u003d0;i\u0026lt;s.length();i++){  queue[i]\u003ds[i];  }\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint n\u003d3;\nchar ch;\n\nfor(i\u003d0;i\u0026lt;n;i++){\n    ch\u003dfront1(queue,front);\n\n    enqueue(queue,ch,rear,array_size);\n    dequeue(queue,rear,front);\n}\nfor(i\u003dfront;i\u0026lt;rear;i++){\n    cout\u0026lt;\u0026lt;queue[i];\n}\n\nreturn 0;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e}\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u0026quot;ch\u0026quot; always takes \u0027a\u0027 as input all 3 times when the loop runs \u0026amp; always adds \u0027a\u0027 to the rear position of the queue \u0026amp; never deletes the element at front position.\u003c/strong\u003e \u003cstrong\u003eWhats wrong in the code.\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}