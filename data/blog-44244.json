{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1460065936,"rating":5,"authorHandle":"MedoN11","modificationTimeSeconds":1460065936,"id":44244,"title":"\u003cp\u003eFind the Shortest cycle for each vertex in a graph?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello CodeForces!\u003c/p\u003e\u003cp\u003eRecently, I was participating in a gym contest, and came across a very interesting graph problem. \u003c/p\u003e\u003cp\u003eFor each vertice of given undirected weighted graph calculate the length of shortest simple cycle, which contains this vertice.\u003c/p\u003e\u003cp\u003eThe graph does not contain self loops or multiple edges.\u003c/p\u003e\u003cp\u003eHere it is : \u003ca href\u003d\"//codeforces.com/problemset/gymProblem/100917/F\"\u003ehttp://codeforces.com/problemset/gymProblem/100917/F\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAfter the contest, I did some googling, but I can only find re-search papers discussing very complex algorithms, I\u0027m pretty sure the author did not intend these solutions.\u003c/p\u003e\u003cp\u003eMy solution is as follows :\u003c/p\u003e\u003cp\u003eLet\u0027s say edge e connect vertices u and v. Remove edge e from the graph, then re-run dijikstra from u to v. If there exists a path, then there exists a simple cycle containing both u, and v.\u003c/p\u003e\u003cp\u003eRepeat for each edge, and minimise over the shortest cycle for each node.\u003c/p\u003e\u003cp\u003eThe idea really makes sense, and the problem is the time limit verdict, how can I solve this problem more efficiently?\u003c/p\u003e\u003cp\u003ePlease keep in mind that the graph is un-directed, ( the problem becomes easier in-case it is directed )\u003c/p\u003e\u003c/div\u003e","tags":[]}}