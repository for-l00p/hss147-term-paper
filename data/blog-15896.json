{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1421695110,"rating":-3,"authorHandle":"rlac","modificationTimeSeconds":1421781656,"id":15896,"title":"\u003cp\u003eEffective strategy for participating in programming contests\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eIn this post I will share with you a way in which you can start developing your programming skills. I\u0027ll start by narrate you my own history.\u003c/p\u003e\u003cp\u003eWhen I start showing some interest for programming contests, I began to learn to many algorithms. I read many algorithms books, specially about strings, and at the same time I learn to code in C++. I spent about one year following this strategy. After a year, the ACM-ICPC local contest started in my university. One of the problems could be solved using a simple implementation of a binary indexed tree, but I waste about 2 hours trying to implement it. As a result, my team can\u0027t advance to the national contest.\u003c/p\u003e\u003cp\u003eBy this time I found codeforces, and, for my surprise, I finished at place 469 in my first contest here. I could not believe it. How come that with all my knowledge, I finished in such a place in a second division contest? In my second contest my final rating was quite different, I finished at 79th place, but mainly due to problem D was a direct application of a standard algorithm, the z-function. After that, my rating went down again.\u003c/p\u003e\u003cp\u003eWhat was my real situation by that time? Let\u0027s see. My main problem was that I was to slow for coding a solution for a problem that I knew how to solve. On the other hand, I tried to take any new problem and put it in the same category of some problem that I knew how to solve, and then apply the same solution to the new problem. For example, when I saw a dynamic programming problem, I compared it with the LIS, LCS, Matrix chain multiplication, Backpack, etc, and if it matched with some of them, then I was able to solve the problem. If the problem did not match any of them, then I considered it as a \u0026quot;hard\u0026quot; dynamic programming problem, and could not solve it. Other problem that affects me, it was that I don\u0027t considered problem input constraints, so, for me there was not any difference if the input was 20 numbers or if the input was about 1000000 numbers. Of course, this last issue is a big problem because the input size determinate an important part of a problem statement.\u003c/p\u003e\u003cp\u003eIn order to solve the above difficulties, I started to solve easy problems from codeforces. For that, I sorted the problems tagged as \u0026quot;implementation\u0026quot;, and solve them in increasing level of difficulty. At first, I got stuck even in Div 2 A problems, mainly due to ignoring input sizes. I was very surprised seeing how too many users could solve a problem in about 3 minutes and I can\u0027t solve it. After I had solved a problem, I checked the solutions of other contestants, and I learn a lot from them, sorting the solutions mainly following two criteria, solution size and submission time (no submission execution time). My point was that a good solution sometimes is a short solution, and a classic solution to a problem sometimes is submitted early. In this way, I improve a lot and learned a great number of implementation tricks.\u003c/p\u003e\u003cp\u003eAbout all my theoretical knowledge, I can say that the main advantage that it brings to me, is that it get me a great confidence when I will go to solve a problem, since I can say almost for sure that I have the base for solving that problem, but the practice show me that most times I can solve the problems without the theoretical base. I think that a great skill is to be able to code a solution quickly once you know how to solve a problem, and simple programming skills like hashing, sqrt decomposition, etc, will be enough for solving a great number of problems.\u003c/p\u003e\u003cp\u003eA great post that talks about what I have learned by myself, can be found \u003ca href\u003d\"//codeforces.com/blog/entry/7028\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eSo, a successful way for begin competing in programming, is to learn your programming language(s) very well, and training your coding skills abilities solving easy problems. Of course, in some moment you need to solve more hard problems too, but the key for implementing these hard problems is solving the easy ones.\u003c/p\u003e\u003cp\u003eAbout the theory, I suggest you to learn it by the way. Of course, there are some basics that you should know, but apart that, learn it by the way. If you try to solve a problem, and you can\u0027t solve it because you haven\u0027t the required knowledge, then go and learn this specific topic, try to understand it very well, and solve the problem. In this way you will avoid to waste time learning some stuff that you will never use in real programming contests.\u003c/p\u003e\u003c/div\u003e","tags":["beginner","guide"]}}