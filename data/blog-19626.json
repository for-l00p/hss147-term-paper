{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1438901305,"rating":17,"authorHandle":"snsokolov","modificationTimeSeconds":1438905071,"id":19626,"title":"\u003cp\u003eModulo based hacking\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eFor the problem \u003ca href\u003d\"/contest/567/problem/E\" title\u003d\"Codeforces Round Pi (Div. 2)\"\u003e567E - Президент и дороги\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI think I finally got the idea what is the \u0026quot;modulo based hacking\u0026quot; is about (thread \u003ca href\u003d\"//codeforces.com/blog/entry/19590?#comment-244040\"\u003ehttp://codeforces.com/blog/entry/19590?#comment-244040\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eWhen counting number of ways in a graph within the given ranges we can easily get out of bounds of long long data type. Therefore we need some way to be able to count and compare numbers larger than ll. Ideally we need a full stack BigInt support, but what if we can find something simpler than that. The naive approach here is to pick some large prime number M and perform all operations modulo M. Unfortunately this approach is not working for all possible inputs and leads to collisions, since the two different numbers may still match and the solution can be exploited — i.e. modulo based hacking.\u003c/p\u003e\u003cp\u003eHere is the list of less exploitable approaches:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eUse \u0026quot;Modulo Hash\u0026quot; — i.e. use more than 1 large prime number when counting and compare numbers. Match is when all modulus are equal. see \u003ca href\u003d\"/contest/567/submission/12361537\" title\u003d\"Посылка 12361537 от prof.PVH\"\u003e12361537\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eUse random prime number each time, so hacker doesn\u0027t know it ahead of time, see \u003ca href\u003d\"/contest/567/submission/12362068\" title\u003d\"Посылка 12362068 от niyaznigmatul\"\u003e12362068\u003c/a\u003e ^)))\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003c/div\u003e","tags":["modular arithmetic","modulus"]}}