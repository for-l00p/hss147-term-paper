{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1467318774,"rating":58,"authorHandle":"ifsmirnov","modificationTimeSeconds":1467318874,"id":45804,"title":"\u003cp\u003eYet another weird g++ warning\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eTake a look at this snippet.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nvoid f(int x, int y) {\n    if (x \u0026gt; y) swap(x, y);\n    printf(\u0026quot;%d %d\\n\u0026quot;, x, y);\n}\n\nvoid caller1(int i) {\n    f(i-1, i);\n}\n\nvoid caller2(int i) {\n    f(i+1, i);\n}\n\nint main() {\n    caller1(1);\n    caller2(1);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHave you noticed something strange? Or maybe redundant? Neither did I. But g++ did:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ g++-4.8 -Wall -O2 a.cpp \na.cpp: In function ‘void caller1(int)’:\na.cpp:5:5: warning: assuming signed overflow does not occur when assuming that (X - c) \u0026gt; X is always false [-Wstrict-overflow]\n     if (x \u0026gt; y) swap(x, y);\n     ^\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWait, what the hell? This if is used not only in caller1 but also in caller2, and in both cases the flow continues to the different branch. It seems that the optimizer examines only caller1 and doesn\u0027t even think that there could be some other users of that \u0026quot;redundant\u0026quot; line of code.\u003c/p\u003e\u003cp\u003eWhat is more strange, this error does not reproduce if only caller2 is present (in that case if condition always evaluates to true).\u003c/p\u003e\u003cp\u003eHopefully, optimizer doesn\u0027t completely cut out the body of the conditional and the code works as expected albeit the warning is shown.\u003c/p\u003e\u003cp\u003eThe bug reproduces with all g++ versions I have up to 5.0 and doesn\u0027t reproduce with clang of any version.\u003c/p\u003e\u003c/div\u003e","tags":["bug","g++"]}}