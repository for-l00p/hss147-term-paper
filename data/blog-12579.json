{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1402040989,"rating":16,"authorHandle":"Enchom","modificationTimeSeconds":1402040989,"id":12579,"title":"\u003cp\u003eHeavy-light decomposition\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello everybody,\u003c/p\u003e\u003cp\u003eRecently I was solving a problem with queries on a tree and I stumbled upon Heavy-Light Decomposition. I read \u003ca href\u003d\"http://wcipeg.com/wiki/Heavy-light_decomposition\"\u003ethis\u003c/a\u003e article and understood the concept, then coded the solution itself. However, I noticed that for the proposed problem in the article â€” Dynamic distance query, they say it could be solved in O(logn) per query, while I can\u0027t see how to improve the O(log^2) bound. The article says\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u0026quot;It might seem that we have to ascend logarithmically many heavy paths each of which takes logarithmic time, but this is not the case; only the first one, if we start out on it, has to take logarithmic time to query; for the others, which we skip over in their entirety, we can just look up a variable indicating the sum of all weights on that path\u0026quot;\u003c/em\u003e\u003c/p\u003e\u003cp\u003eHowever I don\u0027t think this is true. When going up the tree you don\u0027t have to necesserily skip entire paths, it might turn out that each heavy path you stumble upon, you start from somewhere in the middle of it, and therefore have to perform a query in the corresponding segment tree. I was wondering if I am missing something or the article isn\u0027t entirely correct?\u003c/p\u003e\u003cp\u003eThanks in advance!\u003c/p\u003e\u003c/div\u003e","tags":[]}}