{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1398878640,"rating":53,"authorHandle":"johnathan79717","modificationTimeSeconds":1398931238,"id":12071,"title":"\u003cp\u003eAnother Viewpoint for Problem Manasa and Combinatorics on HackerRank\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/infinitum-apr14/challenges/manasa-and-combinatorics\"\u003eManasa and Combinatorics\u003c/a\u003e is one of the problems in \u003ca href\u003d\"https://www.hackerrank.com/contests/infinitum-apr14\"\u003eAd Infinitum April\u002714\u003c/a\u003e. The problems are very interesting, and some mathematical insights are required. Thanks to \u003ca href\u003d\"https://www.hackerrank.com/shashank21j\"\u003eShashank Sharma\u003c/a\u003e for organizing the great competition.\u003c/p\u003e\u003cp\u003eHere is the upcoming \u003ca href\u003d\"https://www.hackerrank.com/infinitum-may14\"\u003eAd Infinitum May\u002714\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eSomeone sent me a message asking how I got the formula in this problem, so I figured why not post it somewhere for everyone to see.\u003c/p\u003e\u003cp\u003eThe problem asks the number of strings consisting of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e number of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e\u0027s and \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e number of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e\u0027s, without any prefix or suffix having more \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e\u0027s than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e\u0027s.\u003c/p\u003e\u003cp\u003eThe editorial can be found \u003ca href\u003d\"https://www.hackerrank.com/contests/infinitum-apr14/challenges/manasa-and-combinatorics/editorial\"\u003ehere\u003c/a\u003e, and as you can see in this \u003ca href\u003d\"http://hr-filepicker.s3.amazonaws.com/infinitum-apr14/manasaandcombinatorics.pdf\"\u003epdf file\u003c/a\u003e, the formula in the code can be derived algebraically.\u003c/p\u003e\u003cp\u003eHere, I would like to provide another point of view, that is easier to visualize. (The following images are from \u003ca href\u003d\"http://igt.nssh.ntpc.edu.tw/assets/attached/6767/original/%E4%B8%80%E8%B7%AF%E9%A0%98%E5%85%88%E4%B9%8B%E5%95%8F%E9%A1%8C-%E5%8F%B0%E4%B8%AD%E4%B8%80%E4%B8%AD%E6%9D%8E%E5%90%89%E5%BD%AC%E8%80%81%E5%B8%ABLeadalltheway.pdf?1378738039\"\u003ehere\u003c/a\u003e.)\u003c/p\u003e\u003cp\u003eForgetting the constraint about prefixes and suffixes. What\u0027s the number of strings with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e number of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e\u0027s and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e number of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e\u0027s? The problem is equivalent to asking the number of different paths from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(0, 0)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e, \u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e, if you consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e as going up and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e as going right. In the images \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e \u003d 5\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 3\u003c/span\u003e. The answer is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/23/56/235660f7857e12979d2a8d82f252c2a4fdb82ee2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"https://dl.dropboxusercontent.com/s/68062kynj1buwla/lead_all_the_way_1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eNow if we want every prefix to have no more \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e\u0027s than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e\u0027s. The corresponding paths must not cross the green line \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e, and hence not intersecting the red line \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003ex\u003c/i\u003e + 1)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"https://dl.dropbox.com/s/bltzjzaf5rzgprg/lead_all_the_way_2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eHowever, if a path intersecting the red line, the part before intersecting can always be reflected with respect to the red line, and be mapped to a path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e′( - 1, 1)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e, \u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e. Subtracting the number of paths intersecting the red line, we get that the number of strings with wrong prefixes is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7d/7a/7d7abde4ce9ceb644d618880c870e1b85a3c1625.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"https://dl.dropbox.com/s/9lhomfqiooifjfc/lead_all_the_way_4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWhat about suffixes? You can rotate the grid 180 degrees and imagine another red line at the bottom right corner, and the original \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e, \u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e is reflected similarly to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e′(\u003ci\u003eM\u003c/i\u003e + 1, \u003ci\u003eN\u003c/i\u003e - 1)\u003c/span\u003e. Every path touching the bottom-right red line is mapped to unique path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e′\u003c/span\u003e, so the number is again \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7d/9b/7d9ba2f25d54241e77fcf8703113eb72b943fc39.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"https://dl.dropbox.com/s/acpxkfldhrlsc5z/lead_all_the_way_5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFinally, because of the inclusion-exclusion principle, we have to find the strings that have both wrong prefixes and suffixes. That\u0027s exactly the number of paths from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e′( - 1, 1)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e′(\u003ci\u003eM\u003c/i\u003e + 1, \u003ci\u003eN\u003c/i\u003e - 1)\u003c/span\u003e! Therefore, the formula is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/77/ab/77aba912263ab9c993cc612f45844c9a23ae55bc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eAll that\u0027s left is calculate \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7b/a6/7ba6620022305f9a4e020cd3862d92bac5675947.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e, \u003ci\u003eN\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e12\u003c/sup\u003e\u003c/span\u003e. You can use \u003ca href\u003d\"http://en.wikipedia.org/wiki/Lucas%27_theorem\"\u003eLucas\u0027 theorem\u003c/a\u003e. Since I didn\u0027t know the theorem before reading the editorial, I used this \u003ca href\u003d\"http://planetmath.org/factorialmoduloprimepowers\"\u003eformula\u003c/a\u003e to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e! \u003d \u003ci\u003ea\u003c/i\u003e × 99991\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eP.S. I also like the problem \u003ca href\u003d\"https://www.hackerrank.com/contests/infinitum-apr14/challenges/ichigo-and-cubes\"\u003eIchigo and Cube\u003c/a\u003e very much.\u003c/p\u003e\u003c/div\u003e","tags":["hackerrank","math","combinatorics"]}}