{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1491660672,"rating":5,"authorHandle":"ghoshsai5000","modificationTimeSeconds":1492181849,"id":51496,"title":"\u003cp\u003eHow can I make this program faster — K Interesting Pairs ?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI have tried to solve the problem of finding k-interesting pairs [here].(\u003ca href\u003d\"//codeforces.com/contest/769/submission/26220768\"\u003ehttp://codeforces.com/contest/769/submission/26220768\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eMy solution is quadratic O(n^2). If it is run on the sequence of numbers given, then n \u003d 10^5 at most. I have followed the trick of the editorial and built an array of the frequencies of each element. This happens in O(n) time, with n \u003d 10^5, at most\u003c/p\u003e\u003cp\u003eAnd have then applied the quadratic time algorithm on the frequency array so now n \u003d 10^4. However, this isn\u0027t enough to get past the time limit. \u003c/p\u003e\u003cp\u003eWhat are further optimizations I can perform ?\u003c/p\u003e\u003cp\u003eEdit — I have performed some optimizations and managed to get an acceptance. Please tell me how I can make this faster ? I am not able to understand the algorithm some other people who got faster solution used. Some stored only those values of x, for which Population Count[x] is k and then did something I am unable to understand. For example, programs like \u003ca href\u003d\"//codeforces.com/contest/769/submission/25240490\"\u003ethis one.\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/769/submission/26229806\"\u003eHere\u0027s\u003c/a\u003e my code. Please help me. \u003c/p\u003e\u003cp\u003eAlso, one more question — The same program seems to be performing at \u003ca href\u003d\"//codeforces.com/contest/769/submission/26229806\"\u003e78 ms here\u003c/a\u003e and at \u003ca href\u003d\"//codeforces.com/contest/769/submission/26229961\"\u003e93 ms here\u003c/a\u003e. What is the reason for the difference ? This may help me understand and speeden things up. \u003c/p\u003e\u003c/div\u003e","tags":["complexity optimization"]}}