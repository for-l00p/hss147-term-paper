{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1410859872,"rating":1,"authorHandle":"niti94","modificationTimeSeconds":1410860108,"id":13810,"title":"\u003cp\u003eA DP Problem..\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI was trying to solve \u003ca href\u003d\"https://code.google.com/codejam/contest/4214486/dashboard#s\u003dp2\"\u003eThis\u003c/a\u003e problem of Google APC 2015.\u003c/p\u003e\u003cp\u003eI did a o(n^4) Dp for finding the maximum number of elements that can be removed, keeping the starting and ending index of the array(say i,j) and two loops for transition in a state for finding all possible triplets in i to j range.\u003c/p\u003e\u003cp\u003eLet (a,b,c) is a triplet possible such that b-a\u003dc-b\u003dk where i\u0026lt;\u003da\u0026lt;\u003db\u0026lt;\u003dc\u0026lt;\u003dj\u003c/p\u003e\u003cp\u003e\u003ccode\u003edp[i][j]\u003dmax(dp[i][j],3+dp[i][a-1]+dp[a+1][b-1]+dp[b+1][c-1]+dp[c+1][j])\u003c/code\u003e\u003c/p\u003e\u003cp\u003eCan someone give a better complexity solution...\u003c/p\u003e\u003cp\u003eThanks\u003c/p\u003e\u003c/div\u003e","tags":["dynamic programming","algorithm complexity"]}}