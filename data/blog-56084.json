{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1512053961,"rating":0,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1512053961,"id":56084,"title":"\u003cp\u003eNotes on Codeforces Beta Round #97 Div-2 A, B, C, D, E \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/136/problem/A\" title\u003d\"Codeforces Beta Round 97 (Div. 2)\"\u003e136A - Presents\u003c/a\u003e\u003c/p\u003e\u003cp\u003eA simple inverse-mapping problem.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/136/problem/B\" title\u003d\"Codeforces Beta Round 97 (Div. 2)\"\u003e136B - Ternary Logic\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIt is similar to binary case, and one should just compute the module based on 3 instead of 2.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/136/problem/C\" title\u003d\"Codeforces Beta Round 97 (Div. 2)\"\u003e136C - Replacement\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe first sort the array and then check the largest value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e - 1]\u003c/span\u003e. If it is 1, then we just change it into 2; otherwise, we change it into 1 and sort the modified array again.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/136/problem/D\" title\u003d\"Codeforces Beta Round 97 (Div. 2)\"\u003e136D - Rectangle and Square\u003c/a\u003e\u003c/p\u003e\u003cp\u003eConsider all the possible division of the given 8 points, which should be \u003cspan class\u003d\"tex-span\"\u003e8!\u003c/span\u003e, and check whether we can find a feasible pattern that meets the requirements. Now, the main issue is how to determine that four points form a rectangular or square. At first, we find two neighboring sides and check whether they form a 90 degree, which can be achieved by computing their inner product. Then, we find the two pairs of oppisite sides, and check that whether the two sides belonging to each pair are the same or not. Furthermore, if all of them are the same, it is a square.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/136/problem/E\" title\u003d\"Codeforces Beta Round 97 (Div. 2)\"\u003e136E - Zero-One\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe denote the player who plays first as v and the other one as u.\u003c/p\u003e\u003cp\u003eAfter some observation, one can find that v will always try to remove 1 from left to right while u tries to remove 0 from left to right. At first, we consider the case that the given zero-one sequence does not contain any \u0027?\u0027 and has an even length in order to illustrate the essence behind the solution.\u003c/p\u003e\u003cp\u003eIf the number of 0s is larger than 1s, then it is obvious that the final result is 00; on the other hand, if we have more 1s than 0s, then the final result should be 11.\u003c/p\u003e\u003cp\u003eIf the numbers of 0s and 1s are exactly the same, then we might have 01 or 10 as the final result. One can check that if the last bit is 1 then it must be 01 since no one can take away the last 1. Similarly, the final result is 10 if the last bit is 0.\u003c/p\u003e\u003cp\u003eNow, we generalize the above idea. At first, we consider the case where the length is odd. In fact this can be simply converted to the even case, as long as we add an extra 0 and exchange their moving order. Secondly, we consider the sequence containing \u0027?\u0027. This is in fact quite similar to that containing no \u0027?\u0027. We check whether we can have more 0s, or more 1s, or equal 0s and 1s, by converting \u0027?\u0027 into 0s or 1s properly.\u003c/p\u003e\u003c/div\u003e","tags":[]}}