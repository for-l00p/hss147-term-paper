{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1414254843,"rating":0,"authorHandle":"Fcdkbear","modificationTimeSeconds":1414258438,"id":14431,"title":"\u003cp\u003eРазбор задач о merge sort и двоичном возедении в степень\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"http://www.spoj.com/problems/INVCNT/\"\u003ehttp://www.spoj.com/problems/INVCNT/\u003c/a\u003e\u003c/p\u003e\u003cp\u003eВ задаче требуется посчитать количество инверсий в массиве различных чисел. Один из способо сделать это быстро — использовать merge sort. Идея такая. Пусть мы хотим посчитать количество инверсий на каком-то отрезке. Разобьем этот отрезок на 2 примерно и рекурсивно посчитаем ответ на них. Теперь нам нужно посчитать количество инверсий таких, что одно число лежит в первой половине, а второе во второй.Тогда на этапе обьеденения merge sort каждый раз, когда мы будем ложить исло из первой половины — прибавим к ответу количество уже положенных чисел из второй половины (ведь они меньше текущего числа и находятся дальше его, то есть образуют инверсию). Сложность — O(NlogN).\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/sd6yMtF3\"\u003eКод\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://www.spoj.com/problems/MEOWIST/\"\u003ehttp://www.spoj.com/problems/MEOWIST/\u003c/a\u003e\u003c/p\u003e\u003cp\u003eВ задаче нужно отсортировать пары \u0026quot;строка-число\u0026quot; особым компаратором. (сначала — числа по убыванию, при равенстве — по возрастанию строк). Для этой цели можно использовать, например, и merge sort. Обратите внимание, что фазу обьединения можно делать при помощи команды merge.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/ghFQxjPn\"\u003eКод\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://www.codechef.com/problems/CKISSHUG\"\u003ehttp://www.codechef.com/problems/CKISSHUG\u003c/a\u003e\u003c/p\u003e\u003cp\u003eРассмотрим первую позицию, где будет стоять буква К\u003c/p\u003e\u003cp\u003e1) Она вообще не присутсвует в строке (можно думать об этом, как первая позиция — сразу за строкой). Наша строка имеет вид HHHH....HHH. Вариантов — 1. \u003c/p\u003e\u003cp\u003e2) Она находится на последней позиций. Наша строка имеет вид HHHH....HHK. Вариантов — 1. \u003c/p\u003e\u003cp\u003e3) Она находится на предпоследней позиций. Наша строка имеет вид HHHH....HK?. Вариантов — 2 (вместо знака вопроса стоит что угодно). \u003c/p\u003e\u003cp\u003e4) Она находится на последней позиций. Наша строка имеет вид HHHH....K?K. Вариантов — 2. \u003c/p\u003e\u003cp\u003e5) Она находится на предпоследней позиций. Наша строка имеет вид HHHH...K?K?. Вариантов — 4 (вместо знаков вопроса стоит что угодно, свего — 4 варианта).\u003c/p\u003e\u003cp\u003eИ так далее. Как идим, если зафиксировать позицию, на которой буква K встречается первые — количество хороших строк равно какой-то степени двойки (и несложно узнать, какой именно). Чтобы просуммировать отет по всем позициям, вспомним, что \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e0\u003c/sup\u003e + 2\u003csup class\u003d\"upper-index\"\u003e1\u003c/sup\u003e + ... + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/sup\u003e\u003c/span\u003e. И того, задача свелась к вознесению двойки в большую степень, а это уже можно делать двоичным возведением в степень.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/d2cyd9iF\"\u003eКод\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["разбор"]}}