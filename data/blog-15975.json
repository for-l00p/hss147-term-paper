{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1422039793,"rating":38,"authorHandle":"HardW3ll","modificationTimeSeconds":1422127979,"id":15975,"title":"\u003cp\u003eCodeforces Round #287 (Div. 2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/507/problem/A\" title\u003d\"Codeforces Round 287 (Div. 2)\"\u003e507A - Amr and Music\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eProblem:\u003c/strong\u003e We have to split the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e into maximum number of elements of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e such that their sum is less than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e To maximize the answer we have to split the number into the smallest numbers possible.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e So and since the limits are small we can pick up the smallest element of the array and subtract it from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, and we keep doing this \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e times or until the smallest number is larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Another solution is to sort the array in non-decreasing order and go on the same way.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTime complexity:\u003c/strong\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/28/26/282620efec4569493987b52994d2da8d7a01979f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e or \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bf/50/bf50fe8dec6136c862e5438af39c14bfd5bcf665.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eImplementation:\u003c/strong\u003e \u003ca href\u003d\"/contest/507/submission/9529124\" title\u003d\"Submission 9529124 by HardW3ll\"\u003e9529124\u003c/a\u003e .\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/507/problem/B\" title\u003d\"Codeforces Round 287 (Div. 2)\"\u003e507B - Amr and Pins\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eProblem:\u003c/strong\u003e We have a circle with radius \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e at position \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e and we want to move it to \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u0027, \u003ci\u003ey\u003c/i\u003e\u0027)\u003c/span\u003e with minimum moves possible. A move is to choose an arbitrary point on the border of the circle and rotate the circle around it with arbitrary angle.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e What is the shortest path between two points? A direct line. So moving the center on that line with maximum move possible each time will guarantee minimal number of moves.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e Let\u0027s draw a straight line between the two centers.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/fb/5e/fb5ebcbfcf8fecac7fae6f050305ed514b80edd4.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eClearly to move the center with maximum distance we need to rotate it around the intersection of the line and the circle with \u003cspan class\u003d\"tex-span\"\u003e180\u003c/span\u003e degrees. So the maximum distance we can move the center each time is \u003cspan class\u003d\"tex-span\"\u003e2 * \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e. Let\u0027s continue moving the center with \u003cspan class\u003d\"tex-span\"\u003e2 * \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e distance each time until the two circles intersects. Now obviously we can make the center moves into its final position by rotating it around one of the intersection points of the two circles until it reaches the final destination.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/57/47/5747093ddd1c02d57fc37a8ceab7a261f56397e3.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eEvery time we make the circle moves \u003cspan class\u003d\"tex-span\"\u003e2 * \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e times except the last move it\u0027ll be \u003cspan class\u003d\"tex-span\"\u003e ≤ 2 * \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e. Assume that the initial distance between the two points is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e So the solution to the problem will be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b1/ad/b1ad02171ac237fea840846ad0981dbdfc397e10.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTime complexity:\u003c/strong\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/02/56/02560a905fe47d621414dab2c302a19a07ef9d5a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eYou have to be careful of precision errors. Here is a code that used only integer arithmetic operations \u003ca href\u003d\"/contest/507/submission/9529147\" title\u003d\"Submission 9529147 by HardW3ll\"\u003e9529147\u003c/a\u003e.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/507/problem/C\" title\u003d\"Codeforces Round 287 (Div. 2)\"\u003e507C - Guess Your Way Out!\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e Simulate the algorithm until we reach a leaf node assume that it\u0027s not the exit. Now the question is Are there some nodes that are guaranteed to be visited before trying to reach the exit again?\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e The first observation is that in order to return to a parent we will have to visit all nodes of the right or the left subtree of some node first. Now imagine we are in the situation below where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e\u003c/span\u003e is the exit.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/1c/3e/1c3e5022ccd6fb742d3a2a09a01616fb18ca6dc8.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eBy applying the algorithm we\u0027ll reach node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e. Both the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e are in different subtrees of the root. Which means before going to the proper subtree in which the Exit exists we\u0027ll have to visit all the nodes of the left subtree (marked in red).\u003c/p\u003e\u003cp\u003eThis means we have to get the node which the Exit and the current leaf node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e are in different subtrees which will be the least common ancestor (LCA) of the two nodes. Assume the subtree height is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e. This means we visited \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3e/ea/3eea6b46ffbd78a2aeb7320a597737488729d766.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e node. By adding the nodes above the subtree which we visited during executing the string for the first time the total number of visited nodes will be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e9/9c/e99c304b0a070d03b5cc116958e0d798e609964a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Now let\u0027s go to the other subtree. Obviously we don\u0027t need any other nodes except this subtree. So let\u0027s do the same we did to the original tree to this subtree. Execute the algorithm until we reach a leaf node, get the LCA, add to the solution \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6a/af/6aaf932d05dc8e0c492b0bb7dedafc2b7a932317.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e is the height of the subtree of the LCA node where the leaf node exists. And so on we keep applying the rules until after executing the algorithm we will reach the exit.\u003c/p\u003e\u003cp\u003eAlso we can do the same operations in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eh\u003c/i\u003e)\u003c/span\u003e by beginning to move from the root, if the exit is located to the left we go to the left and ans++ and then set the next command to \u0027R\u0027 else if it is located to the right we will visited the whole left subtree so we add the left subtree nodes to the answer \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/da/78/da78eee1d80f3020b9671793d728b660538a97f1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and then set the next command to \u0027L\u0027 and so on.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTime complexity:\u003c/strong\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ae/30/ae3064204dd7022fee72f6db92ce45c7ea8755e9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e or \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1f/bc/1fbc216289acacdf1836286d370dca829865d899.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge:\u003c/strong\u003e What if the pattern is given as an input (e.g. \u0026quot;LRRLLRRRLRLRLRR...\u0026quot;), How can this problem be solved?\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eImplementation:\u003c/strong\u003e \u003ca href\u003d\"/contest/507/submission/9529181\" title\u003d\"Submission 9529181 by HardW3ll\"\u003e9529181\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/507/problem/D\" title\u003d\"Codeforces Round 287 (Div. 2)\"\u003e507D - The Maths Lecture\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e Dynamic programming problem. To handle repetitions we have to construct the number from right to the left and calculate the answer when we reach a number equivalent to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e Let\u0027s define \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4d/0a/4d0a55415231fda2f3ee8c3f4fca533187751227.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e as a recursive functions calculates the number of numbers consisting of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e digits satisfying the conditions of the problem and with a specific suffix of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e such that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d9/c6/d9c617cfa621fe35b811f47106e9236a13a4ed6c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eWe want to avoid repetition so by constructing the number from the right to the left when we reach a state with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u003d 0\u003c/span\u003e with suffix \u003cspan class\u003d\"tex-span\"\u003e ≠ 0\u003c/span\u003e we return the answer immediately so any other suffix that contains this suffix won\u0027t b calculated.\u003c/p\u003e\u003cp\u003eSo the base cases are \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/1e/291e7daf10844cd5c61b97e15f9f15184d1a352d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c1/28/c128cc52898b9873f7285759f9cf8d3ca359052d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eSo state transitions will be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/57/1a/571a847f1e3ab56a4667d3434a9cc807497bf72f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (We add a digit to the left).\u003c/p\u003e\u003cp\u003eAnd we can handle \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u003d 0\u003c/span\u003e case coming from a zero suffix easily with a boolean variable we set to true when we use a digit \u003cspan class\u003d\"tex-span\"\u003e ≠ 0\u003c/span\u003e in constructing the number.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTime complexity:\u003c/strong\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c2/4d/c24dfa559b44d7facd765419946ee44ea92e9ab8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eImplementation:\u003c/strong\u003e \u003ca href\u003d\"/contest/507/submission/9529210\" title\u003d\"Submission 9529210 by HardW3ll\"\u003e9529210\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/507/problem/E\" title\u003d\"Codeforces Round 287 (Div. 2)\"\u003e507E - Breaking Good\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e Consider we\u0027ve chosen a certain path with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e is the length of the shortest path from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and it has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e edges that are working. Assume that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e is the total number of edges that are working in the whole country. So we need to make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e changes (to make the malfunctioning edges on the path work) and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e changes (to blow up all other edges that don\u0027t lie on the path). So we will totally make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e - 2 * \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e changes where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e are constants. So the optimal solution will depend only on number of working edges along the path. So we\u0027ll have to maximize this number!\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e We will use dynamic programming on all nodes that lies on some shortest path. In other words, every node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e that satisfies that the shortest path from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e + the shortest path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e equals \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e is the length of the shortest path from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Let\u0027s define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMax\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e is the maximum number of working edges along some shortest path from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. We can calculate the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMax\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e for all nodes by dynamic programming by traversing the nodes in order of increasing shortest path from node \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. So at the end we\u0027ll make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e - 2 * \u003ci\u003eMax\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e changes. We can get them easily by retrieving the chosen optimal path.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTime complexity:\u003c/strong\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9d/b5/9db55438ade74cc864e0be6b257ed2e8c9f5b079.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eImplementation:\u003c/strong\u003e \u003ca href\u003d\"/contest/507/submission/9529272\" title\u003d\"Submission 9529272 by HardW3ll\"\u003e9529272\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["codeforces round #287"]}}