{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1469037523,"rating":46,"authorHandle":"Dekacc","modificationTimeSeconds":1469037523,"id":46163,"title":"\u003cp\u003eIs fast matrix multiplication worth it?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eRecently I\u0027ve been reading about matrix multiplication algorithms, more specifically Strassen\u0027s algorithm for fast matrix multiplication that runs in O(n^2.81) time as opposed to the standard O(n^3) time for the naive approach. But this speed up comes at a cost, for example we need to pad the matrix with zeroes if n isn\u0027t a power of 2, and even though it is asymptotically faster, it also carries a bigger constant factor since it does more additions. Also, it is more memory intensive, and it certainly is harder to implement correctly and optimally.\u003c/p\u003e\u003cp\u003eSo my question is: Is the time complexity improvement worth all of these drawbacks in a competitive setting? Are there any problems that are unsolvable with standard matrix multiplication, but are solvable with fast matrix multiplication? And what method do all the best competitors use when they need to multiply 2 matrices?\u003c/p\u003e\u003c/div\u003e","tags":["matrix multiplication","strassen","matrix"]}}