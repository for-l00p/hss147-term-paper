{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1439909155,"rating":8,"authorHandle":"tenshi_kanade","modificationTimeSeconds":1439909155,"id":19846,"title":"\u003cp\u003eHelp with Suffix Array\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi. I need a little help with an algorithm...\u003c/p\u003e\u003cp\u003eI\u0027ve recently read the chapter on Suffix Array from the book Competitive Programming 2, and I\u0027ve implemented it using the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003elog\u003c/i\u003e\u003c/sub\u003e\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e method described there. It works, but only as long as there isn\u0027t a suffix which is itself a suffix of another suffix. For example, it doesn\u0027t work for the simple string \u0026quot;AAAA\u0026quot;. I tried copying/pasting the code written in the book to make sure it wasn\u0027t my code that was wrong, but it didn\u0027t work either.\u003c/p\u003e\u003cp\u003eSo, my question is: How do we overcome that problem and make the algorithm work even for those strings?\u003c/p\u003e\u003cp\u003eHere\u0027s the implementation in C++: \u003ca href\u003d\"http://pastebin.com/NtWjyh7z\"\u003eSuffix Array\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["suffix array","strings","suffix"]}}