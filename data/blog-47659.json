{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1476130814,"rating":177,"authorHandle":"-Wave-","modificationTimeSeconds":1476130814,"id":47659,"title":"\u003cp\u003eHow to explain competitive programming without making it sound boring?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eIf you\u0027ve ever been asked about your hobbies, you probably know this problem. How does one \u003cem\u003ebriefly\u003c/em\u003e explain what competitive programming is about to a person who has never even heard about it and, worse yet, is not a programmer nor mathematician?\u003c/p\u003e\u003cp\u003eI\u0027ve struggled with this quite a bit and I still haven\u0027t found a satisfactory answer. With a bit of Googling, I found \u003ca href\u003d\"https://www.quora.com/How-is-competitive-programming-different-from-real-life-programming\"\u003ethis entertaining response\u003c/a\u003e, which is accurate if you already know CP, but doesn\u0027t really tell you much if you don\u0027t. On the other side, there is an analogy I tend to use â€” that it\u0027s like a math contest but with a computer. However, I feel like when you mention the word math, people tend to roll their eyes and stop listening, and it\u0027s not entirely accurate either: having to code your solution is very different from writing it in a math contest. When my friends read a CP task I\u0027m working on, they often don\u0027t even know what is being asked of them (that is, to write a program which solves the problem for any input).\u003c/p\u003e\u003cp\u003eMy working explanation, which is far from perfect, goes something like this:\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u0026quot;It\u0027s a bit like the Mathematical Olympiad, but with programming. You are given some tasks which tell you that you have to write a program that performs a specific task. For example, imagine you have a backpack, which has some volume. Also, you have a list of items with various volumes. Your program, given the capacity and the list, has to tell you if you can put some of the items into the backpack so that it\u0027s completely full. So you read the task, then write a program which solves it, then you submit it to an automatic system which tests it, and if it really works, you get some points.\u0026quot;\u003c/em\u003e\u003c/p\u003e\u003cp\u003eObviously, this is the knapsack problem, which I selected because it\u0027s quite easy to state. The downside here is that it\u0027s hard to explain the solution to somebody who has never heard about recursion or DP. Also, it doesn\u0027t tell you about time complexities (basically, that your program has to be fast). This is why I sometimes use exponentiation as an example (given N, find 3^N), because it\u0027s fairly simple to explain both the O(N) and O(log N) solutions, but it\u0027s not that straightforward for people without a math background.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eWhat I\u0027m looking for here are other analogies and ways of explaining competitive programming, on either end of the accuracy/entertainment spectrum (but ideally, both accurate and entertaining). The shorter, the better. Also, do you know about some example tasks which are not trivial, but easy to explain and have solutions with different complexities?\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e","tags":["explain","competitive","programming","to","plebs"]}}