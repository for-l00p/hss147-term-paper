{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1507433633,"rating":8,"authorHandle":"rajarshi_basu","modificationTimeSeconds":1507433633,"id":55048,"title":"\u003cp\u003eShortest Path between 2 fixed nodes, with edge cost update\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI have a undirected graph, with 0/1 edge cost. The graph is a complete graph. I have two operations:  -- update: flip the edge cost of a particular edge. that is, if it\u0027s cost was 0, make it 1, or vice versa.  -- query: shortest path between the source and target vertex.\u003c/p\u003e\u003cp\u003eWe are given the graph as a adjacency matrix, as well as the source and the target node in the input. The source and the target node remain fixed. Expected memory is o(n^2) (obviously) and time complexity is o(logn) for both update and query.\u003c/p\u003e\u003cp\u003eThanks for any help in advance.\u003c/p\u003e\u003c/div\u003e","tags":["all-shortest-path","update","complete graph"]}}