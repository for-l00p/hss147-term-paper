{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1401543075,"rating":0,"authorHandle":"HidenoriS","modificationTimeSeconds":1401626898,"id":12495,"title":"\u003cp\u003eHow to represent graph in competitive programing\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eOf course, it really depends on problems, but you usually don\u0027t want to write Tree class and Node class and actually construct Object in competitive programming.\u003c/p\u003e\u003cp\u003eIn most cases, you just need to note which nodes are connected to which node.\u003c/p\u003e\u003cp\u003eHere are some common approaches I have seen.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eInput is small (N \u0026lt; 10^3)\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eboolean map[N][N]; // map[i][j] \u003d\u003d true iff node i and j are connected.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eInput is huge (N \u0026gt;\u003d 10^4)\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eArrayList\u0026lt;ArrayList\u0026gt; map; // map.get(i) \u003d ArrayList of nodes that are connected to node i.\u003c/p\u003e\u003cp\u003evector map[N]; // map[i] \u003d the vector of nodes that are connected to node i.\u003c/p\u003e\u003cp\u003eIf you need to keep distance b/w two nodes, use following.\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eSmall input (\u0026lt;10^3) int map[N][N]; // map[i][j] \u003d the distance b/w node i and j.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eHuge input (\u0026gt;\u003d 10^4) class Edge { int distance; int to; } // map.get(i) \u003d ArrayList of edges that have one end on node i. ArrayList\u0026lt;ArrayList\u0026gt; map; \u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003c/div\u003e","tags":[]}}