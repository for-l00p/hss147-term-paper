{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1484043007,"rating":0,"authorHandle":"jsaita96","modificationTimeSeconds":1484043007,"id":49679,"title":"\u003cp\u003eDeriving the DP formula in problem \u0026quot;Leaf and Limelight Attack\u0026quot; of HackerEarth\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eWhile practicing DP problems on various sites, I came across this problem:- \u003ca href\u003d\"https://www.hackerearth.com/practice/algorithms/dynamic-programming/introduction-to-dynamic-programming-1/practice-problems/algorithm/leaf-and-limelight-attack-circuit/description/\"\u003ehttps://www.hackerearth.com/practice/algorithms/dynamic-programming/introduction-to-dynamic-programming-1/practice-problems/algorithm/leaf-and-limelight-attack-circuit/description/\u003c/a\u003e on HackerEarth.\u003c/p\u003e\u003cp\u003eAccording to the editorial, we pre-process the values in the solution. Queries are divided into even and odd. DP[i] gives the solution for ith query. So, DP[1] \u003d 1, DP[3] \u003d 25, DP[5] \u003d 101. \u003c/p\u003e\u003cp\u003eSo, they have derived a formula which is :-\u003c/p\u003e\u003cp\u003eDP[i] \u003d DP[i-2] + (i-2)2 + (i-1) + (i-2)2 + 2(i-1) + (i-2)2 + 3(i-1) + (i-2)2 + 4(i-1) which gets reduced to \u003c/p\u003e\u003cp\u003eDP[i] \u003d DP[i-2] + 4i2 â€” 6*(i-1)\u003c/p\u003e\u003cp\u003eSo my question is, how was this formula derived? What was the approach in deriving this ?\u003c/p\u003e\u003c/div\u003e","tags":["dp"]}}