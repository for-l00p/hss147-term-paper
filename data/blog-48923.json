{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1481194162,"rating":0,"authorHandle":"zscoder","modificationTimeSeconds":1482413192,"id":48923,"title":"\u003cp\u003eDecember Troll Challenge Hints and Solutions\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eA — It\u0027s just a + b\u003c/p\u003e\u003cp\u003eB — It is just a*b, but with a catch. There are floating points numbers as input (thus your solution is accepted if the error is small enough)\u003c/p\u003e\u003cp\u003eC — ^ denotes the XOR operator. Note that A and B are in uppercase. It actually tells you to xor the answers to problem A and B if \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e is the input. The condition \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e ≤ 15\u003c/span\u003e is just a distraction.\u003c/p\u003e\u003cp\u003eD — Note how the problem title is EFAULT and if you add D (the problem label) before it it conveniently spells default. If you go to OEIS (which has been hinted in the problem), you will find that there is already a default sequence in the area where you should search your sequence. The answers to the problem can be extracted from that sequence.\u003c/p\u003e\u003cp\u003eE — This problem is trivial, but there is a special case. When \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 2\u003c/span\u003e, the dog can walk on the shortest road twice.\u003c/p\u003e\u003cp\u003eF — If you observe the outputs (it helps to be on Codeforces) you might find that some of them are usernames and some of them are reversed. The title 372 hints that you should look at Codeforces Round 372 and the usernames are conveniently the top 10 in the division 1 contest. All that\u0027s left is to realize you should reverse the names if the input is even, convert uppercase letters to lowercase letters, and that TooDifficuIt\u0027s username is not TooDifficult as many would expect.\u003c/p\u003e\u003cp\u003eG — Nothing special here. Just do what the problem says.\u003c/p\u003e\u003cp\u003eH — This is also a trivial problem. It helps to write a recursive function to solve it.\u003c/p\u003e\u003cp\u003eI — First, we claim that if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 1\u003c/span\u003e is not prime and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is good, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is not wonderful. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 1 \u003d \u003ci\u003eap\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e is the prime factor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 1\u003c/span\u003e larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. So, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Note that this implies that there are at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e - 1 \u0026lt; \u003ci\u003en\u003c/i\u003e\u003c/span\u003e multiples of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e among \u003cspan class\u003d\"tex-span\"\u003e1, 2, ..., \u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e. However, it can be easily shown that however we place the numbers on the board, we can choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e numbers on pairwise distinct rows and columns which contains a multiple of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, and another set of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e numbers that does not contain a multiple of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e. Obviously, the product of one set is a multiple of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and the product of the other isn\u0027t, so they are clearly not congruent mod \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 1\u003c/span\u003e, since \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/73/90/7390435fe914112ad4af1919b093fb188e369926.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eNow, we claim that if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 1\u003c/span\u003e is prime, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is wonderful. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e be a primitive root modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e. Then, \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003eg\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e0\u003c/sup\u003e, \u003ci\u003eg\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e1\u003c/sup\u003e, \u003ci\u003eg\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e, ..., \u003ci\u003eg\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ep\u003c/i\u003e - 2\u003c/sup\u003e} \u003d {1, 2, ..., \u003ci\u003ep\u003c/i\u003e - 1}\u003c/span\u003e by definition. Let\u0027s place the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eni\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e on row \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and column \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e-indexed). Clearly all numbers have been placed on the board exactly once by our observation. Now, note that the product of any \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e numbers in distinct rows and columns is congruent to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e(0 + 1 + 2 + ... + \u003ci\u003en\u003c/i\u003e - 1) + (0 + 1 + 2 + ... + \u003ci\u003en\u003c/i\u003e - 1)\u003c/sup\u003e\u003c/span\u003e modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 1\u003c/span\u003e, which is independent of the numbers chosen. Thus, the products are the same and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is wonderful.\u003c/p\u003e\u003cp\u003eThis greatly simplifies the problem : We just check if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 1\u003c/span\u003e is a prime. This can be done with primality test and precalculation of primes \u003cspan class\u003d\"tex-span\"\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e + 1\u003c/span\u003e with Sieve of Eratosthenes, since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eJ — For each pair of characters, compute their \u0026quot;distance\u0026quot; in the keyboard. Then, sum the distances of each pair of characters in the string.\u003c/p\u003e\u003cp\u003eK — Note that some letters are in uppercase. Let\u0027s extract them (excluding the K in the problem title but including the problem title)\u003c/p\u003e\u003cp\u003eROTCAFEMIRPTCNITSIDFOMUS\u003c/p\u003e\u003cp\u003eThis is complete nonsense. Caesar cipher doesn\u0027t help here. However, if we reverse the string, we get :\u003c/p\u003e\u003cp\u003eSUMOFDISTINCTPRIMEFACTORS\u003c/p\u003e\u003cp\u003eThus, we just have to compute the sum of distinct prime factors of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, which can be easily done.\u003c/p\u003e\u003cp\u003eL — Forget cracking anagrams. What you need to do is to just reverse the whole string, and swap the first two letters, as shown in samples.\u003c/p\u003e\u003cp\u003eM — The pictures in the sample form \u003cspan class\u003d\"tex-span\"\u003e8\u003c/span\u003e letters, ERDNCTIO. Rearrange these letters to form CENTROID. The solution is to treat the bottom left corner as \u003cspan class\u003d\"tex-span\"\u003e(0, 0)\u003c/span\u003e, and find the centroid of all the Xs. (sum the x-coordinates and y-coordinates and divide by the number of Xs)\u003c/p\u003e\u003cp\u003eN — I just realized this problem was unsolvable. Oops\u003c/p\u003e\u003cp\u003eO — This is just a troll. You have to output \u0026quot;The Password\u0026quot;, and in lowercase, without spaces (stated in Output), so just print thepassword.\u003c/p\u003e\u003c/div\u003e","tags":[]}}