{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1457556072,"rating":34,"authorHandle":"MikeMirzayanov","modificationTimeSeconds":1457557066,"id":43696,"title":"\u003cp\u003eCodeforces: Java command lines have been changed\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cimg src\u003d\"/predownloaded/db/a6/dba6881ef70b9f530aab783e386323604db46e28.png\" style\u003d\"float: right;margin: 0 1.0em 1.0em 1.0em;max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eHello!\u003c/p\u003e\u003cp\u003eRecently there were some comments about unexpected MLE verdict for Java solutions.\u003c/p\u003e\u003cp\u003eNow we experimentally run Java with the following command line (it is a part relevant to memory): \u003ccode\u003e-XX:NewRatio\u003d5 -Xms8M -Xmx\u0026lt;ML\u0026gt; -Xss64M\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eIt is good to know that default java GC divides heap to generations (areas) and tenured (old) generation is less than entire heap size. We use \u003ccode\u003e-XX:NewRatio\u003d5\u003c/code\u003e to increase the tenured generation size. For example, if memory limit is 256M then tenured generation is about 200MB. For example, it means that you can not allocate array of size 210MB in your program. Note, that without \u003ccode\u003e-XX:NewRatio\u003d5\u003c/code\u003e the tenured generation size is ~170MB.\u003c/p\u003e\u003cp\u003eAlso I tried option to use G1 garbage collector, but it seems it works much slower for programming competition codes.\u003c/p\u003e\u003cp\u003eIf you want to suggest improvements, please test your suggestion on the following cases:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"/contest/633/submission/16434691\" title\u003d\"Посылка 16434691 от Tifuera\"\u003e16434691\u003c/a\u003e on the test \u003ca href\u003d\"//assets.codeforces.com/files/633E/17.zip\"\u003ehttp://assets.codeforces.com/files/633E/17.zip\u003c/a\u003e — it should fit in 128M and work nearly the same time as running with command line \u003ccode\u003ejava -Xmx512M Main\u003c/code\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//assets.codeforces.com/files/MemoryTest.java\"\u003ehttp://assets.codeforces.com/files/MemoryTest.java\u003c/a\u003e running with options \u003ccode\u003e1 200 false\u003c/code\u003e, \u003ccode\u003e10 200 false\u003c/code\u003e — it should work successfully with \u003ccode\u003e-Xmx256M\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eNote, we use javaagent for JVM to intercept java.lang.OutOfMemoryException exceptions and return them as MLE verdict. It doesn\u0027t affect StackOverflowException or any other exception.\u003c/p\u003e\u003cp\u003eAlso we use hard memory limit per process (because of possible off-heap allocations) which is about 20MB larger than ML (~20MB is memory consumed by simple almost empty solution).\u003c/p\u003e\u003cp\u003eBTW, what options use Yandex.Contest, ejudge, PCMS2 and other judges to run Java?\u003c/p\u003e\u003c/div\u003e","tags":["java"]}}