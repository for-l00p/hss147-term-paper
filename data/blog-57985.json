{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1519352442,"rating":428,"authorHandle":"cjquines","modificationTimeSeconds":1519358605,"id":57985,"title":"\u003cp\u003eOn designing a Codeforces shirt\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI heard about the Codeforces shirt design the day before the deadline, and I looked at the designs and they were almost all memes. I thought of making a serious design, since I am not good at memes. (I am also not good at comp prog.)\u003c/p\u003e\u003cp\u003eMost programming shirts that I liked have nice abstract patterns based on algorithms, like the \u003ca href\u003d\"//codeforces.com/blog/entry/44549?#comment-293712\"\u003eYandex.Algorithm 2015 shirt\u003c/a\u003e. So I wanted to add a bunch of cool diagrams of algorithms. And I decided to use black, because, well, black is nice. I came up with the design of overlaying algorithms in the Codeforces logo, but I could not draw enough different diagrams, so I used three components. You can see the whole design here:\u003c/p\u003e\u003ch4\u003eOverall\u003c/h4\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/ca/81/ca810ca3c58ff353afeaeff798551e200322f72a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eI was inspired by the typography of \u003ca href\u003d\"https://material.io/\"\u003eMaterial Design\u003c/a\u003e, as well as the \u003ca href\u003d\"https://web.archive.org/web/20160207175056/https://design.google.com/\"\u003eold Google Design\u003c/a\u003e. So I used \u003ca href\u003d\"https://fonts.google.com/specimen/Roboto+Mono\"\u003eRoboto Mono\u003c/a\u003e, which I think is very nice. The use of the not sign (¬) on the end of “codeforces” is also inspired by Google Design, and I think it’s cool. I have to admit that I didn’t fix the \u003ca href\u003d\"https://xkcd.com/1015/\"\u003ekerning\u003c/a\u003e here, but to my defense, it’s a monospaced font. \u003c/p\u003e\u003cp\u003eI was originally going to have everything as diagrams for algorithms, but I couldn’t come up with more. So I decided to use text, which was easier. The overlays for the bars are also tilted at a 30° angle because it made it look nicer.\u003c/p\u003e\u003cp\u003eHere, there are three different levels of abstraction, which all programmers operate in: the largest bar, the center blue bar, is for algorithms, which is the most abstract level of thinking. I think most people are like me, that I think in terms of the general algorithm first, before the actual code. In my head, I visualize what the algorithm looks like. This is what the blue bar shows.\u003c/p\u003e\u003cp\u003eThe next largest bar is the yellow bar, which is a lower level of abstraction. It represents the code that we actually write in order to implement the algorithm. The smallest bar here, the red bar, is the lowest level. It is binary, which represents machine code, the actual compiled program. (Usually, when people think “computers”, they think binary, so I wanted to include that too. But not all of the design.)\u003c/p\u003e\u003cp\u003eSo that it isn’t just a regular programming shirt, I wanted to show things that were unique to competitive programming. We’ll go through each bar one by one, from least to most abstract.\u003c/p\u003e\u003ch4\u003eThe red bar: binary\u003c/h4\u003e\u003cp\u003eIf you want to figure out what the binary means on your own, here’s the full picture:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/9c/f0/9cf00a4a2b9f3e4ce2b3db9a4b634d0a9d7434ed.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eDone? It is not random. It is ASCII, in binary. Choosing ASCII is a deliberate choice, because knowledge of encoding appears in competitive programming sometimes. For example, \u003ccode\u003ec - \u0027a\u0027 + \u0027A\u0027\u003c/code\u003e capitalizes the \u003ccode\u003echar\u003c/code\u003e named \u003ccode\u003ec\u003c/code\u003e, and it works because of ASCII. If you use a \u003ca href\u003d\"https://www.binaryhexconverter.com/binary-to-ascii-text-converter\"\u003ebinary to ASCII converter\u003c/a\u003e and take the effort to type it all in, you’ll see it decodes to \u003ccode\u003eCodeforces Sponsored by Telegram\u003c/code\u003e. Codeforces alone is too short, sorry.\u003c/p\u003e\u003cp\u003eInitially, all the binary code fit in the bar, but it was too small, so I made it larger. You’ll also notice that the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Leading\"\u003eleading\u003c/a\u003e is different compared to the yellow bar, this is an \u003ca href\u003d\"https://medium.com/@lukejones/optical-adjustment-b55492a1165\"\u003eoptical adjustment\u003c/a\u003e. Not making it random is a conscious decision, since if it was just random it would be like any other programming shirt.\u003c/p\u003e\u003ch4\u003eThe yellow bar: code\u003c/h4\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/48/f3/48f3c73e3b45c77784536900f79d293a8d6a1437.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eI’m sorry for using C++ code. But it’s a \u003ca href\u003d\"//codeforces.com/blog/entry/20525\"\u003emajority of the code\u003c/a\u003e we see here in Codeforces, so I think it’s only fair. In order for this to be unique to competitive programming, I picked samples of code that were unique to the competitive programming community. And most of these were from my code, also sorry.\u003c/p\u003e\u003cp\u003eFor example, you have the classic \u003ccode\u003ell\u003c/code\u003e, \u003ccode\u003eii\u003c/code\u003e, and \u003ccode\u003eINF\u003c/code\u003e shorthands. There’s \u003ccode\u003eusing namespace std;\u003c/code\u003e, which almost never appears in production code. There’s \u003ccode\u003e#include \u0026lt;algorithms\u0026gt;\u003c/code\u003e – I wanted to use \u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\u003c/code\u003e instead but decided against it. There’s \u003ccode\u003eios_base::sync_with_stdio(0);\u003c/code\u003e, which has turned my TLE code to AC code too many times than it should. There is code that I’m pretty sure will only appear in comp prog: \u003ccode\u003eint bitmask[1 \u0026lt;\u0026lt; 16];\u003c/code\u003e, \u003ccode\u003ewhile (!~x)\u003c/code\u003e, \u003ccode\u003ecout \u0026lt;\u0026lt; \u0026quot;oo\u0026quot; \u0026lt;\u0026lt; endl;\u003c/code\u003e. \u003c/p\u003e\u003cp\u003eI was actually torn between using C++ or just pseudocode, and between using lines of disjointed code or an actual algorithm. I decided to do this because I think it represents competitive programming well. \u003c/p\u003e\u003ch4\u003eThe blue bar: algorithms\u003c/h4\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/3f/63/3f635f0559ea5fb24bfe4da4d7bb6e87e1c9318b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThere are ten distinct algorithms or data structures here. Try to name them. Here’s a clearer, labeled picture of the diagrams:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/d2/da/d2da63d6171920ee5f872b9f9ee2b1a5accd2bb2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eBefore I spoil the answers, I want to talk about the design here. I was inspired by the algorithm designs of \u003ca href\u003d\"https://visualgo.net\"\u003eVisuAlgo\u003c/a\u003e. I limited myself to squares, circles, lines, and arrows. Not even numbers or labels. This was challenging, because I still wanted to make the algorithm recognizable based on the limited diagram. \u003c/p\u003e\u003cp\u003eOn the choice of diagrams: I tried to divide them evenly between different areas and stuff. So, not all graph algorithms, because that would also look unbalanced, even if they are the ones that are easy to draw. So here, there are string algorithms, math algorithms, and data structures.\u003c/p\u003e\u003cp\u003eOkay, spoilers:\u003c/p\u003e \u003col\u003e   \u003cli\u003eFenwick. I tried to distinguish from a segtree by putting the nodes in the order they should be, stored in an array.\u003c/li\u003e   \u003cli\u003eManacher. The blocks are letters, the spaces in between should be a giveaway. Another giveaway is the pointer, which points to the gap in between, and is symmetric.\u003c/li\u003e   \u003cli\u003eKnapsack. I think this one is one of the easier ones: the dashed line represents the capacity, the blocks are things to bring. This is a common way to represent Knapsack so I think this is nice.\u003c/li\u003e   \u003cli\u003eDijkstra. The heavy edges represent edges in the tree currently being built, and the dashed lines are edges not a part. It could be Kruskal, but if it was Kruskal there would probably be at least two components of lines.\u003c/li\u003e   \u003cli\u003eBinary exponentiation. Not obvious, I know, but this was what it’s supposed to represent. The dashed line symbolizes using a previous computation, ending with the base case.\u003c/li\u003e   \u003cli\u003eMatrix multiplication. The blocks representing entries of the matrix were pretty obvious, I think. So was the dark lines to represent the actual multiplication. I’m sorry for not having valid dimensions for the matrices, but space constraints.\u003c/li\u003e   \u003cli\u003eLCA. In particular, this is the LCA algorithm that goes up in steps of \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e until it reaches a common ancestor. The dashed lines represent the ancestors.\u003c/li\u003e   \u003cli\u003eBinary tree. No binary tree in particular, just a regular old binary tree.\u003c/li\u003e   \u003cli\u003eLinked list. This is also easy: the blocks represent the pointer and the data. This one has arrows, but the arrows aren’t actually visible in the bar, so the bar is only limited to circles, squares, and lines.\u003c/li\u003e   \u003cli\u003eSorting. Except it doesn’t look like sorting. But this was supposed to be sorting. The diagram is similar to a lot of animations anyway, so I think it’s justified even if it’s not animated here.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eHow did I do? Hopefully my diagrams were good enough that you recognized half of them. I also hope that you like the shirt as a whole, and I did quite some time making it.\u003c/p\u003e\u003c/div\u003e","tags":[]}}