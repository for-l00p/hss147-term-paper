{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1424682941,"rating":0,"authorHandle":"jaswanthi","modificationTimeSeconds":1424695278,"id":16579,"title":"\u003cp\u003eWhy shortest path with DFS works in this Graph ?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThe general understanding is that we can\u0027t use DFS in graph for finding shortest path.\u003c/p\u003e\u003cp\u003eBut, I am having difficult time understanding why the DFS works for following problem, even though a node can be reached in multiple ways. \u003ca href\u003d\"https://oj.leetcode.com/problems/triangle/\"\u003ehttps://oj.leetcode.com/problems/triangle/\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAlso,What kind of shortest path problems can be solved with DFS ?\u003c/p\u003e\u003cp\u003eI understand that we can use Uniform Cost search ( similar one Dijkstra) for finding shortest path.\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003cstrong\u003eSolution with DFS for above problem:\u003c/strong\u003e\u003c/em\u003e \u003c/p\u003e \u003cpre\u003e\u003ccode\u003epublic class Solution {\n    int[][] memo;\n    public int minimumTotal(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; triangle) {\n        memo \u003d new int[triangle.size()][triangle.size()];\n        for(int i \u003d 0; i \u0026lt; triangle.size(); i++) {\n            Arrays.fill(memo[i], Integer.MIN_VALUE);\n        }\n        return minimumTotal(triangle,0,0);\n    }\n    public int minimumTotal(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; triangle, int i, int j) {\n        if (i \u003d\u003d triangle.size() -1)\n           return triangle.get(i).get(j); // base case\n        //if(memo[i][j] !\u003d INTEGER.MIN_VALUE) {\n        //    return memo[i][j];\n        //}\n        int sum0 \u003d minimumTotal(triangle, i+1, j);\n        int sum1 \u003d minimumTotal(triangle, i+1, j+1);\n        int res \u003d Math.min(sum0, sum1) + triangle.get(i).get(j);\n        memo[i][j] \u003d res;\n        return res;\n    }   \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003ePS:\u003c/strong\u003e If you think the problem doesn\u0027t have a goal state, We can modify the \u003cstrong\u003eproblem to have a goal state\u003c/strong\u003e, For ex. To reach some indexed position from the top row.\u003c/p\u003e\u003cp\u003eAnd, We could still use DFS for it.\u003c/p\u003e\u003cp\u003eMy Question is more towards following, How to define the boundary for shortesr path priblems solvable on graph using DFS\u003c/p\u003e\u003c/div\u003e","tags":["dfs","dijkstra","search"]}}