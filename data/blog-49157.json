{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1482050579,"rating":33,"authorHandle":"Addy007","modificationTimeSeconds":1482050579,"id":49157,"title":"\u003cp\u003eHow to start Competitive Coding.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u0026quot;Where do I start?\u0026quot; \u0026quot;How do I get better?\u0026quot;\u003c/p\u003e\u003cp\u003eStuck here?\u003c/p\u003e\u003cp\u003eDon\u0027t worry, here is a guide that will help you answer these questions .\u003c/p\u003e\u003cp\u003e\u0026quot;Where do I start?\u0026quot;\u003c/p\u003e\u003cp\u003eStep 0: Prerequisites: Determination / Dedication.\u003c/p\u003e\u003cp\u003eStep 1: Choosing your language. Which: The language should be preferably C++ or Java, the last preference should be Python (due to its unavailability on many official coding platforms, e.g., the ACM ICPC).\u003c/p\u003e\u003cp\u003eWe will focus on C++, Java is slow, but more importantly lacks shorthand generic implementations of standard templates (one big advantage of Java is Big Integers, which we will see later)\u003c/p\u003e\u003cp\u003eWhy: Java, C++, Python have libraries that would cut the time to write the code, as well as increase the efficiency most of the times. Example: sort(a,a+n); //in C++ would sort the array of n elements in O(nlogn) time. It is both simpler to implement and more efficient than the O(n^2) sorts.\u003c/p\u003e\u003cp\u003eIf you know C, it is very easy to switch to C++. With almost no effort, you can use very powerful libraries.\u003c/p\u003e\u003cp\u003eStep 2: Learn the Language? I would recommend practicing problems, as many as you can, you\u0027ll be able to learn stuff as the need arises.\u003c/p\u003e\u003cp\u003eStep 3: Where? What if I\u0027m stuck? Too much stuff all around and I\u0027m freaking out. :O :( Google is a source that you would rely on most of the time. But if you didn’t understand something on google or you want to discuss a topic with someone or clear doubts, you are always free to ping someone Someone will definitely reply.\u003c/p\u003e\u003cp\u003eStep 4: Okay, I\u0027m ready, tell me where to start. \u003ca href\u003d\"https://www.hackerrank.com/\"\u003ehttps://www.hackerrank.com/\u003c/a\u003e \u003ca href\u003d\"https://www.hackerearth.com/practice/codemonk/\"\u003ehttps://www.hackerearth.com/practice/codemonk/\u003c/a\u003e\u003c/p\u003e\u003cp\u003eDoing till the \u0026quot;Sorting\u0026quot; part is recommended before you try an Online judge like Codeforces.\u003c/p\u003e\u003cp\u003eThen switch over to a better Online Competitive Platform \u003ca href\u003d\"//codeforces.com/\"\u003ehttp://codeforces.com/\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIt is a platform where regular contests are held and everyone has ratings.\u003c/p\u003e\u003cp\u003eHere is a link for all the problems, sorted by submission. Usually, greater the number of problem submissions, easier is the problem. \u003ca href\u003d\"//codeforces.com/problemset?order\u003dBY_SOLVED_DESC\"\u003ehttp://codeforces.com/problemset?order\u003dBY_SOLVED_DESC\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTry finishing the first 3-4 pages of this^ to get a hang of competitive coding.\u003c/p\u003e\u003cp\u003eStart from square 1, build up your confidence, start from the most solved, and keep going. Generally, \u0027A\u0027 problems would be the easiest, followed by B, C, and D .\u003c/p\u003e\u003cp\u003eP.S. Remember, you\u0027re in Div2. Look for the Division, Div1 As are equivalent to Div2 C’s. you might end up doing a very difficult A problem :P\u003c/p\u003e\u003cp\u003eAs a newbie, you should never care about rating because that is your biggest barrier in trying harder and trying problems out of your comfort zone during a competition. Even if your rating is going down, it doesn\u0027t mean you aren\u0027t improving; rating is relative to others and isn\u0027t a sole factor of what you can do.\u003c/p\u003e\u003cp\u003eThe key is: \u0026quot;PRACTICE, PRACTICE, PRACTICE.\u0026quot;\u003c/p\u003e\u003cp\u003eDon\u0027t stop even if you get stuck. Get help immediately. Do one or more of the following:\u003c/p\u003e\u003cp\u003eTry to find other people\u0027s solutions or read the editorial. Get the main idea of the solution. Now CLOSE the solution and implement yours without reading the solution again. This is quite important so that the algorithm/solution will sink into your head.\u003c/p\u003e\u003cp\u003eParticipate in contests. There is no better practice than actual contests. Contests help with your ability to contain your stress and will test your strengths to the maximum. After each contest, make sure to solve all the questions that you did not solve during the contest. This is a key point.\u003c/p\u003e\u003cp\u003eLet me define “Stuck” for you. Stuck is a state when you have completely tried your level best, all ideas you have had have failed, and you can\u0027t think of more.\u003c/p\u003e\u003cp\u003eYour rating doesn\u0027t matter. Once you put your rating to a side, you\u0027ll be more aggressive in solving, :)\u003c/p\u003e\u003cp\u003eRating would automatically improve as you improve.\u003c/p\u003e\u003cp\u003eOnce you\u0027re comfortable with A and B level problems, try pushing for C, then push for D. Don\u0027t stop. Push harder, you\u0027ll definitely be good someday.\u003c/p\u003e\u003cp\u003eAdd your friends/seniors and try to compete; try setting benchmarks and work hard. And most importantly:\u003c/p\u003e\u003cp\u003eStep 5: GLHF. Have fun. You really can\u0027t be good at something if you don\u0027t like it. So have fun! Good luck!\u003c/p\u003e\u003c/div\u003e","tags":["start","newbie"]}}