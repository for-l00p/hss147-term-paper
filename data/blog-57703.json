{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1518377687,"rating":1,"authorHandle":"Lena19","modificationTimeSeconds":1518392173,"id":57703,"title":"\u003cp\u003eGraphs. Part II. Разбор задач\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eПочти все задачи контеста сводятся к аккуратной реализации алгоритмов поиска кратчайших путей в графах.\u003c/p\u003e\u003ch1\u003eЗадача A. Флойд\u003c/h1\u003e\u003cp\u003eЧто нужно делать в задаче, можно догадаться прямо из названия. Чтобы найти расстояние между всеми парами вершин, нужно было применить для заданной матрицы смежности алгоритм Флойда-Уоршелла в его базовой реализации. Асимптотика — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003ch1\u003eЗадача B. Сумма расстояний\u003c/h1\u003e\u003cp\u003eВ этой задаче, как и в предыдущей, нужно было найти сумму всех попарных расстояний между вершинами. Но алгоритм Флойда-Уоршелла уже неприменим, поскольку количество вершин может быть \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003eN\u003c/i\u003e ≤ 1000\u003c/span\u003e. Если бы граф был взвешен, то нужно было бы применять алгоритм Дейкстры, запуская его из каждой вершины, и итоговая асимптотика была бы \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e * \u003ci\u003eMlog\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e))\u003c/span\u003e. Но так как в данном случае ребра графа не имеют веса, достаточно было обычного поиска в ширину, запущенного из каждой вершины. После каждого запуска к ответу прибавляются все расстояния, которые не были посчитаны ранее. Иначе говоря, после запуска из вершины \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e к итоговому ответу нужно прибавить расстояния от \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e до \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ei\u003c/i\u003e + 2, ..., \u003ci\u003eN\u003c/i\u003e\u003c/span\u003e. Итоговая асимптотика — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e * (\u003ci\u003eN\u003c/i\u003e + \u003ci\u003eM\u003c/i\u003e))\u003c/span\u003e.\u003c/p\u003e\u003ch1\u003eЗадача С. Лабиринт знаний\u003c/h1\u003e\u003cp\u003eЕсли переформулировать задачу, то она будет представлять собой задачу поиска длиннейшего пути из вершины \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e в вершину \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e. В общем случае для произвольных графов эта задача является NP-трудной и не может быть решена за полиномиальное время. Тем не менее, задача решаема для ориентированных ациклических графов. Можно взять все веса с обратным знаком и тогда задача превратится в задачу поиска кратчайшего пути из \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e в \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e. Для решения в данной задаче необходимо применить алгоритм Беллмана-Форда. \u003c/p\u003e\u003cp\u003eОбратите внимание, что есть вариант, когда можно набрать неограниченно большой запас знаний. Это значит что в исходном графе могут быть циклы положительного веса, а значит в преобразованном графе — цикл отрицательного веса. Необходимо проверить, что такой цикл есть в графе и что вершина \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e достижима из этого цикла. Достижимость можно проверить с помощью любого алгоритма обхода. Если на последней фазе алгоритма Беллмана-Форда расстояние до какой-либо из вершин уменьшилось, то либо эта вершина находится в цикле отрицательного веса, либо достижима из него. Из всех вершин, до которых уменьшилось расстояние и до которых алгоритм обхода еще не дошел, нужно запустить этот самый алгорим обхода. Если в какой-то момент обход доходит до вершины \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e, ответ — \u0026quot;:)\u0026quot;, иначе если \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e не достижима из 1, ответ — \u0026quot;:(\u0026quot;. Ну и в оставшемся случае нужно вывести длину кратчайшего пути от \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e до \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e, не забыв поменять знак. \u003c/p\u003e\u003ch1\u003eЗадача D. Кратчайший путь\u003c/h1\u003e\u003cp\u003eЗадача практически аналогична предыдущей. Необходимо найти кратчайший путь из стартовой вершины до всех остальных. Особые случаи: \u003c/p\u003e \u003cul\u003e   \u003cli\u003eвершина вообще недостижима из стартовой, тогда ответ \u0026quot;*\u0026quot;\u003c/li\u003e   \u003cli\u003eне существует кратчайшего пути, то есть он не определен, а значит путь до вершины может лежать через цикл отрицательного веса. Нужно найти все вершины, достижимые из циклов отрицательного веса. Это, как и в предыдущей задаче, делается с помощью любого алгоритма обхода графа.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eОбщий алгоритм: запустить на графе алгоритм Беллмана-Форда из стартовой вершины. На \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e-й фазе алгоритма запустить алгоритм обхода для всех вершин, расстояние до которых уменьшилось на этой фазе и которые не были посещены алгоритмом обхода ранее. Для всех недостижимых вершин ответ \u0026quot;*\u0026quot;, для всех вершин, до которых дошел алгоритм обхода, ответ \u0026quot;-\u0026quot;, для всех остальных ответом является кратчайшее расстояние. \u003c/p\u003e\u003ch1\u003eЗадача Е. Диаметр графа\u003c/h1\u003e\u003cp\u003eВ данной задаче нужно найти все попарные расстояния с помощью алгоритма Флойда-Уоршелла. Из всех найденных расстояний выбрать наибольшее в качестве диаметра. Для радиуса нужно было для каждой вершины найти наибольшее расстояние от нее до какой-либо другой вершины и из всех этих расстояний выбрать наименьшее. \u003c/p\u003e\u003ch1\u003eЗадача F. Дейкстра\u003c/h1\u003e\u003cp\u003eВ задаче нужно реализовать алгоритм Дейкстры, запустить его из заданной стартовой вершины и проверить, что в конце нашлось расстояние до заданной конечной вершины. \u003c/p\u003e\u003ch1\u003eЗадача G. Расстояние между вершинами\u003c/h1\u003e\u003cp\u003eЭта задача также представляет собой задачу на алгоритм Дейкстры с той лишь разницей, что путь до заданной вершины нужно восстановить. \u003c/p\u003e\u003ch1\u003eЗадача H. Jzzhu и города\u003c/h1\u003e\u003cp\u003eНеобходимо определить, сколько ребер из заданого списка можно удалить, так, чтобы кратчайшие расстояние от заданной вершины до всех остальных не изменились. Это можно было сделать с помощью алгоритма Дейкстры. Пусть изначально мы хотим удалить все железные дороги и ответ \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e равен \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Запускаем на всем графе алгоритм Дейкстры из вершины-столицы. Если в один момент расстояние до одной из вершин можно уменьшить или же поменять дорогу, по которой вершина достижима из столицы, появляется два случая:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eрасстояние до вершины можно уменьшить. Тогда, если ранее вершина была достижима по обычной дороге, а теперь достижима по железной, то текущую железную дорогу удалять нельзя и ответ нужно уменьшить на 1. Если же ранее вершина была достижима по железной дороге, а теперь стала достижима по обычной, то старую железную дорогу \u003cem\u003eснова\u003c/em\u003e можно удалить, увеличив ответ на единицу. Случай, когда дорога одного типа меняется на дорогу такого же типа, интереса, очевидно, не представляет.\u003c/li\u003e   \u003cli\u003eрасстояние можно оставить таким же, но при этом изменить тип дороги. Если ранее вершина была достижима по железной дороге а теперь за такое же расстояние можно дойти по обычной, то старую железную дорогу \u003cem\u003eснова\u003c/em\u003e можно удалить, увеличив ответ на 1.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eВ итоге в \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e содержится максимальное количество путей, которые можно удалить.\u003c/p\u003e\u003cp\u003eПример реализации: \u003ca href\u003d\"//codeforces.com/contest/449/submission/33990425\"\u003eКод\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eЗадача I. Дороги в Берляндии\u003c/h1\u003e\u003cp\u003eЭто задача на алгоритм Флойда-Уоршелла с некоторой модификацией. Изначально все кратчайшие расстояние уже есть в матрице. Когда граф начинает обновляться, для каждого такого обновления нужно запустить одну фазу алгоритма Флойда-Уоршелла, которая будет обновлять кратчайший путь от вершины \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e до вершины \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e уже не через одну промежуточную вершину, а сразу через целое ребро \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e. Не забудьте, что граф неориентирован, поэтому пытаться обновить расстояние нужно как через \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e, так и через \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eb\u003c/i\u003e \u003ci\u003ea\u003c/i\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eПусть сумма всех исходных попарных расстояний равна \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e. Тогда, после того как в граф было добавлено новое ребро, для каждой пары вершин \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e расстояние могло уменьшиться как \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ea\u003c/i\u003e] + \u003ci\u003ew\u003c/i\u003e + \u003ci\u003ed\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e или как \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e] + \u003ci\u003ew\u003c/i\u003e + \u003ci\u003ed\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e, где \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e — вес ребра \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e. Если расстояние можно улучшить, то необходимо вычесть из ответа величину старого расстояния и прибавить новое, не забыв обновить \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e в таблице кратчайших путей. \u003c/p\u003e\u003ch1\u003eЗадача J. Джейми и интересный граф\u003c/h1\u003e\u003cp\u003eПоскольку и вес минимального остовного дерева, и длина кратчайшего пути из \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e в \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e должны быть простыми числами, то самое удобное, что можно сделать, вытянуть минимальное остовное дерево в линию, чтобы кратчайший путь шел вдоль него. Тогда все ребра дерева (а так же кратчайшего пути) будут иметь вид \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e + 1)\u003c/span\u003e, а их вес можно принять за 1. Чтобы вес кратчайшего пути стал простым числом, можно найти ближайшее простое число, большее либо равное \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e и прибавить недостающий вес к последнему ребру. Простые числа можно найти заранее с помощью решета Эратосфена. После того, как мы нашли минимальное остовное дерево, останется задать еще \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e - \u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e ребер графа. Это могут быть любые ребра, вид которых не соответствует \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e + 1)\u003c/span\u003e, а также ребро не должно быть кратным любому из уже существующих и не должно образовывать петлю. Чтобы ни одно из этих ребер гарантированно не попало в минимальное остовное дерево/кратчайший путь, вес каждого из этих ребер можно принять как длину кратчайшего пути, увеличенного на \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. \u003c/p\u003e\u003c/div\u003e","tags":[]}}