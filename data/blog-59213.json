{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1525279036,"rating":29,"authorHandle":"kayak","modificationTimeSeconds":1525279036,"id":59213,"title":"\u003cp\u003eSome questions about Informatics Olympiad preparation\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello Codeforces, I\u0027m new to competitive programming (that\u0027s I know basic c++ syntax and basic algorithms like what\u0027s in first half of \u0026quot;Algorithm Design\u0026quot;). I have a bit of math contest background (nothing good, I couldn\u0027t even make to national MO camp. Just saying this because I know a bit of combinatorics/number theory so I don\u0027t need to relearn the basic combinatorics again for OI). I have a few questions:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eAre Codeforces problems good for practice? Which other judges/contests (eg: COCI) other than USACO are good for OI practice, and where I can find the judge for submission and official editorials ? For USACO, is there some places where I can read the alternative solutions to a problem rather than the ones mentioned in the official editorial?\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eWhile learning some C++ libraries (eg STL), should I practice implementing the features myself before learning them ? Also, which sites are good for learning the standard libraries used in OI ? I tried bunch of USACO problems, and silver ones looked easy and platinum ones looked too hard and requiring a decent algorithmic knowledge, and gold seems to be fit (hard but not too hard) for my purposes now but I don\u0027t have good implementation skills and knowledge of C++ libraries (eg idk any of \u003ccode\u003e\u0026lt;bits\u0026gt;/\u0026lt;algorithm\u0026gt;/\u0026lt;stlib\u0026gt;\u003c/code\u003e) required to code the problems.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eFor learning algorithms, which are better: online blogs or CLRS or other books (eg CP3)? I find the contents in CLRS to be interesting and fun to read but I read in Quora that it\u0027s useless and waste of time to learn stuff from CLRS for OI (Also it doesn\u0027t provide implementation). I also have CP3 by Halim and Halim but the major problem is that there are huge amount of problems and they\u0027re not sorted by difficulty so I fear I may waste a huge chunk of my time solving easy problems and not improving. I also read some criticism for it for being not very good, is this book good or are there any other book better for learning intermediate algorithms/data structures ? \u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eI don\u0027t like to work on easy problems (which takes less than thirty minutes), and I prefer to learn algorithms more from solving problems which requires that algorithm and failing to solve them and then learning the algorithms figuring out how I could come up with it rather than learning them beforehand. This takes a twice or more time rather than learning algorithms normally, but I think this is better for practice and building intuition. Is this strategy OK, or should I do it in the reverse way?\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eSorry for making this post long. Thanks. \u003c/p\u003e\u003c/div\u003e","tags":["informatics","advice"]}}