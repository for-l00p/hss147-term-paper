{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1431383862,"rating":563,"authorHandle":"I_love_Hoang_Yen","modificationTimeSeconds":1431425450,"id":17842,"title":"\u003cp\u003eThe \u0027science\u0027 of training in competitive programming\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSo few minutes ago \u003ca href\u003d\"https://www.quora.com/What-is-the-best-strategy-to-improve-my-skills-in-Competitive-programming-in-2-3-months/answer/Thanh-Trung-Nguyen\"\u003eI answered this question on Quora\u003c/a\u003e. It felt like a good answer (because it has pictures), so I would like to share it again here.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eIf you don\u0027t see the images, just click the Quora link above\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eMany people tell you that solving lots of problems and you will become red on Topcoder/Codeforces one day. It is true, and is the only universally approved way in competitive programming community, but actually it is just half of the story. Let me first explain to you the \u0027science\u0027 of problem solving (which is not very scientific, since it was only developed by myself).\u003c/p\u003e\u003cp\u003eFor each problem, in order to solve it, you must jump over a gap. It can be either a difficult implementation, or some hard-to-see observation, or difficult algorithm, etc.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://tinypic.com?ref\u003d353d2df\"\u003e\u003cimg alt\u003d\"Image and video hosting by TinyPic\" border\u003d\"0\" src\u003d\"/predownloaded/50/fe/50fec812fccfdfe684ae7e26e842085ba296b117.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFor me, some problems are very easy (e.g. Codeforces div 2 A, B..), because the gap feel so small to me, and passing through them feels just like casual walking.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://tinypic.com?ref\u003d55fcp2\"\u003e\u003cimg alt\u003d\"Image and video hosting by TinyPic\" border\u003d\"0\" src\u003d\"/predownloaded/ef/15/ef150035aef5656ae0a7afb02e4f8c389349fa28.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSome problems are very hard. The gap is just too huge, or there are many many gaps, and you can get stuck in the middle because you\u0027re too tired after maybe first gap.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://tinypic.com?ref\u003dims6za\"\u003e\u003cimg alt\u003d\"Image and video hosting by TinyPic\" border\u003d\"0\" src\u003d\"/predownloaded/7b/ba/7bbab69337f6a90830b973161f75bd87c1428b4f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003eUsing this science, we can explain a lot of phenomenon in the competitive programming world:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eSome guys learn very fast, got to div 1 only after like a couple of weeks after he just started programming: Some people are born with high jumping ability (problem solving skill). They can jump over average gaps easily.\u003c/li\u003e   \u003cli\u003eThe more you train, the better you become: Of course, if you jump around all day, you must be somewhat better at jumping through gaps, and thus being able to solve more difficult problems in less time, since you don\u0027t need lots of mental preparation or warm up excercise before jumping.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eBut.. it also means that, if you just solve too easy problems, you can still only walk through small gaps. You may walk through gaps faster, but you are still unable to jump.\u003c/p\u003e\u003cp\u003eSo yes, the best strategy to improve your competitive programming skill is to practice a lot, but you must solve gradually harder problems, not just the easy ones. Get out of your comfortable zone and challenge yourself. For example, if you solve problems on Codeforces:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eSort by number of people who solved it.\u003c/li\u003e   \u003cli\u003eStart with page 1\u003c/li\u003e   \u003cli\u003eSolve some problems. If you feel you can solve them in like 5-10 mins, immediately ignore the other problems, move on to page 2\u003c/li\u003e   \u003cli\u003eContinue until you feel challenged (e.g. need like an hour to solve / can not solve at all / ...).\u003c/li\u003e   \u003cli\u003eTry really hard, but if you fail, look at editorial, ask for solutions, ...\u003c/li\u003e \u003c/ul\u003e\u003c/div\u003e","tags":["rant","whoreadstaganyway","training","quora"]}}