{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1479400280,"rating":-28,"authorHandle":"damianwolf","modificationTimeSeconds":1479401615,"id":48439,"title":"\u003cp\u003eSamples of common python problems and their solution\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eWhen it comes to Python, the first things that come to mind are simplicity and the ability to work seamlessly on complex projects. And, why not? Python is a high-level programming language created for the new generation of programmers who want to solve problems and not reinvent the wheel.\u003c/p\u003e\u003cp\u003ePython is an excellent choice for data scientists, web developers, and even game programmers. The wide range of uses enables Python to be one of the best programming languages available. It is also used extensively in teaching beginners on “how to code”. Platforms such as \u003ca href\u003d\"http://www.livecoding.tv\"\u003eLivecoding.tv\u003c/a\u003e are seeing a surge in developers who are interested in broadcasting new projects using Python, especially to beginners.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/d6/cd/d6cd5d14432b15ad5b1d11972c3d5901ecf2e1d5.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003ePython is also ideal for Rapid Application Development because of the ecosystem surrounding the programming language. For example, \u003ca href\u003d\"https://www.djangoproject.com/\"\u003eDjango\u003c/a\u003e, a Python Web Framework, offers rapid web development. There are also a large number of libraries you can use for Rapid Application Development.\u003c/p\u003e\u003cp\u003eNow, when it comes to Python, there are some common mistakes made by both beginners and experienced developers. If you visit \u003ca href\u003d\"https://www.livecoding.tv/livestreams/\"\u003elive broadcasts\u003c/a\u003e, you can see many developers getting stuck on some of these common problems. These mistakes can only lead to time waste and, therefore, must be avoided. Knowing common pitfalls can make you a better Python developer, and helps you move your code to the next level. Let’s get started with some common Python errors that developers should know about.\u003c/p\u003e\u003ch4\u003eAdvanced: Python Scope Roles\u003c/h4\u003e\u003cp\u003eIf you have ever worked with Object Oriented Programming(OOP), you should have a good understanding of how Python Scope Resolution works. Python Scope works with a LEGB framework, where L stands for Local, E for Enclosing function locals, G for Global, and B for Built-in. You can read more about it \u003ca href\u003d\"http://stackoverflow.com/questions/291978/short-description-of-scoping-rules\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003ePython scopes are simple to understand but can be confusing when used with different data types. Let’s look at some examples to clearly understand the picture.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e var_one \u003d 1\n\n\u003d\u0026gt; None   def var_test(): \n\n..   var_one +\u003d1 \n\n..   print (var_one) \n\n..   \n\n\u003d\u0026gt; None   var_test()\n\nTraceback (most recent call last):\n\n  File \u0026quot;python\u0026quot;, line 1, in \u0026lt;module\u0026gt;\n\n  File \u0026quot;python\u0026quot;, line 2, in var_test\n\nUnboundLocalError: local variable \u0027var_one\u0027 referenced before assignment\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou might be surprised to see UnboundLocalError as you might think that var_one is already defined. However, it is out of scope when it comes to the var_test(). The only solution is to declare the variable within the function.\u003c/p\u003e\u003cp\u003eSimilar kinds of behavior can also be seen when working on Lists. You can read more about them \u003ca href\u003d\"http://www.python-course.eu/python3_global_vs_local_variables.php\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch4\u003eAdvanced: Creating modules that are already in Python libraries.\u003c/h4\u003e\u003cp\u003eThat’s one of the most common mistakes that developers make when naming their functions similar to already available functions in Python’s rich library. \u003c/p\u003e\u003cp\u003eIf your code has a crypt function in your code, it is undeniably going to get into conflict with the standard library which provides an interface to the crypt(3) routine. The impacts get worse as it is used to check Unix passwords and acts as a one-way hash function.\u003c/p\u003e\u003cp\u003eTo avoid the problem, you need to ensure that modules are named differently. This can easily be used to avoid conflict when importing libraries in your program, keeping app behavior as intended.\u003c/p\u003e\u003ch4\u003eBeginner: Not doing proper indentation\u003c/h4\u003e\u003cp\u003ePython indentation is different from other programming languages. For example, in Java, if the indentation is not maintained, the program will execute without any issues, but when it comes to Python, proper indentation is a must.\u003c/p\u003e\u003cp\u003eLet’s look at the following code.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef indentation_example():\n    print \u0026quot;this will work \\n\u0026quot;\n    \nindentation_example()\n                                                       \nsh-4.3$ python main.py                                                                            \nthis will work  \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBut, if you just miss the indentation inside the method, things will not work as intended.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef indentation_example():\nprint \u0026quot;this will work \\n\u0026quot;\nindentation_example()\n\nsh-4.3$ python main.py                                                                            \n  File \u0026quot;main.py\u0026quot;, line 2                                                                          \n    print \u0026quot;this will work \\n\u0026quot;                                                                     \n        ^                                                                                         \nIndentationError: expected an indented block \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe indentation rules cannot be bypassed by using bracers, and hence care needs to be taken at all time. The best solution is to use any of the popular text editor or IDEs for Python such as Sublime Text or \u003ca href\u003d\"https://www.jetbrains.com/pycharm/\"\u003ePycharm\u003c/a\u003e. If you are curious about the indentation rules or want to see a style guide for Python, read PEP8, Style Guide for Python Code here. \u003c/p\u003e\u003ch4\u003eBeginner: Enumeration\u003c/h4\u003e\u003cp\u003eAnother problem common among new time Python learners is confusing iteration and enumeration over a list. For the beginners it won’t be much of an issue, but for those who have worked with other programming languages such as Java and C++, things can get a little confusing.\u003c/p\u003e\u003cp\u003eFor example, most programming languages have simple loop structure to go through a list or array in the below code.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (int i\u003d0; i\u0026lt;5; i++ ) { System.out.println(“Count is:” + i); }\n\nOutput: 0,1,2,3,4\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHowever, Python array iteration can be different. In Python, you can go through each of the array elements without the help of the indices. Let’s take a look at an example.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  arr \u003d [1,2,3,4,5]\n\n\u003d\u0026gt; None   \n\nfor each in arr: \n\n..   print (each) \n\n..   \n \n1\n\n2\n\n3\n\n4\n\n5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow if you want to use indices, you need to use the built-in enumerate function. This function takes a sequence and starting position as arguments.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003earr \u003d [5,6,7,8,9,10]\n\n\u003d\u0026gt; None   \n\nfor each in enumerate(arr): \n\n..   print (each) \n\n.. \n  \n(0, 5)\n\n(1, 6)\n\n(2, 7)\n\n(3, 8)\n\n(4, 9)\n\n(5, 10)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see from the code above, each element is printed as a pair with indices and value as a first and second element. You can read more about enumerate function \u003ca href\u003d\"https://docs.python.org/2/library/functions.html#enumerate\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch4\u003eBeginner:Working with Modules\u003c/h4\u003e\u003cp\u003eModules can be a tricky proposition to work with in the beginning. It’s easy to call methods, but when you are importing your own modules, things can become complicated. Let’s look at some example.\u003c/p\u003e\u003cp\u003eWhen you define a method, it looks like below.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#amodule.py\n\ndef a_module():\n\n    print \u0026quot;5 \\n\u0026quot;\n  \na_module()\n\n#prints 5 when called\n\nInput: a_module()\n\nOutput: 5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, when you try to use the method in a different file, importing the amodule will result in an instant out of 5 which is not desirable in many cases. \u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; import amodule\n\n5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you want to avoid this common mistake, you need to call the method under the if \u003cstrong\u003ename\u003c/strong\u003e \u003d\u003d ‘__main__’:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#amodule.py\n\ndef a_module():\n\n    print \u0026quot;5 \\n\u0026quot;\n\n    \nif __name__ \u003d\u003d \u0027__main__\u0027:\n\n    a_module()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, when you import the a_module() method without executing it. It will only execute when it is executed explicitly.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;import amodule\n\n\u0026gt;\u0026gt;\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003eConclusion\u003c/h4\u003e\u003cp\u003ePython is undoubtedly the most advanced programming language out there. It comes with a huge list of features which can easily confuse Python developers. This list is in no way exhaustive of all the common errors, but you can get an idea. \u003c/p\u003e\u003cp\u003eWhen it comes to understanding common developer habits, watching them code live can be a good way to learn. Learning from your own mistakes is one way to learn, but \u003ca href\u003d\"https://www.livecoding.tv/learn/python/\"\u003ewatching others\u003c/a\u003e make a mistake and rectify it can be much more valuable. \u003c/p\u003e\u003cp\u003eWhat do you think about the other common errors when developing with Python? Comment below and let us know.\u003c/p\u003e\u003c/div\u003e","tags":["#python","samples","#coding"]}}