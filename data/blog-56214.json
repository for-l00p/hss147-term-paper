{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1512667787,"rating":-28,"authorHandle":"CodingKnight","modificationTimeSeconds":1515351379,"id":56214,"title":"\u003cp\u003eComputing operations on sets of integer numbers in C++ using bitset STL bitwise operators\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThe following declares a C++ class template \u003ccode\u003eint_set\u0026lt; int From, int To \u0026gt;\u003c/code\u003e that uses bitset STL to compute operations on sets of integers using bitset STL bitwise operators. \u003ccode\u003eint_set\u0026lt; int From, int To \u0026gt;\u003c/code\u003e is a class of objects that represent subsets of universal domain U \u003d [ From, To ]. \u003c/p\u003e\u003cp\u003eEach object stores the membership function of the corresponding subset using a private \u003ccode\u003ebitset\u0026lt;N\u0026gt;\u003c/code\u003e member exists, where \u003ccode\u003eN \u003d ( To - From + 1 )\u003c/code\u003e, and can be updated using set insertion/deletion operations.\u003c/p\u003e\u003cp\u003eThe main advantage of \u003ccode\u003eint_set\u0026lt; int From, int To \u0026gt;\u003c/code\u003e is that the set insertion/deletion operations as well as the fundamental set union, intersection, complement, difference, and symmetric difference operations are implemented using the standard C++ bitset STL bitwise operators, unlike the corresponding set STL operations that require adding/deleting elements to/from the binary tree representation of the set, which improves the performance of those operations.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/r9mh55\"\u003eint_set.h and sample test program\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}