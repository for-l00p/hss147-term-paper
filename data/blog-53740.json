{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1502155357,"rating":0,"authorHandle":"vamaddur","modificationTimeSeconds":1502155357,"id":53740,"title":"\u003cp\u003eUSACO 2015 Gold January Contest Grass Cownoisseur: Longest Path on a DAG... With a Twist\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eProblem: \u003ca href\u003d\"http://www.usaco.org/index.php?page\u003dviewproblem2\u0026amp;cpid\u003d516\"\u003ehttp://www.usaco.org/index.php?page\u003dviewproblem2\u0026amp;cpid\u003d516\u003c/a\u003e Official Solution: \u003ca href\u003d\"http://www.usaco.org/current/data/sol_grass_gold.html\"\u003ehttp://www.usaco.org/current/data/sol_grass_gold.html\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI was able to reduce the problem to solving it on a weighted DAG after compressing the graph into strongly connected components. However, I am not able to handle the caveat of being able to traverse a reversed edge at most once. \u003c/p\u003e\u003cp\u003eIs there a way to solve this final step of the problem without dynamic programming? If not, can someone explain what exactly is going on in the \u0026quot;solve\u0026quot; function and calls to it?\u003c/p\u003e\u003cp\u003ePlease help, and thanks in advance!\u003c/p\u003e\u003c/div\u003e","tags":["directed graph","dynamic programming"]}}