{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1493962389,"rating":81,"authorHandle":"AN_out_of_date","modificationTimeSeconds":1494160764,"id":51846,"title":"\u003cp\u003eCodeforces Round #411 Editorial \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eWe were waiting several weeks to setting this contest and hope the problem was good enough.\u003c/p\u003e\u003ch4\u003eEvents\u003c/h4\u003e\u003cp\u003eThere was a difficulty with \u003ca href\u003d\"/contest/805/problem/E\" title\u003d\"Codeforces Round 411 (Div. 2)\"\u003e805E - Ice cream coloring\u003c/a\u003e/\u003ca href\u003d\"/contest/804/problem/C\" title\u003d\"Codeforces Round 411 (Div. 1)\"\u003e804C - Ice cream coloring\u003c/a\u003e. A little bug in the checker fortunately yields accepting an incorrect solution of only one person during the contest. I should apologize all of you because of this.\u003c/p\u003e\u003cp\u003eFor this sentence, \u003ccode\u003eVertices which have the i-th (1 ≤ i ≤ m) type of ice cream form a connected subgraph.\u003c/code\u003e You can find the meaning of \u0026quot;connected subgraph\u0026quot; with \u003ca href\u003d\"http://mathworld.wolfram.com/ConnectedGraph.html\"\u003econnected\u003c/a\u003e and \u003ca href\u003d\"http://www.edmath.org/MATtours/discrete/concepts/csubgr.html\"\u003esubgraph\u003c/a\u003e, thus it can be empty as it is more logical. How ever, I should apologize all of the participants because of weak sample tests in the statement.\u003c/p\u003e\u003cp\u003eI will write the full editorial in the few next days, now some hints and short solutions exist here.\u003c/p\u003e\u003ch2\u003eHints\u003c/h2\u003e\u003cp\u003e\u003ca href\u003d\"/contest/805/problem/A\" title\u003d\"Codeforces Round 411 (Div. 2)\"\u003e805A - Fake NP\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eAlmost half of numbers are divisible by two.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003ca href\u003d\"/contest/805/problem/B\" title\u003d\"Codeforces Round 411 (Div. 2)\"\u003e805B - 3-palindrome\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eFor the string shouldn\u0027t be any \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e - 2\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 2\u003c/sub\u003e\u003c/span\u003e. Make some examples of little sizes.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003ca href\u003d\"/contest/805/problem/C\" title\u003d\"Codeforces Round 411 (Div. 2)\"\u003e805C - Find Amir\u003c/a\u003e / \u003ca href\u003d\"/contest/804/problem/A\" title\u003d\"Codeforces Round 411 (Div. 1)\"\u003e804A - Find Amir\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eFind minimum weighted edges.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint2\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThere is some edges with weight 0, try to connect them in a carefully way.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003ca href\u003d\"/contest/805/problem/D\" title\u003d\"Codeforces Round 411 (Div. 2)\"\u003e805D - Minimum number of steps\u003c/a\u003e / \u003ca href\u003d\"/contest/804/problem/B\" title\u003d\"Codeforces Round 411 (Div. 1)\"\u003e804B - Minimum number of steps\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThe last situation is some \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003ea\u003c/i\u003e\u0027\u003c/span\u003e characters after some \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003eb\u003c/i\u003e\u0027\u003c/span\u003e ones.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint2\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThe last situation is unique.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint3\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThe number of steps is also unique.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint4\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eEach \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003eb\u003c/i\u003e\u0027\u003c/span\u003e character makes a number of \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003eb\u003c/i\u003e\u0027\u003c/span\u003e characters in the last situation according to the number of \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003ea\u003c/i\u003e\u0027\u003c/span\u003e characters before it. \u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003ca href\u003d\"/contest/805/problem/E\" title\u003d\"Codeforces Round 411 (Div. 2)\"\u003e805E - Ice cream coloring\u003c/a\u003e / \u003ca href\u003d\"/contest/804/problem/C\" title\u003d\"Codeforces Round 411 (Div. 1)\"\u003e804C - Ice cream coloring\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eWe want to color the ice creams in a way that all of ice creams in a vertex would be different with this condition that if two vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e have ice cream \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, then all of vertices in the unique path of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e would have it.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint2\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eLet\u0027s have a trivial lower-bound for the answer.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eanswer\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThe trivial lower-bound should be maximum size of vertices\u0027 sets.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint3\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eYou can prove that by induction on leaves of the tree. And code it how you proved it. \u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003ca href\u003d\"/contest/805/problem/F\" title\u003d\"Codeforces Round 411 (Div. 2)\"\u003e805F - Expected diameter of a tree\u003c/a\u003e / \u003ca href\u003d\"/contest/804/problem/D\" title\u003d\"Codeforces Round 411 (Div. 1)\"\u003e804D - Expected diameter of a tree\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eLet\u0027s solve the problem for just two tree. \u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eTrivail solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is diameter of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e-th tree and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the maximum path starting from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, for all valid \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, assume that the edge is between them and find the diameter with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e + 1, \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e))\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003econsider this trivial \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d9/f1/d9f1a31f0f131ef8b045daa089efc9a28cacb3b3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution and try to improve it to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4c/00/4c002d997d87a9179d535a4eca1851338ca2e67b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint2\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/26/71/2671c191086375fcf196181b76359f6e373268b1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eActually\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eseems SQRT. \u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHow?\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eFor every new query, try to do it with the complexity of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/84/42/84427f72f754a6aab96aa7d6b6490a94ba9ccdb9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e , which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esz\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e means size of the components of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th vertex. Prove its complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8a/b2/8ab23a3b538018b570052101058c1cc0903a91c3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003ca href\u003d\"/contest/804/problem/E\" title\u003d\"Codeforces Round 411 (Div. 1)\"\u003e804E - The same permutation \u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eYou can prove, we need even number of swaps to reach the same permutation. So \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/23/18/231846399eccc01650f62291db24b5cd70656e9e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and the answer for \u003cspan class\u003d\"tex-span\"\u003e4·\u003ci\u003ek\u003c/i\u003e + 3\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e4·\u003ci\u003ek\u003c/i\u003e + 4\u003c/span\u003e is -1.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint2\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThe solution almost is constructive.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eTry to solve it for n \u003d 4\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eAnd then solve \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 8\u003c/span\u003e by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 4\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint3\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eLet\u0027s partition \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 4·\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e numbers to classes, each class contains a \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e consecutive numbers. And when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 4·\u003ci\u003ek\u003c/i\u003e + 1\u003c/span\u003e there is a class with \u003cspan class\u003d\"tex-span\"\u003e5\u003c/span\u003e consecutive numbers.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003ca href\u003d\"/contest/804/problem/F\" title\u003d\"Codeforces Round 411 (Div. 1)\"\u003e804F - Fake bullions\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThe problem consists two parts, the first part is to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, the minimum and the maximum score \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th vertex may get after the score distribution. The second part is to finding the answer and all your need to solve this part is those two arrays. It is trivial \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is number of real bullion of golds in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th vertex.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint2\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eLet\u0027s find the scores for two vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e have a directed edge to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eu -\u0026gt; v\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4f/21/4f2146a0d1445bffa969a8c74647da66597a9911.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th element from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e-th vertex was painted and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th element from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e-th vertex was unpainted such that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/35/a1/35a111e820e6317b11757b5a710c838b9dd0f3dd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th element from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e-th vertex will be painted quickly. For two vertex, we can do it in complexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cc/fa/ccfa5be98306b7d00f89044220477868b2a08879.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint3\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eIf we have this directed walk \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e}\u003c/span\u003e, you should affect \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e how I said in the previous hint with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/da/3a/da3a92fa2e32d481917f7c13f215a5a5c025b150.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eWhat about strogly connected components.\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/83/4a/834a0ce717b8132e0e91f0b1a80eb126a4fb398a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eIn this components if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th element from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e-th vertex was painted then for all of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e such that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/35/a1/35a111e820e6317b11757b5a710c838b9dd0f3dd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th element from all vertices will be painted quickly. For this components, we can do it with complexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4d/b8/4db8a63ca61e8227be0d405d5d9ff325ee75ca13.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. In the main problem, we can suppose all of a strongly conected component a vertex with size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e in this way and we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e with answer of its component\u0027s vertex multiplied by \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cb/61/cb6189d5a017dd398d5f88a6b3290d696fd88090.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint4\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eSCC of the tournament yields a Hamiltonian path of strongly connected components( if we consider each component a vertex ). The problem decreased to solve this path. we can solve the path with the complexity of sum of vertices\u0027 sizes.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint5\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eNow, for every vertex we have minimum and maximum score it may get. For B known vertices, to check if they can be the wanted set, we can assume their score be maximum possible and the other scores be minimum possible. If they were top, then they can be a sample of the wanted set.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint6\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eConsider a sorted sequence of combination of two array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emn\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eFor every vertex, consider the number of ways it(with its maximum score) can be the minimum score of the set of B vertices.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003ch1\u003eSolutions\u003c/h1\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"805A\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFrom: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Chamran\" title\u003d\"Candidate Master Chamran\"\u003eChamran\u003c/a\u003e, Writer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Chamran\" title\u003d\"Candidate Master Chamran\"\u003eChamran\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/96/2996191572ddc5b92333b99b829518c320d9e80a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eMemory complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/96/2996191572ddc5b92333b99b829518c320d9e80a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003epython3\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003el,r\u003dlist(map(int,input().split()))\nprint(2 if l\u0026lt;r else l)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eint main(){\n    int l, r;\n    scanf(\u0026quot;%d%d\u0026quot;, \u0026amp;l, \u0026amp;r);\n    printf(\u0026quot;%d\u0026quot;, l \u003d\u003d r ? l : 2);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"805B\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFrom: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Chamran\" title\u003d\"Candidate Master Chamran\"\u003eChamran\u003c/a\u003e, Writer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Chamran\" title\u003d\"Candidate Master Chamran\"\u003eChamran\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/96/2996191572ddc5b92333b99b829518c320d9e80a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/de/1a/de1a47036cb8f3d5a2eb2756d7df29e368ba0694.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eMemory complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/de/1a/de1a47036cb8f3d5a2eb2756d7df29e368ba0694.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003epython3\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eprint((\u0026quot;aabb\u0026quot; * 50000)[:int(input())])\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eint N;\nint main()\n{\n\tscanf(\u0026quot;%d\u0026quot;, \u0026amp;N);\n\tfor (int i \u003d 0; i \u0026lt; N; i++)\n\t\tputchar(i \u0026amp; 2 ? \u0027b\u0027 : \u0027a\u0027);\n\tputs(\u0026quot;\u0026quot;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"805C\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFrom: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Chamran\" title\u003d\"Candidate Master Chamran\"\u003eChamran\u003c/a\u003e, Writer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Chamran\" title\u003d\"Candidate Master Chamran\"\u003eChamran\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/96/2996191572ddc5b92333b99b829518c320d9e80a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/96/2996191572ddc5b92333b99b829518c320d9e80a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eMemory complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/96/2996191572ddc5b92333b99b829518c320d9e80a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003epython3\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eprint((int(input())-1)//2)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eint main(){\n\tint n;\n\tscanf(\u0026quot;%d\u0026quot;, \u0026amp;n);\n\tprintf(\u0026quot;%d\\n\u0026quot;, (n-1)/2);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"805D\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFrom: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/MohammadJA\" title\u003d\"Candidate Master MohammadJA\"\u003eMohammadJA\u003c/a\u003e, Writer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/MohammadJA\" title\u003d\"Candidate Master MohammadJA\"\u003eMohammadJA\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/96/2996191572ddc5b92333b99b829518c320d9e80a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/de/1a/de1a47036cb8f3d5a2eb2756d7df29e368ba0694.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eMemory complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/de/1a/de1a47036cb8f3d5a2eb2756d7df29e368ba0694.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003epython3\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003es \u003d input()\ncnt \u003d 0\nm\u003d10**9 + 7\nt \u003d 0\n\nfor i in range(len(s)):\n\tif s[~i] \u003d\u003d \u0027a\u0027:\n\t\tcnt \u003d (cnt+t)%m\n\t\tt \u003d (t*2)%m\n\telse:\n\t\tt +\u003d 1\nprint(cnt)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eint c,d,i,n,m,k,x,j\u003d1000000007;\nstring s;\nmain(){\n\tcin\u0026gt;\u0026gt;s;\n\tfor(i\u003ds.size()-1;i\u0026gt;\u003d0;i--){\n\t\tif(s[i]\u003d\u003d\u0027b\u0027)c++;else{\n\t\t\tk+\u003dc;c*\u003d2;k%\u003dj;c%\u003dj;\n\t\t}\n\t}\n\tcout\u0026lt;\u0026lt;k;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"805E\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFrom: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Chamran\" title\u003d\"Candidate Master Chamran\"\u003eChamran\u003c/a\u003e, Writer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Chamran\" title\u003d\"Candidate Master Chamran\"\u003eChamran\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/39/35/39358a46691d8cf899b19006b6b2239466f65eff.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eMemory complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/61/1f/611f10c49fd3fd4f27d1d3e2a6c623b929d212af.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e//              +-- -- --++-- +-In the name of ALLAH-+ --++-- -- --+              \\\\\n\nint const N \u003d 3e5 + 10 ;\nint n , m , ans \u003d 1 , res[N] ;\nvector \u0026lt;int\u0026gt; g[N] , vec[N] ;\n\ninline bool cmp (int a , int b) {\n\treturn res[a] \u0026lt; res[b] ;\n}\n\nvoid dfs (int v , int par \u003d -1) {\n\tint col \u003d ans  , p \u003d (int)vec[v].size() - 1 ;\n\n\tsort(vec[v].begin() , vec[v].end() , cmp) ;\n\n\tfor (int x : vec[v]) {\n\t\tif (res[x]) {\n\t\t\tcontinue ;\n\t\t}\n\n\t\twhile (p \u0026gt;\u003d 0 \u0026amp;\u0026amp; col \u003d\u003d res[vec[v][p]]) {\t\t\t\n\t\t\tcol -- ;\n\t\t\tp -- ;\n\t\t}\n\n\t\tres[x] \u003d col ;\n\t\tcol -- ;\n\t\n\t}\n\t\n\tfor (int u : g[v]) {\n\t\tif (u !\u003d par) {\n\t\t\tdfs(u , v) ;\n\t\t}\n\t}\n}\n\nint main(){\n\tios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0) ;\n\n\tcin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m ;\n\t\n\tfor (int i \u003d 0 ; i \u0026lt; n ; i ++) {\n\t\tint sz ;\n\t\tcin \u0026gt;\u0026gt; sz ;\n\n\t\tans \u003d max(ans , sz) ;\n\n\t\twhile (sz --) {\n\t\t\tint x ;\n\t\t\tcin \u0026gt;\u0026gt; x ;\n\t\t\tx -- ;\n\t\t\tvec[i].push_back(x) ;\n\t\t}\n\t}\n\n\tfor (int i \u003d 0 ; i \u0026lt; n - 1 ; i ++) {\n\t\tint u , v ;\n\t\tcin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v ;\n\t\tu -- , v -- ;\n\n\t\tg[u].push_back(v) ;\n\t\tg[v].push_back(u) ;\n\t}\n\n\tdfs(0) ;\n\n\tcout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; \u0027\\n\u0027 ;\n\n\tfor (int i \u003d 0 ; i \u0026lt; m ; i ++) {\n\t\tcout \u0026lt;\u0026lt; max(res[i] , 1) \u0026lt;\u0026lt; \u0027 \u0027 ;\n\t}\n\tcout \u0026lt;\u0026lt; \u0027\\n\u0027 ;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/56/33/5633de274dcefd79b4c94c7c9ec40bc01882b5d3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eMemory complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/61/1f/611f10c49fd3fd4f27d1d3e2a6c623b929d212af.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003evector \u0026lt;int\u0026gt; Vs[300050];\nvector \u0026lt;int\u0026gt; conn[300050];\n\nint ans[300050];\nbool chk[500050];\nbool dchk[300050];\nvector \u0026lt;int\u0026gt; Vu;\nvoid DFS(int n) {\n\tdchk[n] \u003d true;\n\n\tfor (auto it : Vs[n]) {\n\t\tif (ans[it]) chk[ans[it]] \u003d true;\n\t\telse Vu.push_back(it);\n\t}\n\n\tint a \u003d 1;\n\tfor (auto it : Vu) {\n\t\twhile (chk[a]) a++;\n\t\tans[it] \u003d a++;\n\t}\n\tfor (auto it : Vs[n]) chk[ans[it]] \u003d false;\n\tVu.clear();\n\n\tfor (auto it : conn[n]) {\n\t\tif (dchk[it]) continue;\n\t\tDFS(it);\n\t}\n}\nint main() {\n\tint N, M, i;\n\tscanf(\u0026quot;%d %d\u0026quot;, \u0026amp;N, \u0026amp;M);\n\tfor (i \u003d 1; i \u0026lt;\u003d N; i++) {\n\t\tint t1, t2;\n\t\tscanf(\u0026quot;%d\u0026quot;, \u0026amp;t1);\n\t\twhile (t1--) {\n\t\t\tscanf(\u0026quot;%d\u0026quot;, \u0026amp;t2);\n\t\t\tVs[i].push_back(t2);\n\t\t}\n\t}\n\tfor (i \u003d 1; i \u0026lt; N; i++) {\n\t\tint t1, t2;\n\t\tscanf(\u0026quot;%d %d\u0026quot;, \u0026amp;t1, \u0026amp;t2);\n\t\tconn[t1].push_back(t2);\n\t\tconn[t2].push_back(t1);\n\t}\n\tDFS(1);\n\n\tint mx \u003d 0;\n\tfor (i \u003d 1; i \u0026lt;\u003d M; i++) {\n\t\tmx \u003d max(mx, ans[i]);\n\t\tif (ans[i] \u003d\u003d 0) ans[i] \u003d 1;\n\t}\n\tmx \u003d max(mx, 1);\n\tprintf(\u0026quot;%d\\n\u0026quot;, mx);\n\tfor (i \u003d 1; i \u0026lt;\u003d M; i++) printf(\u0026quot;%d \u0026quot;, ans[i]);\n\t\n\treturn !printf(\u0026quot;\\n\u0026quot;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"805F\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFrom: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/MohammadJA\" title\u003d\"Candidate Master MohammadJA\"\u003eMohammadJA\u003c/a\u003e, Writer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/MohammadJA\" title\u003d\"Candidate Master MohammadJA\"\u003eMohammadJA\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/11/49/1149e1f778e2b0e0f820a2175622061f6ee9d9cb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eMemory complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/de/1a/de1a47036cb8f3d5a2eb2756d7df29e368ba0694.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eusing namespace std ;\n\n#define int long long\n\nconst int MAXN \u003d 1e5 + 100 ;\n\nvector\u0026lt;int\u0026gt;ver[MAXN] , com[MAXN] , ps[MAXN] ; \nint vis[MAXN] , dis[MAXN] ; \nint mxr , mxid ; \nvoid dfs(int v , int col \u003d -1 , int h \u003d 0 , int par \u003d -1){\n\tvis[v] \u003d max(vis[v] , col) ; \n\tif(mxr \u0026lt; h)mxid \u003d v , mxr \u003d h ; \n\tdis[v] \u003d max(h , dis[v]) ; \n\tif(col \u0026gt; 0)com[col] . push_back(dis[v]) ; \n\tfor(auto u : ver[v]){\n\t\tif(u \u003d\u003d par)continue ; \n\t\tdfs(u , col , h + 1 , v) ; \n\t}\n}\nmap\u0026lt;pair\u0026lt;int , int\u0026gt; , int\u0026gt; check ;\nint32_t main(){\n    ios_base::sync_with_stdio(0) ;\n    cin . tie(0) ; cout . tie(0) ;\n    int n , m , q ; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026gt;\u0026gt; q ; \n    for(int i \u003d 0 ; i \u0026lt; m ; i ++){\n    \tint x , y ; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y ; \n    \tx -- , y -- ; \n    \tver[x] . push_back(y) ; \n    \tver[y] . push_back(x) ;\n    }\n    int cnt \u003d 0 ; \n    for(int i \u003d 0 ; i \u0026lt; n ; i ++){\n    \tif(vis[i])continue ; \n    \tmxr \u003d 0 , mxid \u003d i ; \n    \tdfs(i) ; \n    \tmxr \u003d 0 ; \n    \tdfs(mxid) ;\n    \tdfs(mxid , ++ cnt) ; sort(com[cnt] . begin() , com[cnt] . end()) ; \n    \tps[cnt] . push_back(0) ; \n    \tfor(auto v : com[cnt])ps[cnt] . push_back(ps[cnt] . back() + v) ; \n    }\n\tcout \u0026lt;\u0026lt; fixed \u0026lt;\u0026lt; setprecision(10) ;\n    while(q --){\n    \tint x , y ; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y ; \n    \tx -- , y -- ; x \u003d vis[x] ; y \u003d vis[y] ; \n    \tif(com[x] . size() \u0026gt; com[y] . size())swap(x , y) ; \n    \tif(x \u003d\u003d y){cout \u0026lt;\u0026lt; -1 \u0026lt;\u0026lt; \u0027\\n\u0027 ; continue ; }\n    \tif(check[{x , y}] \u0026gt; 0){cout \u0026lt;\u0026lt; double(check[{x , y}]) / (1ll * com[x] . size() * com[y] . size()) \u0026lt;\u0026lt; \u0027\\n\u0027 ; continue ; }\n    \tint ans \u003d 0 , mxd \u003d max(com[x] . back() , com[y] . back()) ; \n    \tfor(auto v : com[x]){\n    \t\tint num \u003d lower_bound(com[y] . begin() , com[y] . end() , mxd - v - 1) - com[y] . begin() ; \n    \t\tans +\u003d num * mxd + (com[y] . size() - num) *  (v + 1) + ps[y] . back() - ps[y][num] ; \n    \t}\n    \tcheck[{x , y}] \u003d ans ; \n    \tcout \u0026lt;\u0026lt; double(check[{x , y}]) / (1ll * com[x] . size() * com[y] . size()) \u0026lt;\u0026lt; \u0027\\n\u0027 ; \n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"804E\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFrom: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Chamran\" title\u003d\"Candidate Master Chamran\"\u003eChamran\u003c/a\u003e, Writer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Chamran\" title\u003d\"Candidate Master Chamran\"\u003eChamran\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d9/f1/d9f1a31f0f131ef8b045daa089efc9a28cacb3b3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eMemory complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/96/2996191572ddc5b92333b99b829518c320d9e80a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eint n;\n\nint main()\n{\n\tscanf(\u0026quot;%d\u0026quot;,\u0026amp;n);\n\tif(n%4\u0026gt;1)return printf(\u0026quot;NO\\n\u0026quot;),0;\n\tprintf(\u0026quot;YES\\n\u0026quot;);\n\tfor(int i\u003d1;i\u0026lt;n;i+\u003d4)\n\t{\n\t\tif(n%4)printf(\u0026quot;%d %d\\n%d %d\\n%d %d\\n\u0026quot;,i+2,n,i+2,i+3,i+3,n);\n\t\telse printf(\u0026quot;%d %d\\n\u0026quot;,i+2,i+3);\n\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i,i+2);\n\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+1,i+3);\n\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+1,i+2);\n\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i,i+3);\n\t\tif(n%4)printf(\u0026quot;%d %d\\n%d %d\\n%d %d\\n\u0026quot;,i,n,i,i+1,i+1,n);\n\t\telse printf(\u0026quot;%d %d\\n\u0026quot;,i,i+1);\n\t}\n\tfor(int i\u003d1;i\u0026lt;n;i+\u003d4)\n\t\tfor(int j\u003di+4;j\u0026lt;n;j+\u003d4)\n\t\t{\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+3,j+2);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+2,j+2);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+3,j+1);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i,j+1);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+1,j+3);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+2,j+3);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+1,j+2);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+1,j+1);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+3,j);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+3,j+3);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i,j+2);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i,j+3);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+2,j);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+2,j+1);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i+1,j);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;,i,j);\n\t\t}\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"804F\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFrom: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Chamran\" title\u003d\"Candidate Master Chamran\"\u003eChamran\u003c/a\u003e, Writer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Hifdah\" title\u003d\"Candidate Master Hifdah\"\u003eHifdah\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b2/da/b2da2205f6ee8657cef79546c6e75db923d346d7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eMemory complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/78/87/788734920903c64f43135ee04a6110347566d4cc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eJava8\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.BufferedWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.util.Stack;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport java.util.Vector;\nimport java.io.Writer;\nimport java.io.OutputStreamWriter;\nimport java.util.BitSet;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream \u003d System.in;\n        OutputStream outputStream \u003d System.out;\n        InputReader in \u003d new InputReader(inputStream);\n        OutputWriter out \u003d new OutputWriter(outputStream);\n        TaskF solver \u003d new TaskF();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskF {\n        public int mod \u003d 1000000007;\n        public int n;\n        public int a;\n        public int b;\n        public char[][] adj;\n        public List\u0026lt;Integer\u0026gt;[] graph;\n\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\n            n \u003d in.nextInt();\n            a \u003d in.nextInt();\n            b \u003d in.nextInt();\n            adj \u003d new char[n][n];\n            graph \u003d Stream.generate(ArrayList::new).limit(n).toArray(List[]::new);\n            for (int i \u003d 0; i \u0026lt; n; i++) adj[i] \u003d in.next().toCharArray();\n            for (int i \u003d 0; i \u0026lt; n; i++) {\n                for (int j \u003d 0; j \u0026lt; n; j++) {\n                    if (adj[i][j] \u003d\u003d \u00271\u0027) {\n                        graph[i].add(j);\n                    }\n                }\n            }\n            List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; comp \u003d new SCCTarjan().scc(graph);\n            boolean[][] can \u003d new boolean[n][];\n            int[] low \u003d new int[n];\n            for (int i \u003d 0; i \u0026lt; n; i++) {\n                int q \u003d in.nextInt();\n                char[] w \u003d in.next().toCharArray();\n                can[i] \u003d new boolean[q];\n                for (int j \u003d 0; j \u0026lt; q; j++) {\n                    can[i][j] \u003d w[j] \u003d\u003d \u00271\u0027;\n                    if (can[i][j]) low[i]++;\n                }\n            }\n            int[] wcomp \u003d new int[n];\n            int idx \u003d 0;\n            List\u0026lt;BitSet\u0026gt; bb \u003d new ArrayList\u0026lt;\u0026gt;();\n            List\u0026lt;Integer\u0026gt; bs \u003d new ArrayList\u0026lt;\u0026gt;();\n            for (List\u0026lt;Integer\u0026gt; gg : comp) {\n                int gcd \u003d 0;\n                for (int x : gg) {\n                    gcd \u003d Utils.gcd(gcd, can[x].length);\n                    wcomp[x] \u003d idx;\n                }\n                idx++;\n                BitSet d \u003d new BitSet(gcd);\n                bs.add(gcd);\n                bb.add(d);\n                for (int x : gg) {\n                    for (int i \u003d 0; i \u0026lt; can[x].length; i++) {\n                        if (can[x][i]) {\n                            d.set(i % gcd, true);\n                        }\n                    }\n                }\n            }\n\n            for (int kk \u003d comp.size() - 1; kk \u0026gt; 0; kk--) {\n                int g \u003d Utils.gcd(bs.get(kk), bs.get(kk - 1));\n                BitSet ww \u003d new BitSet(g);\n                for (int i \u003d 0; i \u0026lt; bs.get(kk); i +\u003d g) {\n                    ww.or(bb.get(kk).get(i, i + g));\n                }\n                for (int i \u003d 0; i \u0026lt; bs.get(kk - 1); i++) {\n                    if (ww.get(i % g)) {\n                        bb.get(kk - 1).set(i, true);\n                    }\n                }\n            }\n            int[] high \u003d new int[n];\n            for (int i \u003d 0; i \u0026lt; n; i++) {\n                for (int j \u003d 0; j \u0026lt; can[i].length; j++) {\n                    if (bb.get(wcomp[i]).get(j % bs.get(wcomp[i])))\n                        high[i]++;\n                }\n            }\n            long ret \u003d 0;\n            int[][] comb \u003d Utils.getComb(n + 1, mod);\n            for (int lowest \u003d 0; lowest \u0026lt; n; lowest++) {\n                int countabove \u003d 0;\n                for (int other \u003d 0; other \u0026lt; n; other++) {\n                    if (other \u003d\u003d lowest) continue;\n                    if (low[other] \u0026gt; high[lowest]) {\n                        countabove++;\n                    }\n                }\n                if (countabove \u0026gt;\u003d a) {\n                    continue;\n                }\n                int canbig \u003d 0;\n                for (int other \u003d 0; other \u0026lt; n; other++) {\n                    if (other \u003d\u003d lowest) continue;\n                    if (low[other] \u0026lt;\u003d high[lowest] \u0026amp;\u0026amp; (high[other] \u0026gt; high[lowest] || (high[other] \u003d\u003d high[lowest] \u0026amp;\u0026amp; other \u0026gt; lowest))) {\n                        canbig++;\n                    }\n                }\n\n                for (int take \u003d 0; take \u0026lt; b \u0026amp;\u0026amp; take \u0026lt;\u003d canbig \u0026amp;\u0026amp; take + countabove \u0026lt; a; take++) {\n                    ret \u003d (ret + 1L * comb[canbig][take] * comb[countabove][b - take - 1]) % mod;\n                }\n            }\n            out.println(ret);\n        }\n\n    }\n\n    static class OutputWriter {\n        private final PrintWriter writer;\n\n        public OutputWriter(OutputStream outputStream) {\n            writer \u003d new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n        }\n\n        public OutputWriter(Writer writer) {\n            this.writer \u003d new PrintWriter(writer);\n        }\n\n        public void close() {\n            writer.close();\n        }\n\n        public void println(long i) {\n            writer.println(i);\n        }\n\n    }\n\n    static class Utils {\n        public static int gcd(int a, int b) {\n            return b \u003d\u003d 0 ? a : gcd(b, a % b);\n        }\n\n        public static int[][] getComb(int sz, int mod) {\n            int[][] comb \u003d new int[sz][sz];\n            for (int i \u003d 0; i \u0026lt; sz; i++) {\n                comb[i][0] \u003d 1;\n                for (int j \u003d 1; j \u0026lt;\u003d i; j++) {\n                    comb[i][j] \u003d comb[i - 1][j] + comb[i - 1][j - 1];\n                    if (comb[i][j] \u0026gt;\u003d mod) comb[i][j] -\u003d mod;\n                }\n            }\n            return comb;\n        }\n\n    }\n\n    static class InputReader {\n        private InputStream stream;\n        private byte[] buf \u003d new byte[1024];\n        private int curChar;\n        private int numChars;\n\n        public InputReader(InputStream stream) {\n            this.stream \u003d stream;\n        }\n\n        public int read() {\n            if (this.numChars \u003d\u003d -1) {\n                throw new InputMismatchException();\n            } else {\n                if (this.curChar \u0026gt;\u003d this.numChars) {\n                    this.curChar \u003d 0;\n\n                    try {\n                        this.numChars \u003d this.stream.read(this.buf);\n                    } catch (IOException var2) {\n                        throw new InputMismatchException();\n                    }\n\n                    if (this.numChars \u0026lt;\u003d 0) {\n                        return -1;\n                    }\n                }\n\n                return this.buf[this.curChar++];\n            }\n        }\n\n        public int nextInt() {\n            int c;\n            for (c \u003d this.read(); isSpaceChar(c); c \u003d this.read()) {\n                ;\n            }\n\n            byte sgn \u003d 1;\n            if (c \u003d\u003d 45) {\n                sgn \u003d -1;\n                c \u003d this.read();\n            }\n\n            int res \u003d 0;\n\n            while (c \u0026gt;\u003d 48 \u0026amp;\u0026amp; c \u0026lt;\u003d 57) {\n                res *\u003d 10;\n                res +\u003d c - 48;\n                c \u003d this.read();\n                if (isSpaceChar(c)) {\n                    return res * sgn;\n                }\n            }\n\n            throw new InputMismatchException();\n        }\n\n        public String next() {\n            int c;\n            while (isSpaceChar(c \u003d this.read())) {\n                ;\n            }\n\n            StringBuilder result \u003d new StringBuilder();\n            result.appendCodePoint(c);\n\n            while (!isSpaceChar(c \u003d this.read())) {\n                result.appendCodePoint(c);\n            }\n\n            return result.toString();\n        }\n\n        public static boolean isSpaceChar(int c) {\n            return c \u003d\u003d 32 || c \u003d\u003d 10 || c \u003d\u003d 13 || c \u003d\u003d 9 || c \u003d\u003d -1;\n        }\n\n    }\n\n    static class SCCTarjan {\n        List\u0026lt;Integer\u0026gt;[] graph;\n        boolean[] visited;\n        Stack\u0026lt;Integer\u0026gt; stack;\n        int time;\n        int[] lowlink;\n        List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; components;\n\n        public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; scc(List\u0026lt;Integer\u0026gt;[] graph) {\n            int n \u003d graph.length;\n            this.graph \u003d graph;\n            visited \u003d new boolean[n];\n            stack \u003d new Stack\u0026lt;\u0026gt;();\n            time \u003d 0;\n            lowlink \u003d new int[n];\n            components \u003d new ArrayList\u0026lt;\u0026gt;();\n\n            for (int u \u003d 0; u \u0026lt; n; u++)\n                if (!visited[u])\n                    dfs(u);\n\n            return components;\n        }\n\n        void dfs(int u) {\n            lowlink[u] \u003d time++;\n            visited[u] \u003d true;\n            stack.add(u);\n            boolean isComponentRoot \u003d true;\n\n            for (int v : graph[u]) {\n                if (!visited[v])\n                    dfs(v);\n                if (lowlink[u] \u0026gt; lowlink[v]) {\n                    lowlink[u] \u003d lowlink[v];\n                    isComponentRoot \u003d false;\n                }\n            }\n\n            if (isComponentRoot) {\n                List\u0026lt;Integer\u0026gt; component \u003d new ArrayList\u0026lt;\u0026gt;();\n                while (true) {\n                    int x \u003d stack.pop();\n                    component.add(x);\n                    lowlink[x] \u003d Integer.MAX_VALUE;\n                    if (x \u003d\u003d u)\n                        break;\n                }\n                components.add(component);\n            }\n        }\n\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n\nconst int maxn \u003d 5005;\nconst int maxelem \u003d 2000006;\nconst int MOD \u003d 1000000007;\n\nchar gr[maxn][maxn];\nstring init[maxn];\nint mincnt[maxn], maxcnt[maxn];\nint c[maxn][maxn];\nint n, m, A, B;\nbool was[maxn];\nvector\u0026lt;int\u0026gt; order;\nvector\u0026lt;bool\u0026gt; can[maxn];\nbool nowcan[maxelem];\nchar s[maxelem];\nint gcd[maxn];\nvector\u0026lt;int\u0026gt; comp[maxn];\n\nvoid preorder(int cur)\n{\n    if (was[cur]) return;\n    was[cur] \u003d true;\n    for (int i \u003d 0; i \u0026lt; n; i++) if (gr[cur][i] \u003d\u003d \u00271\u0027) preorder(i);\n    order.pb(cur);\n}\n\nvoid color(int cur, int cc)\n{\n    if (was[cur]) return;\n    was[cur] \u003d true;\n    gcd[cc] \u003d __gcd(gcd[cc], (int)init[cur].size());\n    comp[cc].pb(cur);\n    for (int i \u003d 0; i \u0026lt; n; i++) if (gr[i][cur] \u003d\u003d \u00271\u0027) color(i, cc);\n}\n\nint getc(int n, int k)\n{\n    if (k \u0026lt; 0 || k \u0026gt; n) return 0;\n    return c[n][k];\n}\n\nint main()\n{\n    scanf(\u0026quot;%d%d%d\u0026quot;, \u0026amp;n, \u0026amp;A, \u0026amp;B);\n    for (int i \u003d 0; i \u0026lt; n; i++)\n    {\n        scanf(\u0026quot;%s\u0026quot;, gr[i]);\n    }\n    for (int i \u003d 0; i \u0026lt; n; i++)\n    {\n        scanf(\u0026quot;%*d\u0026quot;);\n        scanf(\u0026quot;%s\u0026quot;, s);\n        init[i] \u003d string(s);\n        for (int j \u003d 0; j \u0026lt; (int)init[i].size(); j++) mincnt[i] +\u003d init[i][j] \u003d\u003d \u00271\u0027;\n        maxcnt[i] \u003d mincnt[i];\n    }\n    for (int i \u003d 0; i \u0026lt; n; i++) if (!was[i]) preorder(i);\n    memset(was, 0, sizeof(was));\n    int cc \u003d 0;\n    reverse(all(order));\n    for (auto t : order) if (!was[t])\n    {\n        color(t, cc);\n        cc++;\n    }\n    for (int i \u003d 0; i \u0026lt; cc; i++)\n    {\n        can[i].resize(gcd[i]);\n        for (int j \u003d 0; j \u0026lt; gcd[i]; j++) can[i][j] \u003d false;\n        for (auto t : comp[i])\n        {\n            for (int j \u003d 0; j \u0026lt; (int)init[t].size(); j++) if (init[t][j] \u003d\u003d \u00271\u0027) can[i][j % gcd[i]] \u003d true;\n        }\n    }\n    for (int i \u003d 0; i \u0026lt; cc - 1; i++)\n    {\n        int g \u003d __gcd(gcd[i], gcd[i + 1]);\n        for (int j \u003d 0; j \u0026lt; g; j++) nowcan[j] \u003d false;\n        for (int j \u003d 0; j \u0026lt; gcd[i]; j++) nowcan[j % g] |\u003d can[i][j];\n        for (int j \u003d 0; j \u0026lt; gcd[i + 1]; j++) can[i  + 1][j] \u003d (can[i  + 1][j] | nowcan[j % g]);\n    }\n    for (int i \u003d 0; i \u0026lt; cc; i++)\n    {\n        for (auto t : comp[i])\n        {\n            for (int j \u003d 0; j \u0026lt; (int)init[t].size(); j++) if (init[t][j] \u003d\u003d \u00270\u0027 \u0026amp;\u0026amp; can[i][j % gcd[i]]) maxcnt[t]++;\n        }\n    }\n    \n    c[0][0] \u003d 1;\n    for (int i \u003d 1; i \u0026lt;\u003d n; i++)\n    {\n        c[i][0] \u003d 1;\n        for (int j \u003d 1; j \u0026lt;\u003d i; j++) c[i][j] \u003d (c[i - 1][j] + c[i - 1][j - 1]) % MOD;\n    }\n    int answer \u003d 0;\n    for (int i \u003d 0; i \u0026lt; n; i++)\n    {\n        int cntbigger \u003d 0;\n        int cntupper \u003d 0;\n        for (int j \u003d 0; j \u0026lt; n; j++) if (i !\u003d j)\n        {\n            if (mincnt[j] \u0026gt; maxcnt[i]) cntbigger++;\n            else if (maxcnt[j] \u0026gt; maxcnt[i] || (maxcnt[j] \u003d\u003d maxcnt[i] \u0026amp;\u0026amp; j \u0026gt; i)) cntupper++;\n        }\n        if (cntbigger \u0026gt;\u003d A) continue;\n        for (int j \u003d max(0, B - 1 - cntbigger); j \u0026lt;\u003d cntupper \u0026amp;\u0026amp; j + cntbigger + 1 \u0026lt;\u003d A \u0026amp;\u0026amp; j + 1 \u0026lt;\u003d B; j++)\n        {\n            answer \u003d (answer + (ll)getc(cntupper, j) * getc(cntbigger, B - 1 - j)) % MOD;\n        }\n    }\n    cout \u0026lt;\u0026lt; answer \u0026lt;\u0026lt; endl;\n    return 0;\n}\t \n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n#define xx first\n#define yy second\n#define mp make_pair\n#define pb push_back\n#define fill( x, y ) memset( x, y, sizeof x )\n#define copy( x, y ) memcpy( x, y, sizeof x )\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair \u0026lt; int, int \u0026gt; pa;\n\ninline int read()\n{\n\tint sc \u003d 0, f \u003d 1; char ch \u003d getchar();\n\twhile( ch \u0026lt; \u00270\u0027 || ch \u0026gt; \u00279\u0027 ) { if( ch \u003d\u003d \u0027-\u0027 ) f \u003d -1; ch \u003d getchar(); }\n\twhile( ch \u0026gt;\u003d \u00270\u0027 \u0026amp;\u0026amp; ch \u0026lt;\u003d \u00279\u0027 ) sc \u003d sc * 10 + ch - \u00270\u0027, ch \u003d getchar();\n\treturn sc * f;\n}\n\nconst int MAXN \u003d 5005;\nconst int MAXM \u003d 2000005;\nconst int mod \u003d 1e9 + 7;\n\nint n, a, b, len[MAXN], can[MAXM], id_cnt, L[MAXN], R[MAXN], C[MAXN][MAXN];\nint dfn[MAXN], scc[MAXN], low[MAXN], tim, num, st[MAXN], top, w[MAXN], ans;\nvector \u0026lt; int \u0026gt; G[MAXN], id[MAXN], scc_bit[MAXN], v[MAXN];\nchar ch[MAXM];\n\ninline void inc(int \u0026amp;x, int y) { x +\u003d y; if( x \u0026gt;\u003d mod ) x -\u003d mod; }\n\ninline void dfs(int x)\n{\n\tdfn[ x ] \u003d low[ x ] \u003d ++tim; st[ ++top ] \u003d x;\n\tfor( auto y : G[ x ] )\n\t\tif( !dfn[ y ] ) dfs( y ), low[ x ] \u003d min( low[ x ], low[ y ] );\n\t\telse if( !scc[ y ] ) low[ x ] \u003d min( low[ x ], dfn[ y ] );\n\tif( dfn[ x ] \u003d\u003d low[ x ] )\n\t{\n\t\tnum++; int t \u003d 0;\n\t\twhile( t ^ x )\n\t\t{\n\t\t\tscc[ t \u003d st[ top-- ] ] \u003d num;\n\t\t\tw[ num ] \u003d __gcd( w[ num ], len[ t ] );\n\t\t\tv[ num ].pb( t );\n\t\t}\n\t\tscc_bit[ num ].resize( w[ num ] );\n\t\tfor( auto y : v[ num ] )\n\t\t\tfor( int d \u003d 0 ; d \u0026lt; len[ y ] ; d++ ) if( can[ id[ y ][ d ] ] ) scc_bit[ num ][ d % w[ num ] ] \u003d 1;\n\t}\n}\n\nint main()\n{\n#ifdef wxh010910\n\tfreopen( \u0026quot;data.in\u0026quot;, \u0026quot;r\u0026quot;, stdin );\n#endif\n\tn \u003d read(), a \u003d read(), b \u003d read();\n\tfor( int i \u003d 0 ; i \u0026lt;\u003d n ; i++ )\n\t{\n\t\tC[ i ][ 0 ] \u003d 1;\n\t\tfor( int j \u003d 1 ; j \u0026lt;\u003d i ; j++ ) inc( C[ i ][ j ] \u003d C[ i - 1 ][ j ], C[ i - 1 ][ j - 1 ] );\n\t}\n\tfor( int i \u003d 1 ; i \u0026lt;\u003d n ; i++ )\n\t{\n\t\tscanf( \u0026quot;%s\u0026quot;, ch + 1 );\n\t\tfor( int j \u003d 1 ; j \u0026lt;\u003d n ; j++ ) if( ch[ j ] \u003d\u003d \u00271\u0027 ) G[ i ].pb( j );\n\t}\n\tfor( int i \u003d 1 ; i \u0026lt;\u003d n ; i++ )\n\t{\n\t\tlen[ i ] \u003d read(); scanf( \u0026quot;%s\u0026quot;, ch );\n\t\tfor( int j \u003d 0 ; j \u0026lt; len[ i ] ; j++ ) id[ i ].pb( ++id_cnt ), can[ id_cnt ] \u003d ch[ j ] \u003d\u003d \u00271\u0027, L[ i ] +\u003d can[ id_cnt ];\n\t}\n\tfor( int i \u003d 1 ; i \u0026lt;\u003d n ; i++ ) if( !dfn[ i ] ) dfs( i );\n\tfor( int i \u003d num ; i \u0026gt; 1 ; i-- )\n\t{\n\t\tint g \u003d __gcd( w[ i ], w[ i - 1 ] );\n\t\tw[ i - 1 ] \u003d g;\n\t\tfor( int j \u003d 0 ; j \u0026lt; w[ i ] ; j++ )\tscc_bit[ i - 1 ][ j % g ] |\u003d scc_bit[ i ][ j ];\n\t}\n\tfor( int i \u003d 1 ; i \u0026lt;\u003d n ; i++ )\n\t{\n\t\tint x \u003d scc[ i ];\n\t\tfor( int j \u003d 0 ; j \u0026lt; len[ i ] ; j++ )\n\t\t\tR[ i ] +\u003d scc_bit[ x ][ j % w[ x ] ];\n\t}\n\tfor( int i \u003d 1 ; i \u0026lt;\u003d n ; i++ )\n\t{\n\t\tint t1 \u003d 0, t2 \u003d 0;\n\t\tfor( int j \u003d 1 ; j \u0026lt;\u003d n ; j++ ) if( L[ j ] \u0026gt; R[ i ] ) t1++;\n\t\tif( t1 \u0026gt;\u003d a ) continue;\n\t\tfor( int j \u003d 1 ; j \u0026lt;\u003d n ; j++ ) if( L[ j ] \u0026lt;\u003d R[ i ] \u0026amp;\u0026amp; mp( R[ j ], j ) \u0026gt; mp( R[ i ], i ) ) t2++;\n\t\tfor( int j \u003d 0 ; j \u0026lt; b \u0026amp;\u0026amp; j \u0026lt;\u003d t2 \u0026amp;\u0026amp; j + t1 \u0026lt; a ; j++ )\n\t\t   inc( ans, 1LL * C[ t2 ][ j ] * C[ t1 ][ b - j - 1 ] % mod );\t\n\t}\n\treturn printf( \u0026quot;%d\\n\u0026quot;, ans ), 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eAs my good friend, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Arpa\" title\u003d\"Candidate Master Arpa\"\u003eArpa\u003c/a\u003e, did, let me share with you a perfect poem of one of our best poet you might know, Molavi:\u003c/p\u003e\u003cp\u003e.......................................................................................بند بگسل، باش آزاد ای پسر ** چند باشی بند سیم و بند زر\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e \u003ci\u003eson\u003c/i\u003e,  \u003ci\u003eburst\u003c/i\u003e \u003ci\u003ethy\u003c/i\u003e \u003ci\u003echains\u003c/i\u003e \u003ci\u003eand\u003c/i\u003e \u003ci\u003ebe\u003c/i\u003e \u003ci\u003efree\u003c/i\u003e! \u003ci\u003eHow\u003c/i\u003e \u003ci\u003elong\u003c/i\u003e \u003ci\u003ewilt\u003c/i\u003e \u003ci\u003ethou\u003c/i\u003e \u003ci\u003ebe\u003c/i\u003e \u003ci\u003ea\u003c/i\u003e \u003ci\u003ebondsman\u003c/i\u003e \u003ci\u003eto\u003c/i\u003e \u003ci\u003esilver\u003c/i\u003e \u003ci\u003eand\u003c/i\u003e \u003ci\u003egold\u003c/i\u003e?\u003c/span\u003e\u003c/p\u003e\u003cp\u003e.......................................................................................گر بریزی بحر را در کوزه‌‌ای ** چند گنجد قسمت یک روزه‌‌ای‌‌\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eIf\u003c/i\u003e \u003ci\u003ethou\u003c/i\u003e \u003ci\u003epour\u003c/i\u003e \u003ci\u003ethe\u003c/i\u003e \u003ci\u003esea\u003c/i\u003e \u003ci\u003einto\u003c/i\u003e \u003ci\u003ea\u003c/i\u003e \u003ci\u003epitcher\u003c/i\u003e,  \u003ci\u003ehow\u003c/i\u003e \u003ci\u003emuch\u003c/i\u003e \u003ci\u003ewill\u003c/i\u003e \u003ci\u003eit\u003c/i\u003e \u003ci\u003ehold\u003c/i\u003e? \u003ci\u003eOne\u003c/i\u003e \u003ci\u003eday\u003c/i\u003e\u0027\u003ci\u003es\u003c/i\u003e \u003ci\u003estore\u003c/i\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e..................................................................................... کوزه‌‌ی چشم حریصان پر نشد ** تا صدف قانع نشد پر در نشد\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eThe\u003c/i\u003e \u003ci\u003epitcher\u003c/i\u003e,  \u003ci\u003ethe\u003c/i\u003e \u003ci\u003eeye\u003c/i\u003e \u003ci\u003eof\u003c/i\u003e \u003ci\u003ethe\u003c/i\u003e \u003ci\u003ecovetous\u003c/i\u003e,  \u003ci\u003enever\u003c/i\u003e \u003ci\u003ebecomes\u003c/i\u003e \u003ci\u003efull\u003c/i\u003e:  \u003ci\u003ethe\u003c/i\u003e \u003ci\u003eoyster\u003c/i\u003e - \u003ci\u003eshell\u003c/i\u003e \u003ci\u003eis\u003c/i\u003e \u003ci\u003enot\u003c/i\u003e \u003ci\u003efilled\u003c/i\u003e \u003ci\u003ewith\u003c/i\u003e \u003ci\u003epearls\u003c/i\u003e \u003ci\u003euntil\u003c/i\u003e \u003ci\u003eit\u003c/i\u003e \u003ci\u003eis\u003c/i\u003e \u003ci\u003econtented\u003c/i\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e.............................................................................. هر که را جامه ز عشقی چاک شد ** او ز حرص و عیب کلی پاک شد \u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eHe\u003c/i\u003e (\u003ci\u003ealone\u003c/i\u003e) \u003ci\u003ewhose\u003c/i\u003e \u003ci\u003egarment\u003c/i\u003e \u003ci\u003eis\u003c/i\u003e \u003ci\u003erent\u003c/i\u003e \u003ci\u003eby\u003c/i\u003e \u003ci\u003ea\u003c/i\u003e (\u003ci\u003emighty\u003c/i\u003e) \u003ci\u003elove\u003c/i\u003e \u003ci\u003eis\u003c/i\u003e \u003ci\u003epurged\u003c/i\u003e \u003ci\u003eentirely\u003c/i\u003e \u003ci\u003eof\u003c/i\u003e \u003ci\u003ecovetousness\u003c/i\u003e \u003ci\u003eand\u003c/i\u003e \u003ci\u003edefect\u003c/i\u003e.\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e","tags":["411","codeforces round #411","tutorial","tutorials"]}}