{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1400326959,"rating":0,"authorHandle":"DanAlex","modificationTimeSeconds":1400331718,"id":12328,"title":"\u003cp\u003eYet another problem with dwarfs\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi CF ! Long time , no see. I have an interesting problem for you. \u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://www.infoarena.ro/problema/pitici3\"\u003eStatement\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e dwarfs fell into a pit with depth of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e cm. For every dwarf you know the height to the shoulders ( i.e. the distance from the ground to the shoulders ) and the arms length. The dwarfs try to escape from the pit , so they climb one on each other and get out of the pit. \u003c/p\u003e\u003cp\u003eEvery dwarfs stands on the shoulders of other. If one dwarf reaches the top of the pit , he can get out of the pit. We denote the shoulder height of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003eth\u003c/i\u003e\u003c/span\u003e dwarf with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and the arms length with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. A tower formed from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e dwarfs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ej\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ej\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e has the height \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e . The dwarf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can get out of the pit if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e ≥ \u003ci\u003eD\u003c/i\u003e\u003c/span\u003e. A tower can be formed in any possible way.\u003c/p\u003e\u003cp\u003eYour task is to determine how many dwarfs can get out of the pit. (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003eN\u003c/i\u003e ≤ 2000\u003c/span\u003e)\u003c/p\u003e\u003ch2\u003eSolution\u003c/h2\u003e\u003cp\u003eLet\u0027s start with a simpler problem. Supose the length of the hands does not matter. ( i.e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eth\u003c/i\u003e\u003c/span\u003e dwarf can get out if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e ≥ \u003ci\u003eD\u003c/i\u003e\u003c/span\u003e ) In this case we can sort the dwarfs decrasingly by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and get out as many short dwarfs as possbile.\u003c/p\u003e\u003cp\u003eNote that a similar stategy would not work in our problem. An example would be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 3\u003c/span\u003e , \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e \u003d 5\u003c/span\u003e with ( \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d 1\u003c/span\u003e , \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d 4\u003c/span\u003e ) , ( \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u003d 2\u003c/span\u003e , \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u003d 0\u003c/span\u003e ) , ( \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u003d 2\u003c/span\u003e , \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u003d 0\u003c/span\u003e ). \u003c/p\u003e\u003cp\u003eWith the previous strategy we would have the tower \u003cspan class\u003d\"tex-span\"\u003e2, 3, 1\u003c/span\u003e and the dwarf \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e would be saved. But if the tower is \u003cspan class\u003d\"tex-span\"\u003e3, 1, 2\u003c/span\u003e both \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e dwarfs can be saved. \u003c/p\u003e\u003cp\u003eWe can conclude that a small dwarf with long hands can be placed closer to the base of the tower than other dwarfs. The order in wich the dwarfs will get out of the pit would rather be determined by the sum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Also we need not to forget that a heigher dwarf ( with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e bigger ) is more useful for the others than a small one. \u003c/p\u003e\u003cp\u003eNow , imagine we have already pulled out the optimum set of dwarfs. Let\u0027s now find how they came out. We can iterate through them and select the ones which we can put inside the hole and they still can get out. We will repeat that operation until all of them are in the hole.\u003c/p\u003e\u003cp\u003eFrom this reverse kind of thinking you got the idea that selecting a set of dwarfs who get out is a good one. We will sort the dwarfs decreasingly after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e ( in case of equalty after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e ). If all the dwarfs from some set of dwarfs can get out we need to choose the last wich can get out , than he can be added to the tower. \u003c/p\u003e\u003cp\u003eWe keep a vector in wich we will mark if some dwarf is in the set of the ones witch can get out. At each step we will try to add the dwarf with the maximum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e into the set. \u003c/p\u003e \u003cpre\u003e\u003ccode\u003e    for (int i\u003d1;i\u0026lt;\u003dN;++i)\n    {\n        int dwarf \u003d oH[i]; // oH - order after height decreasingly\n        if ( good(dwarf) )\n        {\n            mark[ rev[dwarf] ] \u003d 1; // put the dwarf in the set\n            // mark - the marking vector\n            // rev - the order in the original vector\n            \n            h_init -\u003d h[dwarf]; // h_init - the height of the tower\n            co++; // new dwarf added\n        }\n        else\n            mark[ rev[dwarf] ] \u003d 0; // the dwarf is outside the set\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow we have to verify is we can add a dwarf in the set. For this we design a function wich says if a set of dwarfs is good or not. The last dwarf from the set wich will get out is the one with maximum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Then we can get it out of the set and repeat the process. Of course , we do not need sorting because we can precompute the vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eoHL\u003c/i\u003e\u003c/span\u003e ( order after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e decreasingly ).\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ebool good(int dwarf)\n{\n    int h_now \u003d h_init - H[dwarf]; // h_now - acutal tower height\n    l[ rev[dwarf] ] \u003d 1; // mark the dwarf\n    for (int i\u003dN;i\u0026gt;\u003d0;--i) \n        if ( l[i] \u003d\u003d 1 )\n        {\n            if ( h_now + H[oHL[i]] + L[oHL[i]] \u0026gt;\u003d D ) \n                h_now +\u003d H[oHL[i]]; // if the dwarf can get out we put it in the tower\n            else\n                return 0; // else we have the guaranty that the actual set can\u0027t get out\n        }\n    return 1;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe verify in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e the introduction of some dwarf and we try to add every dwarf once. The final complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e. \u003ca href\u003d\"http://ideone.com/ukUuac\"\u003eHere\u003c/a\u003e is my source.\u003c/p\u003e\u003cp\u003eBONUS: The problem can be also solved by DP. Take a look. ;)\u003c/p\u003e\u003c/div\u003e","tags":[]}}