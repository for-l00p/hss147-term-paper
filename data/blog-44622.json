{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1461962158,"rating":68,"authorHandle":"ifsmirnov","modificationTimeSeconds":1462646342,"id":44622,"title":"\u003cp\u003eCodeforces Round #349 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/667/problem/A\" title\u003d\"Codeforces Round 349 (Div. 2)\"\u003e667A - Pouring Rain\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTo know how much water you consume per second you should divide consumed volume, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, by the area of the cup, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/21/55/215511a9f3e28389141d577fa690ad9d9c47b4ab.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Then you should compare thisit with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e. If your speed of drinking is greater, then you\u0027ll drink all the water in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ca/31/ca31092ed46ce9ffada97f6d13f6598ab53ed8f4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e seconds. Otherwise you would never do it.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/667/problem/B\" title\u003d\"Codeforces Round 349 (Div. 2)\"\u003e667B - Coat of Anticubism\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIt is possible to make a convex polygon with given side lengths if and only if a generalized triangle inequality holds: the length of the longest side is less than the sum of lengths of other sides. It is impossible to make a convex polygon from a given set, so there is a side which is longest than (or equals to) than sum of others. Assume it is greater by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e; then it is sufficient to add a rod of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/span\u003e. More, it is clear that adding any shorter length wouldn\u0027t satisfy the inequality. Thus the answer for the problem is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cf/a7/cfa782c32a773efd93fc9ca3ac0dcb34a281f7f2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/666/problem/A\" title\u003d\"Codeforces Round 349 (Div. 1)\"\u003e666A - Reberland Linguistics\u003c/a\u003e / \u003ca href\u003d\"/contest/667/problem/C\" title\u003d\"Codeforces Round 349 (Div. 2)\"\u003e667C - Reberland Linguistics\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis problem is solved with dynamic programming. We can select an arbitrary root of any length (at least five). Let\u0027s reverse the string. A boolean value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2, 3\u003c/sub\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e denotes if we could split a prefix of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e to a strings of length 2 and 3 so that the last string has a corresponding length. Transitions: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/46/58/465837b2cfdb9a7dfa0d61e4493aec23cf5af3e6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Similarly, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f3/fb/f3fbb59859287c680b4acd0343e88e37012b681f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. If any of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e is true we add the corresponding string to the set of answers.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/666/problem/B\" title\u003d\"Codeforces Round 349 (Div. 1)\"\u003e666B - World Tour\u003c/a\u003e / \u003ca href\u003d\"/contest/667/problem/D\" title\u003d\"Codeforces Round 349 (Div. 2)\"\u003e667D - World Tour\u003c/a\u003e\u003c/p\u003e\u003cp\u003eYou are given the oriented graph, find four distinct vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e, \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e such that each vertex if reachable from previous and the sum of shortest paths between consequitive vertices is as large as possible. First let\u0027s run a BFS from each vertex and find three most distant vertices over given graph and its reverse. Afterwards loop through each possible \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. Having them fixed, loop through \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e among three most distant vertices from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e in the reversed graph and through \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e among three most distant vertices from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e in tie initial graph. This is sufficient, because if we\u0027ve fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e is not one of three furthest from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e then we could replace it with one of them and improve the answer.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/666/problem/C\" title\u003d\"Codeforces Round 349 (Div. 1)\"\u003e666C - Codeword\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe first thing to notice: string itself does not matter, only its length does. In each sequence of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e containing a fixed subsequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e we can select \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e\u0027s lexicographically minimal occurance, let it be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, ..., \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/sub\u003e\u003c/span\u003e. No character \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e may occur between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e - 1\u003c/span\u003e, because otherwise the occurence is not lex-min. On the other hand, if there is an occurence which satsfies this criterion than it is lex-min.\u003c/p\u003e\u003cp\u003eGiven this definition we can count number of strings containing given string as a subsequence. At first select positions of the lex-min occurance; there are \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/30/f7/30f7f5119659fa3300ea2da0b52a581d562bef9a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ways to do it. Next, you can use any of \u003cspan class\u003d\"tex-span\"\u003eΣ - 1\u003c/span\u003e characters at first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e intervals between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, and any of \u003cspan class\u003d\"tex-span\"\u003eΣ\u003c/span\u003e at the end of the string. (Here, \u003cspan class\u003d\"tex-span\"\u003eΣ\u003c/span\u003e denotes alphabet size).\u003c/p\u003e\u003cp\u003eLooping through \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003c/sub\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e — the position of last character in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e in the lex-min occurence, we can count that there are exactly \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6c/89/6c8921d7956d1b1bcabdd205094bd470704f7cf2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e strings containing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e as a subsequence. So, having \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e fixed, answer for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e could be computed in linear time.\u003c/p\u003e\u003cp\u003eA final detail: input strings can have at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/89/e7899c97533ef651e24f9d32ff0cae1ec853ed3e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e different lengths. Thus simply applying the overmentioned formula we get a \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d1/0b/d10b20036a61c81a267aab9909e5999331abd538.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution, which was the expected one.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/666/problem/D\" title\u003d\"Codeforces Round 349 (Div. 1)\"\u003e666D - Chain Reaction\u003c/a\u003e / \u003ca href\u003d\"/contest/667/problem/E\" title\u003d\"Codeforces Round 349 (Div. 2)\"\u003e667E - Chain Reaction\u003c/a\u003e\u003c/p\u003e\u003cp\u003eYou are given four points on the plain. You should move each of them up, down, left, or right, such that the new configuration is a square with positive integer sides parallel to coordinate axes.\u003c/p\u003e\u003cp\u003eChoose some \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, length of the square side, and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e, the position of the bottom-left point. A set from where to choose will be constructed later. Then fix one of 24 permutations of initial points: first goes to the bottom-left point of the square, second goes to the bottom-right, etc. Having it fixed it is easy to check if this configuration is valid and relax the answer if needed. The only question is where to look for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFirst we deal with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. You can see that there are always two points which move among parallel but not the same lines. In this case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e is the distance between these lines, i.e. one of \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e|\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e|\u003c/span\u003e. This is the set from where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e will be chosen.\u003c/p\u003e\u003cp\u003eNow fix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e from the overmentioned set and look at two cases.\u003c/p\u003e \u003col\u003e   \u003cli\u003eThere are two points moving by perpendicular lines. Then there is a square vertex in the point of these lines intersection. In each coordinate this point either equals to bottom-left point of the square or differs by exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. Thus if bottom-left point has coordinates \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e)\u003c/span\u003e, than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e must be some of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ed\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, similarly for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e. Add all this values to the set.\u003c/li\u003e   \u003cli\u003eAll points are moving among parallel lines; WLOG horisontal. Let\u0027s fix a permutation of points (yes, once again) and shift each point in such a way that after moving it would equal the bottom-left vertex of the square. Second point should be shifted by \u003cspan class\u003d\"tex-span\"\u003e( - \u003ci\u003ed\u003c/i\u003e, 0)\u003c/span\u003e, third by \u003cspan class\u003d\"tex-span\"\u003e(0,  - \u003ci\u003ed\u003c/i\u003e)\u003c/span\u003e, fourth by \u003cspan class\u003d\"tex-span\"\u003e( - \u003ci\u003ed\u003c/i\u003e,  - \u003ci\u003ed\u003c/i\u003e)\u003c/span\u003e. All four points must be on the same line now; otherwise this case is not possible with this permutation. Now the problem is: given four points on a line, move it to the same point minimizing the maximal path. Clearly, one should move points to the position \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003emaxX\u003c/i\u003e - \u003ci\u003eminX\u003c/i\u003e) / 2\u003c/span\u003e; rounding is irrelevant because of the constraint of integer answer. So, having looked through each permutations, we have another set for bottom-left vertex possible coordinates.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eBy the way, the 10th test (and the first test after pretests) was case 2; it was intentionally not included in pretests.\u003c/p\u003e\u003cp\u003eWhy does it work fast? Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e be the sizes of corresponding lookup sets. \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/00/a4/00a486cb865d8dec1d4ac1f69bd6beb0aa1cee10.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Now for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e there are \u003cspan class\u003d\"tex-span\"\u003e4·3 \u003d 12\u003c/span\u003e coordinates in the first case and no more than \u003cspan class\u003d\"tex-span\"\u003e4! \u003d 24\u003c/span\u003e in the second. Thus \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e ≤ 12·(12 + 24) \u003d 432\u003c/span\u003e. The main part works in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/aa/ca/aacaa618781e14e85247fed29a2568ebe319f3be.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e; however, it is impossible to build a test where all permutations in the second case give a valid position, so you can reduce this number. Actually, the model solution solves 50 testcases in 10ms without any kind of pruning.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/666/problem/E\" title\u003d\"Codeforces Round 349 (Div. 1)\"\u003e666E - Forensic Examination\u003c/a\u003e\u003c/p\u003e\u003cp\u003eYou are given string s and m strings ti. Queries of type ``find the string ti with number from [l;r] which has the largest amount of occurrences of substring s[a,  b]\u0027\u0027 approaching. Let\u0027s build segment tree over the texts t_i. In each vertex of segment tree let\u0027s build suffix automaton for the concatenation of texts from corresponding segment with delimeters like a#b. Also for each state in this automaton we should found the number of text in which this state state occurs most over all texts from the segment. Also for each state v in this automaton we should find such states in children of current segment tree vertex that include the set of string from v. If you maintain only such states that do not contain strings like a#b, it is obvious that either wanted state exists or there is no occurrences of strings from v in the texts from child\u0027s segment at all. Thus, to answer the query, firstly we find in root vertex the state containing string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e;\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e, and after this we go down the segment tree keeping the correct state via links calculated from the previous state.\u003c/p\u003e\u003cp\u003ePlease refer to the \u003ca href\u003d\"http://ideone.com/rpw2E8\"\u003ecode\u003c/a\u003e if something is unclear.\u003c/p\u003e\u003c/div\u003e","tags":[]}}