{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1475402662,"rating":4,"authorHandle":"clanmasr2","modificationTimeSeconds":1475402662,"id":47481,"title":"\u003cp\u003eTLE in #374 Div2 C -- Journey\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI tried to solve it using DP which has parameter (current vertex (s) â€” No. of vertices that I\u0027ve passed by (cnt) ) and it equals to minimum time takes to dp[s][cnt] but I get TLE in test case #33 ... I\u0027ve read the editorial and I think I\u0027m following the same approach .\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\npair \u0026lt;int, int\u0026gt; arr[5001][1001];\nvector \u0026lt;int\u0026gt; res2;\nvector \u0026lt;int\u0026gt; res3;\nint n, maxi \u003d 0, T;\nint dp[5001][5001], sz[5001];\n\nint fun(int s, int cnt, int time)\n{\n    int \u0026amp;ret \u003d dp[s][cnt];\n        if(ret!\u003d-1 \u0026amp;\u0026amp; ret \u0026lt; time){res2.pop_back();return ret;}\n    ret \u003d 2e9;\n    if(time \u0026gt; T)\n    {\n        res2.pop_back();\n        return 2e9;\n    }\n\n    if(s \u003d\u003d n)\n    {\n        if(maxi \u0026lt; cnt)\n        {\n            maxi \u003d cnt;\n            res3 \u003d res2;\n        }\n        ret \u003d time;\n        res2.pop_back();\n        return 0;\n    }\n\n    for(int i\u003d0; i\u0026lt;sz[s];i++)\n    {\n        ret \u003d time;\n        res2.push_back(arr[s][i].first);\n        fun(arr[s][i].first, cnt+1, time+arr[s][i].second);\n    }\nres2.pop_back();\nreturn ret;\n}\nint main()\n{\n    memset(dp, -1, sizeof(dp));\n    int m, f, t, v, mm;\n    scanf(\u0026quot;%d%d%d\u0026quot;, \u0026amp;n, \u0026amp;m, \u0026amp;T);mm\u003dm;\n    arr[0][0] \u003d make_pair(1, 0);sz[0]\u003d1;\n    while(m--)\n    {\n        scanf(\u0026quot;%d%d%d\u0026quot;, \u0026amp;f, \u0026amp;t, \u0026amp;v);\n        arr[f][sz[f]] \u003d (make_pair(t, v));sz[f]++;\n    }\n    fun(0, 0, 0);\n    printf(\u0026quot;%d\\n\u0026quot;, maxi);\n    for(int i\u003d0; i\u0026lt;res3.size(); i++)\n        printf(\u0026quot;%d \u0026quot;,res3[i]);\n    cout\u0026lt;\u0026lt;endl;\nreturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI\u0027ve found a comment saying that it can be solved using Bellman Ford Algorithm but I still don\u0027t know how it can be used ?\u003c/p\u003e\u003cp\u003eThanks in advance \u003c/p\u003e\u003c/div\u003e","tags":["374","journey","2d-dp","bellman-ford"]}}