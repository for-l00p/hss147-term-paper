{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1458068972,"rating":0,"authorHandle":"Fcdkbear","modificationTimeSeconds":1458068972,"id":43818,"title":"\u003cp\u003eРазбор VNTU Training 18\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eЗадача A\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eБудем хранить наше число как строку. Разобьем его на две части (тоже строки) — целую и дробную. Если целая часть заканчивается на 9 — выведем, что нам нужно идти к Василисе. Иначе же, сравним дробную часть со строкой \u0026quot;500...\u0026quot; (нулей добавим ровно столько, чтобы длина этой строки стала равной длине строки-дробной части), и на основе этого сравнения узнаем, увеличивать нам целую часть или нет.\u003c/p\u003e\u003cp\u003eСложность алгоритма — O(n), n — длина строки\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача B\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eНайдем среднее арефметическое всех данных нам чисел. Если оно не целое — ответ Unrecoverable configuration. Иначе же, посмотрим, сколько чисел в массиве не равны этому среднему арифметическому. Если таких чисел 0 — ответ Exemplary pages. Если таких чисел больше чем 2 — ответ Unrecoverable configuration. Иначе ровно в одном кубке жидкости меньше, чем среднее арифметическое, ровно в одном — на столько же этой жидеости больше. Значит именно из первого кубка жидкость и переливалась именно во второй.\u003c/p\u003e\u003cp\u003eСложность алгоритма — O(n)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача С\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eБудем идти по строке, и поддерживать, сколько подряд одинаковых символо встретилось. Для этого, смотря на символ, сравним его с предыдущим. Если они равны — увеличиваем наш текущий счетчик, иначе сбиваем его в 1. \u003c/p\u003e\u003cp\u003eКаждый раз будем смотреть, или наш счетчик больше чем 7. Если хоть раз это так — ответ YES, иначет ответ NO\u003c/p\u003e\u003cp\u003eСложность алгоритма — O(n) (n — длина строки)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача D\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eДавайте найдем длину нашего числа n — пусть она равна v. Если v нечетное, наш ответ имеет длину v + 1, если четное — или v, или v + 2. \u003c/p\u003e\u003cp\u003eЗаметим, что v \u0026lt;\u003d 10, а значит мы можем рекурсивно сгенерировать все интересующие нас очень счастливые числа, и выбрать в качестве ответа минимальное, такое, что оно \u0026gt;\u003d n. Генерировать несложно, если мы будем поддерживать, сколько чисел нам еще нужно поставить, сколько из них — четверки, а сколько — семерки, и какое число мы уже собрали на текущем этапе рекурсии.\u003c/p\u003e\u003cp\u003eДавайте оценим количество очень счастливых чисел длины k. Ровно на k/2 позициях будут стоять 4, на всех остальных позициях — 7. Значит их количество равно количеству способов расставить k/2 четверок на k позиций, что равно количеству комбинаций из k по k/2 (C(k, k/2))(\u003ca\u003ehttps://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%B1%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F_(%D0%BA%D0%BE%D0%BC%D0%B1%D0%B8%D0%BD%D0%B0%D1%82%D0%BE%D1%80%D0%B8%D0%BA%D0%B0))\u003c/a\u003e. Для k \u003d 12 это количество равно всего лишь 924.\u003c/p\u003e\u003cp\u003eА значит, наше решение будет работать очень быстро.\u003c/p\u003e\u003cp\u003eСложность алгоритма — O(C(v,v/2))\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача E\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eБудем смотреть на каждые последовательные подстроки нашей строки длиной 10 и сравнивать их с теми строками, которые соответствуют цифрам от 0 до 9. Таким образом, мы поразрядно восстановим весь пароль.\u003c/p\u003e\u003cp\u003eСложность алгоритма — O(n*k), k — количество разрядов, n — длина строки\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача F\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eПостроим граф, в котором между каждой парой друзей есть ребро (удобно поддерживать табличкой смежности). Далее переберем все тройки людей, и проверим, правда ли, что они все дружат между собой (или наоборот — все не дружат). Если мы нашли хоть 1 такую тройку — ответ WIN, иначе FAIL :(\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача G\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eДавайте напишем функцию, которая принимает два числа, представленные строкой, и возвращает true, если первое число строго меньше второго, иначе false. Имея такую функцию, решать задачу несложно — просто будем сравнивать наше число с интервалами, данными в условии (сдвинутыми на 1, ведь наша функция проверяет строгое неравенство, а в условии оно нестрогое; то есть условие проверяет, или число лежит от -128 до 127 включительно; мы будем проверять, или число лежит от -129 до 128 исключительно — легко видеть, что это одно и то же)\u003c/p\u003e\u003cp\u003eКак же написать нашу функцию? Если у чисел разные знаки — ответ очевиден. Иначе, пусть оба эти числа положительные (если это не так — домножим их на -1 и поменяем их местами (ведь теперь мы смотрим на другую сторону неравенства, умножение неравенства на отрицательное число меняет его знак на противоположный)). Если длина чисел разная — ответ также очевиден. Иначе, у нас есть исла одинакового знака одинаковой длины. Для их сравнения можно использовать обычное сравнение строк при помощи знака \u0026lt;, который сравнивает строки лексикографически.\u003c/p\u003e\u003cp\u003eСложность алгоритма — O(N), N — длина строки.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача H\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eСамое простое решение: переберем клеточку, на которую будет капать дождь. Далее пробежимся влево и вправо и посмотрим, какие именно клеточки мы можем залить. Таким образом, мы будем знать ответ для каждой клеточки. Из всех этих ответов выберем максимум.\u003c/p\u003e\u003cp\u003eСложность алгоритма — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003eУ задачи также есть решение со сложностью \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e, предлагаю вам подумать о нем\u003c/p\u003e\u003c/div\u003e","tags":["разбор"]}}