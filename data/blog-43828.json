{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1458112628,"rating":0,"authorHandle":"DedMaxim","modificationTimeSeconds":1458112628,"id":43828,"title":"\u003cp\u003eДекартово дерево. Реализация.\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eГде почитать?\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://sites.google.com/site/bydlocode/data_structures/treap\"\u003eНе надо так писать\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%BA%D0%B0%D1%80%D1%82%D0%BE%D0%B2%D0%BE_%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D0%BE\"\u003eВикипедия\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://e-maxx.ru/algo/treap\"\u003eОно компилируется\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eДекартово дерево по явному ключу\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003estruct tree {\n    int key, prior;\n    tree * l, * r;\n    tree (int x) {\n        key \u003d x;\n        l \u003d r \u003d 0;\n        prior \u003d rand();\n    }\n};\n\nvoid split(tree * t, tree * \u0026amp;l, tree * \u0026amp;r, int sk) {\n    if (!t) return void(l \u003d r \u003d 0);\n    if (t-\u0026gt;key \u0026lt;\u003d sk) split(t-\u0026gt;r, t-\u0026gt;r, r, sk), l \u003d t;\n    else split(t-\u0026gt;l, l, t-\u0026gt;l, sk), r \u003d t;\n}\n\nvoid merge(tree * \u0026amp; t, tree * l, tree * r) {\n    if (!l || !r) t \u003d l ? l : r;\n    else if (l-\u0026gt;prior \u0026gt; r-\u0026gt;prior) merge(l-\u0026gt;r, l-\u0026gt;r, r), t \u003d l;\n    else merge(r-\u0026gt;l, l, r-\u0026gt;l), t \u003d r;\n}\n\nvoid insert(tree * \u0026amp; t, int x) {\n    tree * tl, * tr;\n    split(t, tl, tr, x);\n    merge(tl, tl, new tree(x));\n    merge(t, tl, tr);\n}\n\nvoid erase(tree * \u0026amp; t, int x) {\n    tree * tl, * tm, * tr;\n    split(t, tl, tr, x);\n    split(tl, tl, tm, x - 1);\n    merge(t, tl, tr);\n}\n\nbool exist(tree * \u0026amp; t, int x) {\n    if (!t) return false;\n    if (t-\u0026gt;key \u003d\u003d x) return true;\n    if (t-\u0026gt;key \u0026lt; x) return exist(t-\u0026gt;r, x);\n    else return exist(t-\u0026gt;l, x);\n}\n\ntree * t \u003d NULL;\n\nmain() {\n    string s;\n    int x;\n    while (cin \u0026gt;\u0026gt; s) {\n        cin \u0026gt;\u0026gt; x;\n        if (s[0] \u003d\u003d \u0027i\u0027) insert(t, x);\n        if (s[0] \u003d\u003d \u0027d\u0027) erase(t, x);\n        if (s[0] \u003d\u003d \u0027e\u0027) cout \u0026lt;\u0026lt; boolalpha \u0026lt;\u0026lt; exist(t, x) \u0026lt;\u0026lt; endl;\n    }\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}