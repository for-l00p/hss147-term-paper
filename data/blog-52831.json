{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1498166134,"rating":5,"authorHandle":"color_me_red","modificationTimeSeconds":1498166134,"id":52831,"title":"\u003cp\u003eGSS7 on SpOJ query\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"http://www.spoj.com/problems/GSS7/\"\u003eHere is a link to the problem\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eBriefly, there is a tree with some values on each node. For each query \u003ccode\u003ea,b\u003c/code\u003e, I have to find the contiguous subarray with maximum sum in the path a — b. There are range updates \u003ccode\u003ea b v\u003c/code\u003e, which change the value of the nodes in a — b to some v.\u003c/p\u003e\u003cp\u003eMy approach is to decompose the tree (heavy light) and then find the answer(I\u0027ll come to what I mean by this) for a -\u0026gt; lca(a,b), and then the same for b -\u0026gt; lca(a,b).\u003c/p\u003e\u003cp\u003eIf the path from a -\u0026gt; lca(a,b) passes through five chains, I get all the answers for each chain in the range that belongs to the path a -\u0026gt; lca(a,b). The answer consists of max sum, max prefix sum, max postfix sum, total sum. I store these in a list. And do the same for b -\u0026gt; lca(a,b). I concatenate the two lists appropriately. Then on this final list, I calculate the final answer (exactly same as what\u0027s been done for the segment trees of the chains).\u003c/p\u003e\u003cp\u003eIs there a better way that doesn\u0027t involve joining all the answers of the involved chains and then finding the answer from them? I\u0027ll explain more if I needed.\u003c/p\u003e\u003c/div\u003e","tags":["spoj"]}}