{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1513346929,"rating":0,"authorHandle":"acmASCIS","modificationTimeSeconds":1513347516,"id":56368,"title":"\u003cp\u003eStrings part(1) — Week 7\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003eStrings\u003c/h1\u003e\u003cp\u003eIf we have a char array and we want to erase a character of specific index, and you don’t know how many character in the array. You will have to do something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor(int i\u003dindex;arr[i]!\u003d\u0027\\0\u0027;i++)\n\tarr[i]\u003darr[i+1];\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhat about if we want to get the size of specific sentence we have in array? One way of doing that is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint size \u003d 0;\nfor (int i \u003d 0; arr[i] !\u003d \u0027\\0\u0027; i++)\n\tsize++;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is hard, isn’t it?\u003c/p\u003e\u003cp\u003eThat’s why we have strings.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eWhat are strings?\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eStrings are objects that represent sequence of characters. String internally uses char arrays to store characters but all with memory management, allocation and null char termination is handled by the string itself that’s why it’s easy to use.\u003c/p\u003e\u003cp\u003eHow can we use strings?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;string\u0026gt; //At first we have to include our library to our code\nInt main()\n{\n\tstring str; //here string works as data type\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf we want to initialize our string with value we will simply put the value between double quotes\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estring str;\nstr\u003d\u0026quot;Hello\u0026quot;; //value of str now is equal to Hello\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf we want the user to enter the value of the string and print it?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estring str;\ncin\u0026gt;\u0026gt; str; //now str has the value which the user entered\ncout \u0026lt;\u0026lt; str; //prints the value of str\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe have to notice that cin operation will only works if the string doesn’t have spaces, if we want to enter string with spaces we will have to use getline.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInt main()\n{\n\tstring str;\n\tgetline(cin,str); //user entered his string for example, \u0026quot;No pain, No gain\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can access specific character in the string using the random access operator.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estring str\u003d\u0026quot;Hello\u0026quot;;\ncout \u0026lt;\u0026lt; str[0]\u0026lt;\u0026lt; endl; //prints first letter in str\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eWhy strings?\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eAs we mentioned before, you won’t have to worry about creating an array of the right size to hold string variables. And it also gives us a lot of features.\u003c/p\u003e\u003ch3\u003eFunctions which can be done on strings:\u003c/h3\u003e\u003cp\u003eThere are a lot of functions which can be used to make life easier, Like if you want to get the length of string.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInt main()\n{\n\tstring str\u003d\u0026quot;hello world\u0026quot;;\n\tcout \u0026lt;\u0026lt; str.size() \u0026lt;\u0026lt; endl; //gets the length of string\n\tcout \u0026lt;\u0026lt; str.length() \u0026lt;\u0026lt; endl; //gets the length of string\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhat if we want to concatenate 2 strings, we can simply use the add operation to do so.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInt main()\n{\n\tstring str1\u003d\u0026quot;Hello\u0026quot;;\n\tstring str2\u003d\u0026quot;World\u0026quot;;\n\tstr1+\u003dstr2;\n\tcout \u0026lt;\u0026lt; str1 \u0026lt;\u0026lt; endl; //prints “HelloWorld”\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf we want to look for a specific character in a string? Then we have to check all characters in our string to check if it is exists or no. but do we know the start and end of our string? No, then we have to get them first using those functions. Str.begin() \u0026amp; Str.end().\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estr.begin(); //function returns the beginning of the string in the memory.\nstr.end(); //functions returns the end of the string in the memory.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/53/5e/535e347e95571360166ec5153a74a34df38592b2.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWhat if we want to look for a character in a string? If we had char array we would check every single character in the array, we can do it in string too.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint main()\n{\n\tstring str \u003d \u0026quot;looking for character\u0026quot;;\n\tchar x \u003d \u0027t\u0027;\n\tfor (int i \u003d 0; i \u0026lt; str.size(); i++)\n\t{\n\t\tif(str[i] \u003d\u003d x)\n\t\t{\n\t\t\tcout \u0026lt;\u0026lt; \u0026quot;Found\u0026quot; \u0026lt;\u0026lt; endl;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIs it the only way to look for character in string? No. We can simply sure \u003ccode\u003efind()\u003c/code\u003e function, which is easier way to look for a character in string, how do we use it?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInt main()\n{\n\tstring key\u003d\u0026quot;acmASCIS\u0026quot;;\n\tcout \u0026lt;\u0026lt; key.find(\u0027m\u0027) \u0026lt;\u0026lt; endl; //prints 2 -index of m- \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere the\u003ccode\u003ekey.find()\u003c/code\u003eif it found the character we are looking for it will return its index, and if it didn’t it will return -1.\u003c/p\u003e\u003cp\u003eTo check if a character exists in out string we can use \u003ccode\u003estr.find(\u0026quot;m\u0026quot;)!\u003dstring::npos\u003c/code\u003ethat returns true if found the character, false otherwise.\u003c/p\u003e\u003cp\u003eDeleting character from char array was a little bit tiring? Let’s see how it is done in strings.\u003c/p\u003e\u003cp\u003eHere it \u003ccode\u003eerase()\u003c/code\u003e function comes.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eerase()\u003c/code\u003e function has a two of usages: erasing single character, erasing range.\u003c/p\u003e\u003cp\u003eIf we want to erase a single character, then we will have to know where this character positioned from the beginning of the string.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estring boo\u003d\u0026quot;Harry\u0026quot;;\nboo.erase(boo.begin()+1); //erases the ‘a’ character.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor erasing range or mutable contiguous letters.\u003ccode\u003eerase()\u003c/code\u003efunction takes 2 parameters, first one is the start position, second parameter is the count/length of letters we want erase.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estring foo\u003d\u0026quot;this is an example\u0026quot;;\nfoo.erase(10,8); //erases from position 10.\ncout \u0026lt;\u0026lt; foo \u0026lt;\u0026lt; endl; //prints “this is an”\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhat if we want to print a string reversed? We can iterate over it from backward but it’s not always the fastest way.\u003c/p\u003e\u003cp\u003e\u003ccode\u003ereverse()\u003c/code\u003efunction it takes the \u003ccode\u003ebegin()\u003c/code\u003e and \u003ccode\u003eend()\u003c/code\u003e of string.\u003c/p\u003e\u003cp\u003eWe can use \u003ccode\u003ereverse()\u003c/code\u003e function to reverse a string.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estring rev\u003d\u0026quot;print me reversed\u0026quot;;\nreverse(rev.begin(),rev.end());\ncout \u0026lt;\u0026lt; rev \u0026lt;\u0026lt; endl; // prints \u0026quot;desrever em tnirp\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHow can we cut a specific interval from string? If we were using char arrays we will have to iterate from specific index, x time -where x is the number of letters we want-, which is not the efficient way.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eSubstr()\u003c/code\u003efunction is used to generate substring.\u003c/p\u003e\u003cp\u003eIt take 2 parameters, first one is the position where we want to start cutting, second if the number of letters we want to cut starting from that position.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estring voo \u003d \u0026quot;Cut me if you can\u0026quot;;\nstring str \u003d voo.substr(4, 8);\ncout \u0026lt;\u0026lt; str \u0026lt;\u0026lt; endl; //prints “me if yo”\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSome features in string which are not in char arrays are that strings are dynamic, which means it can be stretch and shrink, we can add and remove from it easily without caring about the memory.\u003c/p\u003e\u003cp\u003eIf we can to append a character to a string, how can we do it?\u003c/p\u003e\u003cp\u003e\u003ccode\u003ePush_back()\u003c/code\u003e or add operation: those operations allows you to add a new character to the end of a string.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estring temp \u003d \u0026quot;hell\u0026quot;;\ntemp.push_back(\u0027o\u0027); //temp\u003d”hello”\ntemp +\u003d\u0027’w\u0027; // temp\u003d”hellow”\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhat about inserting a character in a string? In char array we had to insert the character and shifting all characters to the right, and if stretch the array if it was necessary, in strings we don’t have to sorry about the allocated space.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eInsert()\u003c/code\u003efunction, inserts into string, it take 3 parameters, first one is the position we want to insert at, second is the frequency of letter, third the letter we want to insert.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint main()\n{\n\tstring koo \u003d \u0026quot;woow\u0026quot;;\n\tkoo.insert(2, 1, \u0027p\u0027); // inserts ‘p’ at position 1, one time\n\tcout \u0026lt;\u0026lt; koo \u0026lt;\u0026lt; endl; //print wopow.\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3\u003eSubstring\u003c/h3\u003e\u003cp\u003eSubstring refers to contiguous part of a string, a string inside another string. For example, consider the string str\u003d\u0026quot;acm\u0026quot;. The substrings of this string are: 1- \u0026quot;a\u0026quot;\u003c/p\u003e\u003cp\u003e2- \u0026quot;ac\u0026quot;\u003c/p\u003e\u003cp\u003e3- \u0026quot;acm\u0026quot;\u003c/p\u003e\u003cp\u003e4- \u0026quot;cm\u0026quot;\u003c/p\u003e\u003cp\u003e5- \u0026quot;c\u0026quot;\u003c/p\u003e\u003cp\u003e6- \u0026quot;m\u0026quot;\u003c/p\u003e\u003ch3\u003eSubsequence\u003c/h3\u003e\u003cp\u003eSubsequence is a sequence that can be derived from another sequence by removing zero or more elements, without changing the order of the remaining elements.\u003c/p\u003e\u003cp\u003eFor example, consider string str\u003d\u0026quot;acm\u0026quot;. The subsequences are:\u003c/p\u003e\u003cp\u003e1- \u0026quot;a\u0026quot;\u003c/p\u003e\u003cp\u003e2- \u0026quot;ac\u0026quot;\u003c/p\u003e\u003cp\u003e3- \u0026quot;c\u0026quot;\u003c/p\u003e\u003cp\u003e4- \u0026quot;acm\u0026quot;\u003c/p\u003e\u003cp\u003e5- \u0026quot;cm\u0026quot;\u003c/p\u003e\u003cp\u003e6- \u0026quot;am\u0026quot;\u003c/p\u003e\u003cp\u003e7- \u0026quot;m\u0026quot;\u003c/p\u003e\u003c/div\u003e","tags":[]}}