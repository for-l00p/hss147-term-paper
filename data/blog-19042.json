{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1435864424,"rating":5,"authorHandle":"theRevenant","modificationTimeSeconds":1435864462,"id":19042,"title":"\u003cp\u003eHow to solve ASC — 31, Problem — A (Casino) \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI am not getting WA for the sample case 2 ( an error of 0.01) for this question (Problem A — Casino) \u003ca href\u003d\"//codeforces.com/gym/100357\"\u003ehttp://codeforces.com/gym/100357\u003c/a\u003e\u003c/p\u003e\u003cp\u003eMy approach is as follows :-\u003c/p\u003e\u003cp\u003eSince player always chooses best bet possible , for any amount of money we have, loosing a bet and going back to smaller amount of money can never be the best bet. Suppose dp1[a] denotes the max prob. of winning using best bet and also stores the index of the best bet. \u003c/p\u003e\u003cp\u003edp1[a] \u003d max over a\u0026lt;j\u0026lt;\u003dn {dp1[i + w[j]] * p[j]/s};\u003c/p\u003e\u003cp\u003eNow we have the best bets stored for every index. Let dp[a][b] denote that at \u0026quot;a\u0026quot; unit of time, if we have \u0026quot;b\u0026quot; units of money, then what is the probability of getting to this state. Now we can reach b amounts of money from any state if the money at that state + money won from best bet \u003d\u003d b. Using this we can get a dp relation . Finally we can run this dp over some 10000 units of time or any other large number till it becomes stable for an error of 10^9. Or we can use matrix exponentiation over the dp and compute even for a much larger limit.\u003c/p\u003e\u003cp\u003ePlease help me, i can\u0027t understand why my method is wrong. Even if you can not understand my approach, it would be great if you explain how to solve the question.\u003c/p\u003e\u003c/div\u003e","tags":["asc 31","probability","dp","andrewzta"]}}