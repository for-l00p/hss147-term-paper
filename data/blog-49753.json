{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1484360703,"rating":15,"authorHandle":"shahidul_brur","modificationTimeSeconds":1484385514,"id":49753,"title":"\u003cp\u003eIs n(log n)^2 suffix array implementation good enough for contests\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI noticed that almost all of the programming blog shared O(n*(log n)^2) implementation for suffix array construction.\u003c/p\u003e\u003cp\u003eI saw O(n * log n) implementation in the book \u0026quot;Competitive Programming 3\u0026quot; â€” by Steven \u0026amp; Felix Halim. But it seems hard to understand and needs more time to code, since the code is longer compared to the O(n * log^2 n) implementation.\u003c/p\u003e\u003cp\u003eBesides, O(n*(log n)^2) implementation is easy to code and easy to understand.\u003c/p\u003e\u003cp\u003eSo, my question is: Is it good enough to learn only n(log n)^2 suffix array implementation for solving problems related to suffix array in any contests? Have you seen any problem where O(n*(log n)^2) fails but O(n*(log n)) passes?\u003c/p\u003e\u003cp\u003eIf you think that one must know O(n*(log n)) implementation, can you please share any easy to understand and comparably short code for O(n*(log n)) implementation?\u003c/p\u003e\u003cp\u003eAnother question: any problem which is solvable by suffix tree, can be solved suffix array? If so, can we skip suffix tree and always use suffix array?\u003c/p\u003e\u003cp\u003eThanks in advance.\u003c/p\u003e\u003c/div\u003e","tags":["suffix array","suffix sorting","strings","help"]}}