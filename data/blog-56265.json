{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1512897638,"rating":-11,"authorHandle":"try_n_catch","modificationTimeSeconds":1512897638,"id":56265,"title":"\u003cp\u003eMaximum XOR in a sorted array\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eRecently I was trying the question Maximum Xor Query of codechef. I decided to go for the editorial there I found to build a segment tree with each node being a trie. I am not able to understand the following piece of code that how they are finding maximum xor. Can anyone help me out??\u003c/p\u003e\u003cp\u003eint solve(vi \u0026amp;vec, int v) {\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e/*cout\u0026lt;\u0026lt;\u0026quot;VEC : \u0026quot;;\nfor(int i \u003d 0; i \u0026lt; vec.size(); i++)\n{\n    cout\u0026lt;\u0026lt;vec[i]\u0026lt;\u0026lt;\u0027 \u0027;\n}\ncout\u0026lt;\u0026lt;\u0027\\n\u0027;*/\nint l \u003d 0; int r \u003d vec.size() - 1;\nint cur \u003d 0;\nint ans \u003d 0;\n//cout\u0026lt;\u0026lt;l\u0026lt;\u0026lt;\u0026quot; \u0026quot;\u0026lt;\u0026lt;r\u0026lt;\u0026lt;endl;\nfor(int i \u003d 24 - 1; i \u0026gt;\u003d 0; i--)\n{\n    if(v\u0026amp;(1\u0026lt;\u0026lt;i))\n    {\n       int x \u003d lower_bound(vec.begin()+l, vec.begin()+r+1, cur+(1\u0026lt;\u0026lt;i)) - vec.begin();\n       cout\u0026lt;\u0026lt;1\u0026lt;\u0026lt;\u0026quot; \u0026quot;\u0026lt;\u0026lt;x\u0026lt;\u0026lt;endl;\n       if(l\u0026lt;\u003dx-1)\n       {\n         r \u003d min(r, x-1);\n         ans+\u003d(1\u0026lt;\u0026lt;i);\n       }\n       else\n       {\n         cur+\u003d(1\u0026lt;\u0026lt;i);\n       }\n    }\n    else\n    {\n       int x \u003d lower_bound(vec.begin()+l, vec.begin()+r+1, cur+(1\u0026lt;\u0026lt;i)) - vec.begin();\n    // cout\u0026lt;\u0026lt;0\u0026lt;\u0026lt;\u0026quot; \u0026quot;\u0026lt;\u0026lt;x\u0026lt;\u0026lt;\u0026quot; \u0026quot;\u0026lt;\u0026lt;i\u0026lt;\u0026lt;endl;\n       if(r\u0026gt;\u003dx)\n       {\n         l \u003d max(x,l);\n         ans+\u003d(1\u0026lt;\u0026lt;i);    \n         cur+\u003d(1\u0026lt;\u0026lt;i);\n       }\n    }\n}\nreturn ans;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e}\u003c/p\u003e\u003c/div\u003e","tags":[]}}