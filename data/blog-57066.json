{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1515772228,"rating":0,"authorHandle":"motatoes","modificationTimeSeconds":1515772228,"id":57066,"title":"\u003cp\u003eHow is the complexity of this algorithm O(|v||v| + |v||E|)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi CF\u003c/p\u003e\u003cp\u003eI\u0027m taking this course on coursera called \u0026quot;algorithms on graphs\u0026quot;. In \u003ca href\u003d\"https://d3c33hcgiwev3.cloudfront.net/_dc4aebf17f30b5504eb92843c2d9e0fc_09_graph_decomposition_9_computing-sccs.pdf?Expires\u003d1515888000\u0026amp;Signature\u003dj4GSlz448NIe3UwAIP2zAu5vOGVBbNjYgh1QMCcNy64Qo84vJYET9qDu3Jm3htd7Ded3D4PEzxo57I56LJCciHERH63GvNcAMKtEYhJXUNSG9HHztLbqwzDJOVaatCvybptJOIdViwT0JTvCJNflVoo-WxniXkRHGLJjbxgppNs_\u0026amp;Key-Pair-Id\u003dAPKAJLTNE6QMUY6HBC5A\"\u003ethese slides\u003c/a\u003e there is a description of a naive algorithm for calculating strongly connected components (SCC) on a directed graph (slide number 5):\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/d1/23/d123078c947f11fb8aa2db2fa0f4eaea05b85b67.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eI have a question regarding the complexity of this algorithm. We know that for each vertex V we need to explore all its neighbours so I assumed that its complexity is |V|^2 if the graph is fully connected?\u003c/p\u003e\u003cp\u003eThen for each neibghbour of v we must check that we can reach back to V, so what will the complexity be in this case? \u003c/p\u003e\u003cp\u003eMy question is how can we prove that the complexity of this naive algorithm is P(|V||V| + |V||E|) where |V| is the number of vertices and |E| is the number of edges?\u003c/p\u003e\u003c/div\u003e","tags":["graphs","algorithm complexity"]}}