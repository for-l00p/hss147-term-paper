{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1522773256,"rating":0,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1522773256,"id":58710,"title":"\u003cp\u003eNotes on Codeforces Beta Round #129, Div2-A, B, C, D, E(two pointers)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/205/problem/A\" title\u003d\"Codeforces Round 129 (Div. 2)\"\u003e205A - Little Elephant and Rozdil\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe key problem is to determine whether there are multiple minimum values.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/205/problem/B\" title\u003d\"Codeforces Round 129 (Div. 2)\"\u003e205B - Little Elephant and Sorting\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] ≤ \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1]\u003c/span\u003e, we do nothing; otherwise, we should increase all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e], \u003ci\u003ej\u003c/i\u003e ≥ \u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e together until \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1]\u003c/span\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, which contributes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1]\u003c/span\u003e to the final answer. Meanwhile, we don\u0027t need “really” implement the increasing operations, as one can see that only the difference between two neighboring elements matters while this difference does not change even if we really increase the values.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/205/problem/C\" title\u003d\"Codeforces Round 129 (Div. 2)\"\u003e205C - Little Elephant and Interval\u003c/a\u003e\u003c/p\u003e\u003cp\u003eA general idea behind this problem is that when asked to answer some query with interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e, it may be more convenient to establish a function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e which gives a result for \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e, and thus the answer to the query is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003er\u003c/i\u003e) - \u003ci\u003ef\u003c/i\u003e(\u003ci\u003el\u003c/i\u003e - 1)\u003c/span\u003e, just like the prefix idea.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/205/problem/D\" title\u003d\"Codeforces Round 129 (Div. 2)\"\u003e205D - Little Elephant and Cards\u003c/a\u003e\u003c/p\u003e\u003cp\u003eNote that each card contributes at most two different colors, and thus we have \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e colors. This implies that there are at most four colors whose total number can be equal to or larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e / 2\u003c/span\u003e. Therefore, the idea is summarized as follows.\u003c/p\u003e\u003cp\u003eAt first, we compress the data into range \u003cspan class\u003d\"tex-span\"\u003e[1, 2 × 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e]\u003c/span\u003e. Then, we use a “hash table” to count the number of each color (notice that if a card has the same color at both sides, we increase the corresponding counter only once rather than twice). Next, we find out all the colors whose counters are equal to or larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e / 2\u003c/span\u003e (at most four). Finally, we enumerate each of these colors, and calculate the minimum number of flipping that we need.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/205/problem/E\" title\u003d\"Codeforces Round 129 (Div. 2)\"\u003e205E - Little Elephant and Furik and Rubik\u003c/a\u003e \u003c/p\u003e\u003cp\u003eWe first give a simple example to reveal the key idea behind this problem. Suppose that we have two substrings “ABC” and “ADC”. According to the rules, we can obtain two points, since both “A” and “C” have the same position. However, from another perspective, we can redistribute the two points into “A” and “C”, respectively, i.e., letter “A” contributes one point while letter “C” contributes one point.\u003c/p\u003e\u003cp\u003eFrom the above arguments, we can calculate the points for letters “A, B,...,Z” independently, and then add them together, which gives the correct answer as well. We give letter “A” as a simple example.\u003c/p\u003e\u003cp\u003eSuppose that letter “A” is found at position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in thr first string and position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e in the second string. Then, there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ej\u003c/i\u003e + 1) × \u003ci\u003emin\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e - \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e substring pairs that have “A” at the same position and thus contributes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ej\u003c/i\u003e + 1) × \u003ci\u003emin\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e - \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e points to the final answer (index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e starts from zero).\u003c/p\u003e\u003cp\u003eNext, we store all the positions at which “A” appears in the first and second string in array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, respectively. A trivial solution is to enumerate all the pairs and compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ej\u003c/i\u003e + 1) × \u003ci\u003emin\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e - \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e. However, the trick to reduce the complexity is that for any \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u0026gt; \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ej\u003c/i\u003e + 1) × \u003ci\u003emin\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e - \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e is always equal to \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1) × (\u003ci\u003en\u003c/i\u003e - \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e. To take advantage of this observation, we adopt two pointers idea. We use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e2\u003c/span\u003e to point to arrays \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, respectively, and these two arrays have length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ela\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elb\u003c/i\u003e\u003c/span\u003e. As long as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e2] ≤ \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e1]\u003c/span\u003e, we move \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e2\u003c/span\u003e forward, and it contributes \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e2] + 1) × (\u003ci\u003esuffixa\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e1])\u003c/span\u003e to the final answer, where \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/50/ad/50ad408d0f55dc1b9e023dbb02de44166f6ee9d4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e can be viewed as a suffix sum. When we reach a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e2] \u0026gt; \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e1]\u003c/span\u003e, an extra value of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e1] + 1) × \u003ci\u003esuffixb\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e2]\u003c/span\u003e is added to the final answer, where \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7d/30/7d301e61115decc98e01503b855a825723ec177c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Then, we move \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e1\u003c/span\u003e forward until \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e2] ≤ \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e1]\u003c/span\u003e, and remember that each moving contributes \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e1] + 1) × \u003ci\u003esuffixb\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e2]\u003c/span\u003e to the final answer.\u003c/p\u003e\u003c/div\u003e","tags":[]}}