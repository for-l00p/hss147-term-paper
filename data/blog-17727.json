{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1430826089,"rating":6,"authorHandle":"natsukagami","modificationTimeSeconds":1430833045,"id":17727,"title":"\u003cp\u003eTight timing on Simple problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eToday I was given a problem which gives you an undirected unwieghted graph with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e vertexes and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e edges. You have two queries, \u003ccode\u003e1 u v\u003c/code\u003e requires you to output \u003ccode\u003e0\u003c/code\u003e if vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e are not connected, and \u003ccode\u003e1\u003c/code\u003e otherwise; and \u003ccode\u003e2 u v\u003c/code\u003e requires you to insert an edge between \u003ccode\u003eu\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 1000\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e ≤ 2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e. The problem is a simple dsu problem.\u003c/p\u003e\u003cp\u003eSince we all know that the timing was tight and the judge was not so powerful as Codeforces\u0027s, we tried to code dsu with all optimizations (path-compressing, prioritized joining). However my code here (\u003ca href\u003d\"http://ideone.com/JWWxfL\"\u003ehttp://ideone.com/JWWxfL\u003c/a\u003e) was judged 10/11 tests with the last one TLE, meanwhile the other one (\u003ca href\u003d\"http://ideone.com/B4ZJzu\"\u003ehttp://ideone.com/B4ZJzu\u003c/a\u003e) (which seems to not code prioritized joining correctly) was judged AC. \u003c/p\u003e\u003cp\u003eIn real time testing, it seems that my code was around 0.2s slower than the other one on that maximum testcase. Please tell me why.\u003c/p\u003e\u003cp\u003e(I do realize I have a variable \u003ccode\u003esetCount\u003c/code\u003e which decreases everytime I do the joining, however removing it doesn\u0027t improve my results.)\u003c/p\u003e\u003c/div\u003e","tags":["tight timing","dsu"]}}