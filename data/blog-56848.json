{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1514882125,"rating":4,"authorHandle":"zhenghaishu","modificationTimeSeconds":1514882180,"id":56848,"title":"\u003cp\u003eCodeforces Good Bye 2017 Div.2 908A,B\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003e[A. New Year and Counting Cards]\u003c/h1\u003e\u003ch2\u003eProblem Statement\u003c/h2\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/908/problem/A\"\u003ehttp://codeforces.com/contest/908/problem/A\u003c/a\u003e\u003c/p\u003e\u003ch2\u003eAnalysis\u003c/h2\u003e\u003cp\u003eFor letter, only vowel need to know the digit in the other side. For digit, only odd number need to know the letter in the other side.\u003c/p\u003e\u003ch2\u003eCode\u003c/h2\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;string\u0026gt;\nusing namespace std;\n\n#define MAX 50\n\nint main()\n{\n\tint cnt \u003d 0;\n\tstring s;\n\tcin \u0026gt;\u0026gt; s;\n\t\n\tfor(int i \u003d 0; i \u0026lt; s.length(); i++) \n\t{\n\t\tif(\u0027a\u0027 \u0026lt;\u003d s.at(i) \u0026lt;\u003d \u0027z\u0027)\n\t\t{\n\t\t\tif(\u0027a\u0027 \u003d\u003d s.at(i)|| \u0027e\u0027 \u003d\u003d s.at(i) || \u0027i\u0027 \u003d\u003d s.at(i) || \u0027o\u0027 \u003d\u003d s.at(i) || \u0027u\u0027 \u003d\u003d s.at(i))\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(\u00270\u0027 \u0026lt;\u003d s.at(i) \u0026lt;\u003d \u00279\u0027)\n\t\t{\n\t\t\tif(\u00271\u0027 \u003d\u003d s.at(i) || \u00273\u0027 \u003d\u003d s.at(i) || \u00275\u0027 \u003d\u003d s.at(i) || \u00277\u0027 \u003d\u003d s.at(i) || \u00279\u0027 \u003d\u003d s.at(i))\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tcout \u0026lt;\u0026lt; cnt;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch1\u003e[B. New Year and Buggy Bot]\u003c/h1\u003e\u003ch2\u003eProblem Statement\u003c/h2\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/908/problem/B\"\u003ehttp://codeforces.com/contest/908/problem/B\u003c/a\u003e\u003c/p\u003e\u003ch2\u003eAnalysis\u003c/h2\u003e\u003cp\u003e(1) Bob forgot to actually assign the directions to digits, so there are 24 mapping relations between directions and digits\u003c/p\u003e \u003ctable\u003e   \u003cthead\u003e     \u003ctr\u003e       \u003cth\u003eDirection \u003c/th\u003e       \u003cth\u003eDigit\u003c/th\u003e     \u003c/tr\u003e   \u003c/thead\u003e   \u003ctbody\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e0, 1, 2, 3\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e0, 1, 3, 2\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e0, 2, 1, 3\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e0, 2, 3, 1\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e0, 3, 1, 2\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e0, 3, 2, 1\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e1, 0, 2, 3\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e1, 0, 3, 2\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e1, 2, 0, 3\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e1, 2, 3, 0\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e1, 3, 0, 2\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e1, 3, 2, 0\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e2, 0, 1, 3\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e2, 0, 3, 1\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e2, 1, 0, 3\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e2, 1, 3, 0\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e2, 3, 0, 1\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e2, 3, 1, 0\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e3, 0, 1, 2\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e3, 0, 2, 1\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e3, 1, 0, 2\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e3, 1, 2, 0\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e3, 2, 0, 1\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eDOWN, UP, RIGHT, LEFT \u003c/td\u003e       \u003ctd\u003e3, 2, 1, 0\u003c/td\u003e     \u003c/tr\u003e   \u003c/tbody\u003e \u003c/table\u003e\u003cp\u003e(2) For C++, you can use next_permutation() of STL to enumerate all 24 permutations.\u003c/p\u003e\u003ch2\u003eCode\u003c/h2\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nenum Dir{DOWN, UP, RIGHT, LEFT};\nconst int maxn \u003d 50;\nchar grid[maxn][maxn];\nint n, m;\t\t\t\t\t\t// n for rows, m for columns\nint digit[4] \u003d {0, 1, 2, 3};\nint startX, startY, exitX, exitY;\nstring instructions;\n\nint move() \n{\n    int row \u003d startX, col \u003d startY;\n    \n    for (int i \u003d 0; i \u0026lt; instructions.size(); ++i) \n\t{\n        int d \u003d instructions[i] - \u00270\u0027;\n        for (int j \u003d 0; j \u0026lt; 4; ++j) \n\t\t{\n            if (d \u003d\u003d digit[j]) \n\t\t\t{\n                if (j \u003d\u003d DOWN)\n                {\n                \trow++;\n\t\t\t\t}\n                    \n                if (j \u003d\u003d UP)\n                {\n                \trow--;\n\t\t\t\t}\n\t\t\t\t\n                if (j \u003d\u003d RIGHT)\n                {\n                \tcol++;\n\t\t\t\t}\n\n                if (j \u003d\u003d LEFT)\n                {\n                \tcol--;\n\t\t\t\t}\n            }\n            \n            if (row \u0026gt; n || row \u0026lt; 1 || col \u0026gt; m || col \u0026lt; 1)\n            {\n            \treturn 0;\n\t\t\t}      \n            else if (grid[row][col] \u003d\u003d \u0027E\u0027) \n\t\t\t{\n                return 1;\n            }\n            else if (grid[row][col] \u003d\u003d \u0027#\u0027)\n            {\n            \t return 0;\n\t\t\t}   \n        }\n    }\n    \n    return 0;\n}\n\nint main() \n{\n    cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m;\n    for (int i \u003d 1; i \u0026lt;\u003d n; ++i) \n\t{\n        for (int j \u003d 1; j \u0026lt;\u003d m; ++j) \n\t\t{\n            cin \u0026gt;\u0026gt; grid[i][j];\n            if (grid[i][j] \u003d\u003d \u0027S\u0027) \n\t\t\t{\n                startX \u003d i;\n                startY \u003d j;\n            }\n            else if (grid[i][j] \u003d\u003d \u0027E\u0027) \n\t\t\t{\n                exitX \u003d i;\n                exitY \u003d j;\n            }\n        }\n    }\n    \n    cin \u0026gt;\u0026gt; instructions;\n    int res \u003d 0;\n    do \n\t{\n        res +\u003d move();\n    } while (next_permutation(digit, digit + 4));\n    \n    cout \u0026lt;\u0026lt; res \u0026lt;\u0026lt; endl;\n    \n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":[]}}