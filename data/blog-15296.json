{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1419106826,"rating":141,"authorHandle":"adamant","modificationTimeSeconds":1419699210,"id":15296,"title":"\u003cp\u003eDynamic connectivity problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi everyone! \u003c/p\u003e\u003cp\u003eRecently, at the MIPT: The Fall training camp on the contest from Alexander \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Milanin\" title\u003d\"International master Milanin\"\u003eMilanin\u003c/a\u003e was a problem from Petr Mitrichev Contest 7. We were given a graph and a set of queries like \u0026quot;suppose we removed from the graph \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≤ 4\u003c/span\u003e edges. Check whether graph is still connected?\u0026quot; I want to talk further about the solution of a more general problem, when the edges are added and removed without additional constraints in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ef/ce/efce7796027df696aee612cd4710f702dbf80010.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e offline. The first algorithm with such an assessment was offered by David Eppstein in 1992, reducing it to fully dynamic minimum spanning tree problem, but here we will focus on a simple algorithm, proposed in 2012 by Sergei \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Burunduk1\" title\u003d\"Candidate Master Burunduk1\"\u003eBurunduk1\u003c/a\u003e Kopeliovich. \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s assume that there are three types of queries \u0026amp; mdash; add the edge (\u003ccode\u003e+\u003c/code\u003e), remove the edge (\u003ccode\u003e-\u003c/code\u003e) and find out some information about the graph (\u003ccode\u003e?\u003c/code\u003e) (in this case, let it be the number of connected components of the graph). We assume that we received a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e queries. Consider the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/span\u003e points of time \u0026amp; mdash; initial and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e points after each query. For convenience, we transform the requests of the first kind in the queries of the form \u0026quot;\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th edge is present in the column from the time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e to the time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e\u0026quot; (\u003ccode\u003e!\u003c/code\u003e).\u003c/p\u003e\u003cp\u003eThus, suppose we have a graph \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e \u003d  \u0026lt; \u003ci\u003eV\u003c/i\u003e, \u003ci\u003eE\u003c/i\u003e \u0026gt; \u003c/span\u003e and the set of queries. Let \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b4/a7/b4a799332db4c0f73ac8772cc81584ea33f76ed2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e be a set of edges, which are always present in it (that were originally there and were no requests for their removal). Let\u0027s compress each connected component formed from such edges in one vertex and construct a new graph of these vertices. Also delete all vertices that are not mentioned in the list of requests (to work with the graph of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e vertices). Remade queries so that if in the initial graph query was assigned to a pair of vertices \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e, now it will be assigned to a pair of vertices \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ecomp\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e), \u003ci\u003ecomp\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e))\u003c/span\u003e. We see that the execution of \u003ccode\u003e?\u003c/code\u003e requests in new graph will have exactly the same result as in the initial. It is further proposed an algorithm: divide the time interval which is currently being processed in two halves and recursively solve firstly the left and then the right side, and thus obtain answers for the entire set of queries. Base \u0026amp; mdash; a single point of time, answered trivially \u0026amp; mdash; at this point we fed to the input graph without edges, therefore, for any query answer will be the number of vertices in the graph. At each step, the query processing subsegment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e;\u003ci\u003er\u003c/i\u003e)\u003c/span\u003e, we will keep only those vertices that are mentioned on this subsegments, then the request \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e;\u003ci\u003er\u003c/i\u003e)\u003c/span\u003e will be processed in the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003er\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e)\u003c/span\u003e, which will be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a8/79/a8795a9649c633282f5869342acc6e71f38c5f97.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e in the sum over all subsegments.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/WAe2wk\"\u003eSolution\u003c/a\u003e by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Burunduk1\" title\u003d\"Candidate Master Burunduk1\"\u003eBurunduk1\u003c/a\u003e. \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a8/79/a8795a9649c633282f5869342acc6e71f38c5f97.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSergei also proposed a similar idea of algorithm for a biconnected components (and bridges) in a dynamically changing graph in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a8/79/a8795a9649c633282f5869342acc6e71f38c5f97.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e offline. You can read about it in his diploma, which is attached below. \u003c/p\u003e\u003cp\u003eTo summarize, I would like to offer traditionally solve several problems on the topic. Especially for this was made \u003ca href\u003d\"/gym/100551\"\u003etraining\u003c/a\u003e. Good Luck \u0026amp; Have Fun!\u003c/p\u003e\u003cp\u003eP.S. More details about the structure and other algorithms for solving the problem (as well as the proof of some trivial facts that have been omitted) can be found in \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Burunduk1\" title\u003d\"Candidate Master Burunduk1\"\u003eBurunduk1\u003c/a\u003e\u0027s \u003ca href\u003d\"http://se.math.spbu.ru/SE/diploma/2012/s/Kopeliovich_diploma.pdf\"\u003ediploma\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["dynamic connectivity","dynamic","offline","bridges","2-edge-connectivity","connectivity"]}}