{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1515941248,"rating":2,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1515941248,"id":57126,"title":"\u003cp\u003eNotes on Codeforces Beta Round #108, A, B, C, D, E (steiner tree problem)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/152/problem/A\" title\u003d\"Codeforces Round 108 (Div. 2)\"\u003e152A - Marks\u003c/a\u003e\u003c/p\u003e\u003cp\u003eStraightforward implementation.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/152/problem/B\" title\u003d\"Codeforces Round 108 (Div. 2)\"\u003e152B - Steps\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIt leads to TLE if we implement the simulation step by step. Instead, we should directly compute the farthest position that we can reach for each given vector. Take care of some special cases, for instance, one dimension of the given vector is zero.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/152/problem/C\" title\u003d\"Codeforces Round 108 (Div. 2)\"\u003e152C - Pocket Book\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFor each column, we can count the total number of different letters as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. Then, by some simple observation, one can find that the answer is just \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e9/ec/e9ec4b4301a942017b9b31e35cfef831b9af27a4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/152/problem/D\" title\u003d\"Codeforces Round 108 (Div. 2)\"\u003e152D - Frames\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAt first, we find out all the rows that have at least three consecutive “#”s. Note that only those rows with the minimum row index, second minimum row index, maximum row index and second maximum row index can in fact serve as the potential parallel sides of rectangles. Then, we deal with columns in a similar manner.\u003c/p\u003e\u003cp\u003eThe following work is to enumerate all the feasible combinations of rows and columns so as to construct two rectangles (they may intersect or completely overlap with each other as the problem claims). Then, we compare each obtained board with the given one. If the given board contains two rectangles “correctly”, we will surely find out one single candidate result that is exactly the same as the given one. Otherwise, we can never find out any feasible answers.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/152/problem/E\" title\u003d\"Codeforces Round 108 (Div. 2)\"\u003e152E - Garden\u003c/a\u003e \u003c/p\u003e\u003cp\u003eWell, I find that this is a famous topic, referred to as Steiner Tree !! To solve this problem, one has to master several amazing techniques, such as dynamic programming based on bit-mask, SPFA (perhaps short for shortest path faster algorithm) and so on. \u003c/p\u003e\u003cp\u003eOne can find a large number of materials talking about this topic on the internet, and even standard frameworks about how to write the codes (as far as I consider).\u003c/p\u003e\u003c/div\u003e","tags":[]}}