{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1462445588,"rating":89,"authorHandle":"fcspartakm","modificationTimeSeconds":1462463474,"id":44715,"title":"\u003cp\u003eCodeforces Round #350 (Div.2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/670/problem/A\" title\u003d\"Codeforces Round 350 (Div. 2)\"\u003e670A - Holidays\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThere are many ways to solve this problem. Let\u0027s talk about one of them. At first we need to write a function, which takes the start day of the year and calculate the number of days off in such year. To make it let\u0027s iterate on the days of the year and will check every day — is it day off or no. It is easy to show that if the first day of the year equals to the first day of the week (i.e. this day is Monday) in this year will be minimum possible number of the days off. If the first day of the year equals to the first day off of the week (i.e. this day is Saturday) in this year will be maximum possible number of the days off. \u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/670/problem/B\" title\u003d\"Codeforces Round 350 (Div. 2)\"\u003e670B - Game of Robots\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eTo solve this problem we need to brute how many identifiers will called robots in the order from left to right. Let\u0027s solve this problem in one indexing. Let the current robot will call \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e identifiers. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e \u0026gt; 0\u003c/span\u003e let\u0027s make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d \u003ci\u003ek\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and go to the next robot. Else we need to print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is the array with robots identifiers and end our algorithm.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/670/problem/C\" title\u003d\"Codeforces Round 350 (Div. 2)\"\u003e670C - Cinema\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe need to use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emap\u003c/i\u003e\u003c/span\u003e-ом (let\u0027s call it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e) and calculate how many scientists knows every language (i. e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e equals to the number of scientists who know the language number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e). Let\u0027s use the pair \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eres\u003c/i\u003e\u003c/span\u003e, where we will store the number of \\textit{very pleased} scientists and the number of \\textit{almost satisfied} scientists. At first let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eres\u003c/i\u003e \u003d \u003ci\u003emake\u003c/i\u003e_\u003ci\u003epair\u003c/i\u003e(0, 0)\u003c/span\u003e. Now we need to iterate through all movies beginning from the first. Let the current movie has the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Then if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eres\u003c/i\u003e \u0026lt; \u003ci\u003emake\u003c/i\u003e_\u003ci\u003epair\u003c/i\u003e(\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]], \u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]])\u003c/span\u003e let\u0027s make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eres\u003c/i\u003e \u003d \u003ci\u003emake\u003c/i\u003e_\u003ci\u003epair\u003c/i\u003e(\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]], \u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ec\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]])\u003c/span\u003e and update the answer with the number of current movie.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/670/problem/D1\" title\u003d\"Codeforces Round 350 (Div. 2)\"\u003e670D1 - Magic Powder - 1\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThis problem with small constraints can be solved in the following way. Let\u0027s bake cookies one by one until it is possible. For every new cookie let\u0027s calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eval\u003c/i\u003e\u003c/span\u003e — how many grams of the magic powder we need to bake it. For this let\u0027s brute all ingredients and for the ingredient number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] ≤ \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e let\u0027s make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, else let\u0027s make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eval\u003c/i\u003e \u003d \u003ci\u003eval\u003c/i\u003e + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. When we bruted all ingredients if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eval\u003c/i\u003e \u0026gt; \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e than we can\u0027t bake more cookies. Else let\u0027s make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d \u003ci\u003ek\u003c/i\u003e - \u003ci\u003eval\u003c/i\u003e\u003c/span\u003e and go to bake new cookie.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/670/problem/D2\" title\u003d\"Codeforces Round 350 (Div. 2)\"\u003e670D2 - Magic Powder - 2\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eHere we will use binary search on the answer. Let\u0027s we check the current answer equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e. Then the objective function must be realized in the following way. Let\u0027s store in the variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e how many grams of the magic powder we need to bake \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e cookies. Let\u0027s iterate through the ingredients and the current ingredient has the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Then if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]·\u003ci\u003ecur\u003c/i\u003e \u0026gt; \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e let\u0027s make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e \u003d \u003ci\u003ecnt\u003c/i\u003e + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]·\u003ci\u003ecur\u003c/i\u003e - \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. If after looking on some ingredient \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e becomes more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e the objective function must return \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efalse\u003c/i\u003e\u003c/span\u003e. If there is no such an ingredient the objective function must return \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf the objective function returned \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e we need to move the left end of the binary search to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e, else we need to move the right end of the binary search to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/670/problem/E\" title\u003d\"Codeforces Round 350 (Div. 2)\"\u003e670E - Correct Bracket Sequence Editor\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eLet\u0027s solve this problem in the following way. At first with help of stack let\u0027s calculate the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e equals to the position of the bracket which paired for the bracket in the position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Then we need to use two arrays \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eleft\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eright\u003c/i\u003e\u003c/span\u003e. Then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eleft\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e will equals to the position of the closest to the left bracket which did not delete and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eright\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e will equals to the position of the closest to the right bracket which did not delete. If there are no such brackets we will store -1 in the appropriate position of the array.\u003c/p\u003e\u003cp\u003eLet\u0027s the current position of the cursor equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e. Then if the current operation equals to \\texttt{L} let\u0027s make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u003ci\u003eleft\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e]\u003c/span\u003e and if the current operation equals to \\texttt{R} let\u0027s make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u003ci\u003eright\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e]\u003c/span\u003e. We need now only to think how process the operation \\texttt{D}.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elf\u003c/i\u003e\u003c/span\u003e equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erg\u003c/i\u003e\u003c/span\u003e equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e]\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elf\u003c/i\u003e \u0026gt; \u003ci\u003erg\u003c/i\u003e\u003c/span\u003e let\u0027s swap them. Now we know the ends of the substring which we need to delete now. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eright\u003c/i\u003e[\u003ci\u003erg\u003c/i\u003e] \u003d  \u003d  - 1\u003c/span\u003e we need to move \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e to the left (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u003ci\u003eleft\u003c/i\u003e[\u003ci\u003elf\u003c/i\u003e]\u003c/span\u003e), else we need to move \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e to the right (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u003ci\u003eright\u003c/i\u003e[\u003ci\u003erg\u003c/i\u003e]\u003c/span\u003e). Now we need to recalculate the links for the ends of the deleted substring. Here we need to check is there any brackets which we did not deleted to the left and to the right from the ends of the deleted substring.\u003c/p\u003e\u003cp\u003eTo print the answer we need to find the position of the first bracket which we did not delete and go through all brackets which we did not delete (with help of the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eright\u003c/i\u003e\u003c/span\u003e) and print all such brackets. To find the position of the first bracket which we did not delete we can store in the array all pairs of the ends of substrings which we deleted, then sort this array and find the needed position. Bonus: how we can find this position in the linear time?\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/670/problem/F\" title\u003d\"Codeforces Round 350 (Div. 2)\"\u003e670F - Restore a Number\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eAt first let\u0027s find the length of the Vasya\u0027s number. For make this let\u0027s brute it. Let the current length equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e\u003c/span\u003e. Then if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e\u003c/span\u003e equals to the difference between the length of the given string and the number of digits in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e\u003c/span\u003e if means that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e\u003c/span\u003e is a length of the Vasya\u0027s number. \u003c/p\u003e\u003cp\u003eThen we need to remove from the given string all digits which appeared in the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e\u003c/span\u003e, generate three strings from the remaining digits and choose smaller string from them — this string will be the answer. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e is a substring which Vasya remembered. Which three strings do we need to generate?\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eLet\u0027s write the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and after that let\u0027s write all remaining digits from the given string in the ascending order. This string can be build only if the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e does not begin with the digit 0.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eLet\u0027s write at first the smallest digit from the remaining digits which does not equal to 0. If we have no such a digit we can\u0027t build such string. Else we need then to write all digits with smaller than the first digit in the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e in the ascending order, then write the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and then write all remaining digits in the ascending order.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eLet\u0027s write at first the smallest digit from the remaining digits which does not equal to 0. If we have no such a digit we can\u0027t build such string. Else we need then to write all digits with smaller than or equal to the first digit in the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e in the ascending order, then write the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and then write all remaining digits in the ascending order.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eAlso we need to separately consider the case when the Vasya\u0027s number equals to zero.\u003c/p\u003e\u003c/div\u003e","tags":["div2","350","round","editorial"]}}