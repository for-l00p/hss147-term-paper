{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1498499820,"rating":-23,"authorHandle":"ayaatiyeh","modificationTimeSeconds":1498499820,"id":52922,"title":"\u003cp\u003eRandom\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003einclude \u0026lt;bits/stdc++.h\u0026gt;\u003c/h1\u003e\u003cp\u003eusing namespace std;\u003c/p\u003e\u003ch1\u003edefine all(v) ((v).begin()), ((v).end())\u003c/h1\u003e\u003ch1\u003edefine sz(v) ((int)((v).size()))\u003c/h1\u003e\u003ch1\u003edefine clr(v, d) memset(v, d, sizeof(v))\u003c/h1\u003e\u003ch1\u003edefine repi(i, j, n) for(int i\u003d(j);i\u0026lt;(int)(n);++i)\u003c/h1\u003e\u003ch1\u003edefine repd(i, j, n) for(int i\u003d(j);i\u0026gt;\u003d(int)(n);--i)\u003c/h1\u003e\u003ch1\u003edefine repa(v) repi(i, 0, sz(v)) repi(j, 0, sz(v[i]))\u003c/h1\u003e\u003ch1\u003edefine rep(i, v) repi(i, 0, sz(v))\u003c/h1\u003e\u003ch1\u003edefine lp(i, cnt) repi(i, 0, cnt)\u003c/h1\u003e\u003ch1\u003edefine lpi(i, s, cnt) repi(i, s, cnt)\u003c/h1\u003e\u003ch1\u003edefine P(x) cout\u0026lt;\u0026lt;#x\u0026lt;\u0026lt;\u0026quot; \u003d { \u0026quot;\u0026lt;\u0026lt;x\u0026lt;\u0026lt;\u0026quot; }\\n\u0026quot;\u003c/h1\u003e\u003ch1\u003edefine pb push_back\u003c/h1\u003e\u003ch1\u003edefine MP make_pair\u003c/h1\u003e\u003cp\u003etypedef vector vi; typedef vector vd; typedef vector vvi; typedef vector vvd; typedef vector vs; typedef long long ll; typedef long double ld;\u003c/p\u003e\u003cp\u003eint sum_range1(int S, int E, vector \u0026amp; cum_sum) {  if (S \u003d\u003d 0)  return cum_sum[E];\u003c/p\u003e\u003cp\u003ereturn cum_sum[E] — cum_sum[S — 1]; }\u003c/p\u003e\u003cp\u003evoid zero_based() {  vector A \u003d { 2, 1, 4, 5, 3, 7 };  vector S(A.size(), 0);\u003c/p\u003e\u003cp\u003e//pre-processing: Compute cumulative sum array  for (int i \u003d 0; i \u0026lt; (int) A.size(); i++)  S[i] +\u003d (i \u003d\u003d 0) ? A[i] : A[i] + S[i — 1];\u003c/p\u003e\u003cp\u003ecout \u0026lt;\u0026lt; sum_range1(0, 5, S) \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;;  cout \u0026lt;\u0026lt; sum_range1(1, 5, S) \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;;  cout \u0026lt;\u0026lt; sum_range1(2, 4, S) \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;; }\u003c/p\u003e\u003cp\u003eint sum_range2(int S, int E, vector \u0026amp; cum_sum) {  return cum_sum[E] — cum_sum[S — 1]; }\u003c/p\u003e\u003cp\u003evoid one_based() {  vector A \u003d { 0, 2, 1, 4, 5, 3, 7 }; // let A[0] \u003d 0  vector S(A.size(), 0);\u003c/p\u003e\u003cp\u003e//pre-processing: Compute cumulative sum array: Start from 1  for (int i \u003d 1; i \u0026lt; (int) A.size(); i++)  S[i] +\u003d A[i] + S[i — 1];\u003c/p\u003e\u003cp\u003e// 1-based queries  cout \u0026lt;\u0026lt; sum_range1(1, 6, S) \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;;  cout \u0026lt;\u0026lt; sum_range1(2, 6, S) \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;;  cout \u0026lt;\u0026lt; sum_range1(3, 5, S) \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;; }\u003c/p\u003e\u003cp\u003e// sum((i, j) (k, l)) where (k, l) is the bottom right  int sum_range(int i, int j, int k, int l, vector\u0026lt;vector\u0026gt; \u0026amp; S) {  return S[k][l] — S[k][j-1] — S[i-1][l] + S[i-1][j-1];  }\u003c/p\u003e\u003cp\u003evoid accumSum2D() {  // 1-based matrix  // Append extra top row and col with zero  vector\u0026lt;vector\u0026gt; A \u003d  { { 0, 0, 0, 0, 0, 0 },  { 0, 1, 2, 2, 4, 1 },  { 0, 3, 4, 1, 5, 2 },  { 0, 2, 3, 3, 2, 4 },  { 0, 4, 1, 5, 4, 6 },  { 0, 6, 3, 2, 1, 3 }, };\u003c/p\u003e \u003cpre\u003e// Accumulate each row\nfor (int i \u003d 1; i \u0026lt; (int) A.size(); i++)\n  for (int j \u003d 1; j \u0026lt; (int) A[0].size(); j++)\n    A[i][j] +\u003d A[i][j-1];\n\n// Accumulate each col\nfor (int j \u003d 1; j \u0026lt; (int) A[0].size(); j++)\n  for (int i \u003d 1; i \u0026lt; (int) A.size(); i++)\n      A[i][j] +\u003d A[i-1][j];\n\n// 1, 5, 2\n// 3, 2, 4\ncout \u0026lt;\u0026lt; sum_range(2, 3, 3, 5, A) \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;;\u003c/pre\u003e\u003cp\u003e}\u003c/p\u003e\u003cp\u003eint main() {\u003c/p\u003e\u003cp\u003eaccumSum2D();\u003c/p\u003e\u003cp\u003ereturn 0; }\u003c/p\u003e\u003c/div\u003e","tags":["gcd","2d vector"]}}