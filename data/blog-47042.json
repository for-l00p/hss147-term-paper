{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1473518265,"rating":-8,"authorHandle":"AIdancer","modificationTimeSeconds":1473518265,"id":47042,"title":"\u003cp\u003eHow to write dll with C++ in windows.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSometime, it\u0027s not convenient to write UI for our application with C++ Language. For example, I have some C++ API for trading futures, these API are simple, direct and regular. But we need complex UI to show the market price and order status, C# is more easy to use compared with MFC, QT, WxWidgets etc. In this case, we have no need to write UI in C++, we can packaging all the C++ API in dll, and call them in C# UI thread directly.\u003c/p\u003e\u003cp\u003eFollowing is an example. Firstly, let\u0027s show you the C++ part:\u003c/p\u003e\u003cp\u003eshow.h\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#pragma once\n#include \u0026lt;Windows.h\u0026gt;\n\n#ifdef MATHLIBRARY_EXPORTS\n#define MATHLIBRARY_API __declspec(dllexport) \n#else\n#define MATHLIBRARY_API __declspec(dllimport) \n#endif\n\nclass Functions\n{\npublic:\n\t// Returns a + b\n\tstatic MATHLIBRARY_API double Add(double a, double b);\n\n\t// Returns a * b\n\tstatic MATHLIBRARY_API double Multiply(double a, double b);\n\n\t// Returns a + (a * b)\n\tstatic MATHLIBRARY_API double AddMultiply(double a, double b);\n\n\tstatic MATHLIBRARY_API void show(const char *str);\n\n\tMATHLIBRARY_API void Run();\n};\n\nextern \u0026quot;C\u0026quot; {\n\tFunctions *func;\n\t__declspec(dllexport) double add(double a, double b);\n\t__declspec(dllexport) double multiply(double a, double b);\n\t__declspec(dllexport) void show(const char *str);\n\t__declspec(dllexport) void Run();\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eshow.cpp\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026quot;show.h\u0026quot;\n#include \u0026lt;stdio.h\u0026gt;\n\ndouble Functions::Add(double a, double b)\n{\n\treturn a + b;\n}\n\ndouble Functions::Multiply(double a, double b)\n{\n\treturn a * b;\n}\n\ndouble Functions::AddMultiply(double a, double b)\n{\n\treturn a + (a * b);\n}\n\nvoid Functions::show(const char *str)\n{\n\tprintf(\u0026quot;%s\\n\u0026quot;, str);\n}\n\nvoid Functions::Run()\n{\n\twhile (true)\n\t{\n\t\tprintf(\u0026quot;I\u0027m running\\n\u0026quot;);\n\t\tSleep(800);\n\t}\n}\n\nextern \u0026quot;C\u0026quot; {\n\tFunctions *func;\n\t__declspec(dllexport) double add(double a, double b)\n\t{\n\t\treturn Functions::Add(a, b);\n\t}\n\n\t__declspec(dllexport) double multiply(double a, double b)\n\t{\n\t\treturn Functions::Multiply(a, b);\n\t}\n\n\t__declspec(dllexport) void show(const char *str)\n\t{\n\t\tFunctions::show(str);\n\t}\n\n\t__declspec(dllexport) void Run()\n\t{\n\t\tfunc \u003d new Functions();\n\t\tfunc-\u0026gt;Run();\n\t}\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ethen we can use C#\u0027s DllImport to call the C++ API\u003c/p\u003e\u003cp\u003eProgram.cs\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace CSharp\n{\n    public class Program\n    {\n        [DllImport(@\u0026quot;C:\\Users\\liqiaz\\code\\DLLProject\\Debug\\DLLProject.dll\u0026quot;, \n            CallingConvention \u003d CallingConvention.Cdecl)]\n        public static extern double add(double a, double b);\n\n        [DllImport(@\u0026quot;C:\\Users\\liqiaz\\code\\DLLProject\\Debug\\DLLProject.dll\u0026quot;, \n            CallingConvention \u003d CallingConvention.Cdecl)]\n        public static extern void show(string message);\n\n        [DllImport(@\u0026quot;C:\\Users\\liqiaz\\code\\DLLProject\\Debug\\DLLProject.dll\u0026quot;,\n            CallingConvention \u003d CallingConvention.Cdecl)]\n        public static extern void Run();\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\u0026quot;Hello\u0026quot;);\n            int x \u003d 9, y \u003d 9;\n            Console.WriteLine(add(x, y));\n            show(\u0026quot;Hahahaha\u0026quot;);\n            Run();\n        }\n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, I guess you have understand how to combine C++ dll and C# UI together to make more powerful application :D. Thanks for your reading.\u003c/p\u003e\u003c/div\u003e","tags":[]}}