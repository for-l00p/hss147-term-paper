{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1456400375,"rating":-14,"authorHandle":"qzqzgfy","modificationTimeSeconds":1456400375,"id":43365,"title":"\u003cp\u003eO. Arrow （630 O）\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cpre\u003eO. Arrow\n                         time limit per test0.5 seconds\n                        memory limit per test64 megabytes\n                             inputstandard input\n                            outputstandard output\u003c/pre\u003e\u003cp\u003ePetya has recently started working as a programmer in the IT city company that develops computer games.\u003c/p\u003e\u003cp\u003eBesides game mechanics implementation to create a game it is necessary to create tool programs that can be used by game designers to create game levels. Petya\u0027s first assignment is to create a tool that allows to paint different arrows on the screen.\u003c/p\u003e\u003cp\u003eA user of this tool will choose a point on the screen, specify a vector (the arrow direction) and vary several parameters to get the required graphical effect. In the first version of the program Petya decided to limit parameters of the arrow by the following: a point with coordinates (px, py), a nonzero vector with coordinates (vx, vy), positive scalars a, b, c, d, a \u0026gt; c.\u003c/p\u003e\u003cp\u003eThe produced arrow should have the following properties. The arrow consists of a triangle and a rectangle. The triangle is isosceles with base of length a and altitude of length b perpendicular to the base. The rectangle sides lengths are c and d. Point (px, py) is situated in the middle of the triangle base and in the middle of side of rectangle that has length c. Area of intersection of the triangle and the rectangle is zero. The direction from (px, py) point to the triangle vertex opposite to base containing the point coincides with direction of (vx, vy) vector.\u003c/p\u003e\u003cp\u003eEnumerate the arrow points coordinates in counter-clockwise order starting from the tip.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/df/aa/dfaae6dfbd7c3ae20068c8b7a26261cd081c9103.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eInput The only line of the input contains eight integers px, py, vx, vy ( - 1000 ≤ px, py, vx, vy ≤ 1000, vx2 + vy2 \u0026gt; 0), a, b, c, d (1 ≤ a, b, c, d ≤ 1000, a \u0026gt; c).\u003c/p\u003e\u003cp\u003eOutput Output coordinates of the arrow points in counter-clockwise order. Each line should contain two coordinates, first x, then y. Relative or absolute error should not be greater than 10 - 9.\u003c/p\u003e\u003cp\u003eExamples input 8 8 0 2 8 3 4 5 output 8.000000000000 11.000000000000 4.000000000000 8.000000000000 6.000000000000 8.000000000000 6.000000000000 3.000000000000 10.000000000000 3.000000000000 10.000000000000 8.000000000000 12.000000000000 8.000000000000\u003c/p\u003e\u003cp\u003e大致题意：给出参数和向量方向，求箭头上7个点坐标；\u003c/p\u003e\u003cp\u003e题解：直接运用vx和vy的向量进行装换，由于每次只转90度因此就偷懒用0和1来代替cos90°和sin90°,不过这样也可以避免精度问题。\u003c/p\u003e\u003cp\u003e代码：\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include\u0026lt;iostream\u0026gt;\n#include\u0026lt;cstdio\u0026gt;\n#include\u0026lt;cstring\u0026gt;\n#include\u0026lt;cmath\u0026gt;\n#include\u0026lt;string\u0026gt;\n#include\u0026lt;algorithm\u0026gt;\ndouble half_pi\u003dacos(-1)/2,px,py,vx,vy,a,b,c,d,vvx,vvy;\ndouble dis(double x,double y){//向量的模\n\treturn sqrt(x*x+y*y);\n}\ndouble ccos\u003d0,ssin\u003d1;\nvoid turn_90_degrees(){//旋转向量90°使用的函数\n\tvvx\u003dvx*ccos-vy*ssin;\n\tvvy\u003dvy*ccos+vx*ssin;\n\tvx\u003dvvx;\n\tvy\u003dvvy;\n}\nint main(){\n\tscanf(\u0026quot;%lf%lf%lf%lf%lf%lf%lf%lf\u0026quot;,\u0026amp;px,\u0026amp;py,\u0026amp;vx,\u0026amp;vy,\u0026amp;a,\u0026amp;b,\u0026amp;c,\u0026amp;d);\n\tdouble D\u003ddis(vx,vy);\n\tprintf(\u0026quot;%.12f %.12f\\n\u0026quot;,px+vx/D*b,py+vy/D*b);\n\tturn_90_degrees();\n\tprintf(\u0026quot;%.12f %.12f\\n\u0026quot;,px+vx/D*a/2,py+vy/D*a/2);\n\tprintf(\u0026quot;%.12f %.12f\\n\u0026quot;,px+vx/D*c/2,py+vy/D*c/2);\n\tpx\u003dpx+vx/D*c/2;py\u003dpy+vy/D*c/2;\n\tturn_90_degrees();\n\tprintf(\u0026quot;%.12f %.12f\\n\u0026quot;,px+vx/D*d,py+vy/D*d);\n\tpx\u003dpx+vx/D*d;py\u003dpy+vy/D*d;\n    turn_90_degrees();\n    printf(\u0026quot;%.12f %.12f\\n\u0026quot;,px+vx/D*c,py+vy/D*c);\n    px\u003dpx+vx/D*c;py\u003dpy+vy/D*c;\n    turn_90_degrees();\n    printf(\u0026quot;%.12f %.12f\\n\u0026quot;,px+vx/D*d,py+vy/D*d);\n    px\u003dpx+vx/D*d;py\u003dpy+vy/D*d;\n    for (int i\u003d1;i\u0026lt;\u003d3;i++) turn_90_degrees();\n    printf(\u0026quot;%.12f %.12f\\n\u0026quot;,px+vx/D*(a-c)/2,py+vy/D*(a-c)/2);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/1c/20/1c20f9bc498932c1090f47419d1e726187117deb.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003c/div\u003e","tags":["计算几何","水题"]}}