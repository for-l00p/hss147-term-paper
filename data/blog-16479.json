{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1424248206,"rating":9,"authorHandle":"jaswanthi","modificationTimeSeconds":1424508966,"id":16479,"title":"\u003cp\u003eWhy DFS can\u0027t be used for shortest distance on graph, but works on tree\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eEDIT For followup Question:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThanks for the clarifications :)\u003c/p\u003e\u003cp\u003eBut, One follow-up question is that, In this problem \u003ca href\u003d\"https://oj.leetcode.com/problems/triangle/\"\u003ehttps://oj.leetcode.com/problems/triangle/\u003c/a\u003e, you can reach a node in different ways, but it can be solvable with DFS.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epublic class Solution {\n    int[][] memo;\n    public int minimumTotal(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; triangle) {\n        memo \u003d new int[triangle.size()][triangle.size()];\n        for(int i \u003d 0; i \u0026lt; triangle.size(); i++) {\n            Arrays.fill(memo[i], Integer.MIN_VALUE);\n        }\n        return minimumTotal(triangle,0,0);\n    }\n    public int minimumTotal(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; triangle, int i, int j) {\n        if (i \u003d\u003d triangle.size() -1)\n           return triangle.get(i).get(j); // base case\n        if(memo[i][j] !\u003d INTEGER.MIN_VALUE) {\n            return memo[i][j];\n        }\n        int sum0 \u003d minimumTotal(triangle, i+1, j);\n        int sum1 \u003d minimumTotal(triangle, i+1, j+1);\n        int res \u003d Math.min(sum0, sum1) + triangle.get(i).get(j);\n        memo[i][j] \u003d res;\n        return res;\n    }   \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003c/p\u003e\u003ch1\u003eOriginal post:\u003c/h1\u003e\u003cp\u003eWhy we cannot use DFS to find the shortest distance on the graph/mazes, while it can be used on the tree.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHow can I formally prove that even a modified DFS doesn\u0027t work.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eFor ex: we can \u003ca href\u003d\"https://oj.leetcode.com/problems/triangle/\"\u003esolve this one\u003c/a\u003e ( \u003ca href\u003d\"https://oj.leetcode.com/problems/triangle/\"\u003ehttps://oj.leetcode.com/problems/triangle/\u003c/a\u003e) easily with DFS.\u003c/p\u003e\u003cp\u003eThanks for your help !!! \u003c/p\u003e\u003c/div\u003e","tags":["dfs","dijkstra"]}}