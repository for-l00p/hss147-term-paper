{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1425602730,"rating":0,"authorHandle":"elena","modificationTimeSeconds":1425602834,"id":16799,"title":"\u003cp\u003eТретья тренировка по одномерным массивам\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eЭта тренировка также будет проведена на задачах соревнования, но на сей раз — \u003ca href\u003d\"http://codeforces.ru/gym/100602\"\u003eшкольного\u003c/a\u003e. \u003c/p\u003e\u003cp\u003eПредлагается решить следующие задачи (перечислены по возрастанию сложности):\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://codeforces.ru/gym/100602/problem/L\"\u003eЗадача L. Глобальное мышление\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://codeforces.ru/gym/100602/problem/H\"\u003eЗадача H. Важные показатели\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://codeforces.ru/gym/100602/problem/K\"\u003eЗадача K. Архитектурное решение\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://codeforces.ru/gym/100602/problem/E\"\u003eЗадача E. Пастбище\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://codeforces.ru/gym/100602/problem/I\"\u003eЗадача I. Спор\u003c/a\u003e \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eЭти задачи предполагают чтение входных данных из файла \u003ccode\u003einput.txt\u003c/code\u003e и вывод результата в файл \u003ccode\u003eoutput.txt\u003c/code\u003e. Привычный Вам код для ввода и вывода потребуется немного изменить. Так, при создании объекта \u003ccode\u003eScanner\u003c/code\u003e вместо \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eScanner in \u003d new Scanner(System.in);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eнужно будет писать:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eScanner in \u003d new Scanner(new BufferedReader(new FileReader(\u0026quot;input.txt\u0026quot;)));\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eВообще говоря, использование \u003ccode\u003eBufferedReader\u003c/code\u003e не обязательно, но немного ускоряет работу объекта \u003ccode\u003ein\u003c/code\u003e (для радикального ускорения следует пользоваться \u003ccode\u003eStreamTokenizer\u003c/code\u003e вместо \u003ccode\u003eScanner\u003c/code\u003e). \u003c/p\u003e\u003cp\u003eЧуть больше изменится код для вывода данных: мы будем создавать объект класса \u003ccode\u003ePrintWriter\u003c/code\u003e вместо того, чтобы воспользоваться \u003ccode\u003eSystem.out\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePrintWriter out \u003d new PrintWriter(\u0026quot;output.txt\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eОбратите внимание, что классы \u003ccode\u003eBufferedReader\u003c/code\u003e и \u003ccode\u003ePrintWriter\u003c/code\u003e должны быть импортированы; кроме того, в заголовках методов, прямо или косвенно использующих переменные \u003ccode\u003ein\u003c/code\u003e и \u003ccode\u003eout\u003c/code\u003e, потребуется указать, что они пропускают исключения ввода/вывода — \u003ccode\u003ethrows IOException\u003c/code\u003e (класс \u003ccode\u003eIOException\u003c/code\u003e также должен быть указан среди предложений импорта). Исключительная ситуация типа \u003ccode\u003eIOException\u003c/code\u003e может возникнуть, например, когда нужный файл (input.txt) отсутствует или же когда не хватает места для записи файла (output.txt). \u003c/p\u003e\u003cp\u003eНаконец, ещё один важный момент состоит в том, что файлы после использования необходимо закрывать. И если \u003ccode\u003ein.close()\u003c/code\u003e уже привычен для Вас, то по завершении работы с переменной \u003ccode\u003eout\u003c/code\u003e также потребуется выполнить аналогичные действия: \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eout.flush();\nout.close();\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eВывод в файл является достаточно \u0026quot;медленной\u0026quot; операцией, поэтому обычно он буферизуется. Это значит, что данные, предназначенные для вывода, сначала накапливаются в некоторой области памяти (буфере) и, по достижении определенного \u0026quot;объёма\u0026quot;, переписываются в файл одномоментно. Метод \u003ccode\u003eflush()\u003c/code\u003e обеспечивает выталкивание содержимого буфера в файл (даже если буфер заполнен не полностью).\u003c/p\u003e\u003c/div\u003e","tags":["массивы","java","файловый ввод-вывод"]}}