{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1459366303,"rating":85,"authorHandle":"IlyaLos","modificationTimeSeconds":1459863485,"id":44093,"title":"\u003cp\u003eEditorial for Codeforces Round #346 (Div. 2)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/659/problem/A\"\u003e659A — Round House\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe answer for the problem is calculated with a formula \u003cspan class\u003d\"tex-span\"\u003e((\u003ci\u003ea\u003c/i\u003e - 1 + \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ef/a8/efa8f0891cb15bc0e4b503f090f6c8d8b1d9d6b4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e) \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ef/a8/efa8f0891cb15bc0e4b503f090f6c8d8b1d9d6b4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSuch solution has complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThere is also a solution with iterations, modelling every of \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eb\u003c/i\u003e|\u003c/span\u003e\u0027s Vasya\u0027s moves by one entrance one by one in desired direction, allowed to pass all the tests.\u003c/p\u003e\u003cp\u003eThis solution\u0027s complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003eb\u003c/i\u003e|)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/659/problem/B\"\u003e659B — Qualifying Contest\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s consider the participants from every region separately. So for every region we just need to sort all of its participants by their score in non-increasing order. The answer for a region is inconsistent if and only if the score of the second and the third participant in this order are equal, otherwise the answer is the first and the second participant in this order.\u003c/p\u003e\u003cp\u003eThe solution complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ee/25/ee259b9b93864a58ef559dc68e9ce1fd4bd94c67.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/659/problem/C\"\u003e659C — Tanya and Toys\u003c/a\u003e\u003c/p\u003e\u003cp\u003eOur task is to take largest amount of toys Tanya doesn\u0027t have yet the way the sum of their costs doesn\u0027t exceed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e. To do that one can perform greedy algorithm: let\u0027s buy the cheepest toy Tanya doesn\u0027t have at every step, while the amount of money left are sufficient to do that. The boolean array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eused\u003c/i\u003e\u003c/span\u003e can be a handle in that, storing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e values in indices equal to toy types which Tanya does have at the moment. As soon as \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e money is sufficient to buy no more than \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e toys \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ad/af/adaf24fe39337bb2681fb48af8c6f565974010b7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eused\u003c/i\u003e\u003c/span\u003e is enough to be sized \u003cspan class\u003d\"tex-span\"\u003e2 × 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e (we won\u0027t buy the toys with types numbered greater). So we just need to iterate over the number of type we want to buy, and if corresponding value in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eused\u003c/i\u003e\u003c/span\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efalse\u003c/i\u003e\u003c/span\u003e, we should buy it, otherwise we can\u0027t.\u003c/p\u003e\u003cp\u003eThe solution complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f8/9a/f89aca9877059f21d7d96297338a276a937ff7b0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eOne can use the \u0026lt;\u0026gt; data structure (C++ \\texttt{std::set}, for example), for storing the types Tanya has at the moment. In this case the complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3a/45/3a459f13a353e73ce3384b109050158b11054f92.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/659/problem/D\"\u003e659D — Bicycle Race\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFrom the track description follows that Maria moves the way that the water always located to the right from her, so she could fall into the water only while turning left. To check if the turn is to the left, let\u0027s give every Maria\u0027s moves directions a number: moving to the north — \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, moving to the west — \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, to the south — \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e and to the east — \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e. Then the turn is to the left if and only if the number of direction after performing a turn \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edir\u003c/i\u003e\u003c/span\u003e is equal to the number before performing a turn \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eoldDir\u003c/i\u003e\u003c/span\u003e plus one modulo \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3f/a1/3fa1bb8a0694d6549a9d07bfb094fdf7bbe34496.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eThis solution has complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eOne can solve this problem in alternative way. Let the answer be equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e (that means that the number of inner corners of \u003cspan class\u003d\"tex-span\"\u003e270\u003c/span\u003e degrees equals \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, but the number of inner corners of \u003cspan class\u003d\"tex-span\"\u003e90\u003c/span\u003e degrees to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e). As soon as the sum of the inner corners\u0027 values of polygon of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e vertices is equal to \u003cspan class\u003d\"tex-span\"\u003e180 × (\u003ci\u003en\u003c/i\u003e - 2)\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e × 270 + (\u003ci\u003en\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e) × 90\u003c/span\u003e equals to \u003cspan class\u003d\"tex-span\"\u003e180 × (\u003ci\u003en\u003c/i\u003e - 2)\u003c/span\u003e. This leads us to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d5/31/d5314bcc8946db86518fe2fc08bdf5a3b16441c1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, being the answer for the problem calculated in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/659/problem/E\"\u003e659E — New Reform\u003c/a\u003e\u003c/p\u003e\u003cp\u003eOne should notice, that for every connected component of the graph the problem could be solved independently, so we just need to solve the problem for any connected graph.\u003c/p\u003e\u003cp\u003eLet this connected graph (of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e vertices) contain \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e edge (such is called a tree). If one maintain a DFS from any of its vertex, every edge will be oriented, and each of them could given to its ending vertex, this way every vertex (except the one we launched DFS from, that is the root) will be satisfied by an edge. In this case the answer is equal to \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s then deal with a case when the graph contains more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e edges. This graph contains at least one cycle. Let\u0027s take arbitrary vertex from any of the cycles and launch a DFS (as above) from it. All vertices except chosen will be satisfied, so we are to give an edge to the chosen vertex. As soon as chosen vertex belongs to a cycle, at least one of its edge will not be taken to account in the DFS, so it can be given to a root. This way all the vertices will be satisfied.\u003c/p\u003e\u003cp\u003eNow we are able to solve the task for any connected graph, so we are to divide the graph into a connected components — this can be easily done by DFS or BFS.\u003c/p\u003e\u003cp\u003eThe solution complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/659/problem/F\"\u003e659F — Polycarp and Hay\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn this task one should find a connected area, in which the product of the minimum value of the cells and the number of the cells is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. To find such, let\u0027s sort all the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003ci\u003em\u003c/i\u003e\u003c/span\u003e cells by their values by non-increasing order. Then we will consecutively add them in this order one by one, maintaining a connected components on their neighbouring relations graph. It\u0027s enough to use Disjoint Set Union structure to do so, storing additionally size of every component.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the last added element in some component \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eid\u003c/i\u003e\u003c/span\u003e, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e has the minimum value among all the cells in component \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eid\u003c/i\u003e\u003c/span\u003e (according to our ordering). If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e does not divide \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, then the component \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eid\u003c/i\u003e\u003c/span\u003e could not consist of desired area. Otherwise (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e), let\u0027s find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eneed\u003c/i\u003e \u003d \u003ci\u003ek\u003c/i\u003e / \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — desired area size (if it contains \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e), and if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eCNT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eid\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is not less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eneed\u003c/i\u003e\u003c/span\u003e, then the component \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eid\u003c/i\u003e\u003c/span\u003e contains desired area, which could be easily found by launching a DFS in a neighbouring relation graph from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, visiting only the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e\u003c/sub\u003e ≥ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eneed\u003c/i\u003e\u003c/span\u003e of them.\u003c/p\u003e\u003cp\u003eThe solution complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e5/39/e539e970225e2f5789627b768f6f0af04757eafc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/659/problem/G\"\u003e659G — Fence Divercity\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet the answer for the problem be the sum\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/53/95/5395d01ba1fdce6708caf626e0ee33f0d4f232af.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003ewhere \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecalc\u003c/i\u003e(\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e is the number of ways to cut the top part of the fence the way its leftmost part is in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and the rightmost in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e \u003d \u003ci\u003er\u003c/i\u003e\u003c/span\u003e, that is the case when the cutted top part consists of part of only one board, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecalc\u003c/i\u003e(\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e) \u003d \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e \u0026gt; \u003ci\u003el\u003c/i\u003e\u003c/span\u003e, then\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/38/aa/38aa09ae99f7a2155c0ec79d45f319a315136226.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIn other words, the number of ways to cut the top part of some board is equal to minimum value among heights of it and its neighbours minus one, otherwise the cutted part will be inconsistent. Leftmost board and rightmost board are considered separately, because each of them does have only one neighbouring board. So the answer looks like\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1c/90/1c9032b9fe22f1b3a94253df18dea9b355faadeb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThe first summand is easy to calculate, so let\u0027s take a look at the second. Let us modify it as the following:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2d/cc/2dcc5dd046e7f8f9fc6e85aa4c3d197d75b30f05.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/04/75/047561c35fa2938d6536f3910cad645072b538f1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s take a look how does the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e(\u003ci\u003er\u003c/i\u003e)\u003c/span\u003e change after increasing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e by one:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e(\u003ci\u003er\u003c/i\u003e + 1) \u003d \u003ci\u003eS\u003c/i\u003e(\u003ci\u003er\u003c/i\u003e) × \u003ci\u003emin\u003c/i\u003e(\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e - 1\u003c/sub\u003e - 1, \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e - 1, \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e + 1\u003c/sub\u003e - 1) + \u003ci\u003emin\u003c/i\u003e(\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e - 1, \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e + 1\u003c/sub\u003e - 1).\u003c/span\u003e\u003c/p\u003e\u003cp\u003eThis way this sum is easy to maintain if consecutively increase \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe solution complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}