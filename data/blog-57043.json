{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1515685256,"rating":11,"authorHandle":"-synx-","modificationTimeSeconds":1515695807,"id":57043,"title":"\u003cp\u003eMersenne Prime â€” M61 for Hashing\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d9/de/d9de73c785dd754aac0643cdf541abebec88516f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003cbr /\u003eIt is easy to calculate modulus using this prime (with bitwise operations, it is well known)!\u003cbr /\u003eMy question is how can we efficiently calculate \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/07/2f/072fce1af975d65e47d094ce3eeaf170e76548ea.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where a and b can both have at most 61 bits.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD\u003c/strong\u003e: Found a function \u003ca href\u003d\"https://gitlab.labs.nic.cz/labs/dns-anomaly/commit/f574ae663d7ca224b2166759b80a1d44f5789dc9\"\u003ehere\u003c/a\u003e that multiplies 64 bit with 32 bit while maintaining modulo. Can it be extended for 64 bit multiplied with 64 bit efficiently?\u003c/p\u003e\u003c/div\u003e","tags":["hash","mersenne","prime"]}}