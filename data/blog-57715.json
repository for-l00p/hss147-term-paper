{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1518430417,"rating":1,"authorHandle":"NMouad21","modificationTimeSeconds":1518437883,"id":57715,"title":"\u003cp\u003eGC3 preparation — Round #2 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/group/YSHJEwaJhs/contest/220290/problem/A\" title\u003d\"GC3 preparation - Round 2\"\u003e220290A - Buggy Sorting\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn this problem, consider at the beginning of the second loop (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u003d \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e), we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e \u0026gt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 2\u003c/sub\u003e\u003c/span\u003e, if we swap the first two elements, we\u0027ll have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 2\u003c/sub\u003e\u003c/span\u003e, but the problem is, when we continue the iterations of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, we\u0027ll always have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e, it won\u0027t be fixed, which is the flaw of this algorithm.\u003c/p\u003e\u003cp\u003eSo basically, to give a good counter-example, the array size needs to be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≥ 3\u003c/span\u003e and we print the first 3 elements in descending order (or we can just print all elements in descending order \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e - 1, \u003ci\u003en\u003c/i\u003e - 2, ...1\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eComplexity of the algorithm: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e \u003ca href\u003d\"https://ideone.com/TL6yAz\"\u003eExample code\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/YSHJEwaJhs/contest/220290/problem/B\" title\u003d\"GC3 preparation - Round 2\"\u003e220290B - Devu, the Singer and Churu, the Joker\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI think we can all agree that this was one of the easiest problems in this contest, you basically need to drain \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. You\u0027ll give Devu his time, and Churu the 10min in between plays to perform 2 jokes, and if at the end, after Devu finishes his plays, we still got time to reach \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, we can give Churu more time to perform his jokes. The answer gonna be -1 if \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fd/0d/fd0d1c59576ab441a998e62da3ff7d147144797b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (time needed for Devu to perform his plays + the rest time).\u003c/p\u003e\u003cp\u003eComplexity of the algorithm: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e \u003ca href\u003d\"https://ideone.com/iUUCIA\"\u003eExample code\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/YSHJEwaJhs/contest/220290/problem/C\" title\u003d\"GC3 preparation - Round 2\"\u003e220290C - Buttons\u003c/a\u003e\u003c/p\u003e\u003cp\u003eOne of the ways to address problems like this, if one can\u0027t get a fine intuition about the algorithm (or formula) is to write down iterations in a paper, and try to find the pattern. You can see that in the worst case scenario, we\u0027ll press \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e wring buttons and then we\u0027ll find the right one, once we knew the first button value, the next button, we\u0027ll press it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e times before finding the right button, but we\u0027ll also press the first button \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 2\u003c/span\u003e times at this step. I hope you can see the pattern in this one, that at each iteration, we perform \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e) + (\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e - 1) * \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e pressing.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: this problem is tricky, and many of you wrote the formula above in other ways, but if you think about it, it\u0027s still the same formula.\u003c/p\u003e\u003cp\u003eComplexity of the algorithm: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e \u003ca href\u003d\"https://ideone.com/o3OS7i\"\u003eExample code\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/YSHJEwaJhs/contest/220290/problem/D\" title\u003d\"GC3 preparation - Round 2\"\u003e220290D - Fox And Names\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis a nice and direct application of topological sort. Think about it.\u003c/p\u003e\u003cp\u003eIn this problem, we\u0027ll design a graph where the vertices are the character a-z, and an edge from character \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e to character \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, means that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e is lexicographically smaller than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e. and after we have this graph in hand, we\u0027ll perform the topological sort to find the smallest character, and then the next one, and so on. If we perform Topological Sort and we find a cycle (meaning we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026lt; \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u0026lt; \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u0026lt; \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e) then we\u0027ll print impossible, since this is a contradiction.\u003c/p\u003e\u003cp\u003eLet\u0027s say we have two strings \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u0026lt; \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, then we must have either \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e or that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is a prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for the sequence to be correct.\u003c/p\u003e\u003cp\u003eWe have 3 cases:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eFirst case: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is a prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, we just ignore this, since we don\u0027t have any information about the characters.\u003c/li\u003e   \u003cli\u003eSecond case: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is a prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, this is impossible, since we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e comes after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e!\u003c/li\u003e   \u003cli\u003eThird case: we have the first character where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e first differ is at index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, and since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e comes before \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, it means we have the k-th character \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is less than the k-th character of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, thus we have an edge from the k-th character \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to the k-th character of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eOnce we constructed the graph, we run the topological sort, and then we print the characters in the order of the topological sort.\u003c/p\u003e\u003cp\u003eComplexity of the algorithm: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e * |\u003ci\u003emax\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)|)\u003c/span\u003e \u003ca href\u003d\"https://ideone.com/pLMEQn\"\u003eExample code\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/YSHJEwaJhs/contest/220290/problem/E\" title\u003d\"GC3 preparation - Round 2\"\u003e220290E - Modified GCD\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is one of the coolest problems in this set. First, we gotta notice, that any divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e (either in general or in the range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eL\u003c/i\u003e, \u003ci\u003eR\u003c/i\u003e]\u003c/span\u003e) is always gonna be a divisor also of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e. Think about it.\u003c/p\u003e\u003cp\u003eAnd if you ever notice, we can find \u003cstrong\u003eall\u003c/strong\u003e divisors of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e))\u003c/span\u003e time. Afterwards, to find the max element in range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eL\u003c/i\u003e, \u003ci\u003eR\u003c/i\u003e]\u003c/span\u003e, we can use binary search to find it. (Or you can just use lower_bound and upper_bound from C++)\u003c/p\u003e\u003cp\u003eComplexity of the algorithm: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003elog\u003c/i\u003e2(\u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)))\u003c/span\u003e \u003ca href\u003d\"https://ideone.com/PZJcsE\"\u003eExample code\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/YSHJEwaJhs/contest/220290/problem/F\" title\u003d\"GC3 preparation - Round 2\"\u003e220290F - Bag of mice\u003c/a\u003e soon...\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/YSHJEwaJhs/contest/220290/problem/G\" title\u003d\"GC3 preparation - Round 2\"\u003e220290G - Minesweeper 1D\u003c/a\u003e soon...\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/YSHJEwaJhs/contest/220290/problem/H\" title\u003d\"GC3 preparation - Round 2\"\u003e220290H - Road Map\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis problem is a straightforward DFS traversal and good implementation. All you gotta do is first read the input \u003cstrong\u003eright\u003c/strong\u003e, construct the tree, and then run a DFS from the new root \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e2\u003c/span\u003e all the while marking the parent of each vertex.\u003c/p\u003e\u003cp\u003eComplexity of the algorithm: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e \u003ca href\u003d\"https://ideone.com/3YSO98\"\u003eExample code\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003cp\u003eYou can discuss in comments anything you didn\u0027t understand or you think that you have a better approach in.\u003c/p\u003e\u003cp\u003eTry to upsolve the problems by reading the editorials only and without viewing the codes, it\u0027ll be helpful for your progress x).\u003c/p\u003e\u003c/div\u003e","tags":["gc3-preparation","editorial"]}}