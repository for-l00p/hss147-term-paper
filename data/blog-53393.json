{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1500557152,"rating":0,"authorHandle":"edwardpv","modificationTimeSeconds":1500557152,"id":53393,"title":"\u003cp\u003eDynamic programming Matrix problem.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI was reading the tutorial on hackerearth about 2-d dp, and i read got stuck with this question. Does the question mean that the boy and girl should meet at one point and also they should not traverse the cell already reached by the other player. If not then why is the outer rows and columns not taken in consideration. Also a little discussion on the calculation of matrices will be helpful for me.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.hackerearth.com/practice/algorithms/dynamic-programming/2-dimensional/tutorial/\"\u003eLink to Problem(above edit distance-special variant)\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u0026quot;You are given a 2-D matrix A of n rows and m columns where A[i][j] denotes the calories burnt. Two persons, a boy and a girl, start from two corners of this matrix. The boy starts from cell (1,1) and needs to reach cell (n,m). On the other hand, the girl starts from cell (n,1) and needs to reach (1,m). The boy can move right and down. The girl can move right and up. As they visit a cell, the amount in the cell A[i][j] is added to their total of calories burnt. You have to maximize the sum of total calories burnt by both of them under the condition that they shall meet only in one cell and the cost of this cell shall not be inclu``ded in either of their total.\u0026quot;\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n    #define F(i,a,b) for(int i \u003d (int)(a); i \u0026lt;\u003d (int)(b); i++)\n    #define RF(i,a,b) for(int i \u003d (int)(a); i \u0026gt;\u003d (int)(b); i--)\n    #define MAX 1005\n    int Boy1[MAX][MAX];\n    int Boy2[MAX][MAX];\n    int Girl1[MAX][MAX];\n    int Girl2[MAX][MAX];\n    using namespace std;\n    int main()\n    {\n        int N,M,ans,op1,op2;\n        scanf(\u0026quot;%d%d\u0026quot;,\u0026amp;N,\u0026amp;M);\n        int Workout[MAX][MAX];\n        ans \u003d 0;\n\n        //Take input the calories burnt matrix\n        F(i,1,N)\n            F(j,1,M)\n                scanf(\u0026quot;%d\u0026quot;,\u0026amp;Workout[i][j]);\n\n        //Table for Boy\u0027s journey from start to meeting cell\n        F(i,1,N)\n            F(j,1,M)\n                Boy1[i][j] \u003d max(Boy1[i-1][j],Boy1[i][j-1]) + Workout[i][j];\n\n        //Table for boy\u0027s journey from end to meet cell\n        RF(i,N,1)\n            RF(j,M,1)\n                Boy2[i][j] \u003d max(Boy2[i+1][j],Boy2[i][j+1]) + Workout[i][j];\n\n\n        //Table for girl\u0027s journey from start to meeting cell\n        RF(i,N,1)\n            F(j,1,M)\n                Girl1[i][j] \u003d max(Girl1[i+1][j],Girl1[i][j-1]) + Workout[i][j];\n\n\n        //Table for girl\u0027s journey from end to meeting cell\n        F(i,1,N)\n            RF(j,M,1)\n                Girl2[i][j] \u003d max(Girl2[i-1][j],Girl2[i][j+1]) + Workout[i][j];\n\n\n        //Now iterate over all meeting positions (i,j)\n        F(i,2,N-1)\n        {\n            F(j,2,M-1)\n            {\n                //For the option 1\n                op1 \u003d Boy1[i][j-1] + Boy2[i][j+1] + Girl1[i+1][j] + Girl2[i-1][j];\n\n                //For the option 2\n                op2 \u003d Boy1[i-1][j] + Boy2[i+1][j] + Girl1[i][j-1] + Girl2[i][j+1];\n\n                //Take the maximum of two options at each position\n                ans \u003d max(ans,max(op1,op2));\n            }\n        }\n\n        printf(\u0026quot;%d\u0026quot;,ans);\n        return 0;\n    }\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["dynamic-programming","2d-dp","matrices"]}}