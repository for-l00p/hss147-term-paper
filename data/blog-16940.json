{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1426305541,"rating":8,"authorHandle":"Los_Angelos_Laycurse","modificationTimeSeconds":1426305541,"id":16940,"title":"\u003cp\u003eGYM 100496B Bicoloring of a Tree\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/gym/100496\"\u003ehttp://codeforces.com/gym/100496\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI have used a O(unknown) approach and got AC 1700ms:\u003c/p\u003e\u003cp\u003efirst,choose a valid root node and perform bfs(),foreach node in the queue list judge and color the node in order from 1 to n...\u003c/p\u003e\u003cp\u003ethe implement of bfs() is O(n*log(n)) but the main problem is how to choose valid root and prove its correctness that I have no idea,so I enum each node as root node,if there is valid solution break.\u003c/p\u003e\u003cp\u003eand 1700ms AC, maybe there are a lot of valid root nodes...\u003c/p\u003e\u003cp\u003ecan anyone give prove or better idea???\u003c/p\u003e\u003c/div\u003e","tags":["gym","asc 39"]}}