{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1421660400,"rating":47,"authorHandle":"yongwhan","modificationTimeSeconds":1421703914,"id":15881,"title":"\u003cp\u003e2015 Facebook Hacker Cup Round 1\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003cstrong\u003eGeneral Comment\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eI did not spend too much time on thinking about the execution time since the 6-minute is usually much more than the required in the usual online contest (e.g., 2 seconds for CodeForces for instance). So, for each problem, I took whichever way leading me to code reliably.\u003c/p\u003e\u003cp\u003eAlso, for each problem, I did lots of stress testing since I screwed up few contests (e.g., the large input in the previous Google Code Jam) before by not fully testing my codes with respect to the full constraint given by the problem. For A and C, I generated the edge cases manually and compared the computed answers from the brute force approaches and made sure they match. For B and D, I generated the theoretical worst case to make sure they are handled properly using my codes.\u003c/p\u003e\u003cp\u003eThankfully, I hit few segmentation fault problems 4-5 hours into the contest, from which I tried few approaches to increase the stack size; manipulating the size limit in \u003ccode\u003e#include\u0026lt;sys/resource.h\u0026gt;\u003c/code\u003e did the trick for me. I was so glad that I did the stress testing because if I did not there was no way that I would have spotted this issue before the submission.\u003c/p\u003e\u003cp\u003eAs usual, just in case I found a bug in my implementations though, I waited until 5-6 hours before the submission deadline to start submitting the code; I think it is roughly the optimal time frame, since I would like to chew on the problems a bit more yet I would like to avoid a technical mishap where the URL goes down due to a crazy submission rate in the last minute.\u003c/p\u003e\u003cp\u003eThough I thought I did everything right, during this round, I hit an interesting problem in downloading the inputs for B and D, perhaps because I was \u003cem\u003enot\u003c/em\u003e using my own computer (a cluster computer was being used); I am so thankful that it was resolved by contacting the contest coordinator through the feedback.\u003c/p\u003e\u003cp\u003eI checked my solutions with my friends\u0027, \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Petr\" title\u003d\"International Grandmaster Petr\"\u003ePetr\u003c/a\u003e\u0027s, and \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/ahmed_aly\" title\u003d\"Expert ahmed_aly\"\u003eahmed_aly\u003c/a\u003e\u0027s; thankfully, I got a match. Then I tested my codes in the Gym; after removing the system calls, I got a few TLE in D because the original limit was set too tight to 15 seconds; I changed calculating in \u003ccode\u003elong long\u003c/code\u003e to \u003ccode\u003eint\u003c/code\u003e and used few other tricks to bring down the time to where it is now: roughly 8 seconds.\u003c/p\u003e\u003ch2\u003e\u003cstrong\u003e10: Homework\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eThis problem can be treated by pre-calculating the primacity using the sieve, followed by the usual trick of the cumulative sum, which was my original approach; the cumulative sum approach works since \u003cspan class\u003d\"tex-span\"\u003e2 ≤ \u003ci\u003eA\u003c/i\u003e ≤ \u003ci\u003eB\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e7\u003c/sup\u003e\u003c/span\u003e and it would be useful when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e is large (say \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e7\u003c/sup\u003e\u003c/span\u003e queries are asked). However, since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e is so small, it suffices to calculate the number in a brute-force way, and the latter was probably the intended solution.\u003c/p\u003e\u003cp\u003eBy the way, since the product of first 9 primes is already \u003cspan class\u003d\"tex-span\"\u003e223092870 \u0026gt; 10\u003csup class\u003d\"upper-index\"\u003e7\u003c/sup\u003e\u003c/span\u003e, when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u0026gt; 8\u003c/span\u003e, the required answer is \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e; this is precisely the idea I used to compute for the pre-calculated table.\u003c/p\u003e\u003cp\u003eFew ways to make the problem harder would be either making \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e7\u003c/sup\u003e\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e18\u003c/sup\u003e\u003c/span\u003e (to disable pre-calculating for the table) or making \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e as large as \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e8\u003c/sup\u003e\u003c/span\u003e (basically a constant time per query).\u003c/p\u003e\u003ch4\u003eMy Submission: \u003ca href\u003d\"/gym/100579/submission/9468217\" title\u003d\"Submission 9468217 by yongwhan\"\u003e9468217\u003c/a\u003e\u003c/h4\u003e\u003ch4\u003eModified Submission @CF Gym: \u003ca href\u003d\"/gym/100579/submission/9468787\" title\u003d\"Submission 9468787 by yongwhan\"\u003e9468787\u003c/a\u003e\u003c/h4\u003e\u003ch2\u003e\u003cstrong\u003e25: Autocomplete\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eThis problem is a classical question on a \u003ca href\u003d\"http://help.topcoder.com/data-science/competing-in-algorithm-challenges/algorithm-tutorials/using-tries/\"\u003etrie\u003c/a\u003e; I used a fairly standard implementation that I frequently tested in various online judges, adopted from a coding contest bible by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/JongMan\" title\u003d\"Candidate Master JongMan\"\u003eJongMan\u003c/a\u003e; by the way, it is a great book and you should definitely check that out. I certainly learned and am learning tons from the 2-volume set. I challenge you to find a contest material that is better than that in a book-format.\u003c/p\u003e\u003cp\u003eThere is a plenty of room for an optimization especially since the alphabet is limited to only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, ..., \u003ci\u003ez\u003c/i\u003e\u003c/span\u003e (i.e., only using an array; this is certainly an approach took by some \u003ca href\u003d\"//codeforces.com/gym/100579/status/B?csrf_token\u003d291215764ad80f9ff80be85af1883e37\u0026amp;order\u003dBY_CONSUMED_TIME_ASC\"\u003efolks\u003c/a\u003e), but I used my tested approach to be safe and save some debugging time, especially since the execution time was not too critical.\u003c/p\u003e\u003cp\u003eThe system call is disabled in CodeForces Gym. So I had to submit a code without it. It worked out just fine since the default stack size was set sufficiently large.\u003c/p\u003e\u003ch4\u003eMy Submission: \u003ca href\u003d\"/gym/100579/submission/9468220\" title\u003d\"Submission 9468220 by yongwhan\"\u003e9468220\u003c/a\u003e\u003c/h4\u003e\u003ch4\u003eModified Submission @CF Gym: \u003ca href\u003d\"/gym/100579/submission/9468711\" title\u003d\"Submission 9468711 by yongwhan\"\u003e9468711\u003c/a\u003e\u003c/h4\u003e\u003ch2\u003e\u003cstrong\u003e25: Winning at Sports\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eThis problem is a standard dynamic programming problem. Given \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003em\u003c/i\u003e \u0026lt; \u003ci\u003en\u003c/i\u003e ≤ 2000\u003c/span\u003e, it is sufficient to compute the table explicitly and a lot of contestants did it this way. However, I took the top-down approach, since we may not necessarily hit all the pre-computed values for each valid pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e is, again, too small.\u003c/p\u003e\u003cp\u003eThe key insight is perhaps the following: if we denote the desired quantity using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003estressfree\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003estressful\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e then they both satisfy the recursion of the form \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e) \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1, \u003ci\u003em\u003c/i\u003e) + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e - 1)\u003c/span\u003e, with some boundary conditions. The base condition is that when either \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e is 0, the required answer is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and for the stress-free it is 0 when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ \u003ci\u003em\u003c/i\u003e\u003c/span\u003e while for the stressful, precisely the reverse holds, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026gt; \u003ci\u003em\u003c/i\u003e\u003c/span\u003e. It turns out we can combine these ideas together and get the answers using just one table, but for the clarity of the implementation, I made a separate function and a table for each.\u003c/p\u003e\u003cp\u003eIn my original implementation I cleared out the table each time a pair of inputs is received, but there is no reason to do this. Notice from below that the execution time is improved by a factor of \u003cspan class\u003d\"tex-span\"\u003e ≈ 4\u003c/span\u003e, but again, the execution time is not what I sought after :)\u003c/p\u003e\u003cp\u003eOf course, one thing to take care of is the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emod\u003c/i\u003e\u003c/span\u003e since the number gets too large for some pair \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e. This can be approached in a standard way by taking a mod in each summation step.\u003c/p\u003e\u003cp\u003eAlthough I have not tested, I am sure the same approach would work fine even when the bound is a bit larger (say \u003cspan class\u003d\"tex-span\"\u003e20000\u003c/span\u003e) or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e is larger. I am curious to derive the explicit formula for the two quantities for any pairing \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e, which can surely be done by, at least, a generating function; I originally thought about the problem using this pathway, but gave up on it since the boundary condition was tricky and the dynamic programming was more than sufficient (and easy enough to code).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAddendum\u003c/strong\u003e: It turns out the problem is related to the Bertrand\u0027s ballot theorem/monotonic path and/or Catalan numbers. Check either the Wikipedia entry \u003ca href\u003d\"http://en.wikipedia.org/wiki/Catalan_number\"\u003ehere\u003c/a\u003e or \u003ca href\u003d\"//codeforces.com/blog/entry/15881#comment-207943\"\u003ediscussion below\u003c/a\u003e for more details. This is the approach I was trying first (using the generating function and etc.) but quickly resorted to the standard way since there was no real reason to think too hard about it unless I already knew the identity; now I do :)\u003c/p\u003e\u003ch4\u003eMy Submission: \u003ca href\u003d\"/gym/100579/submission/9468238\" title\u003d\"Submission 9468238 by yongwhan\"\u003e9468238\u003c/a\u003e\u003c/h4\u003e\u003ch4\u003eModified Submission @CF Gym: \u003ca href\u003d\"/gym/100579/submission/9473189\" title\u003d\"Submission 9473189 by yongwhan\"\u003e9473189\u003c/a\u003e\u003c/h4\u003e\u003ch2\u003e\u003cstrong\u003e40: Corporate Gifting\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eThis is yet another standard dynamic programming problem, this time on a graph. The problem statement forces us to a directed acyclic graph; it is directed since it is a managerial relationship and acyclic since two employees are never responsible for each other. Also, since each node has a unique manager and the CEO has no manager, this would force us to a tree with a root at the CEO node.\u003c/p\u003e\u003cp\u003eFor each node, we \u003cem\u003ehave to\u003c/em\u003e save the children in the adjacency list; the matrix is not feasible since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e can be as large as \u003cspan class\u003d\"tex-span\"\u003e200\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e. The list would be certainly fine since we are given a tree. Once we have that, to do the DP, only thing we need to take care of is the recurrence relation.\u003c/p\u003e\u003cp\u003eGiven that a current node uses a gift \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, what is possible for the child? The only restriction is that if gift \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e is used for the child, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e ≠ \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Respecting this, we would like to find the minimum. Of course in the leaf node, we would choose either 1 or 2, depending on whether its parent has already used 1 or not. So, we are led essentially to the following recurrent relation on a node in a tree:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6a/7f/6a7fbf74713b0b48ce43da1d93120a5283f4028e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003ewhere \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ecur\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e is the minimum attained where the current node is using a gift \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. So, at the end, all we need to output is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[1][0]\u003c/span\u003e where 1 denotes the root node and 0 is the sentinel value not used in the computation. The only real issue now is to think about the bound on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, which turned out to be quite trickier than I originally imagined.\u003c/p\u003e\u003cp\u003eI originally thought that the bound has to be 3, but during the stress testing I realized that on some random instances I can get it as large as 5. Then I started comparing the result of 3, 4, 5, 10, 15, 20, and 50. While I compare those results, I tried to come up with the bound on it explicitly. Then, the crude bound I got was \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elog\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e, which led me to believe that the bound of \u003cspan class\u003d\"tex-span\"\u003e20\u003c/span\u003e was enough. I thought about it a little more and in the morning I improved the bound to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elog\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e, which led me to believe that the maximum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e would be 11 when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 200000\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eJust in case I did not carry out the estimation right, I fixed my bound to 15, from 20; I did not go all the way to 11, since I did not want to cut it too close. I could not find a test case that actually used anything beyond 7 during my random search and thought it was safe enough; I figured I would check whether the answer would change if I used different bound for the provided input and surely enough no change was detected from fixing the bound to 20 or 50, from 15. So I decided to submit the version that used 15 at the end.\u003c/p\u003e\u003cp\u003eAfter the contest ended, I had a conversation with \u003ca href\u003d\"http://community.topcoder.com/tc?module\u003dMemberProfile\u0026amp;cr\u003d301937\"\u003eRalph\u003c/a\u003e, who led me to believe that the right sequence is perhaps \u003ca href\u003d\"https://oeis.org/A007052\"\u003ethe order-consecutive partition\u003c/a\u003e, yet to be fully verified; from anyone who can prove this rigorously, I would love to get to know your insight! (See more details \u003ca href\u003d\"//codeforces.com/blog/entry/15829#comment-207850\"\u003ehere\u003c/a\u003e) :)\u003c/p\u003e\u003ch4\u003eMy Submission: \u003ca href\u003d\"/gym/100579/submission/9468244\" title\u003d\"Submission 9468244 by yongwhan\"\u003e9468244\u003c/a\u003e\u003c/h4\u003e\u003ch4\u003eModified Submission @CF Gym: \u003ca href\u003d\"/gym/100579/submission/9468722\" title\u003d\"Submission 9468722 by yongwhan\"\u003e9468722\u003c/a\u003e\u003c/h4\u003e\u003ch2\u003e\u003cstrong\u003eFinal Remark\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eTo summarize the topics covered in this contest, they were, in short:\u003c/p\u003e\u003ch3\u003e1) homework: \u003cem\u003esieve\u003c/em\u003e\u003c/h3\u003e\u003ch3\u003e2) autocomplete: \u003cem\u003etrie\u003c/em\u003e\u003c/h3\u003e\u003ch3\u003e3) winning at sports: standard \u003cem\u003edp\u003c/em\u003e and \u003cem\u003eCatalan\u003c/em\u003e number\u003c/h3\u003e\u003ch3\u003e4) corporate gifting: \u003cem\u003edp\u003c/em\u003e in DAG and \u003cem\u003eorder-consecutive partition\u003c/em\u003e\u003c/h3\u003e\u003cp\u003eI started entering more online contests and take some online judges (like \u003ca href\u003d\"http://acm.timus.ru/author.aspx?id\u003d107501\"\u003eTimus\u003c/a\u003e, \u003ca href\u003d\"http://acm.sgu.ru/teaminfo.php?id\u003d045908\"\u003eSGU\u003c/a\u003e, \u003ca href\u003d\"//codeforces.com/problemset/standings/page/3\"\u003eCodeForces Problemset\u003c/a\u003e) seriously. Foremost, I would like to thank \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/paladin8\" title\u003d\"Candidate Master paladin8\"\u003epaladin8\u003c/a\u003e who is patiently coaching me through this entire process. I think it is working out pretty well and I will continuously put some efforts to improve! I now also have a table that keeps track of daily solved problems, coding tricks, and etc.\u003c/p\u003e\u003cp\u003eMy current goal is to solve at least 3-5 problems/day from the Timus online judge with a goal of surpassing 500 problems by the mid-year; since I have ~260 problems down, I only have about a half way to go! \u003cstrong\u003eIf there is anyone who would like to join my pursuit to solve the problems in the Timus OJ, please let me know via a private message\u003c/strong\u003e; I am sure I would get more motivated by a small group going through it together :P\u003c/p\u003e\u003cp\u003eI am hoping this entry would help at least some people out there :)\u003c/p\u003e\u003cp\u003eAny \u003cem\u003efeedback\u003c/em\u003e would be much appreciated!!\u003c/p\u003e\u003c/div\u003e","tags":["fhc","online round 1","blog"]}}