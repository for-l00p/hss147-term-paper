{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1409602791,"rating":0,"authorHandle":"kushwaha_vi","modificationTimeSeconds":1409602864,"id":13659,"title":"\u003cp\u003eLongest increasing subsequence ( O(n^2) \u0026amp; O(nlgn) ) methods\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eLIS- DP solution (C code).\u003c/p\u003e\u003cp\u003eO(n^2)\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// Returns the length of the longest increasing subsequence.\n// Note that this is looking for the longest strictly increasing subsequence.  \n//    This can be easily modified for other situations.\n#include \u0026lt;limits.h\u0026gt;\nint lis( int* a, int N ) {\n   int *best, i, j, max \u003d INT_MIN;\n   best \u003d (int*) malloc ( sizeof( int ) * N );\n \n   for ( i \u003d 0; i \u0026lt; N; i++ ) best[i] \u003d 1;\n \n   for ( i \u003d 1; i \u0026lt; N; i++ )\n      for ( j \u003d 0; j \u0026lt; i; j++ )\n         if ( a[i] \u0026gt; a[j] \u0026amp;\u0026amp; best[i] \u0026lt; best[j] + 1 ){\n\t\t    best[i] \u003d best[j] + 1;\n\t\t\tif(max \u0026lt; best[i])\n\t\t\t\tmax \u003d best[i];\n\t\t }         \n \n   free( best );\n   return max;\n}\n// Sample usage.\nint main(){\n  int b[] \u003d { 1, 3, 2, 4, 3, 5, 4, 6 };\n  // the longest increasing subsequence \u003d 13456?\n  // the length would be 5, as well lcs(b,8) will return.\n  printf(\u0026quot;%d\\n\u0026quot;, lis( b, 8 ) );\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eusing binary search. O(nlgn)\u003c/p\u003e\u003cp\u003eC++ code implementation. Try to understand the difference.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;vector\u0026gt;\nusing namespace std;\n \n/* Finds longest strictly increasing subsequence. O(n log k) algorithm. */\nvoid find_lis(vector\u0026lt;int\u0026gt; \u0026amp;a, vector\u0026lt;int\u0026gt; \u0026amp;b)\n{\n\tvector\u0026lt;int\u0026gt; p(a.size());\n\tint u, v;\n \n\tif (a.empty()) return;\n \n\tb.push_back(0);\n \n\tfor (size_t i \u003d 1; i \u0026lt; a.size(); i++) \n        {\n                // If next element a[i] is greater than last element of\n                // current longest subsequence a[b.back()], just push it at back of \u0026quot;b\u0026quot; and continue\n\t\tif (a[b.back()] \u0026lt; a[i]) \n                {\n\t\t\tp[i] \u003d b.back();\n\t\t\tb.push_back(i);\n\t\t\tcontinue;\n\t\t}\n \n                // Binary search to find the smallest element referenced by b which is just bigger than a[i]\n                // Note : Binary search is performed on b (and not a).\n                // Size of b is always \u0026lt;\u003dk and hence contributes O(log k) to complexity.    \n\t\tfor (u \u003d 0, v \u003d b.size()-1; u \u0026lt; v;) \n                {\n\t\t\tint c \u003d (u + v) / 2;\n\t\t\tif (a[b[c]] \u0026lt; a[i]) u\u003dc+1; else v\u003dc;\n\t\t}\n \n                // Update b if new value is smaller then previously referenced value \n\t\tif (a[i] \u0026lt; a[b[u]]) \n                {\n\t\t\tif (u \u0026gt; 0) p[i] \u003d b[u-1];\n\t\t\tb[u] \u003d i;\n\t\t}\t\n\t}\n \n\tfor (u \u003d b.size(), v \u003d b.back(); u--; v \u003d p[v]) b[u] \u003d v;\n}\n \n/* Example of usage: */\n#include \u0026lt;cstdio\u0026gt;\nint main()\n{\n\tint a[] \u003d { 1, 9, 3, 8, 11, 4, 5, 6, 4, 19, 7, 1, 7 };\n\tvector\u0026lt;int\u0026gt; seq(a, a+sizeof(a)/sizeof(a[0])); // seq : Input Vector\n\tvector\u0026lt;int\u0026gt; lis;                              // lis : Vector containing indexes of longest subsequence \n        find_lis(seq, lis);\n \n        //Printing actual output \n\tfor (size_t i \u003d 0; i \u0026lt; lis.size(); i++)\n\t\tprintf(\u0026quot;%d \u0026quot;, seq[lis[i]]);\n        printf(\u0026quot;\\n\u0026quot;);    \n \n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSource: \u003ca href\u003d\"http://www.algorithmist.com/index.php/Longest_Increasing_Subsequence\"\u003ehttp://www.algorithmist.com/index.php/Longest_Increasing_Subsequence\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://www.algorithmist.com/index.php/Longest_Increasing_Subsequence.c\"\u003ehttp://www.algorithmist.com/index.php/Longest_Increasing_Subsequence.c\u003c/a\u003e \u003ca href\u003d\"http://www.algorithmist.com/index.php/Longest_Increasing_Subsequence.cpp\"\u003ehttp://www.algorithmist.com/index.php/Longest_Increasing_Subsequence.cpp\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["dp","lis"]}}