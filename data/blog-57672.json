{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1518272790,"rating":1,"authorHandle":"murugappan_s","modificationTimeSeconds":1518277137,"id":57672,"title":"\u003cp\u003eSSN CPC Contest ( 2018 ) — 1 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003cstrong\u003eA: Team\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eCount the number of 1\u0027s present in each row. If the count of 1\u0027s is greater than or equal to 2,Increment the total problems solved by 1. Print the total solved problems in the end.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity : O(n)\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution writer : \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/vishalananth\" title\u003d\"Specialist vishalananth\"\u003evishalananth\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/vishalananth\" title\u003d\"Specialist vishalananth\"\u003evishalananth\u003c/a\u003e\u0027s solution [submission:35127452]\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eB: Voting for Photo\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eMaintain a map or an array to count the number of appearances of each of the photo id\u0027s. Keep track of the id with maximum count each time and update max only if an element has strictly greater number of likes than the current maximum element. Output the id of the photo with maximum likes in the end.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity : O(n)\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution writer : \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/vishalananth\" title\u003d\"Specialist vishalananth\"\u003evishalananth\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/vishalananth\" title\u003d\"Specialist vishalananth\"\u003evishalananth\u003c/a\u003e\u0027s solution [submission:35127045]\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eC: Mike and Palindrome\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eFor a string to be palindrome, the first character should match with last character, second character should match with second last character etc. \u003c/p\u003e\u003cp\u003eFind the count of number of such pairs which do not match. \u003c/p\u003e\u003cp\u003eIf only one such pair does not match, the answer is \u0026quot;YES\u0026quot; If more than one pair don\u0027t match, the answer is \u0026quot;NO\u0026quot;\u003c/p\u003e\u003cp\u003eIf the count is 0 and since we have to do \u003cstrong\u003eexactly one change\u003c/strong\u003e, two cases arive :  Length of the string is odd:  In this case the middle element can be changed  Length of the string is even:  We cannot make a palindrome by making one change\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity : O(|S|)\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution writer : \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Rooped\" title\u003d\"Expert Rooped\"\u003eRooped\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Rooped\" title\u003d\"Expert Rooped\"\u003eRooped\u003c/a\u003e\u0027s solution \u003ca href\u003d\"//codeforces.com/contest/798/submission/35127940\"\u003ehttp://codeforces.com/contest/798/submission/35127940\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e\u003cstrong\u003eAlternate Strategy\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003eWhat is a palindrome?? A palindrome is a string which when written in the reverse direction also remains the same. Example : aba,dad,mom\u003c/p\u003e\u003cp\u003eHow to find if a string is a palindrome??\u003c/p\u003e\u003cp\u003eHave 2 variables l and r with l\u003d0 and r\u003dn-1, where n is the size of the given string. Check if string[l]\u003dstring[r] , and then increment l by 1 and decrement r by 1. Keep doing this till l becomes greater than r.\u003c/p\u003e\u003cp\u003eNow how to solve this problem ??\u003c/p\u003e\u003cp\u003eIt is given you can modify exactly 1 character. Change all the characters of the string one at a time from a-z. Check if it is possible to form a palindrome.\u003c/p\u003e\u003cp\u003eSolution writer : \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/sdssudhu\" title\u003d\"Expert sdssudhu\"\u003esdssudhu\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eD: Fence\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eAuthor Solution : \u003ca href\u003d\"//codeforces.com/contest/363/submission/35128650\"\u003ehttp://codeforces.com/contest/363/submission/35128650\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe problem boils down to finding k consecutive integers whose sum is minimum. \u003c/p\u003e\u003cp\u003eA Naive approach would be to simply iterate through every set of k consecutive integers in the array and sum them. Out of all these we choose the minimum. To analyze this, we consider how many additions we will have to perform. For every set of k consecutive integers, we have to perform atleast k-1 additions. The no. of such sets is n-k+1. Therfore the time complexity of such an approach will be O ( (k-1)(n-k+1)) ~ O(n^2). Since both n and k can be upto 10^5, this will clearly not execute fast enough.\u003c/p\u003e\u003cp\u003eTo improve on this naive approach, we have to notice that several of these sums are done on the same integers. So naturally, if we precompute these and store them, we can significantly reduce the time required. To do this we do a prefix sum. We compute prefix[i] as prefix[i-1] + a[i] for all i from 1 to n-1 ( assuming a 0 based indexing) in O(n). This will allow us to compute the sum of k consecutive numbers by simply doing prefix[i+k-1] – prefix[i-1] in O(1). We can iterate through all such sets once again, but this time we only need to do constant work to compute the sum. We find the set with the minimum sum and store its position. Therefore complexity reduces to O(n-k+1) ~ O(n) which will comfortably pass for the given time limit.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity : O(n)\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution writer : \u003ca class\u003d\"rated-user user-green\" href\u003d\"/profile/atrophy98\" title\u003d\"Pupil atrophy98\"\u003eatrophy98\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eE: Kuriyama Mirai\u0027s Stones\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eBasically answering queries of type: sum of elements from l to r from 2 different arrays: sorted an unsorted. First have the sorted array separately.\u003c/p\u003e\u003cp\u003eNow maintain prefix sums for both.\u003c/p\u003e\u003cp\u003eGeneral idea of prefix sums:\u003c/p\u003e\u003cp\u003eFor an array \u0027a\u0027, let \u0027prefix\u0027 be prefix sums of the array.\u003c/p\u003e\u003cp\u003eprefix[i] stores a[0] + a[1] + a[2] .... a[i]\u003c/p\u003e\u003cp\u003eTo calculate prefix array efficiently we use the fact that prefix[i] \u003d prefix[i — 1] + a[i].\u003c/p\u003e\u003cp\u003eNow the sum of elements from l to r is nothing but a[l] + a[l + 1] + .... a[r].\u003c/p\u003e\u003cp\u003eThis is just prefix[r] — prefix[l — 1].\u003c/p\u003e\u003cp\u003eHence by maintaining prefix sums arrays for both sorted and unsorted, the queries can be answered without any loops, in constant time.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity : O(nlogn + m)\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution writer : \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Rooped\" title\u003d\"Expert Rooped\"\u003eRooped\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Rooped\" title\u003d\"Expert Rooped\"\u003eRooped\u003c/a\u003e\u0027s solution \u003ca href\u003d\"//codeforces.com/contest/433/submission/20010734\"\u003ehttp://codeforces.com/contest/433/submission/20010734\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eF : KAREN AND COFFEE\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eThe idea behind this problem is prefix sums.\u003c/p\u003e\u003cp\u003eLets decompose the problem into two parts.The first part is that given a temperature T we have to find the number of recipes that recommend it and the second part is that given a range of temperatures[L,R] return the count of Temperatures T such that T belongs to [L,R] and T has K or more recommendations.\u003c/p\u003e\u003cp\u003eCRUX behind the first part,\u003c/p\u003e\u003cp\u003eLets have an array \u0026quot;count\u0026quot; and count[i] denotes the number of recommendations to temperature i.\u003c/p\u003e\u003cp\u003eFor each [L,R] input ranges do the following  count[L]:\u003dcount[L]+1  count[R+1]:\u003dcount[R+1]-1\u003c/p\u003e\u003cp\u003eThe above code segment expresses that there is an increment in recommendation to the temperatures \u0026gt;\u003dL and a decrement to the temperatures \u0026gt;\u003d(R+1) , i.e Increment to the range [L,R]. To get the updated value of count do a prefix operation over the count , i.e count[i]+\u003dcount[i-1]\u003c/p\u003e\u003cp\u003eSo now the first part is done and count[i] gives the number of recommendations to temperature i.\u003c/p\u003e\u003cp\u003eI guess most of you would have now guessed the second part,if not read further. Create a new array \u0026quot;answer\u0026quot; and answer[i] denotes the number of valid temperatures in the range [1,i]. For each temperature if its count is greater than k then assign answer[temperature] as 1 else assign it 0,and to get the updated value of answer do a prefix operation over the answer array , i.e answer[i]+\u003danswer[i-1].You can intuitively think this step as number of valid temperatures up to i is sum of validity of i and number of valid ranges up to i-1.\u003c/p\u003e\u003cp\u003eNow answering the query becomes simple.For each [x,y] (input query),answer[y]-answer[x-1] gives the number of valid temperatures over the given range.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity : O(max(n+q),MaxRange))\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution writer : \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/murugappan_s\" title\u003d\"Candidate Master murugappan_s\"\u003emurugappan_s\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/murugappan_s\" title\u003d\"Candidate Master murugappan_s\"\u003emurugappan_s\u003c/a\u003e\u0027s solution [submission:35129064]\u003c/p\u003e\u003c/div\u003e","tags":[]}}