{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1521517494,"rating":6,"authorHandle":"pandusonu","modificationTimeSeconds":1521549572,"id":58466,"title":"\u003cp\u003eCodeCracker 2k18 editorials\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThanks to everyone who participated in the contest :)\u003c/p\u003e\u003cp\u003eThe winners of the contest are:\u003cbr /\u003e 1. \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/SoMuchDrama\" title\u003d\"Candidate Master SoMuchDrama\"\u003eSoMuchDrama\u003c/a\u003e\u003cbr /\u003e 2. \u003ca class\u003d\"rated-user user-green\" href\u003d\"/profile/achaitanyasai\" title\u003d\"Pupil achaitanyasai\"\u003eachaitanyasai\u003c/a\u003e\u003c/p\u003e\u003cp\u003eYou both will be getting mail regarding cash prize soon. Please give us time, prizes were also given in the first edition, so will they be given now.\u003c/p\u003e\u003cp\u003eDue to cost constraints, we can\u0027t keep codecracker.in up throughout the year, but its up right now if anyone wants to test it. \u003cbr /\u003e Permanent link to problems Statements: \u003ca href\u003d\"https://docs.google.com/document/d/1unZpL7pGe5zEuw3--Abt5PXWKmoRrrrvK85PPFKgr5w/edit?usp\u003dsharing\"\u003eQuestions\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLink to the Online Judge GitHub Repository: \u003ca href\u003d\"https://github.com/lugnitdgp/OnlineJ\"\u003eOnlineJ\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePlease fill the following form if you participated in the contest: \u003ca href\u003d\"https://goo.gl/forms/av1MLDH9A6RJBnB93\"\u003ehttps://goo.gl/forms/av1MLDH9A6RJBnB93\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eShreyy’s Birthday Gift\u003c/h3\u003e\u003cp\u003eThere are many ways to solve this problem. Given the solutions submitted by the users, here is an alternate way to think of the problem: For \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e sized array, the number of modulus operations are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e. This implies that you have to divide \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e additive and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e negative signs among \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e items, with each item getting at most of 2 signs, and at least 1 sign each (with some obvious constraints like max value not getting any negative signs and similar).\u003c/p\u003e\u003cp\u003eNow, we just sort the array, and if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is even, we can divide the array into \u003cspan class\u003d\"tex-span\"\u003e[1: \u003ci\u003en\u003c/i\u003e / 2]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003en\u003c/i\u003e / 2 + 1: \u003ci\u003en\u003c/i\u003e]\u003c/span\u003e In the first partition, all elements get 2 positive signs each except the last element which gets 1 positive sign. In the second partition, the first element gets a single negative sign, whereas the rest get 2 negative signs. You can find similar distribution when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is odd.\u003c/p\u003e\u003cp\u003eWe can find an arrangement for such a division of signs.\u003c/p\u003e\u003ch3\u003eAliens\u003c/h3\u003e\u003cp\u003eA simple approach is to hash the possible distances. Then we could check each enemy base in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e time. However, this would yield a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e algorithm which is too slow.\u003c/p\u003e\u003cp\u003eLet’s restate the problem and use binary vectors. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e if grenade can reach distance \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e if there is an enemy base at distance i We want to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ePossible\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003eS\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e] * \u003ci\u003eS\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e−\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e The Possible vector is actually the discrete convolution of S with itself. We can calculate it the same way we multiply polynomials using a discrete Fast Fourier Transform (FFT).\u003c/p\u003e\u003cp\u003eThe discrete FFT of n values can be calculated in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlogn\u003c/i\u003e)\u003c/span\u003e.After calculating the Possible vector, we just need to check in how many distances \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ePossible\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u0026gt; 0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 1\u003c/span\u003e Recall that the distances are up to \u003cspan class\u003d\"tex-span\"\u003e200000\u003c/span\u003e. Say the maximum distance is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e, then the time complexity of this approach is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e + \u003ci\u003eM\u003c/i\u003e + \u003ci\u003eDlogD\u003c/i\u003e)\u003c/span\u003e which will pass the time limits.\u003c/p\u003e\u003ch3\u003eMario and Browser\u003c/h3\u003e\u003cp\u003eFirst, let\u0027s remove all the subtrees which won\u0027t have any coins in them, as Mario would never visit them. Following which, we select the shortest path. The shortest path to cover \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e nodes is equal to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etotalcost\u003c/i\u003e * 2 - \u003ci\u003ecostofdiameter\u003c/i\u003e\u003c/span\u003e So the path Mario chooses would be diameter which starts with smallest possible value and ends with largest possible value.\u003c/p\u003e\u003cp\u003eIt is now obvious to see that all the queries are of nodes present on the diameter. A single DFS starting from the endpoint is enough to calculate values of each of those nodes.\u003c/p\u003e\u003ch3\u003eBig Mom\u003c/h3\u003e\u003cp\u003eThe question is as good as asking to find the path with maximum XOR on a tree. We maintain a trie to calculate the maximum values we can get with xor of any new value and previously occurring values. \u003c/p\u003e\u003cp\u003eOne way of doing this is by Centroid Decomposition of the tree and calculating subtrees of the centroid and solving for the centroid as we go by.\u003c/p\u003e\u003ch3\u003eAbdullah and Fibonacci Cup\u003c/h3\u003e\u003cp\u003eFirstly, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eFib\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e)\u003c/span\u003e is divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eFib\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e if and only if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e is divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 2\u003c/span\u003e\u003c/p\u003e\u003cp\u003eThe number of divisors of each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efib\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e can be found out using sieve of Eranthoses by initializing divisors array to \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. Rather than marking multiples of each prime \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e as false, multiply the divisor of the multiples(j) with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e is the power of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e in the factorization of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor every even number, decrement divisor by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efib\u003c/i\u003e(2) \u003d 1\u003c/span\u003e is an extra count which has already been covered by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efib\u003c/i\u003e(1) \u003d 1\u003c/span\u003e. If we replace the number written on the bag with the number of divisors it has, the game is the same as subtracting \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efib\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e from it in a single move.\u003c/p\u003e\u003cp\u003eSince the number of divisors for a five digit number is at max \u003cspan class\u003d\"tex-span\"\u003e128\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efib\u003c/i\u003e(12) \u003d 144\u003c/span\u003e. So we only need to calculate Grundy numbers up to \u003cspan class\u003d\"tex-span\"\u003e128\u003c/span\u003e and in each move, there are at max \u003cspan class\u003d\"tex-span\"\u003e12\u003c/span\u003e moves possible.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eGrundy\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e) \u003d \u003ci\u003emex\u003c/i\u003e{\u003ci\u003eGrundy\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - \u003ci\u003efib\u003c/i\u003e(1), \u003ci\u003eGrundy\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - \u003ci\u003efib\u003c/i\u003e(2), …….(\u003ci\u003ei\u003c/i\u003e - \u003ci\u003efib\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)) \u0026gt;  \u003d 0)}\u003c/span\u003e\u003c/p\u003e\u003cp\u003eFor each test case, we can use Sprague-grundy theorem to take xor of all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eGrundy\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e])\u003c/span\u003e. If it is equal to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, Player 2 would win otherwise Player 1.\u003c/p\u003e\u003c/div\u003e","tags":[]}}