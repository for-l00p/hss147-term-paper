{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1419513975,"rating":3,"authorHandle":"Akin","modificationTimeSeconds":1419533070,"id":15372,"title":"\u003cp\u003eLightOJ 1025 â€” The Specials Menu DP Problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eProblem\u003c/strong\u003e : \u003cstrong\u003eThe number of ways one could remove letters from a particular word so that it would become a palindrome.Two ways that differ due to order of removing letters are considered the same. And it can also be the case that no letters have to be removed to form a palindrome.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eI am trying to solve this problem . But my solution gives wrong answer . Then I found a solution that works \u003ca href\u003d\"http://13codes.wordpress.com/2013/03/20/lightoj-1025-the-specials-menu/\"\u003ehere\u003c/a\u003e. But don\u0027t understand the recurrence . Something like this ..\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr /\u003ell rec(int i, int j)\n{\n    if(j \u0026lt; i) return 0;\n    if(i \u003d\u003d j) return 1;\n    ll \u0026amp;ret \u003d dp[i][j];\n    if(ret !\u003d -1) return ret;\n    if(str[i] \u003d\u003d str[j])\n        return ret \u003d  1 + rec(i+1, j) + rec(i, j-1);\n    else\n        return ret \u003d rec(i+1, j) + rec(i, j-1) - rec(i+1, j-1);\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI don\u0027t understand why subtract \u003cstrong\u003erec(i+1, j-1)\u003c/strong\u003e ? For order of removing letters are considered the same, means we count same way 2 times that why subtract ? Please explain the recurrence , thanks in advance . \u003c/p\u003e\u003c/div\u003e","tags":["dp","lightoj"]}}