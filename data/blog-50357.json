{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1486767679,"rating":-9,"authorHandle":"maximaxi","modificationTimeSeconds":1486767679,"id":50357,"title":"\u003cp\u003eHow to represent a trie in a 2D array?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI have seen some people\u0027s code to represent a trie in a 2D array. For example, this is my old code to solve \u003ca href\u003d\"https://dmoj.ca/problem/fhc15c1p2\"\u003eAutocomplete\u003c/a\u003e. However, I forgot how it works!\u003c/p\u003e\u003cp\u003eCan someone explain how to code a 2D array that represents a trie? I know that one dimension of the array represents the alphabet, and that the values inside the trie array are the node numbers, where the first letter you add is node number 1. Still, I\u0027m confused where to insert values into the trie array, and how strings with the same prefixes would be distinguished in the tire.\u003c/p\u003e\u003cp\u003eThanks.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n#define rd(s) freopen(s, \u0026quot;r\u0026quot;, stdin);\n#define wt(s) freopen(s, \u0026quot;w\u0026quot;, stdout);\nusing namespace std;\n\nconst int MAX\u003d1e6+2, ALF\u003d26+2;\nint t, trie[MAX][ALF];\n\nint main()\n{\n    //rd(\u0026quot;test.txt\u0026quot;);\n\n    scanf(\u0026quot;%d\u0026quot;, \u0026amp;t);\n    for (int i\u003d1; i\u0026lt;\u003dt; ++i) {\n        int ans\u003d0, n, numm1\u003d1;\n        for (int _\u003d0; _\u0026lt;MAX; ++_) for (int __\u003d0; __\u0026lt;ALF; ++__) trie[_][__] \u003d 0;\n        scanf(\u0026quot;%d\u0026quot;, \u0026amp;n);\n        for (int j\u003d0; j\u0026lt;n; ++j) {\n            int node\u003d0, idx\u003d0;\n            string word; cin\u0026gt;\u0026gt;word;\n            while (trie[node][word[idx]-\u0027a\u0027] \u0026amp;\u0026amp; idx \u0026lt; word.length()) {\n                node\u003dtrie[node][word[idx]-\u0027a\u0027];\n                ++ans; ++idx;\n            }\n            if (idx !\u003d word.length()) ++ans;\n            //printf(\u0026quot;ans is %d\\n\u0026quot;, ans);\n            for (; idx\u0026lt;word.length(); ++idx) {\n                trie[node][word[idx]-\u0027a\u0027] \u003d numm1;\n                //printf(\u0026quot;new path from %d to %d via %c\\n\u0026quot;, node, numm1, word[idx]);\n                node\u003dnumm1;\n                ++numm1;\n            }\n        }\n        printf(\u0026quot;Case #%d: %d\\n\u0026quot;, i, ans);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":[]}}