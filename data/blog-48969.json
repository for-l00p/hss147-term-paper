{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1481334322,"rating":0,"authorHandle":"edufgf","modificationTimeSeconds":1481335210,"id":48969,"title":"\u003cp\u003eMultiple Assignment Problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello Codeforces community,\u003c/p\u003e\u003cp\u003eI have come across this problem and I would like some help.\u003c/p\u003e\u003cp\u003eYou are given N machines and M jobs. Each machine has a processing power P_i (integer). Each job requests a processing power P_j (integer). A job j is complete when it has a total of P_j power coming from \u003cstrong\u003e1 or more machines.\u003c/strong\u003e A machine can provide some part of it\u0027s power to \u003cstrong\u003eone or more jobs.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe bold parts above are what makes it different than the standard assignment problem.\u003c/p\u003e\u003cp\u003eIt\u0027s guaranteed that sum of machine power \u003d sum of job request power. Which means all jobs can be completed.\u003c/p\u003e\u003cp\u003eI want to minimize the number of assignments (machine, job).\u003c/p\u003e\u003cp\u003eExample:\u003c/p\u003e\u003cp\u003eMachine A (50)\u003cbr /\u003eMachine B (30)\u003cbr /\u003eMachine C (40) \u003c/p\u003e\u003cp\u003eJob A (70)\u003cbr /\u003eJob B (50)\u003c/p\u003e\u003cp\u003eMinimum assignments: 3\u003cbr /\u003e(machine A sends 50 to job B)\u003cbr /\u003e(machine B sends 30 to job A)\u003cbr /\u003e(machine C sends 40 to job A)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eIs there any algorithm that solves this? (excluding brute force)\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIt sounds like the Generalized assignment problem, but with less restrictions. \u003ca href\u003d\"https://en.wikipedia.org/wiki/Generalized_assignment_problem\"\u003ehttps://en.wikipedia.org/wiki/Generalized_assignment_problem\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is a bipartide graph, with integer flows and balanced.\u003c/p\u003e\u003cp\u003eThe closest solution I got is (aside from brute force) to try a mincost-maxflow algorithm setting the imbalances and enforcing a fixed cost (say 1) to use one edge (independent of the amount of flow). However I am not sure if that works, because there is also the dual problem using potential and reduced costs. I don\u0027t know how to handle that on this problem.\u003c/p\u003e\u003cp\u003eThanks!\u003c/p\u003e\u003c/div\u003e","tags":["graph","mincostflow","assignment"]}}