{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1436016842,"rating":22,"authorHandle":"accidentallygivenfuck","modificationTimeSeconds":1436017181,"id":19074,"title":"\u003cp\u003eCasting unsigned int to signed int reduces stack memory usage, but why?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eToday, I was checking the \u003ca href\u003d\"http://usaco.org/current/data/sol_grassplant.html\"\u003eofficial solution\u003c/a\u003e for problem grassplant of \u003ca href\u003d\"http://usaco.org/index.php?page\u003ddec11problems\"\u003eUSACO 2011 December Contest\u003c/a\u003e. I ran the solution on 12th test and it gave me runtime error (segmentation fault). I realized it was caused by stack overflow. Then (somewhy) I added \u003ccode\u003e(int)\u003c/code\u003e before \u003ccode\u003eE[u].size()\u003c/code\u003e in the function \u003ccode\u003ehang()\u003c/code\u003e and ran it on 12th test again. Surprisingly, stack did not overflow this time.\u003c/p\u003e\u003cp\u003eI tried doing it several times, and the code without \u003ccode\u003e(int)\u003c/code\u003e always run out of 8Mb of stack memory and the code with it used less than 8Mb of stack memory.\u003c/p\u003e\u003cp\u003eCan anyone who gets this stuff tell why this happens?\u003c/p\u003e\u003c/div\u003e","tags":["stack memory","grassplant","usaco"]}}