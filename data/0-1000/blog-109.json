{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1267276561,"rating":13,"authorHandle":"AndrewLazarev","modificationTimeSeconds":1267280846,"id":109,"title":"Codeforces Beta Round #2 - Tutorial","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv class\u003d\"from-renderer\"\u003e\u003cdiv class\u003d\"from-renderer\"\u003e   \u003cdiv class\u003d\"from-renderer\"\u003e     \u003cdiv class\u003d\"from-renderer\"\u003e       \u003cdiv class\u003d\"from-renderer\"\u003e         \u003ch2\u003eProblem A. Winner\u003c/h2\u003e         \u003cbr /\u003e  To solve the problem we just need accurately follow all         rules   described in the problem statement. Let\u0027s describe in         more       details   required sequence of actions.\u003cbr /\u003e         \u003col\u003e           \u003cli\u003e  First of all, we need to find the maximum score \u003ci\u003em\u003c/i\u003e             at the end         of the game. This can be done by             emulating.           After all rounds         played just             iterate over players and           choose one with the             maximum score.\u003c/li\u003e           \u003cli\u003e  Second, we need to figure out the set of players who             have           maximum score at the end of the game. We can             do this in the           same         way as calculating             maximum score. Just iterate           over players             after       all rounds played and store           all             players with score         equal to \u003ci\u003em\u003c/i\u003e.\u003c/li\u003e           \u003cli\u003e  And the last, we need to find a winner. To do this we             will           emulate the game one more time looking for             player from the           winner       list with score not             less \u003ci\u003em\u003c/i\u003e after some       round.\u003c/li\u003e\u003c/ol\u003e     This         task demonstrates that sometimes it is       easier to code         everything stated in the problem statement, than       thinking         and optimizing.\u003cbr /\u003e \u003cbr /\u003e         \u003ch2\u003e  Problem B. The least round way\u003c/h2\u003e         \u003cbr /\u003eFirst of all, let\u0027s       consider a case when there is at         least one   zero number in the       square. In this case we can         easily create a way   with only one       trailing zero in         resulting multiplication - just output   way over       this         zero number. The only case when this is not optimal way   is         when a way exists with no trailing zeroes at all. So, we can         replace all 0\u0027s with 10\u0027s and solve the problem in general case.         If     there is an answer with no trailing zeroes - we will         choose       this     one,   otherwise we will output way over         zero number. \u003cbr /\u003e         \u003cbr /\u003e  So, we can consider that all numbers in the square are         positive. Let\u0027s understand what the number of zeroes in the         resulting   multiplication is. If we go along a way and count         number     of 2\u0027s and   5\u0027s in numbers factorization then the         number of     trailing zeros will be   min(number of 2\u0027s, number         of 5\u0027s). This     allows us to solve the problem   independently         for 2\u0027s and 5\u0027s. The     final answer will be just a minimum         over these two solutions. \u003cbr /\u003e         \u003cbr /\u003e  Now, the last thing left is to solve the problem for 2\u0027s         and     5\u0027s. New problem interpretation is the following: there         is       a square     with numbers inside. We are to find a way         with the       minimal sum of     the   number over the way.         This is classical       dynamic programming     problem.   Let\u0027s         consider that A[r,c] is       the number in cell (r,c)     and         D[r,c] is   the answer for this       cell. Then \u003cbr /\u003e         \u003cbr /\u003e  D[r,c] \u003d min(D[r-1,c],D[r,c-1]) + A[r][c]\u003cbr /\u003e         \u003cbr /\u003e         \u003ch2\u003e  Problem C. Commentator problem.\u003c/h2\u003e         \u003cbr /\u003eLet\u0027s take two       stadiums and find out a set of points         from   which the stadiums       are     observed at the same         angle. Not very hard   mathematical       calculation     shows         that this is a line if stadiums have   the       same radius and         this is a circle if they have different       radiuses.   Let\u0027s         define     S(i,j) as a set of points from which       the         stadiums i and j   are     observed at the same angle. Given         that centers of stadiums are not     on the same line, the         intersection of S(1,2) with S(1,3) contains no     more than two         points. If we know these no more that 2 points we can         double-check that they satisfy the criteria and chose the point         with     the maximum angle of observation.\u003cbr /\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":["codeforces beta round #2","tutorial"]}}