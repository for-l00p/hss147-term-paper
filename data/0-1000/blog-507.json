{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1277834904,"rating":32,"authorHandle":"iakolzin","modificationTimeSeconds":1277843177,"id":507,"title":"Codeforces Beta Round #22 Tutorial","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/blog/entry/505\"\u003eContest discussion\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eProblem –ê. Second Order Statistics\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e\u003cu\u003eSorting\u003c/u\u003e\u003c/p\u003e\u003cp\u003eIn this problem one should find a minimal element from all elements, that are strictly greater, then the minimal one or report that it doesn\u0027t exist. Of course, there can be a lot of different solutions, but one of the simplest - to sort the given sequence and print the first element, that\u0027s not equal to the previous. If all elements are equal, then the required element doesn\u0027t exist.\u003cstrong\u003e\u003cbr /\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e \u003c/p\u003e\u003ch3\u003eProblem B. Bargaining Table\u003c/h3\u003e\u003cp\u003e\u003cu\u003eSimulation, dynamic programming\u003c/u\u003e\u003c/p\u003e\u003cp\u003eIn this problem one should find the maximal perimeter of a rectangle that contains no \u00271\u0027. Define these rectangles \u0026quot;correct\u0026quot;. To solve a problem you are to check each possible rectangle for correctness and calculate its perimeter. The easiest way to check all rectangles is using 6 nested cycles. Using 4 of them you fix the coordinates while other 2 will look for \u00271\u0027. So the complexity is O((n*m)\u003csup\u003e3\u003c/sup\u003e). It seems slow, but those, who wrote such a solution, says that it hasn\u0027t any problems with TL.\u003cu\u003e\u003cbr /\u003e\u003c/u\u003e\u003c/p\u003e\u003cp\u003eOne may interest in much faster solution. Using simple DP solution one can get a solution with an O((n*m)\u003csup\u003e2\u003c/sup\u003e) complexity. It\u0027s clear, that rectangle with coordinates (x1, y1, x2, y2) is correct if and only if rectangles (x1, y1, x2-1, y2) and (x1, y1, x2, y2-1) are correct, and board[x2][y2] \u003d \u00270\u0027. So each of rectangles can be checked in O(1) and totally there will be O((n*m)\u003csup\u003e2\u003c/sup\u003e) operations.\u003c/p\u003e\u003ch3\u003eProblem C. System Administrator\u003c/h3\u003e\u003cp\u003e\u003cu\u003eSimulation\u003c/u\u003e\u003c/p\u003e\u003cp\u003eIn this problem you are to construct a connected graph, which contains n vertexes and m edges, and if we delete vertex with number v, our graph stops being connected or to report that such a graph doesn\u0027t exist. Moreover, each pair of vertexes can have no more than one edge connecting them. Obviously, a connected graph doesn\u0027t exist if the number of edges is less than n-1. It\u0027s easy to notice, that the maximal possible number of edges reaches when there is a vertex connected to v and doesn\u0027t connected to any other vertex, those can form up to complete graph. So the maximal number of edges is (n-1)*(n-2)/2+1. If m is in that range then required graph always exists. Then you should place one vertex on the one side of v (let it be 1), and other vertexes - on the other side. First, you should connect all this vertexes to v and then connect them between each other (except 1).\u003cu\u003e\u003cbr /\u003e\u003c/u\u003e\u003c/p\u003e\u003ch3\u003eProblem D. Segments\u003c/h3\u003e\u003cp\u003e\u003cu\u003eScanning line\u003c/u\u003e\u003c/p\u003e\u003cp\u003eIn this problem one should place minimal number of points on the line such that any given segment touches at least one of these points. Let\u0027s call the coordinate of ending of any segment as event. There will be events of two types: beginning of a segment and its ending. Let\u0027s sort this events by coordinates. In the case of equality of some events consider that the event of the beginning will be less than the event of ending. Look at our events from left to right: if there is a beginning event, then push the number of this segment to the special queue. Once we take an ending of some segment, place the point here and clear the special queue (because each of segment in this queue will touch this point).\u003cu\u003e\u003cbr /\u003e\u003c/u\u003e\u003c/p\u003e\u003ch3\u003eProblem E. Scheme\u003c/h3\u003e\u003cp\u003e\u003cu\u003eGraph theory\u003c/u\u003e\u003c/p\u003e\u003cp\u003eGiven an oriented graph, find the minimal number of edges one should add to this graph to make it strongly connected. Looking at statement we can get the fact that each vertex has exactly one outcoming edge. It means that starting at some point we\u0027ll get stuck in some cycle. So each connected (not strongly) component is a set of simple paths, ending in some cycle or just a simple cycle. First consider vertexes, which has no incoming edges. When passing through some vertex we\u0027ll paint it until the current vertex will be already painted. Then we call the starting vertex as \u0026quot;beginning\u0026quot; and the finishing one as \u0026quot;ending\u0026quot; of a component.\u003cu\u003e\u003cbr /\u003e\u003c/u\u003e\u003c/p\u003e\u003cp\u003eAfter that consider other vertexes - they belong to cycles. Beginning and ending of a cycle - is any vertexes (possible coinciding) belonging to it. So we got a number of components which we have to connect. Let\u0027s connect them cyclically: the edge will pass from the ending of i-th component to the beginning of ((i+1)%k)-th, where k is the number of such components. The answer will be k. There is an exception: if we have only one component which is a simple cycle, the answer will be equal to 0.\u003c/p\u003e\u003cp\u003eSo we\u0027ll consider each edge exactly once and the total complexity will be O(n).\u003c/p\u003e\u003c/div\u003e","tags":["beta round #22","tutorial"]}}