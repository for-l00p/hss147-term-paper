{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1284725388,"rating":0,"authorHandle":"onlyone","modificationTimeSeconds":1284731929,"id":673,"title":"Solvent Of Problem C  @ Round #1","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//www.codeforces.com/contest/1/problem/C\"\u003ehttp://www.codeforces.com/contest/1/problem/C\u003c/a\u003e\u003cbr /\u003e\u003cbr /\u003ethe problem give us 3 points, and the  polygon is equilateral, so we can evaluate the loction of the polygon\u0027s center.\u003cbr /\u003eit\u0027s also the center of the triangle of  input \u0026lt;\u003d\u0026gt; the center of its circumcircle.\u003cbr /\u003e\u003cbr /\u003ewe can evaluate the center point, and also the radius of its circumcircle.\u003cbr /\u003eIf we know the 3 points, the radius is invariable. so, more points the polygon have, larger area the polygon will have.\u003cbr /\u003eThen we can enumerate the number of the polygon\u0027s points in ascending order.\u003cbr /\u003e\u003cbr /\u003eThe key to sovle Problem C is how you check the given number of points N is OK!\u003cbr /\u003e\u003cbr /\u003eAfter know the center and radius, the triangle divide into three parts, then I use division to calculate the number of points in each part, What the result? I always got \u0026quot;wa\u0026quot; at test 6.\u003cbr /\u003e\u003cbr /\u003eAfter WA many times, I think it must go awry in the division, so i used  \u003cspan\u003emethod of superposition rather than\u003c/span\u003e division. In other words, I first calculate t[i] \u003d A[i]/a, this got WA,  then I alter this by add a one by one. see it in function OK();\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003emy code:\u003cbr /\u003e#include\u0026lt;iostream\u0026gt;\u003cbr /\u003e#include\u0026lt;algorithm\u0026gt;\u003cbr /\u003e#include\u0026lt;cstdio\u0026gt;\u003cbr /\u003e#include\u0026lt;cmath\u0026gt;\u003cbr /\u003eusing namespace std;\u003cbr /\u003etypedef long long LL;\u003cbr /\u003e#define UF(i,a,b) for(i\u003d(a);i\u0026lt;\u003d(b);++i)\u003cbr /\u003e#define DF(i,b,a) for(i\u003d(b);i\u0026gt;\u003d(a);--i)\u003c/p\u003e \u003cp\u003econst double eps \u003d 1e-6;\u003cbr /\u003econst double PI \u003d acos(-1.0);\u003c/p\u003e \u003cp\u003einline int sgn(double a)\u003cbr /\u003e{\u003cbr /\u003e       return (a \u0026gt; eps) - (a \u0026lt; -eps);\u003cbr /\u003e}\u003cbr /\u003einline double sqr(double a)\u003cbr /\u003e{\u003cbr /\u003e       return a*a;\u003cbr /\u003e}\u003cbr /\u003estruct Point \u003cbr /\u003e{ \u003cbr /\u003e       double x,y;\u003cbr /\u003e       void read() {\u003cbr /\u003e            scanf(\u0026quot;%lf %lf\u0026quot;,\u0026amp;x,\u0026amp;y);\u003cbr /\u003e       }           \u003cbr /\u003e}trg[3], rec[110], cir;\u003cbr /\u003edouble ang[3], A[3], R;\u003c/p\u003e \u003cp\u003einline double Dist(Point a, Point b)\u003cbr /\u003e{\u003cbr /\u003e       return sqrt(sqr(a.x-b.x) + sqr(b.y-a.y));\u003cbr /\u003e}\u003cbr /\u003einline double xmul(Point a, Point b, Point c)\u003cbr /\u003e{\u003cbr /\u003e       return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);\u003cbr /\u003e}\u003cbr /\u003evoid OutCir(Point T[])   // calculate the center and radius, T[] is triangle\u003cbr /\u003e{\u003cbr /\u003e    double a, b, c, c1, c2, area;\u003cbr /\u003e    double xA, yA, xB, yB, xC, yC;\u003cbr /\u003e    area \u003d fabs(xmul(T[0],T[1],T[2]))/2;    \u003cbr /\u003e    a \u003d Dist(T[0], T[1]);\u003cbr /\u003e    b \u003d Dist(T[1], T[2]);\u003cbr /\u003e    c \u003d Dist(T[2], T[0]);\u003cbr /\u003e    R \u003d a*b*c / (4*area);\u003cbr /\u003e    \u003cbr /\u003e    xA \u003d T[0].x, yA \u003d T[0].y;\u003cbr /\u003e    xB \u003d T[1].x, yB \u003d T[1].y;\u003cbr /\u003e    xC \u003d T[2].x, yC \u003d T[2].y;\u003c/p\u003e \u003cp\u003e    c1 \u003d (xA*xA + yA*yA - xB*xB - yB*yB)/2;\u003cbr /\u003e    c2 \u003d (xA*xA + yA*yA - xC*xC - yC*yC)/2;\u003c/p\u003e \u003cp\u003e    cir.x \u003d ( c1*(yA-yC) - c2*(yA-yB) );\u003cbr /\u003e    cir.x /\u003d ((xA-xB)*(yA-yC) - (xA-xC)*(yA-yB)); /*a*/\u003cbr /\u003e    cir.y \u003d ( c1*(xA-xC) - c2*(xA - xB) );\u003cbr /\u003e    cir.y /\u003d ((yA-yB)*(xA-xC) - (yA-yC)*(xA-xB));    /*b*/ \u003cbr /\u003e} \u003c/p\u003e \u003cp\u003evoid Sort()\u003cbr /\u003e{\u003cbr /\u003e     int i, j;\u003cbr /\u003e     UF(i,0,2)\u003cbr /\u003e     ang[i] \u003d atan2(trg[i].y-cir.y, trg[i].x-cir.x);\u003cbr /\u003e     UF(i,0,2)\u003cbr /\u003e     UF(j,i+1,2)\u003cbr /\u003e     if (sgn(ang[i]-ang[j]) \u0026gt; 0)\u003cbr /\u003e     {\u003cbr /\u003e                 swap(trg[i], trg[j]);\u003cbr /\u003e                 swap(ang[i], ang[j]);\u003cbr /\u003e     }\u003cbr /\u003e     A[0] \u003d ang[1] - ang[0];\u003cbr /\u003e     A[1] \u003d ang[2] - ang[1];\u003cbr /\u003e     A[2] \u003d 2*PI - A[0] - A[1]; \u003cbr /\u003e}\u003c/p\u003e \u003cp\u003eint Ok(int n)\u003cbr /\u003e{\u003cbr /\u003e     double a \u003d 2*PI / n, b \u003d 0;\u003cbr /\u003e     int t[3] \u003d {0}, i;\u003cbr /\u003e     UF(i,0,2)\u003cbr /\u003e     {\u003cbr /\u003e              b \u003d 0.0;\u003cbr /\u003e              while (sgn(A[i]-b) \u0026gt; 0)\u003cbr /\u003e              {\u003cbr /\u003e                    t[i]++;\u003cbr /\u003e                    b +\u003d a;\u003cbr /\u003e              }\u003cbr /\u003e     }\u003cbr /\u003e     return (t[0] \u0026amp;\u0026amp; t[1] \u0026amp;\u0026amp; t[2] \u0026amp;\u0026amp; t[0] + t[1] + t[2] \u003d\u003d n);\u003cbr /\u003e}\u003cbr /\u003eint main()\u003cbr /\u003e{\u003cbr /\u003e    int i;\u003cbr /\u003e    UF(i,0,2) trg[i].read();\u003cbr /\u003e    OutCir(trg);\u003cbr /\u003e    Sort();\u003cbr /\u003e    UF(i,3,100)\u003cbr /\u003e    {\u003cbr /\u003e       if (Ok(i)) break;\u003cbr /\u003e    }    \u003cbr /\u003e    double area \u003d 0;\u003cbr /\u003e    if (i \u0026gt; 100) i \u003d 100;\u003cbr /\u003e    area \u003d i * R * R * sin(2*PI/i) / 2.0;\u003cbr /\u003e    printf(\u0026quot;%.8lf\\n\u0026quot;, area);\u003cbr /\u003e     return 0;\u003cbr /\u003e}\u003c/p\u003e \u003cp\u003e \u003c/p\u003e \u003cp\u003e\u003cbr /\u003e \u003c/p\u003e\u003c/div\u003e","tags":["code","geometry","round#1 c"]}}