{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1265474194,"rating":0,"authorHandle":"removed1","modificationTimeSeconds":1265474209,"id":61,"title":"Польза от исключений","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eВ большинстве современных языков высокого уровня предусмотрен   механизм исключений.\u003c/p\u003e \u003cp\u003eВ машинном коде процессоров x86 и многих других существует механизм,   также называемый исключениями. Через него осуществляется много   полезных вещей, таких как виртуальная память, отображаемые на память   файлы, эмуляция не поддерживаемых аппаратно инструкций (использовалось   на VAX, где решено было сократить систему команд процессора и   эмулировать редко используемые команды, использовалось на x86 без FPU,   используется в NTVDM), отладочные функции и т.д. Если среда и язык не   поддерживают такие механизмы, то реализация кода, используещего ту же   функциональность, была бы в значительно длинее.\u003c/p\u003e \u003cp\u003eВ отличие от процессорных исключений, в языковых исключениях   управление передается \u0026quot;наверх\u0026quot; до внешнего блока, который   \u0026quot;поймает\u0026quot; исключение (в ЛИСПе более богатая модель, но в   большинстве языков этого нет). При этом контекст, в котором произошла   ошибка, будет уничтожен. Что уже делает этот механизм непригодным для   реализации ряда \u0026quot;вкусностей\u0026quot;. Есть и другие проблемы.   Например, отловить момент, когда не хватает памяти, по таким   исключениям невозможно -- в средах с виртуальной памятью выделение   памяти всегда завершается успешно, а ошибка возникает при попытке   обращения к ней.\u003c/p\u003e \u003cp\u003eМожет быть, я просто не видел области применения, где исключения   действительно делали жизнь проще, но где же польза от исключений?\u003c/p\u003e\u003c/div\u003e","tags":["hll","exceptions"]}}