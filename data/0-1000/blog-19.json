{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1264891144,"rating":0,"authorHandle":"OSt","modificationTimeSeconds":1264972829,"id":19,"title":"Форматированный вывод на Java","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eЗдравствуйте. Решил поделиться со всеми своими наработками в области   оценки скорости работы одной часто используемой в задачах вещи -   форматированным выводом дробных чисел на Java.\u003c/p\u003e \u003cp\u003e \u003c/p\u003e \u003cp\u003eЗадача: вывод double с 4 знаками после разделителя.\u003c/p\u003e \u003cp\u003eАлгоритмы:\u003c/p\u003e \u003cp\u003e1. printf(Locale.US, \u0026quot;%.4f\u0026quot;, num);\u003c/p\u003e \u003cp\u003e2. \u003c/p\u003e \u003cp\u003elong l \u003d Math.round(number*10000);\u003cbr /\u003e   print(l/10000+\u0026quot;.\u0026quot;);  // вывод целой части и   разделителя\u003cbr /\u003eprintf(\u0026quot;%04d\u0026quot;, l%10000); // вывод дробной   части с ведущими нулями если потребуется\u003cbr /\u003e\u003c/p\u003e \u003cp\u003e3.\u003c/p\u003e \u003cp\u003elong l \u003d Math.round(numbers[j] * 10000);\u003cbr /\u003e        print(l / 10000   + \u0026quot;.\u0026quot;);// вывод целой части и разделителя\u003cbr /\u003e        l %\u003d   10000;\u003cbr /\u003e        for (int d \u003d 1000; d \u0026gt;\u003d 10; d /\u003d 10) {\u003cbr /\u003e   if (l \u0026lt; d) {\u003cbr /\u003e              print(0);\u003cbr /\u003e    }\u003cbr /\u003e   }\u003cbr /\u003e        println(l);\u003c/p\u003e \u003cp\u003eЖелезо : Процессор: Intel Core 2 Duo 2ГГц, 2ГГб оперативной памяти. \u003c/p\u003e \u003cp\u003eСофт : jdk1.6.0 update 14, jre1.6.0 update 14.\u003c/p\u003e \u003cp\u003eРезультаты:\u003c/p\u003e \u003cp align\u003d\"left\"\u003eВ столбиках (Число чисел для вывода | Время работы 1   алгоритма в   сек. |Время работы 2 алгоритма | Время работы 3   алгоритма | Отношение   времени 1 алгоритма ко второму | Отношение   времени работы 1 алгоритма   к 3 алгоритму)    \u003cbr /\u003e\u003c/p\u003e \u003cblockquote\u003e20000       0.125       0.062       0.016   2,0161                        7,8125\u003cbr /\u003e\u003c/blockquote\u003e \u003cblockquote\u003e       30000       0.141       0.125       0.031   1,1280                        4,5484\u003cbr /\u003e\u003c/blockquote\u003e \u003cblockquote\u003e40000       0.234        0.188       0.062   1,2447                        3,7742\u003cbr /\u003e\u003c/blockquote\u003e \u003cblockquote\u003e50000       0.547       0.234       0.063   2,3376                        8,682\u003cbr /\u003e\u003c/blockquote\u003e \u003cblockquote\u003e       90000       0.703       0.469       0.141   1,4989                        4,9858\u003cbr /\u003e\u003c/blockquote\u003e \u003cblockquote\u003e      100000       0.938       0.625       0.156   1,5008                        6,0128\u003cbr /\u003e\u003c/blockquote\u003e \u003cblockquote\u003e      110000       1.093       0.703       0.172   1,5548                        6,3547\u003cbr /\u003e\u003c/blockquote\u003e \u003cblockquote\u003e120000       1.219       0.812       0.188   1,5012                        6,4840\u003cbr /\u003e\u003c/blockquote\u003e \u003cblockquote\u003e140000       1.656       1.141       0.218   1,4514                        7,5963\u003cbr /\u003e\u003c/blockquote\u003e \u003cblockquote\u003e   \u003cp\u003e190000        1.75       1.266       0.312     1,3823                        5,6090\u003cbr /\u003e\u003c/p\u003e\u003c/blockquote\u003e \u003cp\u003eКак видно из результатов последний алгоритм \u0026quot;рвет\u0026quot; первые 2   более чем в 4 раза. Хотя пишется не на много дольше первые двух.Я уже   один раз попался на такой крючок, после чего и провёл эти опыты.\u003c/p\u003e \u003cp\u003eНадеюсь, мои наблюдения кому-нибудь пригодятся. \u003c/p\u003e \u003cp\u003ePS: Иногда помимо основных данных с форматом надо выводить это в   несколько строк. \u003c/p\u003e \u003cp\u003eЧтобы не писать извраты типа: \u003c/p\u003e\u003cp\u003eprintf(%.4f,num);\u003c/p\u003e\u003cp\u003eprintln();\u003c/p\u003e\u003cp\u003eprintf(%.4f,num2);\u003c/p\u003e\u003cp\u003eили просто   вывод \\n  можно почитать тот же javaDос и узнать, что это можно   сделать так -       out.printf(\u0026quot;%.4f%n%.4f\u0026quot;, num,num2); По-моему  - куда лучшее решение.\u003c/p\u003e\u003c/div\u003e","tags":["java","printf"]}}