{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1267862965,"rating":0,"authorHandle":"hadi","modificationTimeSeconds":1267863358,"id":135,"title":"Max-Flow Min-Cut","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003eSome days ago I came across a nice problem: \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1533\"\u003eFat Hobbits\u003c/a\u003e . The problem\u0027s input is a directed acyclic graph G \u003d (V, E)Â  with additional property that if (u, v) is in E and (v, z) is in E then (u, z) is also in E, i.e. it has transitive closure, and asks for a maximum size subset of vertices IND such that if v is in IND and u is in IND, then none of (u, v) and (v, u) are in E.\u003cbr /\u003e\u003cbr /\u003eProblem seemed difficult for me at first, but finally I could solve it by modeling it as a min-cut problem. The problem can be easier solved once you know \u003ca href\u003d\"http://en.wikipedia.org/wiki/Dilworth%27s_theorem\"\u003eDilworth\u0027s Theorem\u003c/a\u003e and how to prove it.\u003cbr /\u003e\u003cbr /\u003eFrom time to time you will see problems which can be solved using max-flow min-cut algorithms. To see some more problems, see topcoder tutorial \u003ca href\u003d\"http://www.topcoder.com/tc?module\u003dStatic\u0026amp;d1\u003dtutorials\u0026amp;d2\u003dmaxFlow2\"\u003eMaximum Flow, Section 2\u003c/a\u003e and also \u003ca href\u003d\"http://www.cs.princeton.edu/%7Ewayne/cs423/lectures/max-flow-applications-4up.pdf\"\u003ethese lecture notes\u003c/a\u003e. I also remember some more from other online judges: \u003ca href\u003d\"http://acm.pku.edu.cn/JudgeOnline/problem?id\u003d3469\"\u003eDual Core CPU\u003c/a\u003e, \u003ca href\u003d\"http://acm.pku.edu.cn/JudgeOnline/problem?id\u003d3680\"\u003eIntervals\u003c/a\u003e, and many more which I don\u0027t remember right now.\u003cbr /\u003e\u003cbr /\u003eYou\u0027d probably ask how can you detect if a given problem can be solved using Max-Flow? I also can\u0027t detect many such algorithms, but probably the answer is: Either by experience or by guessing. After you see many problems which can be solved using max-flow, you can easily invent some new max-flow formulations for some other problems. If you can\u0027t do this, you can probably guess a formulation and try to prove or disprove it, since most of formulations aren\u0027t strange. Guessing is an art, a beautiful art :-) But try to prove your guesses, otherwise you might waste your time with debugging wrong solutions.\u003c/div\u003e","tags":["max-flow min-cut","problem","timus"]}}