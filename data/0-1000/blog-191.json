{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1268993781,"rating":3,"authorHandle":"hadi","modificationTimeSeconds":1269897641,"id":191,"title":"Hashing","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003eSometimes you face a string processing problem for which you have the correct idea, but implementing it might not be so easy. In some of these cases, you can find a much easier to implement algorithm using \u003ca href\u003d\"http://en.wikipedia.org/wiki/Hash_function\"\u003ehashing\u003c/a\u003e. These algorithms don\u0027t always give correct answer, but their probability of giving wrong answer is very low.\u003cbr /\u003e\u003cbr /\u003e The simplest example is string matching, where you have to find a string inside another string. Well, you can use the \u003ca href\u003d\"http://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm\"\u003eKMP\u003c/a\u003e algorithm, which is fast enough, and easy to implement if you have enough practice. There\u0027s an alternative using hashing: \u003ca href\u003d\"http://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_string_search_algorithm\"\u003eRabin-Karp algorithm\u003c/a\u003e. You probably should know it so you can invent more powerful algorithms for more difficult problems.\u003cbr /\u003e \u003cbr /\u003e The above example might not show you the high power of the hashing. But problems aren\u0027t that simple most of the time:\u003cbr /\u003e\u003cul\u003e\u003cli\u003e\u003ca href\u003d\"http://uva.onlinejudge.org/index.php?option\u003dcom_onlinejudge\u0026amp;Itemid\u003d8\u0026amp;category\u003d22\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d1960\"\u003eMatrix Matcher\u003c/a\u003e: There are alternative methods for solving this problem too, e.g. using the \u003ca href\u003d\"http://en.wikipedia.org/wiki/Aho-Corasick_algorithm\"\u003eAho-Corasick algorithm\u003c/a\u003e. But the solution using hashing is much easier to implement, once you know how to use hashing. See \u003ca href\u003d\"http://online-judge.uva.es/board/viewtopic.php?f\u003d33\u0026amp;t\u003d10189\u0026amp;p\u003d44319\u0026amp;hilit\u003d11019\u0026amp;sid\u003dd0e4d86deabd2ee79b7b755c41fd2f1b#p44319\"\u003eUVa OJ board\u003c/a\u003e for more information.\u003c/li\u003e\u003cli\u003e\u003ca href\u003d\"https://www.spoj.pl/problems/COMPRESS/\"\u003eCompressed String\u003c/a\u003e: Implementing hash solution isn\u0027t as easy as the previous cases, but it\u0027s idea is easy. In fact, I don\u0027t know any other good solution for this problem. To be more accurate, you can use Binary Search + Hashing to solve this problem, and to be more accurate you can use multiple hash bases. Thanks to \u003ca href\u003d\"//codeforces.com/profile/rem\"\u003erem\u003c/a\u003e and \u003ca href\u003d\"//codeforces.com/profile/gmark\"\u003egmark\u003c/a\u003e for telling me that hashing works here.\u003c/li\u003e\u003c/ul\u003e\u003cbr /\u003eYou see, hashing is a good thing :-) But probably not always. You should always do some math to calculate how likely is your solution to pass. For example, it might be hard to find a hashing algorithm which passes all test cases of \u0026quot;\u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1532\"\u003eLost in Translation\u003c/a\u003e\u0026quot;. It\u0027s not so hard to see why.\u003c/div\u003e","tags":["algorithms","hashing","string"]}}