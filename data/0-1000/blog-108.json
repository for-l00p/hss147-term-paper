{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1267270631,"rating":1,"authorHandle":"removed1","modificationTimeSeconds":1267270631,"id":108,"title":"Еще один разбор :D","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv class\u003d\"from-renderer\"\u003e\u003cdiv class\u003d\"from-renderer\"\u003e   \u003cdiv class\u003d\"from-renderer\"\u003e     \u003cdiv class\u003d\"from-renderer\"\u003e       \u003cdiv class\u003d\"from-renderer\"\u003e         \u003cp\u003e         Так получилось, что пока я писал это, Иван уже           выложил свой. Я тогда тоже выложу -- может быть кому-то будет полезно.\u003cbr /\u003e\u003c/p\u003e         \u003cp\u003eЗадача А.\u003cbr /\u003e           \u003cbr /\u003eВ общем решение достаточно прямолинейно, нужно только           внимательно выполнить то, что написано в условии. Ситуация           осложняется наличием отрицательных выигрышей за кон (т.е.           кто-то может получить большое количество очков, а потом           проиграть). Проще всего с этим справиться, пройдясь два раза           по данным. В первый заполним структуру           вида\u003cbr /\u003emap\u0026lt;string,int\u0026gt; finalscore;\u003cbr /\u003eи найдем           количество очков у победителя. Во второй раз обновляем           структуру \u003cbr /\u003emap\u0026lt;string,int\u0026gt; currentscore;\u003cbr /\u003eи как           только у кого-то с finalscore[id]\u003d\u003dwinner_score станет           currentscore[id]\u0026gt;\u003dwinner_score, то он победил.\u003cbr /\u003eНичьих           не бывает.\u003cbr /\u003e           \u003cbr /\u003eЗадача В.\u003cbr /\u003e           \u003cbr /\u003eДесятичная запись числа содержит один ноль, если это           число само равно нулю, в противном случае -- минимальное из           количеств двоек и пятерок в разложении его на простые           множители. (2*5\u003d10, а остальные множители нас не           интересуют).\u003cbr /\u003eЕсли матрица содержит ноль, то он всегда           достижим из начальной клетки, а все пути, содержащие ноль,           одинаково оптимальны (1).\u003cbr /\u003eПоэтому, отметив наличие ноля,           мы можем избежать отдельного рассмотрения этой клетки в общем           случае -- назначив \u0026quot;штраф\u0026quot; -- достаточно заменить           ноль десяткой: если мы и пройдем через место, где должен быть           нуль, а есть десятка, не можем получить более оптимальный           маршрут. Сами пути без нулей сложнее. Прямое применение           динамического программирования в лоб к успеху не приведет,           т.к. по пути может попасться до 1999*12 пятерок или до 1999*29           двоек, и массивы слишком велики. Решение за O(N^2)           достигается, если найти отдельно путь, минимизирующий число           двоек, и путь, минимизирующий число пятерок, и выбрать из них           лучший. Докажем что это так. Пусть минимизируя число двоек,           получили путь с \u0027a\u0027 двоек и \u0027b\u0027 пятерок, а минимизируя число           пятерок, получили \u0027c\u0027 двоек и \u0027d\u0027 пятерок (мы не считаем на           самом деле множители, которые не минимизируем, это надо только           для доказательства). Если a\u0026lt;\u003dd, то \u0027b\u0027 не влияет на ответ:           в силу минимальности \u0027d\u0027 выполняется b\u0026gt;\u003dd и таким образом           b\u0026gt;\u003da, ответ: \u0027a\u0027. Случай d\u0026lt;\u003da полностью симметричен.\u003cbr /\u003e           \u003cbr /\u003eКаждый путь находится с           массивом\u003cbr /\u003em[строка][столбец]\u003dколичество двоек(пятерок),           которые мы \u0026quot;собрали\u0026quot; по пути в клетку с данными           координатами.\u003cbr /\u003eТ.к. памяти достаточно, то можно завести           отдельный массив, в котором для клетки хранится направление,           по которому мы в эту клетку пришли -- это значительно упростит           код составления маршрута.\u003cbr /\u003e           \u003cbr /\u003eЗадача С.\u003cbr /\u003e           \u003cbr /\u003eУгол, под которым виден стадион, равен 2*asin(r/rho),           где r - радиус стадиона, rho -- расстояние от точки взора до           центра стадиона (окружности). Поэтому, задачу меняем на           эквивалентную: отношения расстояний от искомой точки до           стадионов должны быть пропорциональны радиусам стадионов \u003d\u0026gt;           квадраты расстояний пропорциональны квадратам радиусов           стадионов. Если все радиусы равны, то мы получаем задачу           нахождения центра окружности по трем точкам. Если нет --           рассмотрим множество точек, отношения расстояний от которых до           двух данных (соответственно (0,0) и (d,0) )           постоянно:\u003cbr /\u003e((x - d)^2 + y^2 )/ r1^2 \u003d (x^2 + y^2) / r2^2           \u003cbr /\u003eОбычно это окружность со сдвинутым центром. Она окружает           тот стадион, у которого радиус меньше. Если r1\u003d\u003dr2, то это           прямая -- вырожденный случай окружности :-) Таким образом три           стадиона порождают три окружности (одна или три из которых           могут быть прямыми), а ответ -- если он существует -- является           пересечением этих трех фигур. Проще анализировать пересечение           двух фигур, а получив две точки, нужно проверить их           правильность -- подстановкой; если обе корректны, то выбрать           ту, которая ближе к любому стадиону. Чтобы не писать отдельно           случай пересечения линии с окружностью, можно всегда выбрать           (поменяв индексы) пересечение двух окружностей. Две окружности           в общем случае либо не пересекаются (тогда ответа нет), либо           пересекаются в двух точках. Случай, когда они совпадают,           невозможен (условие задачи), а если они касаются -- то мы по           формулам получим две точки. \u003cbr /\u003e           \u003cbr /\u003e           \u003cbr /\u003e           \u003cbr /\u003e           \u003cbr /\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":["разбор"]}}