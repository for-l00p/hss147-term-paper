{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1268688942,"rating":2,"authorHandle":"hadi","modificationTimeSeconds":1269897699,"id":183,"title":"Cookie Choice (ZJU #3164)","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cb\u003eProblem: \u003c/b\u003eImagine you want to buy some cookies. Each cookie \u003ci\u003ei\u003c/i\u003e has a price \u003ci\u003eP\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e, an \u0026quot;enjoyable value\u0026quot; \u003ci\u003eE\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e, and a limit value \u003ci\u003eL\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e. If \u003ci\u003eL\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e is equal to -1, there is no limit on how much cookies of kind \u003ci\u003ei \u003c/i\u003eyou can buy, otherwise you can buy at most \u003ci\u003eL\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e units of it. Maximize sum(\u003ci\u003eE\u003csub\u003ei\u003c/sub\u003e * C\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e), where \u003ci\u003eC\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e is amount of cookies of kind \u003ci\u003ei\u003c/i\u003e you buy, spending exactly \u003ci\u003eD\u003c/i\u003e dollars. (This is a bit simplified version of \u003ca href\u003d\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode\u003d3164\"\u003eZJU #3164\u003c/a\u003e)\u003cbr /\u003e \u003cbr /\u003e\u003cb\u003eDiscussion:\u003c/b\u003e As you know, this is a knapsack problem, which can be solved using DP. As a starting point, here is a general sketch of the algorithm: \u003cpre\u003edp[1 .. D+1] \u003d -1;\ndp[0] \u003d 0;\nfor i \u003d 0 .. N-1 do\n  if L[i] \u003d\u003d -1 then\n    add_inf( P[i], E[i] );\n  else if L[i] \u003d\u003d 1 then\n    add_one( P[i], E[i] );\n  else\n    add_k( P[i], E[i], k );\n  end if;\nend for;\nif dp[D] \u003d\u003d -1 then\n  print \u0026quot;i\u0027m sorry ...\u0026quot;\nelse\n  print dp[D];\nend if;\u003c/pre\u003e \u003cbr /\u003e\u003ci\u003eadd_one\u003c/i\u003e and \u003ci\u003eadd_inf\u003c/i\u003e might be easy for most of people who have studied some book on algorithms, but which made me choose this problem to discuss is how to implement \u003ci\u003eadd_k\u003c/i\u003e efficiently. I solved this problem probably a year ago, and I enjoyed the solution that time. I hope some of you share that joy with me :-)\u003cbr /\u003e\u003cbr /\u003eFor completeness, here are algorithms for \u003ci\u003eadd_inf\u003c/i\u003e and \u003ci\u003eadd_one\u003c/i\u003e: \u003cpre\u003efunction add_inf( P, E ):\n  for i \u003d 0 .. D:\n    if dp[i] !\u003d -1 and i + P \u0026lt;\u003d D and dp[i + P] \u0026gt; dp[i] + E then\n      dp[i + P] \u003d dp[i] + E;\n    end if;\n  end for;\nend function;\n\nfunction add_one( P, E):\n  for i \u003d D .. 0:\n    if dp[i] !\u003d -1 and i + P \u0026lt;\u003d D and dp[i + P] \u0026gt; dp[i] + E then\n      dp[i + P] \u003d dp[i] + E;\n    end if;\n  end for;\nend function;\n\u003c/pre\u003e Probably you might think that to implement \u003ci\u003eadd_k\u003c/i\u003e you can call \u003ci\u003eadd_one\u003c/i\u003e for \u003ci\u003ek\u003c/i\u003e times. You\u0027re right, but it\u0027s not enough to pass the time limit for constraints given for \u003ca href\u003d\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode\u003d3164\"\u003eZJU #3164\u003c/a\u003e. Instead, we can do it like this:\u003cbr /\u003e \u003cpre\u003efunction add_k( P, E, k ):\n  int i \u003d 1;\n  while k \u0026gt;\u003d i do\n    add_one( P * i, E * i );\n    k -\u003d i;\n    i *\u003d 2;\n  end while;\n  if k !\u003d 0 then\n    add_one( P * k, E * k );\n  end if;\nend function;\u003c/pre\u003e To help you understand why this works, think about how e.g. \u003ci\u003eadd_k( P, E, 9 ) \u003c/i\u003ewould work:\u003cbr /\u003e\u003col\u003e\u003cli\u003eIt calls \u003ci\u003eadd_one( P * 1, E * 1 )\u003c/i\u003e. Now we have considered all choices of amount 0..1,\u003c/li\u003e\u003cli\u003eIt calls \u003ci\u003eadd_one( P * 2, E * 2 )\u003c/i\u003e. Now we have considered all choices of amount 0..3 (Because we considered choices of size 1 before),\u003cbr /\u003e\u003c/li\u003e\u003cli\u003eIt calls \u003ci\u003eadd_one( P * 4, E * 4 )\u003c/i\u003e. Now we have considered all choices of amount 0..7,\u003c/li\u003e\u003cli\u003eand it finally calls \u003ci\u003eadd_one( P * 2, E * 2)\u003c/i\u003e. Now we have considered all choices of amount 0..9 :-)\u003c/li\u003e\u003c/ol\u003eAs you can see, this way we just needed \u003ci\u003eO(log k)\u003c/i\u003e calls to add_one instead of \u003ci\u003eO(k)\u003c/i\u003e calls, and it\u0027s enough to pass the time limit.\u003cbr /\u003e\u003cbr /\u003eWish you a happy time solving problems :-)\u003c/div\u003e","tags":["dp","problem","zju"]}}