{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1275143599,"rating":0,"authorHandle":"Kandyman","modificationTimeSeconds":1275143599,"id":409,"title":"Runtime Error на 1 тесте в задаче Letter. Может кто подсказать, что не так?","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv\u003eДумаю, что проблема с вводом-выводом, т.к. я свою первую задачу здесь посылаю\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003epackage codeforces;\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eimport java.io.*;\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003epublic class Letter {\u003c/div\u003e\u003cdiv\u003e    public void solve() {\u003c/div\u003e\u003cdiv\u003e        boolean oj \u003d true;\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e        try {\u003c/div\u003e\u003cdiv\u003e            Reader reader \u003d oj ? new InputStreamReader(System.in) : new FileReader(\u0026quot;C:\\\\temp\\\\input.txt\u0026quot;);\u003c/div\u003e\u003cdiv\u003e            Writer writer \u003d oj ? new OutputStreamWriter(System.out) : new FileWriter(\u0026quot;C:\\\\temp\\\\output.txt\u0026quot;);\u003c/div\u003e\u003cdiv\u003e            BufferedReader br \u003d new BufferedReader(reader);\u003c/div\u003e\u003cdiv\u003e            PrintWriter out \u003d new PrintWriter(writer);\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e            MyTokenizer tok \u003d new MyTokenizer(br.readLine());\u003c/div\u003e\u003cdiv\u003e            int n \u003d (int)tok.getNum();\u003c/div\u003e\u003cdiv\u003e            int m \u003d (int)tok.getNum();\u003c/div\u003e\u003cdiv\u003e            char[][] a \u003d new char[n][m];\u003c/div\u003e\u003cdiv\u003e            for(int i\u003d0;i\u0026lt;n;i++) {\u003c/div\u003e\u003cdiv\u003e                String s \u003d br.readLine();\u003c/div\u003e\u003cdiv\u003e                for(int j\u003d0;j\u0026lt;m;j++) {\u003c/div\u003e\u003cdiv\u003e                    a[i][j] \u003d s.charAt(j);\u003c/div\u003e\u003cdiv\u003e                }\u003c/div\u003e\u003cdiv\u003e            }\u003c/div\u003e\u003cdiv\u003e            int minx \u003d Integer.MAX_VALUE, miny \u003d Integer.MAX_VALUE, maxx \u003d Integer.MIN_VALUE,maxy \u003d Integer.MIN_VALUE;\u003c/div\u003e\u003cdiv\u003e            for(int i\u003d0;i\u0026lt;n;i++)\u003c/div\u003e\u003cdiv\u003e                for(int j\u003d0;j\u0026lt;m;j++)\u003c/div\u003e\u003cdiv\u003e                    if (a[i][j] \u003d\u003d \u0027*\u0027) {\u003c/div\u003e\u003cdiv\u003e                        if (minx \u0026gt; i)\u003c/div\u003e\u003cdiv\u003e                            minx \u003d i;\u003c/div\u003e\u003cdiv\u003e                        if (miny \u0026gt; j)\u003c/div\u003e\u003cdiv\u003e                            miny \u003d j;\u003c/div\u003e\u003cdiv\u003e                        if (maxx \u0026lt; i)\u003c/div\u003e\u003cdiv\u003e                            maxx \u003d i;\u003c/div\u003e\u003cdiv\u003e                        if (maxy \u0026lt; j)\u003c/div\u003e\u003cdiv\u003e                            maxy \u003d j;\u003c/div\u003e\u003cdiv\u003e                    }\u003c/div\u003e\u003cdiv\u003e            for(int i\u003dminx; i \u0026lt;\u003d maxx;i++) {\u003c/div\u003e\u003cdiv\u003e                for(int j\u003dminy;j\u0026lt;\u003dmaxy;j++) {\u003c/div\u003e\u003cdiv\u003e                    out.print(a[i][j]);\u003c/div\u003e\u003cdiv\u003e                }\u003c/div\u003e\u003cdiv\u003e                out.print(\u0026quot;\\n\u0026quot;);\u003c/div\u003e\u003cdiv\u003e            }\u003c/div\u003e\u003cdiv\u003e            \u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e            reader.close();\u003c/div\u003e\u003cdiv\u003e            writer.close();\u003c/div\u003e\u003cdiv\u003e        }\u003c/div\u003e\u003cdiv\u003e         catch (Exception ex) {\u003c/div\u003e\u003cdiv\u003e            ex.printStackTrace();\u003c/div\u003e\u003cdiv\u003e        }\u003c/div\u003e\u003cdiv\u003e        finally {\u003c/div\u003e\u003cdiv\u003e        }\u003c/div\u003e\u003cdiv\u003e    }\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e    public static void main(String[] args) {\u003c/div\u003e\u003cdiv\u003e        Letter f \u003d new Letter();\u003c/div\u003e\u003cdiv\u003e        f.solve();\u003c/div\u003e\u003cdiv\u003e    }\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e    private class MyTokenizer {\u003c/div\u003e\u003cdiv\u003e        private String s;\u003c/div\u003e\u003cdiv\u003e        private int cur;\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e        public MyTokenizer(String s) {\u003c/div\u003e\u003cdiv\u003e            this.s \u003d s;\u003c/div\u003e\u003cdiv\u003e            cur \u003d 0;\u003c/div\u003e\u003cdiv\u003e        }\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e        public void skip() {\u003c/div\u003e\u003cdiv\u003e            while (cur \u0026lt; s.length() \u0026amp;\u0026amp; (s.charAt(cur) \u003d\u003d \u0027 \u0027 || s.charAt(cur) \u003d\u003d \u0027\\n\u0027)) {\u003c/div\u003e\u003cdiv\u003e                cur++;\u003c/div\u003e\u003cdiv\u003e            }\u003c/div\u003e\u003cdiv\u003e        }\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e        public double getNum() {\u003c/div\u003e\u003cdiv\u003e            skip();\u003c/div\u003e\u003cdiv\u003e            String snum \u003d \u0026quot;\u0026quot;;\u003c/div\u003e\u003cdiv\u003e            while (cur \u0026lt; s.length() \u0026amp;\u0026amp; (s.charAt(cur) \u0026gt;\u003d \u00270\u0027 \u0026amp;\u0026amp; s.charAt(cur) \u0026lt;\u003d \u00279\u0027 || s.charAt(cur) \u003d\u003d \u0027.\u0027)) {\u003c/div\u003e\u003cdiv\u003e                snum +\u003d s.charAt(cur);\u003c/div\u003e\u003cdiv\u003e                cur++;\u003c/div\u003e\u003cdiv\u003e            }\u003c/div\u003e\u003cdiv\u003e            return Double.valueOf(snum);\u003c/div\u003e\u003cdiv\u003e        }\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e        public String getString() {\u003c/div\u003e\u003cdiv\u003e            skip();\u003c/div\u003e\u003cdiv\u003e            String s2 \u003d \u0026quot;\u0026quot;;\u003c/div\u003e\u003cdiv\u003e            while (cur \u0026lt; s.length() \u0026amp;\u0026amp; (s.charAt(cur) \u0026gt;\u003d \u0027a\u0027 \u0026amp;\u0026amp; s.charAt(cur) \u0026lt;\u003d \u0027z\u0027)) {\u003c/div\u003e\u003cdiv\u003e                s2 +\u003d s.charAt(cur);\u003c/div\u003e\u003cdiv\u003e                cur++;\u003c/div\u003e\u003cdiv\u003e            }\u003c/div\u003e\u003cdiv\u003e            return s2;\u003c/div\u003e\u003cdiv\u003e        }\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e        public char getCurrentChar() throws Exception {\u003c/div\u003e\u003cdiv\u003e            if (cur \u0026lt; s.length())\u003c/div\u003e\u003cdiv\u003e                return s.charAt(cur);\u003c/div\u003e\u003cdiv\u003e            else\u003c/div\u003e\u003cdiv\u003e                throw new Exception(\u0026quot;Current character out of string length\u0026quot;);\u003c/div\u003e\u003cdiv\u003e        }\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e        public void moveNextChar() {\u003c/div\u003e\u003cdiv\u003e            if (cur \u0026lt; s.length())\u003c/div\u003e\u003cdiv\u003e                cur++;\u003c/div\u003e\u003cdiv\u003e        }\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e        public boolean isFinished() {\u003c/div\u003e\u003cdiv\u003e            return cur \u0026gt;\u003d s.length();\u003c/div\u003e\u003cdiv\u003e        }\u003c/div\u003e\u003cdiv\u003e    }\u003c/div\u003e\u003cdiv\u003e}\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003c/div\u003e","tags":["runtime error"]}}