{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1280221950,"rating":24,"authorHandle":"Egor","modificationTimeSeconds":1280256919,"id":557,"title":"Codeforces Beta Round #24 solutions","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eTask A\u003c/h2\u003e\u003cdiv\u003eThis is pretty simple task - we have cycle and must direct all edges on it in one of 2 directions. We need to calculate cost of both orientation and print smallest of them.\u003c/div\u003e\u003cdiv\u003eThere is a small trick - we can calculate cost of only one orientation and then cost of the other will be sum of costs of all edges minus cost of first orientation.\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e \u003c/div\u003e\u003ch2\u003eTask B\u003c/h2\u003e\u003cdiv\u003eAlso very simple - we need literary do what we asked. We put all data in a map where for each pilot we have number of points and array of 50 elements - number of times pilot finished at corresponding place. Then we just need to find maximum in this array according to 2 given criteria.\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003ch2\u003eTask C\u003c/h2\u003e\u003cdiv\u003eReflection over 2 points is just a parallel shift for a doubled vector between them. So \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e \u003d \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e because sequence of reflections may be replaced with sequence of shifts with doubled vectors \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e\u003c/span\u003e, ..., \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 2\u003c/sub\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e - and their sum is 0. So we can replace j with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u0027 \u003d \u003ci\u003ejmod\u003c/i\u003e2\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e. Now we can just perform j\u0027 reflections. Suppose we need to find M\u0027 (x\u0027, y\u0027) - reflection of M(x, y) witch center at A(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e). Then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u0027 \u003d 2\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u0027 \u003d 2\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e - \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e.\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003ch2\u003eTask D\u003c/h2\u003e\u003cdiv\u003eIf robot is at last row then answer is 0. Suppose that for every cell of the next row we now expected number of steps to reach last row - \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be expected value of steps to reach the last row from current row. Then we have following system of equations:\u003c/div\u003e\u003cdiv\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d 1 + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e / 3 + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e / 3 + \u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e / 3\u003c/span\u003e\u003c/div\u003e\u003cdiv\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 1 + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e / 4 + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e / 4 + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e / 4 + \u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e / 4\u003c/span\u003e for i from 2 to M - 1\u003c/div\u003e\u003cdiv\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/sub\u003e \u003d 1 + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/sub\u003e / 3 + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eM\u003c/i\u003e - 1\u003c/sub\u003e / 3 + \u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/sub\u003e / 3\u003c/span\u003e\u003c/div\u003e\u003cdiv\u003eThis is tridiagonal system, it can be solved using \u003ca href\u003d\"http://en.wikipedia.org/wiki/Tridiagonal_matrix_algorithm\"\u003etridiagonal matrix algorithm\u003c/a\u003e in linear time.\u003c/div\u003e\u003cdiv\u003eSo we just have to solve this for each row starting from N - 1 and ending at i and then take x[j].\u003c/div\u003e\u003cdiv\u003eFor M \u003d 1 the answer is 2(N - i) because expected number of steps to go down is 2 - on each turn we either go down or stay\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003ch2\u003eTask E\u003c/h2\u003e\u003cdiv\u003eAt first we need to exclude answer -1. Answer is -1 if and only if first part of particles moves left and second part moves right (any of this parts may be empty)\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eLet\u0027s use binary search. Maximal answer is 1e9. Suppose we need to unserstand - whether answer is more then t or less then t. Let\u0027s itirate particles from left to right and maintain maximal coordinate that particle moving right would achive. Then of we will meet particle moving left that will move to the left of that coordinate in time t that we have 2 particles that will collide before time t. Otherwise we won\u0027t have such pair of particles.\u003c/div\u003e\u003c/div\u003e","tags":["codeforces beta round 24"]}}