{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1266594834,"rating":12,"authorHandle":"removed1","modificationTimeSeconds":1266649887,"id":85,"title":"Codeforces Beta Round #1 - Tutorial","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv class\u003d\"from-renderer\"\u003e\u003cdiv class\u003d\"from-renderer\"\u003e   \u003cdiv class\u003d\"from-renderer\"\u003e     \u003cdiv class\u003d\"from-renderer\"\u003e       \u003cdiv class\u003d\"from-renderer\"\u003e         \u003cdiv class\u003d\"from-renderer\"\u003e           \u003cdiv class\u003d\"from-renderer\"\u003e             \u003cp\u003eProblem A.\u003c/p\u003e             \u003cp\u003eThe constraint that edges of each flagstone much be               parralel           to edges of the square allows to               analyze             X and Y axes           separately,               that is, how many             segments of length \u0027a\u0027 are               needed to cover segment             of length \u0027m\u0027 and \u0027n\u0027               -- and take           product of these             two               quantities. Answer \u003d ceil(m/a) *           ceil(n/a),               where ceil(x) is the least integer which is above               or equal to x. Using integers only, it is usually written               as             ((m+a-1)/a)*((n+a-1)/a). Note that answer               may be as large as             10^18, which does not fit               in 32-bit integer.\u003c/p\u003e             \u003cp\u003eMost difficulties, if any, contestants had with data               types             and operator priority, which are highly               dependant on             language           used, so they               are not covered here.\u003c/p\u003e             \u003cp\u003eProblem B.\u003c/p\u003e             \u003cp\u003eLet each letter representation of column number be               associated           with integer in radix-26, where \u0027A\u0027 \u003d               0, \u0027B\u0027 \u003d 1 ... \u0027Z\u0027\u003d25.           Then, when converting               letter representation to decimal           representation,               we take associated integer and add one plus               quantity of valid all letter representations which               are             shorter than letter representation               being converted.             When           converting               from decimal representation             to               letter representation, we have to decide               how many letters           do we need. Easiest way to do               this             is to subtract one from           number,               then quantity of             letter representation having               length           1, then 2,             then 3, and so on,               until next subtraction would             have produced               negative result. At that point, the reduced number               is the one which must be written using defined association with fixed number  of digits, with leading zeroes (i.e. \u0027A\u0027s) as needed.\u003c/p\u003e             \u003cp\u003eNote that there is other ways to do the same which               produce             more compact code, but they are more               error-prone as well.\u003c/p\u003e             \u003cp\u003eProblem C.\u003c/p\u003e             \u003cp\u003eThe points can be vertices of regular N-polygon, if, and               only           if, for each pair, difference of their               polar             angles (as viewed           from center               of polygon) is a             multiple of 2*pi/N. All               points           should lie on the             circle with               same center as the polygon. We           can               locate the center of polygon/circle [but we may avoid               this, as a chord (like, say, (x1,y1)-(x2,y2)) is seen at               twice           greater angle from center, than it is seen               from other point of           a cricle (x3,y3)]. There are               many ways to locate center of           circle, the way I               used is to build midpoint perpendiculares to               segments (x1,y1)-(x2,y2) and (x2,y2)-(x3,y3) in form y \u003d               a*x             +           b and find their intersection.               Formula y \u003d a*x +             b has           drawback               that it cannot be used if line is             parallel to               y,           possible workaround is to rotate               all points by random angle (using formulae x\u0027           \u003d x*cos(a) -               y*sin(a), y\u0027 \u003d y*cos(a) + x*sin(a) ) until no               segments are horizontal (and hence no perperdiculares are vertical).\u003c/p\u003e             \u003cp\u003eAfter the coordinates of the center are known, we use               fancy             function atan2, which returns angle in               right quadrant: a[i]             \u003d               atan2(y[i]-ycenter, x[i]-xcenter)\u003c/p\u003e             \u003cp\u003eArea of  regular polygon increases with increasing               N,             so           it is possible just to iterate               through all             possible values on           N in               ascending order, and exit             from cycle as first               satisfying           N is found.\u003c/p\u003e             \u003cp\u003eUsing sin(x) is makes it easy: sin(x) \u003d 0 when x is               mutiple             of pi. So, for points to belong to               regular, N-polygon,\u003c/p\u003e             \u003cp\u003esin( N * (a[i]-a[j]) /2 )\u003d0\u003c/p\u003e             \u003cp\u003ebecause of finite precision arithmetic, \u003c/p\u003e             \u003cp\u003efabs( sin( N * (a[i]-a[j]) /2 ) ) \u0026lt; eps\u003c/p\u003e             \u003cp\u003e               \u003cbr /\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":["codeforces beta round #1","feedback"]}}