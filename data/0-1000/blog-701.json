{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1285574983,"rating":6,"authorHandle":"ChuYuxun","modificationTimeSeconds":1285575107,"id":701,"title":"The kth longest distance of each node in a tree","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003eI was thinking an interesting problem these days, but I can\u0027t solve it.\u003cbr /\u003e\u003cbr /\u003eGiven an un-rooted tree with N nodes and a number k.\u003cbr /\u003eEach edge has distance 1. \u003cbr /\u003eNodes are numbered from 1 to N.\u003cbr /\u003e\u003cbr /\u003eDefine : \u003cbr /\u003eDis(i, j) \u003d the distance between node #i \u0026amp; #j in this tree\u003cbr /\u003e\u003cbr /\u003eV[x] : A list, V[1]\u003ddis(1,x), V[2]\u003ddis(2,x) .... v[x-1]\u003ddis(x-1,x), v[x]\u003ddis(x+1,x)....v[n-1]\u003ddis(n,x)\u003cbr /\u003e\u003cbr /\u003es[x] : sort V[x] in descending order to get s[x]\u003cbr /\u003e\u003cbr /\u003eAns[x] : the kth element of s[x]\u003cbr /\u003e\u003cbr /\u003eAll I need is to output Ans[]\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003eI want a algorithm which runs in O(Nlog^2N) or faster.\u003cbr /\u003e\u003cbr /\u003eHelp me to solve this problem, Thanks!\u003cbr /\u003e\u003cspan\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e","tags":["tree"]}}