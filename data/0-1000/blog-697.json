{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1285366161,"rating":11,"authorHandle":"e-maxx","modificationTimeSeconds":1285396818,"id":697,"title":"Codeforces Beta Round #30. Tutorial for problem D","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003eTutorial for problem \u0026quot;D. Kings Problem?\u0026quot;\u003c/h1\u003e\u003cp\u003eIn this problem to create a wright solution you need to perform the following chain of inferences (though, if you skip some steps or do them not completely, you can still get an AC solution :) ):\u003c/p\u003e\u003cul\u003e\u003cli\u003eNote that after we visit the city numbered \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e, the further answer depends only from the leftmost and the rightmost unvisited cities (and it would be optimal to come to the nearest to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e-th city of them, and the come to another of them). That\u0027s why we know the answer for the case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e, and won\u0027t consider this case later.\u003c/li\u003e\u003cli\u003eBefore we visit the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e-th city, - this part of the path covers some segment of cities lying in the OX axis. This segment, obviously, contains the point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. But we can\u0027t iterate over all such possible segments, because there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e of them, so it\u0027s still a slow solution.\u003c/li\u003e\u003cli\u003eLet\u0027s understand the following fact: if before visiting city \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e we visited some other cities, but neither the leftmost nor the rightmost, then it was surely unprofitable. Really, after we come into the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e, the answer will depend only on the leftmost and the rightmost of non-visited cities. So, if before the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e-th city we performed some movements, but didn\u0027t change the leftmost and the rightmost cities, then it was completely unnecessary and unprofitable action.\u003c/li\u003e\u003cli\u003eWe can can get even more: there is no optimal solution, where we should move from the start city \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e-th city directly, without vithout visiting other cities (here I suppose that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is neither the leftmost nor the rightmost city). Btw, this step of reasoning could be skipped - we can believe it\u0027s sometimes profitable to come from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e directly, and it\u0027s not difficult to support this case in a solution we\u0027ll build later; but in order to describe the problem completely let\u0027s prove this fact too. In order to prove this, let\u0027s write down two formulas: first for the length of the answer if we come from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e directly, then come to city \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, and then to city \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e (here I suppose that \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e are the leftmost and the rightmost cities, accordingly, and city \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e is nearer to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e); second formula - for the length of the answer if we come from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e first, then to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e, then to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/span\u003e, and then to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. If we compare these two formulas, then after the cancellation of like terms we can use the triangle\u0027s inequality to see that the second formula always gives smaller value (at least, not greater) than the first. So, it\u0027s really unprofitable to come from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e directly.\u003c/li\u003e\u003cli\u003eSo, to make a right solution, it\u0027s enough to iterate over only two types of segments: \u003cspan class\u003d\"tex-span\"\u003e[1;\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≥ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ei\u003c/i\u003e;\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e (here I suppose for convenience that cities are sorted by their x-coordinate).\u003c/li\u003e\u003cli\u003eThe last idea is how to process each of these cases accurately. In order to do this we iterate over all possible \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 1... \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Let, for example, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Then we have to try the following case: go from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, then return to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, then come to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e, and then return back to the OX axis if need (if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u0026gt; 1\u003c/span\u003e). Also it is required to check another type of cases: try to go from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, then to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, and then come to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e, and return back to the OX axis if need. Answer for each of these cases can be calculated in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e. For \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≥ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e everything is symmetric.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eSo, not taking into account the sorting of the citites in the beginning of the program, we get a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e-solution.\u003cbr /\u003e\u003c/p\u003e\u003c/div\u003e","tags":["beta round 30","codeforces","codeforces format"]}}