{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1292153899,"rating":31,"authorHandle":"natalia","modificationTimeSeconds":1292341652,"id":948,"title":"School Personal Contest #3 (Winter Computer School 2010/11) - Codeforces Beta Round #45 (ACM-ICPC Rules): tutorial","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv\u003e\u003cb style\u003d\"font-weight: bold;\"\u003eProblems A and B \u003c/b\u003ehave no difficult ideas, so let\u0027s start from C.\u003c/div\u003e\u003cb\u003e\u003cbr /\u003e\u003c/b\u003e\u003cdiv\u003e\u003cb\u003eProblem C\u003cbr /\u003e\u003c/b\u003e\u003cbr /\u003ePut \u003cspan class\u003d\"tex-span\"\u003eβ \u003d α / 10\u003c/span\u003e. Then the given numbers are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d [β]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u003d [2β]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u003d [3β]\u003c/span\u003e, ... \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e \u003d [\u003ci\u003en\u003c/i\u003eβ]\u003c/span\u003e, and you have to count \u003cspan class\u003d\"tex-span\"\u003e[(\u003ci\u003en\u003c/i\u003e + 1)β]\u003c/span\u003e ([x] is the integral part). The given equalities are equivalent to the system of inequalities: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003en\u003c/i\u003eβ \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e + 1\u003c/span\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/98/99/9899985c72cfd4b7d605dd318df8e49e09fb05cf.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Choose maximum among left-hand sides and minimum among right-hand sides and obtain an inequality in the form \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e \u0026lt; \u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. Now compare integral parts of the numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e / (\u003ci\u003en\u003c/i\u003e + 1)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e / (\u003ci\u003en\u003c/i\u003e + 1)\u003c/span\u003e. If B is divisible by (n + 1), subtract 1 from the right-hand side, because of the strict inequality in the right-hand side.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eProblem D\u003c/b\u003e\u003cbr /\u003e\u003cbr /\u003eCreate vertors \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, and put positions of ones to the first vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, positions of 2s - to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, positions of 3s to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e, etc. The vectors can be filled for one pass of the given sequence. The number of permutations is the number of ones, or the size of the first vector. Mentally put the first 1 to the first permutation, the second 1 to the second permutation, and so on. Now turn to 2. If the number of 2s is greater than the number of 1s, there is no solution. Otherwise put the first 2 to the first permutation, the second 2 to the second permutation, and so on. It is possible for some last permutations to remain without 2. Then do the same for 3s (there should be less 3s than 2s), and so on. Obtain the O(n) solution.  \u003c/div\u003e\u003cdiv\u003e \u003c/div\u003e\u003cdiv\u003e\u003cb\u003eProblem E\u003c/b\u003e\u003cbr /\u003e\u003cbr /\u003eI tell two solutions. The first solution examines three possible cases separately. Build a graph which have pairs (h, t) as vertices, where h and t are dragon\u0027s current amounts of heads and tails. Edges are determined by possible Ivan\u0027s blows. Firstly, determine by bfs if it is possible to get from the start vertex  to (0, 0) and the number of required steps in case if it is possible. Then check if the draw is possible, i.e. if the graph has cycles. Otherwise the graph is acyclic, and by dynamics on the acyclic graph you can find the longest path to a dragon-win position.\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eThe second solution is to implement the standard algorithm often used for games on cyclic graphs. In fact the described process is a game on a cyclic graph with Gorynych moves determined uniquely. Start from vertices for that the answer is known, i.e. (0, 0) and h + t \u0026gt;\u003d R, and go by reversed edges marking other vertices as winning or losing. Unmarked vertices will be draw-positions.\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e\u003cb\u003e\u003cspan style\u003d\"font-weight: normal;\"\u003e\u003cb\u003eProblem F\u003c/b\u003e\u003c/span\u003e\u003cspan style\u003d\"font-weight: normal;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"font-weight: normal;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"font-weight: normal;\"\u003eFor each of n days you have to solve the so-called \u0026quot;continuous knapsack problem\u0026quot;. The solution is greedy: sort the firms by prices of produced snow and take snow starting from small prices until you get the required volume. Solutions with sorting for each n work too long. The author\u0027s solution takes O(nm) time, and it is based on ideas of QuickSort. Choose a random element r in the segment. The same way as in QuickSort,  reoreder the rest elements so that elements smaller than r preceed r, and elements greater than r follow r. Calculate the total volume of snow with prices less than r. If it is enough for us - solve the problem on the left subsegment, otherwise - buy all the left subsegment and go to the right subsegment recursively.\u003c/span\u003e\u003cspan style\u003d\"font-weight: normal;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"font-weight: normal;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/b\u003e\u003c/div\u003e\u003cdiv\u003eNote an unpleasant feature of this problem. On the one hand, an answer can be rather large. On the other hand, the large precision is required. So you should calculate an integral part and a fractional part of the answer separately.\u003cspan style\u003d\"font-weight: normal;\"\u003e\u003cb\u003e\u003cbr /\u003e\u003c/b\u003e\u003c/span\u003e\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cb\u003eProblem G\u003c/b\u003e\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003eThe given graph is connected and has one cycle. First solve the problem for a tree. Choose any vertex as a root, and for each subtree calculate the following characteristics by standard dynamics:\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e1) number of vertices in it;\u003c/span\u003e\u003c/div\u003e\u003cdiv\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003c/span\u003e\u003cfont face\u003d\"arial, sans-serif\" size\u003d\"2\"\u003e\u003cspan style\u003d\"border-collapse: collapse;\"\u003e2) sum of disnances from its root to all vertices in the subtree.  \u003c/span\u003e\u003c/font\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfont face\u003d\"arial, sans-serif\" size\u003d\"2\"\u003e\u003cspan style\u003d\"border-collapse: collapse;\"\u003eYou will get the answer of the root. To find the answer for other vertices, make tree traversal again. Consider a move from a vertiex u to its descendant v. To get to v from vertices of its subtree one have to use the same path as to u but without the last edge. On the contrary, for the other vertices path will be lengthened for the length of the edge (u, v). Thus,\u003c/span\u003e\u003c/font\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e \u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e \u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003ed[v] \u003d d[u] - L(u, v) * c[v] + L(u, v) * (n - c[v]), where c[v] is the number of vertices in the subtree with v as a root.\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/div\u003e\u003cdiv\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003eNow consider a graph with one cycle that may have trees attached. Consider the vertices in the cycle as roots of the trees. Calculate the answer inside each tree. The total answer for each vertex is the sum of:\u003c/span\u003e\u003c/div\u003e\u003cdiv\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e1) the sum of all distances inside its subtree;\u003c/span\u003e\u003c/div\u003e\u003cdiv\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e2) the sum for all other trees distances from their roots to all vertices in the tree (because to get from a vertex to some vertex in another tree one has to pass its root);\u003c/span\u003e\u003c/div\u003e\u003cdiv\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e3) distance form the vertex to the root of its tree multiplied by the total number of vertices in other trees; \u003c/span\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfont face\u003d\"arial, sans-serif\" size\u003d\"2\"\u003e\u003cspan style\u003d\"border-collapse: collapse;\"\u003e4) the sum of \u0026lt;legth of the shortest path in cycle from the root to the root of tree t\u0026gt; * \u0026lt;number of vertices in the tree t\u0026gt;.\u003c/span\u003e\u003c/font\u003e\u003cfont face\u003d\"arial, sans-serif\" size\u003d\"2\"\u003e\u003cspan style\u003d\"border-collapse: collapse;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/font\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003eThe most difficult part is calculation of the summand 4. \u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003eGo through the cycle by two pointers: one to the current vertex, another to the vertex that separetes vertices from that one has to go left or to go right to the current vertex.\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e Moving the pointers one can obtain partial sums for the summand 4 in a total linear time.\u003c/span\u003e\u003c/div\u003e\u003cdiv\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/div\u003e\u003cdiv\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cb\u003eProblem H\u003c/b\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003eImagine that you have exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e black-and-white tiles. Then you can solve the problem as follows. Go by cells from top to bottom, from left to right. First put \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e black tiles, then put \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e black-and-white tiles, then - \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e white tiles. As a result you get a border of black-and-white tiles that separates black from white.\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e The black-and-white tiles can be rotated such a way that makes the tiling correct. For example, n \u003d m \u003d 4, \u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003ea \u003d b \u003d 6, c \u003d 4.\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cbr /\u003e\u003cfont face\u003d\"arial, sans-serif\" size\u003d\"2\"\u003e\u003cspan style\u003d\"border-collapse: collapse;\"\u003e\u003cspan style\u003d\"font-size: 13.0px;\"\u003e\u003cpre style\u003d\"margin-top: 0.0px;margin-right: 0.0px;margin-bottom: 0.0px;margin-left: 0.0px;padding-top: 0.0px;padding-right: 0.0px;padding-bottom: 0.0px;padding-left: 0.0px;font-size: 12.0px;\"\u003e########\n########\n#####/\\#\n####/..\\\n\\##/....\n.\\/.....\n........\n........\n\u003c/pre\u003e\u003c/span\u003e\u003c/span\u003e\u003c/font\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cdiv\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003eIn the general case replace \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e\u003c/span\u003e black-and-white tiles (for example) by white ones, and build the tiling. Then replace back white tiles to black-and-white ones starting form the lower-right corner. For example,  \u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003en \u003d m \u003d 4, a \u003d 6, b \u003d 3, c \u003d 7.\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cbr /\u003e\u003cfont face\u003d\"arial, sans-serif\" size\u003d\"2\"\u003e\u003cspan style\u003d\"border-collapse: collapse;\"\u003e\u003cspan style\u003d\"font-size: 13.0px;\"\u003e\u003cpre style\u003d\"margin-top: 0.0px;margin-right: 0.0px;margin-bottom: 0.0px;margin-left: 0.0px;padding-top: 0.0px;padding-right: 0.0px;padding-bottom: 0.0px;padding-left: 0.0px;font-size: 12.0px;\"\u003e########\n########\n#####/\\#\n####/..\\\n\\##/....\n.\\/.....\n.../\\../\n../##\\/#\n\u003c/pre\u003e\u003c/span\u003e\u003c/span\u003e\u003c/font\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"border-collapse: collapse;font-family: arial , sans-serif;font-size: 13.0px;\"\u003eThe solution of the problem always exists.\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\u003c/div\u003e","tags":["beta-round-45","school olympiad","tutorial"]}}