{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1285360968,"rating":4,"authorHandle":"e-maxx","modificationTimeSeconds":1285399288,"id":696,"title":"Codeforces Beta Round #30. Tutorial for problem A","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003eTutorial for problem \u0026quot;A. Accounting\u0026quot;\u003c/h1\u003e\u003ch3\u003eFirst solution: naive brute\u003c/h3\u003e\u003cp\u003eLet\u0027s brute all possible values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e, and check each of them. It\u0027s easy to understand, that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e will be constrained in the same limits as values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e, that is, from -1000 to 1000 inclusive (obviously, there exists a test for each such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e, so we can\u0027t decrease these limits).\u003c/p\u003e\u003cp\u003eWhen we have some fixed value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e, we check it simply by multiplying \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e times. But, you should be careful with possible integer (and even 64-bit integer :) ) overflow. For example, you should stop multiplying by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e if the currect result exceeds 1000 by absolute value already.\u003c/p\u003e\u003ch3\u003eSecond solution: formula\u003c/h3\u003e\u003cp\u003eIt\u0027s easy to note, that if solution exists, then it is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e-th root from \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eB\u003c/i\u003e| / |\u003ci\u003eA\u003c/i\u003e|\u003c/span\u003e fraction, with changed sign if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e have different signs and if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is odd (if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is even, then no solution exists). That\u0027s why we could just use pow() function (or some analog in your language) to calculate \u003cspan class\u003d\"tex-span\"\u003e1 / \u003ci\u003en\u003c/i\u003e\u003c/span\u003e-th power of the fraction, and after that we just have to check - is the result integer number or not. Of course, we have to check it with taking into account precision errors: that is, number is integer if it is within \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e - 9\u003c/sup\u003e\u003c/span\u003e (or some another number) from nearest integer.\u003c/p\u003e\u003cp\u003eMoreover, in this solution you should be careful with zeroes. The worst case is when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e \u003d 0\u003c/span\u003e, and this case should be checked manually (you should note the difference between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e \u003d 0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e ≠ 0\u003c/span\u003e cases).\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eIt should be told that many of the solutions failed on tests with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e \u003d 0\u003c/span\u003e, or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e \u003d 0\u003c/span\u003e, and if these tests were not included in the pretestset, I think, about half of participants would fail to solve this problem :)\u003c/p\u003e\u003c/div\u003e","tags":["codeforces","codeforces round 30","tutorial"]}}