{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1269775123,"rating":0,"authorHandle":"brainail","modificationTimeSeconds":1269775123,"id":223,"title":"Что случилось с программированием?","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003e\u003ca href\u003d\"http://dev.by/blog/13740\"\u003eЧто случилось с программированием?\u003c/a\u003e\u003c/h1\u003e  \u003cp\u003e\u003cimg align\u003d\"left\" alt\u003d\"Майк тейлор о программировании\" hspace\u003d\"20\" src\u003d\"/predownloaded/ec/9a/ec9aafab142c625eb0670c4e6e391935a65f211e.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" vspace\u003d\"10\" /\u003e\u003ci\u003eПопулярный программист-блоггер Майк Тейлор в одном из \u003ca href\u003d\"http://reprog.wordpress.com/2010/03/03/whatever-happened-to-programming/\"\u003eпостов\u003c/a\u003e, вызвавших бурную полемику, сокрушается по поводу того, что настоящее программирование ушло в небытие и ему приходится заниматься складыванием каких-то не совсем квадратных кубиков. Многие его рассуждения спорны, но в целом интересное мнение о несовершенстве современных библиотек и фреймворков, превращающих программирование в какой-то совершенно другой род деятельности.\u003c/i\u003e\u003c/p\u003e \u003ch3\u003eЧто случилось с программированием?\u003c/h3\u003e \u003cp\u003eКогда мне было четырнадцать лет, я написал игрушку про «инопланетное вторжение» на BASIC на VIC 20. Если вы интересовались компьютером в 1982 году, готов поспорить, что вы тоже делали что-нибудь подобное. Когда мне было 18, я написал многопользовательских «хранителей подземелья» на C для терминалов, приаттаченных к Sun 3. Когда мне было 22, я работал над системой текстовых баз данных, опять на C, но уже на своём собственном Sun 3/80. Я был в контакте с моими друзьями из университета: мы собирались писать компиляторы, операционные системы и прочие такие крутые штуки - и в какой-то мере даже пытались это делать. Мы посылали друг другу наш текущий код, жаловались друг другу на конструкции языков программирования и смеялись над своими нелепыми и бессмысленными перереализациями функции malloc().\u003c/p\u003e \u003cp\u003e\u003c/p\u003e \u003ch3\u003eЭто было тогда\u003c/h3\u003e \u003cp\u003e\u003cimg align\u003d\"right\" hspace\u003d\"20\" src\u003d\"/predownloaded/c3/0a/c30a0db3313224f5f193f68c571da90685687e9f.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" vspace\u003d\"20\" /\u003eСегодня я в основном склеиваю вместе библиотеки. Так делаете и вы, если работаете в индустрии разработки ПО. Это выглядит не совсем логично, вы так не считаете? Мы проходили курсы параллельного программирования, изучали референционно прозрачные функциональные языки, мучились с Lisp, Prolog и APL, корпели над теорией операционных систем, инвариантами и формальными предусловиями. И что из этого мы используем? Огромная часть работы – это устранение противоречий между большими непрозрачными кусками библиотечного кода, которые почему-то не хотят вместе делать то, что предполагается моей программе. Ну, я не знаю. К примеру, перевод USMARC-записи в Dublin Core. Это программирование? Да? Конечно, всё это требует вкуса, проницательности и опыта, чтобы быть качественно реализованным, но совсем не требует какого-то блеска идей и не прибавляет особых эмоций. Это не то, о чём мы мечтали в 14 лет, или для чего начинали учиться в 18. Это не будоражит кровь. Это не созидание.\u003c/p\u003e \u003cp\u003eЕсли вы не верите моим словам и анализу, может вы поверите Дональду Кнуту? Вот несколько выдержек из его интервью в отличной книге \u003cb\u003eПетера Зибеля\u003c/b\u003e (Peter Siebel) \u003cb\u003e«Coders at Work»\u003c/b\u003e:\u003c/p\u003e \u003cblockquote\u003e\u003cp\u003e \u003ci\u003e «Что меня действительно волнует, так это то, что сейчас в основном программирование превратилось во встраивание магических заклинаний: вы берёте куски чужого кода, делаете магические пасы и запускаете. В этом нет чего-то креативного или творческого. И это становится слишком скучным, потому что у вас нет возможности сделать ничего особого нового. Ваш эмоциональный профит – получить удовольствие от того, что из машины вышел хороший позитивный результат. Но это совсем не то, когда вы создаёте что-то новое. Сейчас сам процесс превратился в скучную рутину, а радость можно получить только от результата работы. Но сама работа не должна быть скучной! Это неправильно.»\u003c/i\u003e\u003c/p\u003e \u003cp\u003e\u003ci\u003e\u0026quot;Кодирование стало скучным, потому что всё, что вы можете сделать, так это вызвать какие-либо штуки из библиотеки (при условии, что вы не пишете библиотеки самостоятельно). Если работа по кодированию будет заключаться только в том, чтобы найти правильную комбинацию каких-то параметров, то довольно очевидно, что вряд ли кто-то захочет посвятить этому занятию свою карьеру. \u0026quot;(Стр. 581)\u003c/i\u003e\u003c/p\u003e\u003c/blockquote\u003e \u003cp\u003e\u003cimg align\u003d\"left\" alt\u003d\"Тунец нигири имеет слегка металлический привкус. но некоторые части рыбы очень даже хороши.\" hspace\u003d\"20\" src\u003d\"/predownloaded/f0/c8/f0c8399d49ed4617bcd2e6c5106a48940efc40aa.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" title\u003d\"Тунец нигири имеет слегка металлический привкус. Но некоторые части рыбы очень даже хороши.\" vspace\u003d\"0\" /\u003eС Д. Кнутом, я полагаю, сложно не согласиться. Хочется делать вещи, а не склеивать их вместе. Когда меня спрашивают о том, что мне нравится в работе программиста, я отвечаю – это захватывает: начать с ничего и в процессе что-то создать. Для меня это и есть суть программирования, и весьма печально, что она сейчас перестаёт этим быть.\u003c/p\u003e \u003cp\u003eВсе мы знаем, что самая интересная часть процесса программирования – это его начальные этапы: когда буфер редактора пуст, а мир свеж и полон возможностей. А затем наступает захватывающий момент, когда код начинает приобретать форму, структура данных выстраиваться, а алгоритмы сходиться. Код становится запускаемым, затем он начинает даже делать что-то нужное, проходит тесты и затем – да! Это уже не просто какая-то идея – это уже реализованная программа. Вы прошли \u003cu\u003e\u003ci\u003eФазу 1\u003c/i\u003e\u003c/u\u003e проекта.\u003c/p\u003e \u003cp\u003eИ только потом понимаешь, где на самом деле начинается основный объём работы. Чтобы программа из личного проекта превратилась в продукт, она требует документации – API и command-line мануалы, туториалы. Ей требуются юнит-тесты, changelog’и и история релизов. Её необходимо проверить на портабельность. Её необходимо настраивать и дополнять. Возможно, ей потребуется определённая внутренняя реорганизация для более успешной совместной работы с другими приложениями. Всё это \u003cu\u003e\u003ci\u003eФаза 2\u003c/i\u003e\u003c/u\u003e.\u003c/p\u003e \u003cp\u003e Фишка в том, что вряд ли найдётся профессиональный программист, который бы хотел всем этим заниматься. Но мы понимаем всю важность и необходимость данных действий и делаем их тщательно и правильно. Это часть профессионализма, часть того, чтобы чувствовать себя не только учёным и творцом программирования, но и инженером. Это всё хорошо.\u003c/p\u003e \u003cp\u003e\u003cimg align\u003d\"right\" alt\u003d\"Что случилось с программированием\" hspace\u003d\"20\" src\u003d\"/predownloaded/99/78/9978ff13d1ec34983709f04a8c0d19ae532a2e42.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" title\u003d\"Футурама\" vspace\u003d\"10\" /\u003eНо Фаза 2 – это не ядро, не идея нашей работы. Весь смысл в Фазе 1. И даже если вторая фаза отнимает больше времени и усилий, то это всего лишь тщательная проверка всех деталей, необходимая для того, чтобы выпустить наш прекрасный код за пределы компьютера. А проблема современного программирования заключается в том, что всё оно, собственно, и заключается во второй фазе. Повсеместное наличие \u003ci\u003eпочти-подходящих-но-не-совсем\u003c/i\u003e библиотек и фреймворков, \u003ci\u003eделающих-почти-всё-за-вас-кроме-того-что-они-делать-не могут\u003c/i\u003e фактически уничтожают всю радость от Фазы 1, но при этом оставляют нас один на один с возможно ещё более тяжелой и куда более нудной второй фазой. Вместо проектирования прекрасных структур данных и элегантных алгоритмов мы ищем класс EnterpriseFactoryBeanMaker в 3,456 страничном \u003ci\u003eСборнике Тупых Ужасных Классов\u003c/i\u003e, потому что мы не можем вспомнить какой из аргументов createEnterpriseBeanBuilderFactory() метода делает статичный чисто виртуальный паблик деструктор окончательным завершающим элементом декора интерфейса.\u003c/p\u003e \u003cp\u003eЯ понимаю, что назад пути нет - мы уже во всём этом. Но хотелось бы узнать, как из этого выйти.\u003c/p\u003e \u003cp\u003e\u003cimg alt\u003d\"Простой выход\" src\u003d\"/predownloaded/e0/1c/e01cdae0e20f4809f6062f60edebf596755d43cd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" title\u003d\"Простой выход\" /\u003e\u003c/p\u003e \u003cp\u003eИз ответов автора на вопросы, проясняющие его позицию:\u003c/p\u003e \u003col\u003e\u003cli\u003e \u003cp\u003e\u003cb\u003eМожет  у тебя просто отвратительная работа?\u003c/b\u003e\u003c/p\u003e \u003c/li\u003e\u003cblockquote\u003e\u003cp\u003e По правде говоря, мне повезло попасть на одно из сравнительно малого числа рабочих мест, где действительно много именно программирования. Я работаю в небольшом open-source software-house, и мы в основном выпускаем тулы. Таким образом, моя работа don’t sucks.\u003c/p\u003e\u003c/blockquote\u003e\u003cli\u003e \u003cp\u003e\u003cb\u003eНо вам бы не хотелось каждый раз писать print(f)?\u003c/b\u003e\u003c/p\u003e \u003c/li\u003e\u003cblockquote\u003e\u003cp\u003e Нет, конечно, я вовсе не хочу сказать, что месту для библиотек нет места в этом мире! Приятно иметь набор существующего функционала, который мы можем вызвать по первому требованию. Проблема возникает, когда все, что ты делаешь, это склейка библиотек вместе. Другими словами, библиотеки отличные слуги, но отвратительные хозяева процессов. Где-то что-то мы упустили - позволили им выбраться и закрепить власть.\u003c/p\u003e \u003cp\u003eВот правило (которое, как и все такие правила, часто нарушается, и не следует принимать слишком серьезно): \u003cu\u003eостерегайся всего, что называет себя Фреймворком\u003c/u\u003e. Чего-нибудь того, что вместо предоставления функционала, говорит, как именно тебе надо кодировать, чтобы он мог вызвать что-нибудь.\u003c/p\u003e\u003c/blockquote\u003e\u003cli\u003e \u003cp\u003e\u003cb\u003eНо библиотеки помогают нам быть более эффективными??\u003c/b\u003e \u003c/p\u003e \u003cblockquote\u003e\u003cp\u003e Например, у вас есть проблема X, состоящая из подзадач X1, X2, X3. Существуют доступные решения для X1 и X3. Если вам не нравится складывать кирпичики - кодируйте X. Я лучше закодирую X2, подключу решения X1 и X3 и проведу остаток дня за изучением и, возможно, решением проблемы Y. \u003c/p\u003e\u003c/blockquote\u003e\u003c/li\u003e\u003c/ol\u003e \u003cp\u003eОтмечу – звучит у вас всё круто и правильно. Но вы упускаете тот момент, что подключение решений X1 и X3 далеко не всегда может быть простым и очевидным. Очень часто это утомительное упражнение, требующее перерывания кучи плохо написанных мануалов, рассказывающих тебе не о сути твоей высокоуровневой проблемы, а о том, что тебе код и так сам по себе говорит. Так что возможно мою первоначальную претензию «Что случилось с программированием?» стоит переиначить на «Почему столько хреновых библиотек?»\u003c/p\u003e\u003cp\u003e\u003cb\u003eUrl on original (ENGLISH):\u003c/b\u003e \u003ca href\u003d\"http://reprog.wordpress.com/2010/03/03/whatever-happened-to-programming/\"\u003ehttp://reprog.wordpress.com/2010/03/03/whatever-happened-to-programming/\u003c/a\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003eСсылка на оригинал (RUSSIAN): \u003c/b\u003e\u003ca href\u003d\"http://dev.by/blog/13740#devcut1\"\u003ehttp://dev.by/blog/13740#devcut1 \u003cbr /\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://dev.by/blog/13740#devcut1\"\u003e\u003cbr /\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://dev.by/blog/13740#devcut1\"\u003e\u003cbr /\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003c/div\u003e","tags":["library","programming"]}}