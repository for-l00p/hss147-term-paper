{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1270821818,"rating":0,"authorHandle":"danielmaxx","modificationTimeSeconds":1270868535,"id":268,"title":"Randoms","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv style\u003d\"text-align: justify;\"\u003eRandom is on fashion!\u003cbr /\u003e\u003cbr /\u003eMy recent  writings on my thesis were about pseudorandom numbers generators. You  may be thinking \u0026quot;Why they are called pseudorandom?\u0026quot;, and is a common  question and a subject of large discutions.\u003cbr /\u003e\u003cbr /\u003eBy definition, any  sequence of number is called random if is agree with the following  properties:\u003cbr /\u003e\u003c/div\u003e\u003col style\u003d\"text-align: justify;\"\u003e\u003cli\u003eThere\u0027s no  identificable patterns over the sequence\u003c/li\u003e\u003cli\u003eIs well distribuited  over a set (even on an \u003cspan\u003e\u003cspan\u003estatistical set)\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\u003cli\u003eIs  imposible to guess the future numbers based on the current numbers\u003c/li\u003e\u003c/ol\u003e\u003cdiv style\u003d\"text-align: justify;\"\u003eIf you\u0027re using an algorith to generate  the sequence, is sure that you\u0027re breaking the last condition. And the  reason is simple: There\u0027s no algorithm with REAL stochastical behavior.\u003cbr /\u003e\u003cbr /\u003eIf  you\u0027re looking for real random number generators, then you should look  elsewhere. One of the most common source of true random numbers are  physical phenomena, like electric noise or atmospheric noise. Is posible  to find random numbers generated from the second phenomena at \u003ca href\u003d\"http://www.random.org/\"\u003ewww.random.org\u003c/a\u003e, and with the first in  some cryptographic devices (such an IBM crypto-card).\u003cbr /\u003e\u003cbr /\u003eBack to  algorithms, there\u0027s several generator. One of the most famous and  popular, and not necesarly most powerful, is the Linear Congruential  Generator (LCG). This generator has been used since the last 40\u0027s, when  the Monte Carlo simulation arise as a new technique. The basic  recurrence relation behind a LCG is defined by:\u003cbr /\u003e\u003c/div\u003e\u003cbr /\u003eXi \u003d (aXi-1 + c)  % m\u003cbr /\u003e\u003cbr /\u003eWith this simple formula, is posible to  generate a sequence up to m different values. When m is well chosen, it  is possible to increase the generator period (numbers generated before  it start to repeat), to a maximun of m. Nevertheles, a and c must be  well chosen for improving the equidistribution over several sets. Park  \u0026amp; Miller, defined and standard for choosing a, and m. They realized  that (after some research) generators with c \u003d 0 had the same or better  behavior than generators with c!\u003d0.  The minimal standar that they pick  was:\u003cbr /\u003e\u003cbr /\u003ea \u003d 16807; m \u003d  (1\u0026lt;\u0026lt;31) - 1\u003cbr /\u003e\u003cbr /\u003eSome other  implementations may be found in the code published on this post,  including ran0, ran1 and ran2.\u003cbr /\u003e\u003cbr /\u003eIs important to mention the \u003ca href\u003d\"http://en.wikipedia.org/wiki/Blum_Blum_Shub\"\u003eBlum Blum Shub\u003c/a\u003e  generator, proposed by the Leonore Blum, Manuel Blum and Michael Shub.  This generator is widely used in cryptography. Due this work and some  others, Manuel Blum (who born in Venezuela!) gained an Turing Award in  1996.\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003e\u003ca href\u003d\"http://www.filehosting.org/file/details/50238/randoms1.1.cpp\"\u003e\u003c/a\u003e\u003c/div\u003e","tags":["codeforces","number","random"]}}