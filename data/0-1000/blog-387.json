{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1274296079,"rating":0,"authorHandle":"Martial","modificationTimeSeconds":1274296079,"id":387,"title":"CF 14 problem D - Two paths","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cbr /\u003eHi I have this submission for problem D.  It doesn\u0027t pass the test, could anyone tell me why?  Thanks in advance.\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003e\u003cbr /\u003en\u003dint(input())\u003cbr /\u003eneighbors \u003d [[] for i in range(n)]\u003cbr /\u003efor i in range(n-1):\u003cbr /\u003e  a,b\u003dmap(int,raw_input().split())\u003cbr /\u003e  a -\u003d 1\u003cbr /\u003e  b -\u003d 1\u003cbr /\u003e  neighbors[a].append(b)\u003cbr /\u003e  neighbors[b].append(a)\u003cbr /\u003e\u003cbr /\u003edef dfs(f,u):\u003cbr /\u003e  visited[u]\u003dTrue\u003cbr /\u003e  father[u]\u003df\u003cbr /\u003e  for v in neighbors[u]:\u003cbr /\u003e    if not visited[v]:\u003cbr /\u003e      dfs(u,v)\u003cbr /\u003e\u003cbr /\u003edef f(u):\u003cbr /\u003e  if dist[u]\u003d\u003d-1:\u003cbr /\u003e    res\u003d0\u003cbr /\u003e    for v in neighbors[u]:\u003cbr /\u003e      if u\u003d\u003dfather[v]:\u003cbr /\u003e        res \u003d max(res,1+f(v))\u003cbr /\u003e    dist[u]\u003dres\u003cbr /\u003e  return dist[u]\u003cbr /\u003e\u003cbr /\u003edef g(u):\u003cbr /\u003e  for v in neighbors[u]:\u003cbr /\u003e    if u\u003d\u003dfather[v]:\u003cbr /\u003e      dist_to_root[v] \u003d 1+dist_to_root[u]\u003cbr /\u003e      g(v)\u003cbr /\u003e  return\u003cbr /\u003e\u003cbr /\u003eres\u003d0\u003cbr /\u003eif n\u0026gt;\u003d4:\u003cbr /\u003e  for root in range(n):\u003cbr /\u003e    # direct the edges of the tree starting from the root.\u003cbr /\u003e    if len(neighbors[root])\u0026lt;3:\u003cbr /\u003e      visited \u003d [False]*n\u003cbr /\u003e      father \u003d [-1]*n\u003cbr /\u003e      dfs(-1,root)\u003cbr /\u003e      # dist is the maximum distance to a leaf\u003cbr /\u003e      dist \u003d [-1]*n\u003cbr /\u003e      f(root)\u003cbr /\u003e      dist_to_root \u003d [-1]*n\u003cbr /\u003e      dist_to_root[root]\u003d0\u003cbr /\u003e      g(root)\u003cbr /\u003e  \u003cbr /\u003e      score \u003d [0]*n\u003cbr /\u003e      for u in range(n):\u003cbr /\u003e        for v in neighbors[u]:\u003cbr /\u003e          if u\u003d\u003dfather[v]:\u003cbr /\u003e            score[u] +\u003d 1+dist[v]\u003cbr /\u003e  \u003cbr /\u003e      for u in range(n):\u003cbr /\u003e        on_path \u003d [False]*n\u003cbr /\u003e        w\u003du\u003cbr /\u003e        while w!\u003d-1:\u003cbr /\u003e          on_path[w]\u003dTrue\u003cbr /\u003e          w\u003dfather[w]\u003cbr /\u003e        for v in range(n):\u003cbr /\u003e          if not on_path[v]:\u003cbr /\u003e            res\u003dmax(res,dist_to_root[u]*score[v])  \u003cbr /\u003eprint res,\u003c/div\u003e","tags":["codeforces","python"]}}