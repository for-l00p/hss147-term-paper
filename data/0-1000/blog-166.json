{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1268426054,"rating":15,"authorHandle":"izbyshev","modificationTimeSeconds":1268428961,"id":166,"title":"Setting stack size in Java","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003eThere are many problems requiring deep recursion. Usually it\u0027s graph problems with big limitations which are solved by DFS. But deep recursion requires large stack size, often several megabytes.\u003cbr /\u003eIn C++ or Pascal/Delphi the stack size can be set by compiler directives. But it\u0027s impossible in Java. The default Java thread stack size is quite small, it\u0027s \u003ca href\u003d\"http://java.sun.com/docs/hotspot/HotSpotFAQ.html#threads_oom\"\u003e320kb\u003c/a\u003e in 32-bit Windows. The most simple solution is to use -Xss command line switch. But this is where problems begin.\u003cbr /\u003e \u003cbr /\u003eFirstly, this thing should be known). As practice shows, many competitions and online judges don\u0027t understand such issues or don\u0027t want to do it. It results in writing non-recursive DFS which is not always trivial and I\u0027m always lazy to do it. Or I have to write/rewrite code in C++ which is simply sad itself. \u003cbr /\u003eSecondly, using of the -Xss switch can cause some bad things. The stack size set by it is assigned to all Java threads. It can be ignored for simple single-thread application but can cause problems in testing system if it creates many Java threads. \u003cbr /\u003eAlso a problem of unaccounted memory usage arises. If the testing system sets memory limit by -Xmx switch, an application can use more memory than that limit because of stack using. Since the Memory Limit Exceeded verdict control becomes slightly inccorrect if the testing system checks it by handling OutOfMemoryError.\u003cbr /\u003eIt\u0027s worth to say that such flaws are often just ignored. The standard JVM launch command\u003cbr /\u003e  java -Xmx\u0026lt;?\u0026gt;М -Xss\u0026lt;?\u0026gt;M \u0026lt;class name\u0026gt;\u003cbr /\u003eis used at \u003ca href\u003d\"http://neerc.ifmo.ru/\"\u003eNEERC\u003c/a\u003e which it stated in rules given before the contest (though there is no info about it at the official site), at \u003ca href\u003d\"http://acm.timus.ru/help.aspx?topic\u003djava\"\u003eTimus\u003c/a\u003e and at Petrozavodsk Training Camp. I also have some suspections that the same command line is used at the ACM ICPC World Finals, but only from answers at Q\u0026amp;A Session. \u003cbr /\u003eThirdly, before Java 1.6 the -Xss switch was applied only for newly created threads, but the main thread used the default OS stack size. Since I had to write something like this in the main method:\u003cbr /\u003e\u003cpre\u003e        new Thread() {\n            public void run() {\n              new Main().run();\n            }\n        }.start();\u003cbr /\u003e\u003c/pre\u003eIt became unnecessary to do it when 1.6 appeared, and I had almost forgot about all stack size-related worries. \u003cbr /\u003eBut then Codeforces appeared.\u003cbr /\u003eHaven\u0027t found the necessary command line switches at the \u003ca href\u003d\"http://codeforces.ru/blog/entry/79\"\u003ecompiler description\u003c/a\u003e, I post a comment. I was greatly surprised when \u003ca href\u003d\"../../../profile/MikeMirzayanov\"\u003eMikeMirzayanov\u003c/a\u003e answered that \u0026quot;It\u0027s better to create a new Thread with predefined stack size and run the solution code in it\u0026quot;. All my life I thought that it\u0027s impossible to predefine the stack size) But after viewing JavaDoc (why couldn\u0027t I do it earlier?) I discovered a pretty Thread constructor:\u003cbr /\u003e\u003cpre\u003epublic \u003cb\u003eThread\u003c/b\u003e(ThreadGroup group,\u003cbr /\u003e              Runnable target,\u003cbr /\u003e              String name,\u003cbr /\u003e              long stackSize).\u003cbr /\u003e\u003c/pre\u003eIt should be noted that it\u0027s repeated in JavaDoc several times that how the value of stackSize argument is used and whether it is used at all depends on the OS. But the test showed that it works perfectly at least at Codeforces and TJU. The resulting operator in main method is\u003cbr /\u003e\u003cpre\u003e        new Thread(null, new Runnable() {\u003cbr /\u003e            public void run() {\u003cbr /\u003e                new Main().run();\u003cbr /\u003e            }\u003cbr /\u003e        }, \u0026quot;1\u0026quot;, 1 \u0026lt;\u0026lt; 23).start();\u003cbr /\u003e\u003c/pre\u003eIt sets the stack size of a thread named \u0026quot;1\u0026quot; to 8 MB.\u003cbr /\u003eMay be you\u0027ve dealt with some other problems with stack or know other ways to set it? Post it in comments)\u003c/div\u003e","tags":["java","stack","thread"]}}