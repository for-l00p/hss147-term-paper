{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1274351522,"rating":19,"authorHandle":"slycelote","modificationTimeSeconds":1274456575,"id":389,"title":"Codeforces Beta Round #14 tutorial","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"../../../contest/14/problem/A\"\u003eA. Letter        \u003c/a\u003e\u003c/h3\u003eTo find the smallest rectangle containing the picture, iterate through the pairs (i,j) such that the j-th symbol in i-th line is \u0027*\u0027; find the minimum and maximum values of i and j from these pairs. The rectangle to output is \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ei\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ei\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e] × [\u003ci\u003ej\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ej\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e.\u003cbr /\u003e \u003cbr /\u003e\u003ch3\u003e\u003ca href\u003d\"../../../contest/14/problem/B\"\u003eB. Young Photographer        \u003c/a\u003e\u003c/h3\u003eFirst we find the intersection of all segments. To do this, denote by m the rightmost of left ends of the segments and denote by M the leftmost of right ends of the segments. The intersection of the segments is [m,M] (or empty set if m\u0026gt;M). Now determine the nearest point from this segment. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u0026lt; \u003ci\u003em\u003c/i\u003e\u003c/span\u003e, it\u0027s \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e, and the answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u0026gt; \u003ci\u003eM\u003c/i\u003e\u003c/span\u003e, it\u0027s \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e, and the answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e - \u003ci\u003eM\u003c/i\u003e\u003c/span\u003e. If \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9d/7b/9d7beb56eed1c835663988d2f36e94c0f7873b9d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, it\u0027s \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e, and the answer is 0. If m\u0026gt;M, then the answer is -1.\u003cbr /\u003e\u003cbr /\u003e\u003ch3\u003e\u003ca href\u003d\"../../../contest/14/problem/C\"\u003eC. Four Segments        \u003c/a\u003e\u003c/h3\u003eThere must be many ways to solve this problem. The following one seems quite easy to code.\u003cbr /\u003eFirst count the number of distinct points among segments\u0027 ends. If it\u0027s not equal to 4, the segments can\u0027t form a rectangle and we output \u0026quot;NO\u0026quot;. Then calculate the minimum and maximum coordinates of the 4 points: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, then even if the segments form a rectangle, it has zero area, so we also output \u0026quot;NO\u0026quot; in this case.\u003cbr /\u003eNow if the segments indeed form a rectangle, we know the coordinates of its vertices — \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. We just check that every side of this rectangle appears in the input. If it is the case, we output \u0026quot;YES\u0026quot;, otherwise we output \u0026quot;NO\u0026quot;.\u003cbr /\u003e\u003cbr /\u003e\u003ch3\u003e\u003ca href\u003d\"../../../contest/14/problem/D\"\u003eD. Two Paths        \u003c/a\u003e\u003c/h3\u003eTake any pair of non-intersecting paths. Since Flatland is connected, there must be a third path, connecting these two. Remove a road from the third path. Then Flatland is divided into two components — one containing the first path, and the other containing the second path. This observation suggests us the algorithm: iterate over the roads; for each road remove it, find the longest path in both connected components and multiply the lengths of these paths. The longest path in a tree can be found by depth first search from each leaf. \u003cbr /\u003e\u003cbr /\u003e\u003ch3\u003e\u003ca href\u003d\"../../../contest/14/problem/E\"\u003eE. Camels        \u003c/a\u003e\u003c/h3\u003eLet us call an index j such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e - 1\u003c/sub\u003e  \u0026gt;  \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e  \u0026lt;  \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e a \u003ci\u003ecavity\u003c/i\u003e. Also, we\u0027ll call humps and cavities by the common word \u003ci\u003ebreak\u003c/i\u003e. Then there must be exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e \u003d 2\u003ci\u003et\u003c/i\u003e - 1\u003c/span\u003e breaks, and the first one must be a hump.\u003cbr /\u003eDenote by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003enth\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e the number of ways in which a camel with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e breaks, ending at the point (n,h), can be extended to the end (the vertical \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eN\u003c/i\u003e\u003c/span\u003e) so that the total number of breaks was equal to T. Note that:\u003cbr /\u003e1. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eNTh\u003c/i\u003e\u003c/sub\u003e \u003d 1\u003c/span\u003e, if h\u003d1,2,3,4. (We have already finished the camel and it has T breaks)\u003cbr /\u003e2. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eNth\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003et\u003c/i\u003e \u0026lt; \u003ci\u003eT\u003c/i\u003e, \u003ci\u003eh\u003c/i\u003e \u003d 1, 2, 3, 4\u003c/span\u003e. (We have already finished the camel, but it has less than T breaks)\u003cbr /\u003e3. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e, \u003ci\u003eT\u003c/i\u003e + 1, \u003ci\u003eh\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003en\u003c/i\u003e ≤ \u003ci\u003eN\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e \u003d 1, 2, 3, 4\u003c/span\u003e. (The camel has already more than T breaks).\u003cbr /\u003e \u003cbr /\u003eNow we find the recurrent formula for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003enth\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Suppose that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e is even. Then the last break was a cavity, and we are moving up currently. We can continue moving up, then the number of breaks stays the same, and we move to one of the points \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e + 1, \u003ci\u003eh\u003c/i\u003e + 1), (\u003ci\u003en\u003c/i\u003e + 1, \u003ci\u003eh\u003c/i\u003e + 2), ..., (\u003ci\u003en\u003c/i\u003e + 1, 4)\u003c/span\u003e. Or we can move down, then the number of breaks increases by 1, and we move to one of the points \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e + 1, \u003ci\u003eh\u003c/i\u003e - 1), (\u003ci\u003en\u003c/i\u003e + 1, \u003ci\u003eh\u003c/i\u003e - 2), ..., (\u003ci\u003en\u003c/i\u003e + 1, 1)\u003c/span\u003e. This gives us the formula\u003cbr /\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a3/e8/a3e83268e2b1da94e22c56117746235c2e5deb7b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003cbr /\u003e\u003cbr /\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e is odd, then the last break was a hump, and similar reasoning leads to the formula\u003cbr /\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e1/56/e156488f18923a42486f82779163128dfc181f40.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003cbr /\u003e\u003cbr /\u003eWe can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003enth\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e by dynamic programming. Consider now the point \u003cspan class\u003d\"tex-span\"\u003e(2, \u003ci\u003eh\u003c/i\u003e)\u003c/span\u003e on a camel. There are h-1 ways to get to this point (starting from points \u003cspan class\u003d\"tex-span\"\u003e(1, 1), ..., (1, \u003ci\u003eh\u003c/i\u003e - 1)\u003c/span\u003e), and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2, 0, \u003ci\u003eh\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e ways to extend the camel to the end. So the answer to the problem is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e4/5c/e45c5e8dc94faf29b39c32a9bd6548aafee8428e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/div\u003e","tags":["beta round #14","tutorial"]}}