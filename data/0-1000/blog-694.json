{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1285354085,"rating":40,"authorHandle":"e-maxx","modificationTimeSeconds":1285397923,"id":694,"title":"Codeforces Beta Round #30. Totorial for problem E","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003eTutorial for problem \u0026quot;E. Tricky and Clever Password\u0026quot;\u003c/h1\u003e\u003ch3\u003eScheme of the author solution\u003c/h3\u003e\u003cp\u003eThe author solution has the following scheme. Let\u0027s brute over each possible position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e of the center of the middle part (the part that must be palindrome by problem statement). Then let\u0027s take as a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emiddle\u003c/i\u003e\u003c/span\u003e the maximum palindrome among all centered in the position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e. After that we have to take as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuffix\u003c/i\u003e\u003c/span\u003e such maximum-sized substrings, which satisfy all problem constraints, and don\u0027t intersect with medium part.\u003c/p\u003e\u003cp\u003eAfter we do these calculations for each possible position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e, the answer to the problem will be just maximum among answers found on each step.\u003c/p\u003e\u003ch3\u003eEfficient Implementation\u003c/h3\u003e\u003cp\u003eIn fact, the problem consists of two sub-problems:\u003c/p\u003e\u003cp\u003eFirst, it\u0027s a search for a maximum-length palindrome, having its center in the given position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e. We can calculate these answers in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e with Manacher\u0027s algorithm, which \u003ca href\u003d\"http://e-maxx.ru/algo/palindromes_count\"\u003eis described on my site\u003c/a\u003e (unfortunately, the article is only in Russian, so you have to use Google Translator or something like this). Alternatively you can calculate this \u0026quot;palindromic array\u0026quot; using binary search and, for example, hashes or suffix array: let\u0027s search for maximum palindrome length using binary search, then inside the binary search we have to compare for equivalence two substrings of the given string, which can be done in O(1) using hashes or calculated suffix array.\u003c/p\u003e\u003cp\u003eSecond, it\u0027s a search for maximum length and corresponding positions for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuffix\u003c/i\u003e\u003c/span\u003e parts, not intersecting the given substring \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e;\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e. Let\u0027s look at lengths \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufflen\u003c/i\u003e\u003c/span\u003e of suffix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuffix\u003c/i\u003e\u003c/span\u003e in order of their increase, then for each fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufflen\u003c/i\u003e\u003c/span\u003e obviously it is the best to look only at first occurence of string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e \u003d \u003ci\u003ereverse\u003c/i\u003e(\u003ci\u003esuffix\u003c/i\u003e)\u003c/span\u003e. Thereby, by increasing the length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufflen\u003c/i\u003e\u003c/span\u003e, we can move the corresponding \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e\u003c/span\u003e only to the right, not to the left. Designating by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e[\u003ci\u003esufflen\u003c/i\u003e]\u003c/span\u003e the position of first occurence of string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ereverse\u003c/i\u003e(\u003ci\u003esuffix\u003c/i\u003e(\u003ci\u003esufflen\u003c/i\u003e))\u003c/span\u003e in the given string, we get that these \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e\u003c/span\u003e values are non-decreasing. It will be more comfortable to introduce another array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erpos\u003c/i\u003e[\u003ci\u003elen\u003c/i\u003e] \u003d \u003ci\u003elpos\u003c/i\u003e[\u003ci\u003elen\u003c/i\u003e] + \u003ci\u003elen\u003c/i\u003e - 1\u003c/span\u003e - end-position of occurence of this suffix (obviously these values will strictly increase).\u003c/p\u003e\u003cp\u003eSo, if we knew the values of the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e\u003c/span\u003e (or, more convenient, of the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erpos\u003c/i\u003e\u003c/span\u003e), then in the main solution (in the place, where after selecting maximum in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e palindrome we have to search for maximum appropriate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuffix\u003c/i\u003e\u003c/span\u003e) we can use binary search over the length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufflen\u003c/i\u003e\u003c/span\u003e. Moreover, we can just precalculate answers to each of query of this form, and after that we\u0027ll answer to each query in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe last thing is to learn how to build \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e\u003c/span\u003e array - array of positions of first occurences of reversed suffixes.\u003c/p\u003e\u003cp\u003eFor example, this can be done using hashes or suffix array. If we\u0027ve calculated the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e, let\u0027s learn how to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e + 1]\u003c/span\u003e. If the substring \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e.\u003ci\u003esubstr\u003c/i\u003e(\u003ci\u003elpos\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e], \u003ci\u003ek\u003c/i\u003e + 1)\u003c/span\u003e equals to s-th suffix of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e + 1] \u003d \u003ci\u003elpos\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e. In the other case, we try to increase \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e + 1]\u003c/span\u003e by one, and again do the comparison, and so on. Comparison of any two substrings can be done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e using hashes or suffix array. Of course, total time to build \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e\u003c/span\u003e array will be then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e - because there won\u0027t be more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e increases (and string comparisons) during the whole algorithm.\u003c/p\u003e\u003cp\u003eAnother approach to building \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e\u003c/span\u003e array is to use prefixe-function. For this, let\u0027s make a string \u003cem\u003ereverse(s) + # + s\u003c/em\u003e, and if in some point of the right half of the string the value of the prefix function equaled to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, then let\u0027s assign \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e] \u003d \u003c/span\u003e this position (if, of course, this \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elpos\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e haven\u0027t yet been assigned before - because we have to find only first occurences).\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eFinally, it\u0027s rather easy to get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e solution of this problem using rather famous approaches: hashes, suffix array, prefix-function and palindromic array. \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e-solution is somewhat easier, - it is based on binary search (for building palindromic array and for answering the queries) and, for example, hashes (for comparison of two substrings).\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003ch3\u003eProof\u003c/h3\u003e\u003cp\u003eThe only non-obvious thing is why after we\u0027ve fixed the position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e (we remind it\u0027s a position of middle of central part of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emiddle\u003c/i\u003e\u003c/span\u003e), - after that we can greedily take the maximum palindrome with center in it.\u003c/p\u003e\u003cp\u003eLet\u0027s suppose the contrary: suppose it was better not to take the maximum palindrome centered in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e, but to take some smaller palindrome centered here. Look what happens when we decrease a length of palindrome by two (by one from each end): we loose two symbols in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emiddle\u003c/i\u003e\u003c/span\u003e, but instead we get more \u0026quot;freedom\u0026quot; for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuffix\u003c/i\u003e\u003c/span\u003e parts. But for both of them their \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efreedom\u003c/i\u003e\u003c/span\u003e increased only by one: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e\u003c/span\u003e gained one symbol after the end, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuffix\u003c/i\u003e\u003c/span\u003e - one symbol before this beginning. So, taking into account the monotonic increase of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erpos\u003c/i\u003e\u003c/span\u003e, we see that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuffix\u003c/i\u003e\u003c/span\u003e could increase only by one, not more. Summarizing this discussion, we can say that after decreasing the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emiddle\u003c/i\u003e\u003c/span\u003e part we loose two symbols, and gain maximum two symbols. That\u0027s why there is no need in decreasing the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emiddle\u003c/i\u003e\u003c/span\u003e part, we can always select it as the maximum-sized palindrome.\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003ch3\u003eAnother approach\u003c/h3\u003e\u003cp\u003eLet\u0027s iterate over each suffix length, and after we\u0027ve fixed some suffix length, we have to find maximum-sized palindrome between the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuffix\u003c/i\u003e\u003c/span\u003e and the found \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e\u003c/span\u003e (position of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e\u003c/span\u003e still has to be found, just like in the previous solution).\u003c/p\u003e\u003cp\u003eFirst idea is to use some greedy (similar to described above): take maximum-sized palindrome with center between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuffix\u003c/i\u003e\u003c/span\u003e, and \u0026quot;cut\u0026quot; it down, in order to fit between the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprefix\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuffix\u003c/i\u003e\u003c/span\u003e. It\u0027s wrong: there are tests, where after cutting the maximum palindrome becomes very small, so after cutting down it\u0027s better to choose another palindrome.\u003c/p\u003e\u003cp\u003eBut we can cope with this using the following approach: let\u0027s find the length of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emiddle\u003c/i\u003e\u003c/span\u003e part using binary search. To do this, we have to answer the following queries: \u0026quot;is there a palindrome of length at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e among all palindromes centered between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e\u0026quot;. I.e. given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, we should answer, is there a number greater that or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in the segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e;\u003ci\u003er\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e (I suppose that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is a half of the length of palindrome).\u003c/p\u003e\u003cp\u003eWe can answer to these maximum queries using segment tree in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/51/2b/512b55be4c3fae47abd9e0f62531d2fba6a6cac3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, so the total solution is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4e/89/4e8912994fca417e1603fe307d897b3b6e2f3d4d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Alternatively we can use sparse-table to reach \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fd/25/fd25864c2a9df5422e573033ffa7e1f6c8eb2c74.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e asymptotics (sparse-table is a table where for each position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and power of two \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e the answer for segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ei\u003c/i\u003e;\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e - 1]\u003c/span\u003e is precalculated).\u003c/p\u003e\u003cp\u003eThis can be done using segment tree, built over the palindromic array (the palindromic array should be calculated, as described in the previous solution).\u003c/p\u003e\u003c/div\u003e","tags":["beta round 30","codeforces","codeforces format"]}}