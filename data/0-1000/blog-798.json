{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1288187531,"rating":32,"authorHandle":"vepifanov","modificationTimeSeconds":1288189474,"id":798,"title":"Codeforces Beta Round #37 (Tutorial)","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cb\u003eA. Towers\u003c/b\u003e\u003cbr /\u003e \u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"color: rgb(0,0,0);\" title\u003d\"\"\u003eThe total number of towers is equal to number of different numbers in this set. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eTo  get the maximum height of the tower, it was possible to calculate for  each length the number of bars with this length, and from these numbers is to  choose the maximum.\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e \u003cbr /\u003e \u003cb\u003eB. Computer Game\u003c/b\u003e\u003cbr /\u003e \u003cspan lang\u003d\"en\"\u003e\u003cspan title\u003d\"\"\u003eConstraints  in the problem allows us to solve it this way: we keep the current  number of health from the boss, and current summary damage from used scrolls per  second. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eAt the next step, we choose which scrolls we can use in the current second. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eOf all these, we find the scroll, which causes the most damage, and apply it. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eIf  at some point we could not use any of the scrolls, and the current damage in one second  does not exceed regeneration, we deduce that there are no answers. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eOtherwise, continue to iterate the algorithm until the number hit points will be nonnegative.\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e \u003cbr /\u003e \u003cb\u003eC. Old Berland Language\u003c/b\u003e\u003cbr /\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eOne  of the easiest to understand solutions of this problem is as follows:  sort the words in ascending order of length, while remembering their positions in the source list. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eWe will consistently build our set, starting with the short strings: strings of length one can only be strings \u0026quot;0\u0026quot; and \u0026quot;1\u0026quot;. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eIf the number of words of length one in a set are more than two, hence there are no answers. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eAdd  the desired number of strings of length one to answer, and remove it from the current list. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eThen  look at the string of length two: each of the remaining strings of length one  can be extended in two ways (having added to each of these symbols 0  and 1). \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eAdd the desired number of strings of length two in our answer, and then increase the length of the remaining strings by one.\u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003e Continue this process, \u003c/span\u003e\u003c/span\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003euntil we get all words from the input set\u003c/span\u003e\u003c/span\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003e. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eYou  can see that if at some moment the number of allowable words exceeded  the number of remaining, the extra words can be ignored and solution takes \u003c/span\u003e\u003c/span\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eO (N * the maximum length of input set) time.\u003c/span\u003e\u003c/span\u003e \u003cbr /\u003e\u003c/p\u003e  \u003cp\u003e\u003cb\u003eD. Lesson Timetable\u003cbr /\u003e\u003c/b\u003e\u003c/p\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eThis problem is solved by dynamic programming:\u003cbr /\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003estate of dynamics will be a pair of numbers - the number of current room and number  of groups which have first lesson in the room with a number not  exceeding the current and for which the second room is not defined  yet. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eFor each state check all possible number of groups for which the second lesson will be held in the current classroom. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eWhen  you add an answer from the new state, it must be multiplied by the  corresponding binomial coefficients (the number of ways to select groups which have the first lesson in next room - \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1\u003c/span\u003e, and the  number of ways to select groups which have the second lesson\u003c/span\u003e\u003c/span\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003e in the  current classroom).\u003c/span\u003e\u003c/span\u003e\u003cp\u003e \u003c/p\u003e  \u003cp\u003e\u003cb\u003eE. Trial for Chief\u003cbr /\u003e\u003c/b\u003e\u003c/p\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eFirst, we construct the following graph: each cell we associate a vertex of the same color as the cell itself. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eBetween neighboring cells hold an edge of weight 0, if the cells share the same color and weight of 1, if different. \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eNow, for each cell count the shortest distance from it to the most distant black cell (denoted by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e). \u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eIt is easy to see that we can construct a sequence of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e + 1\u003c/span\u003e repainting leads to the desired coloring:\u003cbr /\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cul\u003e\u003cli\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003e\u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eThe first step of color all the cells at a distance less than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e in black color\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\u003c/li\u003e\u003c/ul\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cul\u003e\u003cli\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eAt the second step color all the cells at a distance less than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e - 1\u003c/span\u003e in white\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cul\u003e\u003cli\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan title\u003d\"\"\u003eEtc.\u003c/span\u003e\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cspan lang\u003d\"en\"\u003e\u003cspan title\u003d\"\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003cspan style\u003d\"\" title\u003d\"\"\u003eOf  all the cells, choose the one for which this distance is minimal, and  this distance increased by one will be the answer to the problem.\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e","tags":["beta round #37","codeforces","tutorial"]}}