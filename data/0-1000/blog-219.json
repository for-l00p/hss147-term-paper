{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1269638488,"rating":6,"authorHandle":"Alex_KPR","modificationTimeSeconds":1298023545,"id":219,"title":"ACM формат мышления","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv align\u003d\"justify\"\u003eВсем привет!\u003cbr /\u003e\u003cbr /\u003eНе знаю, как Вы, уважаемые читатели, а лично я никогда не отличался особым умом и сообразительностью в задачах спортивного программирования. Всем своим скромным успехам я обязан усердным тренировкам (почти 550 задач на тимусе) и общением с более \u0026quot;крутыми\u0026quot; кодерами. Как результат - у меня выработался \u0026quot;синдром ACMщика\u0026quot;:\u003cbr /\u003e\u003cbr /\u003e\u003cstrong\u003e1. Внимательное чтение условий.\u003c/strong\u003e Это, определённо, плюс.\u003cbr /\u003e\u003cstrong\u003e2. Предугадывание сложности требуемого алгоритма\u003c/strong\u003e. Например, если n\u003d100, то можно O(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e\u003c/span\u003e) попытаться запихнуть, а если n\u003d20, то нужно писать перебор или динамику по подмножествам.\u003cstrong\u003e\u003cbr /\u003e3. Разбиение задачи на знакомые элементы.\u003c/strong\u003e Обычно это выглядит как \u0026quot;а, это я когда-то решал...\u0026quot; плюс некоторые додумки.\u003cbr /\u003e\u003cstrong\u003e4. Абсолютное неумение решать задачи \u0026quot;наполовину\u0026quot;\u003c/strong\u003e или \u0026quot;абы как работало\u0026quot;. Более того, не получается даже думать над такими решениями. К примеру, поиск в ширину можно сделать тремя циклами в 5 строк (как я поступал будучи школьником), но, пытаясь написать такое сейчас, я впадаю в состояние ступора.\u003cbr /\u003e\u003cstrong\u003e5. Обобщение метода решения ACM-задач\u003c/strong\u003e на все прикладные задачи. Например, банальные лабораторные работы по программированию в университете пишу как \u0026quot;задачи на реализацию\u0026quot;.\u003cbr /\u003e \u003c/div\u003e\u003cdiv align\u003d\"justify\"\u003e\u003cbr /\u003e\u003cimg src\u003d\"/predownloaded/16/a8/16a8e42febb6a4d4780aac542d36b75beac778eb.pic\" style\u003d\"float: right;margin: 1.0em;max-width: 100.0%;max-height: 100.0%;\" /\u003eК чему это всё приводит? Во-первых, нестандартные ACM-задачи перестают выглядить как нестандартные. Более того, они начинают выглядить очень даже стандартно. Во-вторых, минимум творчества. Зачем изобретать велосипед с квадратными колёсами, который имеет худшую асимптотику, сложнее пишется и, почти наверняка, не работает? Гораздо лучше воспользоваться стандартным алгоритмом. В-третьих, негибкость по отношению к изменению правил. Приведу пример.\u003cbr /\u003e\u003cbr /\u003eВ отборочном challenge24 была прекрасная задача C: малым числом треугольников произвольных цветов с любыми координатами нужно получить картинку, максимально похожую на исходную. Исходные картинки давались (т.е. тесты были открыты), их было 10. Через 5 минут пришла очень хорошая идея: а давайте каждой парой треугольников сделаем прямоугольник, а этими прямоугольниками покроем \u0026quot;чистый лист\u0026quot;, как мозаикой. Эта идея принесла ~300 баллов на контесте. \u003cbr /\u003e\u003cbr /\u003eНО! Только после контеста стало понятно, что можно было открыть ту же самую Delphi и набросать следующую элементарную программу: мышкой кликаем на три точки на картинке - и заданный треугольник рисуется на \u0026quot;чистом листе\u0026quot; цветом, равным среднему арифметическому цветов внутри фигуры. Только в двух или трёх тестах количество треугольников было ~500, где кликание мышкой стало бы утомительным. В остальных, при умелом визуальном выборе, можно получить очень даже похожую картинку. Это решение совсем неформатное, но чрезвычайно эффективное.\u003cbr /\u003e\u003cbr /\u003eНу и насчёт творчества оговорюсь: творческие задачи есть. Конечно, их не очень много (хорошо, если есть одна во всём проблемсете), но они обычно либо очень сложные, либо очень простые. Например, это задача A с последнего открытого кубка про нумерацию вершин в двочном дереве; это задача Андрея Станкевича о факторизации графа на регулярные (с летних петрозаводских сборов) и её гениальное решение Алексея Толстикова; это задачи на тимусе \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1649\"\u003eабстракционизм в массы\u003c/a\u003e и \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1614\"\u003eнацпроект \u0026quot;трамваи\u0026quot;\u003c/a\u003e, и другие.\u003cbr /\u003e\u003cbr /\u003eКто-то скажет: \u0026quot;есть же topcoder marathon!\u0026quot; и будет, в принципе, прав. Там задачи неформатые и очень интересные. Но не каждый сможет выделить хотя бы пару дней на решение одной задачи, не говоря уже о неделе или двух.\u003cbr /\u003e\u003c/div\u003e\u003c/div\u003e","tags":["acm-icpc","challenge24","marathon","задачи","синдром","творчество","тимус","формат"]}}