{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1264892388,"rating":12,"authorHandle":"OSt","modificationTimeSeconds":1264971581,"id":20,"title":"Math.sqrt() vs Math.hypot() или как находить расстояния.","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eЗдравствуйте. Продолжаю делиться своими наработками в области оценки   производительности реализаций некоторых вещей на Java.\u003c/p\u003e \u003cp\u003e \u003c/p\u003e \u003cp\u003eЧасто в задачах на геометрию приходится искать расстояние от одной   точки до другой.\u003c/p\u003e \u003cp\u003eЯ нашёл 2 способа:\u003c/p\u003e \u003cp\u003e1. Стандартный : \u003c/p\u003e \u003cp\u003edouble dx \u003d x1 - x2\u003cbr /\u003edouble dy \u003d y1 - y2\u003c/p\u003e \u003cp\u003edouble res \u003d  Math.sqrt(dx * dx + dy * dy);\u003c/p\u003e \u003cp\u003e2. Использование метода hypot() из модуля Math.\u003c/p\u003e \u003cp\u003edouble dx \u003d x1 - x2\u003cbr /\u003edouble dy \u003d y1 - y2\u003c/p\u003e \u003cp\u003edouble res  \u003d Math.hypot(dx, dy);\u003c/p\u003e \u003chr /\u003e \u003cp\u003eС первым всё предельно просто и понятно.\u003c/p\u003e \u003cp\u003eВторой же куда интересней и привлекательней, особенно если почитать о   нем в \u003ca href\u003d\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Math.html\"\u003ejavaDoc\u003c/a\u003e\u003c/p\u003e \u003cp\u003e\u0026quot;Returns sqrt(x\u003csup\u003e2\u003c/sup\u003e +y\u003csup\u003e2\u003c/sup\u003e) without intermediate   overflow or underflow.\u0026quot;\u003c/p\u003e \u003cp\u003eВроде о чудо - Sun создали очень хороший и грамотный метод для   вычисления подобных вещей.\u003c/p\u003e \u003cp\u003eНо как оказалось - есть не слабая ложка дёгтя в этой бочке мёда. Это   просто колоссальные временные затраты.\u003c/p\u003e \u003cp\u003eНиже приведу результаты работы программы, которая оценивала время   работы алгоритма для вычисления расстояний между точек:\u003c/p\u003e \u003cp\u003e(Тестовая машина  и софт такие же, как и в предыдущем посте.)\u003c/p\u003e \u003cp\u003e---With Hypot---\u003cbr /\u003eN Points \u003d 1000\u003cbr /\u003eRunTime\u003d1125   (millsec)\u003cbr /\u003e---With Sqrt---\u003cbr /\u003eN Points \u003d 1000\u003cbr /\u003eRunTime\u003d15 (millsec)\u003cbr /\u003e\u003c/p\u003e \u003cp\u003e---With Hypot---\u003cbr /\u003eN Points \u003d 3000\u003cbr /\u003eRunTime\u003d13578   (millsec)\u003cbr /\u003e---With Sqrt---\u003cbr /\u003eN Points \u003d 3000\u003cbr /\u003eRunTime\u003d47 (millsec)\u003c/p\u003e \u003cp\u003e---With Hypot---\u003cbr /\u003eN Points \u003d 6000\u003cbr /\u003eRunTime\u003d61063   (millsec)\u003cbr /\u003e---With Sqrt---\u003cbr /\u003eN Points \u003d 6000\u003cbr /\u003eRunTime\u003d406 (millsec)\u003cbr /\u003e\u003c/p\u003e \u003cp\u003e---With Hypot---\u003cbr /\u003eN Points \u003d 9000\u003cbr /\u003eRunTime\u003d135516   (millsec)\u003cbr /\u003e---With Sqrt---\u003cbr /\u003eN Points \u003d 9000\u003cbr /\u003eRunTime\u003d562 (millsec)\u003cbr /\u003e\u003c/p\u003e \u003cp\u003e---With Hypot---\u003cbr /\u003eN Points \u003d 10000\u003cbr /\u003eRunTime\u003d164141   (millsec)\u003cbr /\u003e---With Sqrt---\u003cbr /\u003eN Points \u003d 10000\u003cbr /\u003eRunTime\u003d797 (millsec)\u003cbr /\u003e\u003c/p\u003e \u003cp\u003eКак видно из результатов hypot() по времени отстаёт от sqrt() более   чем в 200 раз.\u003c/p\u003e \u003cp\u003eВывод : если вам нужна скорость - используйте стандартный метод, а   если возможен вариант с переполнением - то придётся раскошелиться на hypot().\u003c/p\u003e\u003c/div\u003e","tags":["hypot","java","sqrt"]}}