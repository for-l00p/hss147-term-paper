{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1284998834,"rating":12,"authorHandle":"Fefer_Ivan","modificationTimeSeconds":1284998850,"id":685,"title":"Codeforces Round 28 - tutorial","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e  \u003cstrong\u003eA. \u003ca href\u003d\"http://codeforces.ru/contest/28/problem/A\"\u003eBender Problem\u003c/a\u003e\u003c/strong\u003e\u003cbr /\u003e Solution by \u003ca href\u003d\"http://codeforces.ru/profile/Polichka\"\u003ePolichka\u003c/a\u003e\u003cbr /\u003e  Let\u0027s look at the first nail. If it is occupied by the fold place, then Bender will put next fold place on the third nail, then on fifth and so on. Else, is the first nail occupied by end, than second, fourth, sixth and so on nail will be occupied by the fold places.\u003cbr /\u003e  Let\u0027s see, if we can complete our polyline with the first nail, occupied by rhe fold place. It means we should check, if we have an unused pod with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e(\u003ci\u003enails\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e], \u003ci\u003enails\u003c/i\u003e[1]) + \u003ci\u003edist\u003c/i\u003e(\u003ci\u003enails\u003c/i\u003e[1], \u003ci\u003enails\u003c/i\u003e[2])\u003c/span\u003e. Then check the third nail and so on.\u003cbr /\u003e If we have completed the polyline, then we have an answer. Else repeat previous procedure, but starting from the second nail.\u003cbr /\u003e\u003cbr /\u003e  \u003cstrong\u003eB. \u003ca href\u003d\"http://codeforces.ru/contest/28/problem/B\"\u003epSort\u003c/a\u003e\u003c/strong\u003e\u003cbr /\u003e Solution by \u003ca href\u003d\"http://codeforces.ru/profile/Polichka\"\u003ePolichka\u003c/a\u003e\u003cbr /\u003e  Let\u0027s consider a graph. Vertexes will correspond to place of the permutation. Places will be connected by an edge if and only if we can swap theirs values. Our problem has a solution when for every i, vertex p[i] can be reached from vertex i.\u003cbr /\u003e\u003cbr /\u003e  \u003cstrong\u003eC. \u003ca href\u003d\"http://codeforces.ru/contest/28/problem/C\"\u003eBath Queue\u003c/a\u003e\u003c/strong\u003e\u003cbr /\u003e Solution by \u003ca href\u003d\"http://codeforces.ru/profile/Fefer\"\u003eFefer\u003c/a\u003e\u003cbr /\u003e  This problem is solved by dynamic programming\u003cbr /\u003e Consider the following dynamics: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e.\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e --- number of not yet processed students,\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e --- number of not yet processed rooms, \u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e --- maximum queue in the previous rooms.\u003cbr /\u003e  The value we need is in state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][\u003ci\u003em\u003c/i\u003e][0]\u003c/span\u003e. Let\u0027s conside some state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e and search through all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e from 0 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e students will go to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003eth room, than a probability of such event consists of factors: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e --- which students will go to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003eth room.\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e(1 / \u003ci\u003ej\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e· ((\u003ci\u003ej\u003c/i\u003e - 1) / \u003ci\u003ej\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e --- probability, that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e students will go to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003eth room,and the rest of them will go to the rooms from first to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e - 1\u003c/span\u003eth.\u003cbr /\u003e Sum for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eñ\u003c/i\u003e\u003c/span\u003e from 0 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e values of\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e(1 / \u003ci\u003ej\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e· ((\u003ci\u003ej\u003c/i\u003e - 1) / \u003ci\u003ej\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e· \u003ci\u003eC\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e· \u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e - 1][\u003ci\u003emx\u003c/i\u003e]\u003c/span\u003e. Do not forget to update maximum queue value and get the accepted.\u003cbr /\u003e \u003cbr /\u003e  \u003cstrong\u003eD. \u003ca href\u003d\"http://codeforces.ru/contest/28/problem/D\"\u003eDo not fear, DravDe is kind\u003c/a\u003e\u003c/strong\u003e\u003cbr /\u003e Solution by \u003ca href\u003d\"http://codeforces.ru/profile/RAD\"\u003eRAD\u003c/a\u003e\u003cbr /\u003e  Let\u0027s split all trucks into different classes by the sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Answer sequence consists of trucks from only one class, so let\u0027s solve problem for different classes independently.\u003cbr /\u003e Let\u0027s loop through trucks from fixed class in the order, then follow in the motorcade and update values in dynamics \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e - maximum profit we can get, if last truck has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e  Truck with number i can update two values:\u003cbr /\u003e it can update value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e with value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e] + \u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. It means this truck continued some motorcade, started from some previous truck.\u003cbr /\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e it can update value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. It means this truck started motorcade. Answer will be in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[0]\u003c/span\u003e\u003cbr /\u003e  To restore the trucks included in the answer, we can keep with the maximal sum in z the index of last truck that updated this sum.  Also we store the ancestor p for each truck that updated something in z. This ancestor is calculated when we consider i-th truck and doesn\u0027t change further: p[i] \u003d -1  if truck i became beginning of the motorcade, otherwise p[i] \u003d last truck that updated \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e. We start restore of the answer from last truck updated z[0]. After that we restore everything using only p.  \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eE. \u003ca href\u003d\"http://codeforces.ru/contest/28/problem/E\"\u003eDravDe saves the world\u003c/a\u003e\u003c/strong\u003e\u003cbr /\u003e Solution by \u003ca href\u003d\"http://codeforces.ru/profile/Gerald\"\u003eGerald\u003c/a\u003e\u003cbr /\u003e Problem by \u003ca href\u003d\"http://codeforces.ru/profile/RAD\"\u003eRAD\u003c/a\u003e\u003cbr /\u003e  Let\u0027s look at geometrical locus where DravDe can land. It can be eigher an angle or a line(half-line).\u003cbr /\u003e  1. Locus is an angle if and only if projection of vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e and vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e on Oxy plane is not collinear.  This angle is easy to calculate. Angular vertex is DravDe starting point and one of half-lines is collinear with place speed vector projection. Second half-line is easy to calculate:\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eV\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/sub\u003e· \u003ci\u003etv\u003c/i\u003e + \u003ci\u003eU\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/sub\u003e· \u003ci\u003etu\u003c/i\u003e \u003d 0\u003c/span\u003e\u003cbr /\u003e                      \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eV\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e· \u003ci\u003etv\u003c/i\u003e + \u003ci\u003eU\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e· \u003ci\u003etu\u003c/i\u003e \u003d \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eV\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e· \u003ci\u003etv\u003c/i\u003e + \u003ci\u003eU\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e· \u003ci\u003etu\u003c/i\u003e \u003d \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u003cbr /\u003e where A - starting point, B - landing point. Consider tv equal to 1 and calculate tu from first equation. From second and third calculate point B. This point lies on the second half-line of the angle.\u003cbr /\u003e  2. If plane speed projection and wind speed projection is collinear, locus is half-line or line, depending on the difference between this two speeds.\u003cbr /\u003e  If the answer exist, than polygon and locus have at least onecommon point. And t1 and t2 is minimal on edge points. So now let\u0027s cross all segments with locus, calculate t1 and t2 for each intersection point and select minimal answer.  Thank you for your participation. Good luck with upsolving and incoming contests. Luck - is very useful and it is good to have it.\u003cbr /\u003e With best regards, Ivan.\u003cbr /\u003e                                                              \u003c/p\u003e\u003c/div\u003e","tags":["tutorial"]}}