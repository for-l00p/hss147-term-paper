{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1287233640,"rating":3,"authorHandle":"sevenkplus","modificationTimeSeconds":1287233640,"id":757,"title":"[GCJ Sol.]0103 08SEP Practice Contest","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv\u003eAuthor: sevenkplus\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003e0103\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003e08SEP\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003ePractice Contest\u003c/div\u003e\u003cdiv\u003e3 Problems\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eA. Old Magician\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eProblem:\u003c/div\u003e\u003cdiv\u003eThere are W white balls and B black balls. Once, the magician removes two balls. If the balls are in the same color, he will put back one white ball. Otherwise, he will put back a black ball. He does this until there is only one ball. Given W and B, we are to determine the color of the last ball.\u003c/div\u003e\u003cdiv\u003eLimits:\u003c/div\u003e\u003cdiv\u003e0\u0026lt;N≤1000\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003eW+B\u0026gt;0\u003c/div\u003e\u003cdiv\u003eSmall dataset:\u003c/div\u003e\u003cdiv\u003e0≤W≤1000\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003e0≤B≤1000\u003c/div\u003e\u003cdiv\u003eLarge dataset:\u003c/div\u003e\u003cdiv\u003e0≤W≤10^9\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003e0≤B≤10^9\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eAnalysis:\u003c/div\u003e\u003cdiv\u003eSmall dataset:\u003c/div\u003e\u003cdiv\u003eLarge dataset:\u003c/div\u003e\u003cdiv\u003eConsider the 3 types of operations:\u003c/div\u003e\u003cdiv\u003e(1)\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003eTake out two black balls. \u003c/div\u003e\u003cdiv\u003e\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003eThe number of black balls will decrease by 2, and the number of white balls will increase by 1.\u003c/div\u003e\u003cdiv\u003e(2)\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003eTake out two white balls.\u003c/div\u003e\u003cdiv\u003e\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003eThe number of white balls will decrease by 1.\u003c/div\u003e\u003cdiv\u003e(3)\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003eTake out one black ball and one white ball.\u003c/div\u003e\u003cdiv\u003e\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003eThe number of white balls will decrease by 1.\u003c/div\u003e\u003cdiv\u003eWe can see that during the process, the parity of the number of black balls never changes. So if B is even, the last ball cannot be black. If B is odd, the last ball must be black.\u003c/div\u003e\u003cdiv\u003eThe time complexity is O(1). The space complexity is O(1).\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003ePrograms:\u003c/div\u003e\u003cdiv\u003eSmall dataset:\u003c/div\u003e\u003cdiv\u003eLarge dataset:\u003c/div\u003e\u003cdiv\u003e/08SEP/A.pas\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eB. Square Fields\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eProblem:\u003c/div\u003e\u003cdiv\u003eGiven n points in the plane. We are to cover the points with k same-size squares whose edges are parallel to the coordinate axes. Find the minimum size.\u003c/div\u003e\u003cdiv\u003eLimits:\u003c/div\u003e\u003cdiv\u003e0≤coordinates\u0026lt;64000\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003e1≤N≤10\u003c/div\u003e\u003cdiv\u003eSmall dataset:\u003c/div\u003e\u003cdiv\u003e1≤k\u0026lt;n≤7\u003c/div\u003e\u003cdiv\u003eLarge dataset:\u003c/div\u003e\u003cdiv\u003e1≤k\u0026lt;n≤15\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eAnalysis:\u003c/div\u003e\u003cdiv\u003eSmall dataset:\u003c/div\u003e\u003cdiv\u003eUsing brute-force search is enough.\u003c/div\u003e\u003cdiv\u003eLarge dataset:\u003c/div\u003e\u003cdiv\u003eAs the limits are still small, we can think of state compression dynamic programming. Binary searching the answer M and defining state f[k,S] as whether we can use k same suaqres with length M to cover the points in set S, we can find it easy to do state transition.\u003c/div\u003e\u003cdiv\u003eThe time complexity is O(2^n*n^3*k*log ANS) and the space complexity is O(k*2^n) with rather basic implementation.\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003ePrograms:\u003c/div\u003e\u003cdiv\u003eSmall dataset:\u003c/div\u003e\u003cdiv\u003eLarge dataset:\u003c/div\u003e\u003cdiv\u003e/08SEP/B.pas\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eFuther idea:\u003c/div\u003e\u003cdiv\u003eMaybe we can binary search the answer and use greedy or similar algorithms to validate it. It is known that when n≤3, greedy is rather easy.\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eC. Cycles\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eProblem:\u003c/div\u003e\u003cdiv\u003eThere is an complete undirected graph A with n nodes. We delete k undirected edges (x,y) from A and get another graph B. Calculate the number of Hamiltonian cycles in B.\u003c/div\u003e\u003cdiv\u003eLimits:\u003c/div\u003e\u003cdiv\u003e1≤N≤10\u003cspan style\u003d\"white-space: pre;\"\u003e \u003c/span\u003e0≤k≤15\u003c/div\u003e\u003cdiv\u003eSmall dataset:\u003c/div\u003e\u003cdiv\u003e3≤n≤10\u003c/div\u003e\u003cdiv\u003eLarge dataset:\u003c/div\u003e\u003cdiv\u003e3≤n≤300\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003eAnalysis:\u003c/div\u003e\u003cdiv\u003eSmall dataset:\u003c/div\u003e\u003cdiv\u003eEasily solved with state compression dynamic programming.\u003c/div\u003e\u003cdiv\u003eLarge dataset:\u003c/div\u003e\u003cdiv\u003eWe cannot easily get the number of Hamiltonian cycles that EXCLUDES some edges, but we can get the number of Hmiltonian cycles that INCLUDES some edges and use inclusion–exclusion principle to get the answer.\u003c/div\u003e\u003cdiv\u003eHow to get the number of Hmiltonian cycles that includes some edges? We can construct a graph that contains the edges. If one or more of the nodes has degree larger than 2 then the number is 0. If there are cycles in the graph the number is easy to get. Otherwise the graph is made up of some chains. The number is also not hard to get.\u003c/div\u003e\u003cdiv\u003eWe must output the answer mod 9901, but during the calculation, we must divides 2*n. Note that 9901 is a prime, we can use 1/n≡n^(p-2) (mod p) when p is prime. We can also mod 2*n*p during calculation.\u003c/div\u003e\u003cdiv\u003e\u003cbr /\u003e\u003c/div\u003e\u003cdiv\u003ePrograms:\u003c/div\u003e\u003cdiv\u003eSmall dataset:\u003c/div\u003e\u003cdiv\u003e/08SEP/Cs.pas\u003c/div\u003e\u003cdiv\u003eLarge dataset:\u003c/div\u003e\u003cdiv\u003e/08SEP/Cl.pas\u003c/div\u003e\u003c/div\u003e","tags":["gcj","solution"]}}