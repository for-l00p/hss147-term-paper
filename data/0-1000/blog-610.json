{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1281995827,"rating":24,"authorHandle":"slycelote","modificationTimeSeconds":1282030511,"id":610,"title":"Codeforces Beta Round #26 tutorial","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003eA. \u003ca href\u003d\"../../../contest/26/problem/A\"\u003eAlmost Prime        \u003c/a\u003e\u003c/h3\u003eThis is a straightforward implementation problem: factor every number from 1 to n into product of primes and count the number of distinct prime divisors.\u003cbr /\u003e\u003cbr /\u003e\u003ch3\u003eB. \u003ca href\u003d\"../../../contest/26/problem/B\"\u003eRegular Bracket Sequence        \u003c/a\u003e\u003c/h3\u003eRead the string from left to right and calculate the balance of brackets at each step (i.e., the difference between the number of \u0026quot;(\u0026quot; and \u0026quot;)\u0026quot; characters written out). We need to keep this balance non-negative. Hence, every time when the balance equals 0 and we read the \u0026quot;)\u0026quot; character, we must omit it and not write it out. The answer to the problem is twice the number of \u0026quot;)\u0026quot; characters that we wrote out.\u003cbr /\u003e\u003cbr /\u003e\u003ch3\u003eC. \u003ca href\u003d\"../../../contest/26/problem/C\"\u003eParquet        \u003c/a\u003e\u003c/h3\u003eWe\u0027ll derive several necessary conditions for the parquet to be possible. If some of them is not fulfilled, the answer is \u0026quot;IMPOSSIBLE\u0026quot;.\u003cbr /\u003e\u003cb\u003e1.\u003c/b\u003e m*n must be even, because it equals the total area of the parquet, and the area of each plank is even.\u003cbr /\u003e\u003cb\u003e2.\u003c/b\u003e Suppose m (the number of columns) is odd. Paint the living room in two colors — black and white — in the following way: the first column is black, the second one is white, the third one is black, ..., the last one is black. The number of black squares is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e greater than the number of white squares. The planks 1x2 and 2x2 contain an equal number of black and white squares, so we must compensate the difference with 2x1 planks, and their number must be at least n/2. In this case we can parquet the last column with these planks, decrease \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e by n/2 and decrease \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e by one.\u003cbr /\u003e\u003cb\u003e3.\u003c/b\u003e If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is odd, then by similar reasoning \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≥ \u003ci\u003em\u003c/i\u003e / 2\u003c/span\u003e.\u003cbr /\u003e\u003cb\u003e4.\u003c/b\u003e Now \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e are even. A similar reasoning shows that the number of 1x2 planks used must be even, and the number of 2x1 planks used must be even. So, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is odd, we decrease it by 1, and the same with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e\u003cb\u003e5.\u003c/b\u003e Now we must have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emn\u003c/i\u003e ≤ 2\u003ci\u003ea\u003c/i\u003e + 2\u003ci\u003eb\u003c/i\u003e + 4\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, because otherwise the total area of planks would not be enough.\u003cbr /\u003e\u003cb\u003e6.\u003c/b\u003e If all the conditions were fulfilled, we can finish the parquet: divide it into 2x2 squares, and use one 2x2 plank, two 1x2 planks, or two 2x1 planks to cover each square.\u003cbr /\u003e\u003cbr /\u003e\u003ch3\u003eD. \u003ca href\u003d\"../../../contest/26/problem/D\"\u003eTickets        \u003c/a\u003e\u003c/h3\u003eIf we picture the graph of the number of 10-euro banknotes, it will be a broken line, starting at the point (0, k) and ending at the point (m+n, n+k-m). Exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e segments on the line are \u0027going down\u0027, and other \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e segments are \u0027going up\u0027. Hence the total number of possible graphs is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e + \u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e (the binomial coefficient). We need to find out the number of graphs which don\u0027t go under the X axis. To do that, we\u0027ll calculate the complementary number: the number of graphs which go under the X axis, or, equivalently, intersect the line y\u003d-1. \u003cbr /\u003e\u003cbr /\u003eHere we\u0027ll use the so-called \u0027reflection principle\u0027. Consider any graph that intersects the line y\u003d-1, and take the last point of intersection. Reflect the part of the graph from this point to the end with respect to the line y\u003d-1. We\u0027ll have a new graph, ending at the point \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003em\u003c/i\u003e + \u003ci\u003en\u003c/i\u003e,  - 2 - \u003ci\u003en\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e. Conversely, any graph ending at this point will intersect the line y\u003d-1, and we can apply the same operation to it. Hence, the number of graphs we\u0027re interested in equals the number of graphs starting at the point \u003cspan class\u003d\"tex-span\"\u003e(0, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e and ending at the point \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003em\u003c/i\u003e + \u003ci\u003en\u003c/i\u003e,  - 2 - \u003ci\u003en\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e be the number of segments in such a graph which go up and down, respectively. Then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e \u003d \u003ci\u003em\u003c/i\u003e + \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e - \u003ci\u003eb\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e \u003d  - 2 - \u003ci\u003en\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e\u003c/span\u003e. It follows that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003em\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e, and there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e + \u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e - 1)\u003c/span\u003e such graphs. \u003cbr /\u003e\u003cbr /\u003eSo, the probability that the graph will go down the X axis is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e + \u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e - 1) / \u003ci\u003eC\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e + \u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e) \u003d (\u003ci\u003em\u003c/i\u003e!\u003ci\u003en\u003c/i\u003e!) / ((\u003ci\u003en\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e + 1)!(\u003ci\u003em\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e - 1)!) \u003d (\u003ci\u003em\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e - 1)... (\u003ci\u003em\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e)) / ((\u003ci\u003en\u003c/i\u003e + 1)(\u003ci\u003en\u003c/i\u003e + 2)... (\u003ci\u003en\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e + 1))\u003c/span\u003e. The answer to the problem is \u003cspan class\u003d\"tex-span\"\u003e1 - (\u003ci\u003em\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e - 1)... (\u003ci\u003em\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e)) / ((\u003ci\u003en\u003c/i\u003e + 1)(\u003ci\u003en\u003c/i\u003e + 2)... (\u003ci\u003en\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e + 1))\u003c/span\u003e.\u003cbr /\u003e\u003cbr /\u003e\u003ch3\u003eE. \u003ca href\u003d\"../../../contest/26/problem/E\"\u003eMultithreading        \u003c/a\u003e\u003c/h3\u003eIt\u0027s clear that we must have \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ew\u003c/i\u003e ≤ \u003ci\u003eΣ\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. If this condition is true, we show how to achieve the desired result in the following cases:\u003cbr /\u003e\u003cb\u003e1.\u003c/b\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 1, \u003ci\u003ew\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e. Obvious.\u003cbr /\u003e\u003cb\u003e2.\u003c/b\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e ≥ 2, \u003ci\u003ew\u003c/i\u003e ≥ 2\u003c/span\u003e. For \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e \u003d 2\u003c/span\u003e, the schedule is the following: 1, all loops of processes 3..N, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - 1\u003c/span\u003e loops of the second process, 1, 2, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - 1\u003c/span\u003e loops of the first process, 2. For \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e \u0026gt; 2\u003c/span\u003e, we just need to move several loops from the middle of the sequence to the end.\u003cbr /\u003e\u003cb\u003e3.\u003c/b\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e ≥ 2, \u003ci\u003ew\u003c/i\u003e \u003d 1\u003c/span\u003e, and there exists an index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 1\u003c/span\u003e. Then the schedule is the following: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, all loops of other processes, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e\u003cbr /\u003eNow we\u0027ll show that in any other case the result \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e is impossible. The case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 1, \u003ci\u003ew\u003c/i\u003e ≠ \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e is obvious. We have one more case left: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e ≥ 2, \u003ci\u003ew\u003c/i\u003e \u003d 1\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; 1\u003c/span\u003e for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Suppose that there exists a schedule which results in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e \u003d 1\u003c/span\u003e. Consider the last writing operation in this schedule; suppose it is executed by the process \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Then the corresponding reading operation should have read the value y\u003d0. This means that there were no writing operations before. But this is impossible, since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; 1\u003c/span\u003e, and this process executed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1\u003c/span\u003e read/write loops.\u003c/div\u003e","tags":["cf beta round #26","reflection principle","tutorial"]}}