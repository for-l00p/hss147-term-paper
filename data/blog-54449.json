{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1505053583,"rating":4,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1505053583,"id":54449,"title":"\u003cp\u003eNotes on Codeforces Beta Round #76, Div2-A, B, C, D, E, Div1-E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/94/problem/A\" title\u003d\"Codeforces Beta Round 76 (Div. 2 Only)\"\u003e94A - Restoring Password\u003c/a\u003e\u003c/p\u003e\u003cp\u003eA simple problem with straightforward solution. Divide the given string into 8 parts with the same length 10, and convert each of them to a decimal digit according to the provided mapping relationship.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/94/problem/B\" title\u003d\"Codeforces Beta Round 76 (Div. 2 Only)\"\u003e94B - Friends\u003c/a\u003e\u003c/p\u003e\u003cp\u003eGenerate all the feasible \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e5\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e\u003c/span\u003e patterns, and check whether there exist any three people that are either known or unknown to each other. The mutual relationship can be represented by the connectivity of graph.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/94/problem/C\" title\u003d\"Codeforces Beta Round 76 (Div. 2 Only)\"\u003e94C - Frames\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is a horrible problem...There are a huge number of cases that should be considered. One of the cases that is likely to be ignored is shown as follows:\u003c/p\u003e\u003cp\u003eSuppose that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e \u003d 4, \u003ci\u003en\u003c/i\u003e \u003d 100\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d 3, \u003ci\u003eb\u003c/i\u003e \u003d 10\u003c/span\u003e. One might give \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e as the answer. However the answer should be \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, since we can first select \u003cspan class\u003d\"tex-span\"\u003e3, 4, 7, 8\u003c/span\u003e, and then select \u003cspan class\u003d\"tex-span\"\u003e5, 6, 9, 10\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/94/problem/D\" title\u003d\"Codeforces Beta Round 76 (Div. 2 Only)\"\u003e94D - End of Exams\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIt turns out that greedy algorithm solves this problem. Assume that we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e segment lines with the same length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e, and we put them one after another, i.e., the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th one starts from the end of the previous one. Next, we have another \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e segment lines with the same length \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/95/be/95be6833a41015b41a8a14ef249fb7514d75695d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and also put them in the same manner as mentioned above. \u003c/p\u003e\u003cp\u003eFor each segment line with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e, we check whether it contains more than two segment lines with length \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/95/be/95be6833a41015b41a8a14ef249fb7514d75695d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. If yes, the answer is NO; otherwise we can further calculate the “contents” in each cup by checking what are included in each of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e segment lines.\u003c/p\u003e\u003cp\u003eNote that if we use “float” types, we may fail obtaining sufficiently precise results, especially under some weird cases. The best choice is to replace all the division with an equivalent multiplication.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/94/problem/E\" title\u003d\"Codeforces Beta Round 76 (Div. 2 Only)\"\u003e94E - Azembler\u003c/a\u003e \u003c/p\u003e\u003cp\u003eAt first, I consider using DP to solve this problem. For instance, we can use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e to denote the minimum number of operations to obtain the integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. We can find out all pairs of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e and coefficients \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 1, 2, 4, 8\u003c/span\u003e so that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d \u003ci\u003ei\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e × \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e holds and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e] \u003d \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] + \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] + 1\u003c/span\u003e. However, this fails since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e are dependent under some cases. For instance \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 138\u003c/span\u003e, and the optimal decomposition is \u003cspan class\u003d\"tex-span\"\u003e138 \u003d 2 + 8 × 17\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e17 \u003d 1 + 8 × 2\u003c/span\u003e. Here \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[17] \u003d 2\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[2] \u003d 1\u003c/span\u003e, and thus \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[138] \u003d 4\u003c/span\u003e. However the optimal answer should be \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e since after we obtain \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, the number of operations to obtain \u003cspan class\u003d\"tex-span\"\u003e17\u003c/span\u003e is reduced to \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e instead of \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIt turns out that this problem can be solved by using DFS with powerful branch and bound tricks. In detail, we just keep generating values by using the values that have already been calculated, and assign them to the registers that have not been consumed. When all the registers have been used or we have got the target value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, the call of DFS function should be terminated immediately to significantly reduce the comlexity.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/93/problem/E\" title\u003d\"Codeforces Beta Round 76 (Div. 1 Only)\"\u003e93E - Lostborn\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAt first we derive the recursive formula. We use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e)[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e to denote the target value. Suppose that we have obtained \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e)[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e, and to calculate the target value, we should further delete the integers which are divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e. These integers have form \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e × \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, but \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e is not divisible by any \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, since we have chosen them in such a manner. Moreover, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b8/90/b8909e85e46ae599aba190a6f80fdbd2306211a6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e holds, and thus \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e)[\u003ci\u003en\u003c/i\u003e] \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e)[\u003ci\u003en\u003c/i\u003e] - \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e)[\u003ci\u003en\u003c/i\u003e / \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e]\u003c/span\u003e, where “/” denotes the integer division.\u003c/p\u003e\u003cp\u003eWith the above formula, we can compute the result based on DFS. For small \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e)[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e in previous to reduce the search complexity. Furthermore, we can sort \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e in a decreasing order in order to decrease “n” as fast as possible, for each call of DFS.\u003c/p\u003e\u003c/div\u003e","tags":[]}}