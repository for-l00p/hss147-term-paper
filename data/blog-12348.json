{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1400514047,"rating":16,"authorHandle":"Aksenov239","modificationTimeSeconds":1400517976,"id":12348,"title":"\u003cp\u003eRCC 2014 Qual 2 — Разбор задач\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv\u003e     \u003ch2\u003eЗадача A. Командная олимпиада.\u003c/h2\u003e     \u003cb\u003eИдея:\u003c/b\u003e Виталий Аксенов.\u003cbr /\u003e     \u003cb\u003eРеализация:\u003c/b\u003e Андрей Комаров.\u003cbr /\u003e     \u003cb\u003eРазбор:\u003c/b\u003e Виталий Аксенов.\u003cbr /\u003e     \u003cp\u003e       Самое логичное в задаче сразу перебрать количество задач первого типа, которые решил Вася. Пусть он решил \u003ci\u003evn\u003c/i\u003e задач первого типа,     тогда очевидно, что максимальное количество задач второго типа \u003ci\u003evm\u003c/i\u003e, которое мог решить Вася за олимпиаду, равно \u003ci\u003e(n-vn·p)/q\u003c/i\u003e.     Итого, у нас осталось \u003ci\u003en-vn\u003c/i\u003e задач первого типа и \u003ci\u003em — vm\u003c/i\u003e задач второго. Нужно не забыть сравнить эти количество с нулём.     \u003c/p\u003e     \u003cp\u003e     Посчитаем, какое максимальное число задач первого типа и второго типа можно решить за олимпиаду. Первого типа      получается \u003ci\u003emaxn\u003dt/p\u003c/i\u003e, а второго типа     — \u003ci\u003emaxm\u003dt/q\u003c/i\u003e. Благодаря подсчитанным значениям, несложно уже посчитать ответ:      1 + \u003ci\u003e(n — vn + maxn — \u003c/i\u003e1\u003ci\u003e) / maxn + (m — vm + maxm — \u003c/i\u003e1\u003ci\u003e) / maxm\u003c/i\u003e.     \u003c/p\u003e     \u003ch2\u003eЗадача B. Три ладьи.\u003c/h2\u003e     \u003cb\u003eИдея:\u003c/b\u003e Георгий Корнеев.\u003cbr /\u003e     \u003cb\u003eРеализация:\u003c/b\u003e Демид Кучеренко.\u003cbr /\u003e     \u003cb\u003eРазбор:\u003c/b\u003e Виталий Аксенов.\u003cbr /\u003e     \u003cp\u003e     Заметим, что расставлять ладьи можно только в квадрате 3 на 3. Любая другая расстановка сводится к этой переносом     ладей. Существует два различных решения. Первое из которых просто перебирает все возможные расстановки трёх ладей в квадрате 3 на 3.     \u003c/p\u003e     \u003cp\u003e     Либо можно рассмотреть все различные варианты взаимных расстановок 3 ладей:     \u003c/p\u003e\u003cul\u003e     \u003cli\u003e(1, 1), (2, 2), (3, 3). Бьют 3 · \u003ci\u003en\u003c/i\u003e + 3 · \u003ci\u003em\u003c/i\u003e — 12 клеток.\u003c/li\u003e     \u003cli\u003e(1, 1), (1, 2), (2, 3). Бьют 2 · \u003ci\u003em\u003c/i\u003e + 3 · \u003ci\u003en\u003c/i\u003e — 9 клеток.\u003c/li\u003e     \u003cli\u003e(1, 1), (2, 1), (3, 2). Бьют 3 · \u003ci\u003em\u003c/i\u003e + 2 · \u003ci\u003en\u003c/i\u003e — 9 клеток.\u003c/li\u003e     \u003cli\u003e(1, 1), (1, 2), (2, 1). Бьют 2 · \u003ci\u003en\u003c/i\u003e + 2 · \u003ci\u003em\u003c/i\u003e — 7 клеток.\u003c/li\u003e     \u003cli\u003e(1, 1), (1, 2), (1, 3). Бьют \u003ci\u003em\u003c/i\u003e + 3 · \u003ci\u003en\u003c/i\u003e — 6 клеток.\u003c/li\u003e     \u003cli\u003e(1, 1), (2, 1), (3, 1). Бьют \u003ci\u003en\u003c/i\u003e + 3 · \u003ci\u003em\u003c/i\u003e- 6 клеток.\u003c/li\u003e     \u003c/ul\u003e          Во всех других случаях нужно выводить «IMPOSSIBLE».          \u003ch2\u003eЗадача C. Король и королева.\u003c/h2\u003e     \u003cb\u003eИдея:\u003c/b\u003e Виталий Демьянюк.\u003cbr /\u003e     \u003cb\u003eРеализация:\u003c/b\u003e Павел Кротков.\u003cbr /\u003e     \u003cb\u003eРазбор:\u003c/b\u003e Павел Кротков.\u003cbr /\u003e     \u003cp\u003e     Заметим, что максимальное количество регионов на доске равно восьми. Научимся находить размер одного из них,      а размеры всех остальных найдем, отразив и повернув доску несколько раз.     \u003c/p\u003e     \u003cp\u003e     Пусть королева стоит в клетке с координатами (\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e), строки и столбцы нумеруются с нуля,      и мы хотим научиться находить размер региона, расположенного левее вертикали, на которой расположен ферзь,      и выше диагонального луча, выпущенного налево вверх из клетки, в которой стоит королева. Заметим, что в случае,      если этот луч упирается в верхний край доски (\u003ci\u003ex\u003c/i\u003e ≥ \u003ci\u003ey\u003c/i\u003e) , то ответом будет являться сумма всех чисел от      одного до \u003ci\u003ex\u003c/i\u003e — 1. В противном же случае из этой величины необходимо вычесть количество клеток, которые были бы биты королевой,      если бы не край доски. Количество таких клеток равно сумме всех чисел от одного до \u003ci\u003ex\u003c/i\u003e-\u003ci\u003ey\u003c/i\u003e-1.     \u003c/p\u003e     \u003ch2\u003eЗадача D. Дерево.\u003c/h2\u003e     \u003cb\u003eИдея:\u003c/b\u003e Анна Малова.\u003cbr /\u003e     \u003cb\u003eРеализация:\u003c/b\u003e Артём Васильев.\u003cbr /\u003e     \u003cb\u003eРазбор:\u003c/b\u003e Виталий Аксёнов.\u003cbr /\u003e     \u003cp\u003e     Дано дерево, которое нужно получить из одной вершины двумя операциями: отрезать ребро и добавить 2 вершины к листу.     Чтобы решить данную задачу первым делом проверим, есть ли вершина степени не менее 4. Если она есть, то дерево получить нельзя.     \u003c/p\u003e     \u003cp\u003e     В любом другом случае дерево построить можно. Для этого посчитаем количество вершин \u003ci\u003ev\u003c/i\u003e2 степени 2 и \u003ci\u003ev\u003c/i\u003e3 степени 3. Если есть вершина степени 2, то при выборе её начальной мы построим дерево за (\u003ci\u003ev\u003c/i\u003e2 — 1)·2+(\u003ci\u003ev\u003c/i\u003e3 + 1), иначе число действий равно (\u003ci\u003ev\u003c/i\u003e2 + 1)·2+\u003ci\u003ev\u003c/i\u003e3. Это верно потому что для получения внутренней вершину степени 3, нужно применить одну операцию второго типа, а для получения внутренней вершины степени 2 нужно применить 2 операции.      \u003c/p\u003e     \u003ch2\u003eЗадача E. Налог на проезд.\u003c/h2\u003e     \u003cb\u003eИдея:\u003c/b\u003e Борис Минаев.\u003cbr /\u003e     \u003cb\u003eРеализация:\u003c/b\u003e Борис Минаев.\u003cbr /\u003e     \u003cb\u003eРазбор:\u003c/b\u003e Борис Минаев.\u003cbr /\u003e     \u003cp\u003e       Заметим, что полученный от налогов доход всегда четен, так как для любой пары городов        существует два жителя, которые собираются проехать по пути, который их соединяет.      \u003c/p\u003e     \u003cp\u003e     Посчитаем для каждой дороги количество путей, которые через нее проходят. Для этого необходимо      перемножить количество вершин в двух компонентах, на которые разбивается дерево при удалении      ребра. Чтобы посчитать общий доход, необходимо просуммировать по всем дорогам произведение стоимости проезда по этой дороге на величину, которую мы только что посчитали.      \u003c/p\u003e          Посчитаем доход, который получит президент, если на всех дорогах цены на проезд будут минимально возможными. Вычтем эту сумму из необходимой. Если мы получили отрицательное число, то не существует ни одного удовлетворяющего набора налогов. Заметим, что если мы получили неотрицательное число, то общее количество дорог не превышает 600.          \u003cp\u003e      Теперь нам необходимо решить некоторую модификацию задачи о рюкзаке.       Она решается методом динамического программирования. Будем рассматривать все дороги по очереди.       Также будем поддерживать количество способов собрать некоторую сумму денег, используя только некоторый префикс дорог.       Рассмотрим более подробно, как обрабатывать очередную дорогу. Пусть увеличение налога на проезд       по этой дороге добавляет \u003ci\u003ec\u003c/i\u003e денежных единиц в общую прибыль, а цена за проезд по дороге       может находится в пределах от 0 до \u003ci\u003emax\u003c/i\u003e. Как узнать, сколько существует способов получить суммарный доход       ровно \u003ci\u003em\u003c/i\u003e? На самом деле это количество совпадает с количеством способов получить суммарную прибыль \u003ci\u003em\u003c/i\u003e — \u003ci\u003ec\u003c/i\u003e       за исключением двух слагаемых. Эти слагаемые соответствует тому, что мы можем назначить стоимость       проезда равную 0, но не можем \u003ci\u003emax\u003c/i\u003e + 1. То есть каждое значение динамического программирования можно посчитать       с помощью трех уже посчитанных значений. Таким образом, очередную дорогу можно обработать за       \u003ci\u003eO\u003c/i\u003e(\u003ci\u003eMAX\u003c/i\u003e), где \u003ci\u003eMAX\u003c/i\u003e — прибыль, которую хочет получить президент.     \u003c/p\u003e \u003c/div\u003e\u003c/div\u003e","tags":["rcc2014","qr2","editorial"]}}