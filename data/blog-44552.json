{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1461610949,"rating":-1,"authorHandle":"fresher96","modificationTimeSeconds":1461620535,"id":44552,"title":"\u003cp\u003eneed help in 668D complexity\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/668/problem/D\"\u003eproblem\u003c/a\u003e\u003c/p\u003e\u003cp\u003ei think the intended solution for this problem is O(n lg^2(n))\u003c/p\u003e\u003cp\u003ei used fenwick tree and two multi sets in each node to represent the number of additions and deletion of each number in the input data. i think the complexity of this solution is O(n lg^2(n)) which is pretty much acceptable by problem constrains. however, this solution gets TL on test #11\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/668/submission/17513905\"\u003elink\u003c/a\u003e\u003c/p\u003e\u003cp\u003eafter seeing other fenwick tree based solutions i noticed that the difference is using one map instead of two multi sets. i rewrote the code and indeed it was accepted!\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/668/submission/17514787\"\u003elink\u003c/a\u003e\u003c/p\u003e\u003cp\u003ecan anybody help me with this issue. i don\u0027t know where i have gone wrong. switching set to map reduced a TL to a 420 ms AC solution. any help would be appreciated.\u003c/p\u003e\u003cp\u003ebtw, what\u0027s the problem with codeforces judging system. it seems to be significantly slow.\u003c/p\u003e\u003c/div\u003e","tags":["help","stl","somthing weird"]}}