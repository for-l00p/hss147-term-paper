{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1418501858,"rating":65,"authorHandle":"matrix","modificationTimeSeconds":1418595247,"id":15148,"title":"\u003cp\u003eCodeforces Round #282 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/495/problem/A\" title\u003d\"Codeforces Round 282 (Div. 2)\"\u003e495A - Digital Counter\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFor each digit \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e you can count the number of digits \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e that because of some broken sticks \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is shown instead of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e by hand. for example when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d 3\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e can be \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e8\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e9\u003c/span\u003e. Let\u0027s denote this number by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Then if the input is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exy\u003c/i\u003e\u003c/span\u003e (the first digit shown in the counter is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and the second is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e) the answer will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e × \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/495/problem/B\" title\u003d\"Codeforces Round 282 (Div. 2)\"\u003e495B - Modular Equations\u003c/a\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e then there is no answer since \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/50/e4/50e4f4edd7c4921d884039d1e8f0136193cb0166.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/li\u003e   \u003cli\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e can be any integer larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. so there are infinite number of answers to the equation.\u003c/li\u003e   \u003cli\u003eThe only remaining case is when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u0026gt; \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Suppose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is an answer to our equation. Then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e|\u003ci\u003ea\u003c/i\u003e - \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Also since \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f5/1b/f51bed1f32b6c000518c1f920966628d5879013d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u0026lt; \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. These conditions are necessary and sufficient as well. So the answer is number of divisors of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e - \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e which are strictly greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e which can be solved in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/68/27/6827220bf6a5bc04ca405853f87b36fcdc1508a8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003ca href\u003d\"/contest/494/problem/A\" title\u003d\"Codeforces Round 282 (Div. 1)\"\u003e494A - Treasure\u003c/a\u003e\u003c/p\u003e\u003cp\u003eConsider a string consisting of \u0027(\u0027 and \u0027)\u0027 characters. Let\u0027s build the following sequence from this string:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u003d 0\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003efor each \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ |\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e + 1\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u0027(\u0027\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e - 1\u003c/span\u003e otherwise. (The string is considered as 1-based index).\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eIt can be proven that a string is beautiful if the following conditions are satisfied:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003efor each \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ei\u003c/i\u003e ≤ |\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≥ 0\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/sub\u003e \u003d 0\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eUsing the above fact we can prove that if in a beautiful string we remove a \u0027)\u0027 character and put it further toward the end of the string the resulting string is beautiful as well. These facts leads us to the following fact: if we can move a \u0027)\u0027 character further toward the end of string it is better if we\u0027d do it. This yields the following greedy solution:\u003c/p\u003e\u003cp\u003eWe\u0027ll first put exactly one \u0027)\u0027 character at each \u0027#\u0027 character. Then we\u0027ll build the sequence we described above. if the first condition isn\u0027t satisfied then there is no way that leads to a beautiful string. So the answer is -1. Otherwise we must put exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/sub\u003e\u003c/span\u003e more \u0027)\u0027 characters in the place of last \u0027#\u0027 character. Then if this string is beautiful we\u0027ll print it otherwise the answer is -1.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/494/problem/B\" title\u003d\"Codeforces Round 282 (Div. 1)\"\u003e494B - Obsessive String\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe call an index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e(1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ |\u003ci\u003es\u003c/i\u003e|)\u003c/span\u003e good if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e equals \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - |\u003ci\u003et\u003c/i\u003e| + 1\u003c/sub\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - |\u003ci\u003et\u003c/i\u003e| + 2\u003c/sub\u003e... \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. To find all good indexes let\u0027s define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as the length of longest prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e which is a suffix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e... \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. A good index is an index with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d |\u003ci\u003et\u003c/i\u003e|\u003c/span\u003e. Calculating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can be done using Knuth-Morris-Pratt algorithm. \u003c/p\u003e\u003cp\u003eLet\u0027s define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as the number of ways to choose some(at least one) non-overlapping substrings of the prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e... \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e) so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e is a substring of each one of them and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is in one the chosen substrings(So it must actually be the last character of last chosen substring). Then the answer will be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/af/dd/afdd3dcd953d56f001edac895793c0a8608d69e8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eAlso let\u0027s define two additional sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e2\u003c/span\u003e which will help us in calculating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/88/2e/882e30290e872d09f6e6e965860637c63e8ec4bc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9a/f1/9af14e0196fc0b0515b701838b2012df9efd84fe.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThe sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e can then be calculated in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e as described below:\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is not a good index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e since in each way counted in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e the substring containing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e also contains \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e so for each of these ways removing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e from the substring containing it leads to a way counted in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e and vice-versa thus these two numbers are equal. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is a good index then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eq\u003c/i\u003e2\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - |\u003ci\u003et\u003c/i\u003e|\u003c/sub\u003e + \u003ci\u003ei\u003c/i\u003e - |\u003ci\u003et\u003c/i\u003e| + 1\u003c/span\u003e. To prove this let\u0027s consider a way of choosing substring counted in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. We call such a way valid. The substring containing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can be any of the substrings \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/sub\u003e... \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e(1 ≤ \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e - |\u003ci\u003et\u003c/i\u003e| + 1)\u003c/span\u003e. There are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - |\u003ci\u003et\u003c/i\u003e| + 1\u003c/span\u003e valid ways in which this substring is the only substring we\u0027ve chosen. Number of valid ways in which substring containing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e starts at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e1\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e. So the total number of valid ways in which we\u0027ve chosen at least two substrings are equal to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7d/34/7d341879553a8bf40de19638dc829818744cff4a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e which is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e2\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e. So \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eq\u003c/i\u003e2\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - |\u003ci\u003et\u003c/i\u003e|\u003c/sub\u003e + \u003ci\u003ei\u003c/i\u003e - |\u003ci\u003et\u003c/i\u003e| + 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/494/problem/C\" title\u003d\"Codeforces Round 282 (Div. 1)\"\u003e494C - Helping People\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe\u0027ll first create a rooted tree from the given segments which each node represents a segment. We\u0027ll solve the problem using dynamic programming on this tree. First of all let\u0027s add a segment \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003en\u003c/i\u003e]\u003c/span\u003e with probability of being chosen by Malek equal to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. The node representing this segment will be the root of the tree. Please note by adding this segment the rules described in the statements are still in place.\u003c/p\u003e\u003cp\u003eLet\u0027s sort the rest of segments according to their starting point increasing and in case of equality according to their finishing point decreasing. Then we\u0027ll put the segment we added in the beginning. A segment\u0027s father is the right-most segment which comes before that segment and contains it. Please note that since we added segment \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003en\u003c/i\u003e]\u003c/span\u003e to the beginning every segment except the added segment has a father. We build the tree by putting a segment\u0027s node child of its father\u0027s node. \u003c/p\u003e\u003cp\u003eIn this tree for each two nodes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e which none of them are in the subtree on another the segments representing these two nodes will not overlap. Also for each two nodes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e is in subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e segment representing node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e will be inside(not necessarily strictly) segment representing node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. We define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as the maximum money a person in the segment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e initially has. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can be calculated using RMQ. Let\u0027s define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as the probability of that after Malek finishes giving his money the maximum in the segment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is at most \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003emx\u003c/i\u003e}\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. The properties of the tree we built allows us to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eq\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e (since \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003eq\u003c/i\u003e\u003c/span\u003e). If number of the segment we added is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e then the answer will be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4d/3b/4d3bb49d046d45372828001af5173c4087a0a780.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eCalculating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is described below:\u003c/p\u003e\u003cp\u003eSuppose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e is a child of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and suppose Malek doesn\u0027t accept the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th recommendation. Then since we want the maximum number after money spreading to be at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e in segment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e is inside \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e we want the maximum number after money spreading to be at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003emx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. If Malek accepts the recommendation then we want it to be at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003emx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ej\u003c/i\u003e - 1\u003c/span\u003e. So if probability of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th recommendation being accepted by Malek be equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e then \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6e/08/6e089fd7f4ce972ba6c18a351f6eacdae85ed6e5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Using this formula we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e recursively and calculate the answer from it in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eq\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e. The overall complexity will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlgn\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enlgn\u003c/i\u003e\u003c/span\u003e for creating RMQ used for calculating the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e for the rest of the algorithm.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/494/problem/D\" title\u003d\"Codeforces Round 282 (Div. 1)\"\u003e494D - Birthday\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe solve this problem by answering queries offline. We\u0027ll first store in each vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e number of vertices such as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e for which we must calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e . starting from the root. We\u0027ll keep two arrays \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Suppose we\u0027re at vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e right now then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e equals \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e equal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e. Having these two arrays when moving from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e to a child with an edge with weight \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e one can note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003es inside subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e decreases by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e and all other \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003es gets increased by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Knowing this fact one can also update array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e as well. To calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e it\u0027s enough to be able to calculate sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003es for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e inside subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Handling each of these operations is a well known problem and is possible using a segment tree. Overall complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e((\u003ci\u003en\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e)\u003ci\u003elgn\u003c/i\u003e)\u003c/span\u003e. There is an online solution using dynamic programming as well.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/494/problem/E\" title\u003d\"Codeforces Round 282 (Div. 1)\"\u003e494E - Sharti\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s first solve this problem for another game: Suppose that we\u0027ve an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003ci\u003en\u003c/i\u003e\u003c/span\u003e table. Each cell have some(possibly zero) marbles on it. During each move the player chooses a square with side-length at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e which its lower-right cell has at least one marble, he removes one marble from it and puts one marble in every other cell of this square. One can notice that in such game each marble is independent of the others and doesn\u0027t affect other marbles. So one can see this game as some separate games played on some tables. More formally for each marble placed in a cell such as \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e consider the game when played on a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e × \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e table which the only marble placed on it is at its lower-right cell. Let\u0027s denote the Grundy number of this game by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Then according to Grundy theorem the first player has a winning strategy if and only if the xor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for every cell \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e having odd number of marbles on it is positive. \u003c/p\u003e\u003cp\u003eTo calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e note that the first move in such game must be choosing a square with its lower-right cell being the lower-right cell of table. So the only thing to decide is the side-length of chosen square at the first move. Let\u0027s say we choose the first square width side length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e. Grundy number of the next state will be equal to xor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e, \u003ci\u003ed\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e \u0026lt; \u003ci\u003ec\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e \u0026lt; \u003ci\u003ed\u003c/i\u003e ≤ \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Using this fact one can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e(1 ≤ \u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003ea\u003c/i\u003e)\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e being an arbitrary integers) in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf we calculated the first values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e one can see a pattern in the Grundy numbers. Then one can prove that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emin\u003c/i\u003e(\u003ci\u003elowest\u003c/i\u003e_\u003ci\u003ebit\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e), \u003ci\u003elowest\u003c/i\u003e_\u003ci\u003ebit\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e), \u003ci\u003egreatest\u003c/i\u003e_\u003ci\u003ebit\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e))\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowest\u003c/i\u003e_\u003ci\u003ebit\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003c/span\u003e the maximum power of \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e which is a divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egreatest\u003c/i\u003e_\u003ci\u003ebit\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003c/span\u003e the maximum power of \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e which is not greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eNow let\u0027s prove that our first game(the game described in the statement) is actually the same as this game. Suppose that a player has a winning strategy in the first game. Consider a table containing one marble at every cell which is white in the table of the first game. We\u0027ll prove that the same player has winning strategy in this game as well. Note that a cell is white in the first game if and only if the parity of marbles in the second game is odd so there is at least one marble on it. So as long as the other player chooses a square with its lower-right cell having odd number of marbles in the second game, his move corresponds to a move in the first game so the player having winning strategy can counter his move. If the other player chooses a square with its lower-right cell having even number of marbles, it means the cell had at least 2 marbles on it so the player can counter it by choosing the same square which makes the parity of every cell to be the same after these 2 moves. And since it can be proven that both of the game will end at some point then the player has winning strategy in this game as well. The reverse of this fact can also be proven the same since if a player has a winning strategy there is also a winning strategy in which this player always chooses squares with lower-right cell having odd number of marbles(since otherwise the other player can counter it as described above) and counters the moves of the other player at which he chose a square with lower-right cell having even number of marbles by choosing the same square(since the Grundy number by countering in this way won\u0027t change the Grundy number and thus won\u0027t change the player with winning strategy).\u003c/p\u003e\u003cp\u003eSo if we consider a table having one marble at each of the cells which are in at least one of the rectangles given in the input we only need to calculate the Grundy number of this state and check whether it\u0027s positive or not to determine the winner. To do this for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e(1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003egreatest\u003c/i\u003e_\u003ci\u003ebit\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e))\u003c/span\u003e lets define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as the number of cells \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e which are contained in at least one of the given rectangles, \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e|\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e|\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. Lets also define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003egreatest\u003c/i\u003e_\u003ci\u003ebit\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e) + 1\u003c/sub\u003e \u003d 0\u003c/span\u003e. Then according the fact we described above about \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e the number of \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003es which are xored equals \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e. Knowing this calculating the Grundy number of the initial state is easy. Calculating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is identical to a very well-known problem which is given some rectangles count the number of cells in at least one of them and can be solved in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003emlgm\u003c/i\u003e)\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e being number of rectangles). So overall complexity will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003emlgmlgk\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf there is any problem in the editorial please feel free to note that to us.\u003c/p\u003e\u003cp\u003eThank you.\u003c/p\u003e\u003c/div\u003e","tags":[]}}