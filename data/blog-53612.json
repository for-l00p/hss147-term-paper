{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1501600762,"rating":-17,"authorHandle":"thanhthuy4u","modificationTimeSeconds":1501600762,"id":53612,"title":"\u003cp\u003eHelp me ! wrong output format Unexpected end of file â€” int32 expected . I can not find failed .\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/723/submission/29104913\"\u003ehttp://codeforces.com/contest/723/submission/29104913\u003c/a\u003e D. Lakes in Berland.\u003c/p\u003e\u003ch1\u003einclude\u003c/h1\u003e\u003ch1\u003einclude\u003c/h1\u003e\u003ch1\u003einclude\u003c/h1\u003e\u003ch1\u003einclude\u003c/h1\u003e\u003ch1\u003einclude\u0026lt;string.h\u0026gt;\u003c/h1\u003e\u003cp\u003eusing namespace std;\u003c/p\u003e\u003ch1\u003edefine max 100\u003c/h1\u003e\u003cp\u003echar a[max][max]; int n,m,dem\u003d0,flag\u003d0; bool visited[max][max]; int dx[] \u003d {0,0,-1,1}; int dy[] \u003d {-1,1,0,0}; int option(int x, int y) {  return x\u0026gt;y; } struct POINT {  int x,y; }; int DFS(POINT src) {  dem\u003d0;  stacks;  visited[src.x][src.y]\u003dtrue;  s.push(src);  while(!s.empty())  {  POINT w;  src\u003ds.top();  s.pop();  for(int i\u003d0;i\u0026lt;4;i++)  {  int x,y;  x\u003dsrc.x+dx[i];  y\u003dsrc.y+dy[i];  if(visited[x][y]\u003d\u003dfalse\u0026amp;\u0026amp;a[x][y]\u003d\u003d\u0027.\u0027\u0026amp;\u0026amp;x\u0026gt;\u003d0\u0026amp;\u0026amp;x\u0026lt;n\u0026amp;\u0026amp;y\u0026gt;\u003d0\u0026amp;\u0026amp;y\u0026lt;m)  {  if(flag\u003d\u003d1)  {  a[x][y]\u003d\u0027*\u0027;  }  visited[x][y]\u003dtrue;  w.x\u003dx;w.y\u003dy;  s.push(w);  dem++;  }  }  }  return dem; }\u003c/p\u003e\u003cp\u003eint main() {  //freopen(\u0026quot;input.txt\u0026quot;,\u0026quot;rt\u0026quot;,stdin);  int k,d\u003d0,oo[max],ooo[max],dd,ans\u003d0,kq\u003d0;;  POINT p;  POINT o[max];  cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m\u0026gt;\u0026gt;k;  for(int i\u003d0;i\u0026lt;n;i++)  for(int j\u003d0;j\u0026lt;m;j++)  visited[i][j]\u003dfalse;  for(int i\u003d0;i\u0026lt;n;i++)  {  for(int j\u003d0;j\u0026lt;m;j++)  {  cin\u0026gt;\u0026gt;a[i][j];  }  }  for(int i\u003d0;i\u0026lt;n;i++)  {  for(int j\u003d0;j\u0026lt;m;j++)  {  if(visited[i][j]\u003d\u003dfalse\u0026amp;\u0026amp;a[i][j]\u003d\u003d\u0027.\u0027\u0026amp;\u0026amp;(i\u003d\u003d0||i\u003d\u003dn-1||j\u003d\u003d0||j\u003d\u003dm-1))  {  p.x\u003di;p.y\u003dj;  DFS(p);  }  }  }  for(int i\u003d0;i\u0026lt;n;i++)  {  for(int j\u003d0;j\u0026lt;m;j++)  {  if(a[i][j]\u003d\u003d\u0027.\u0027\u0026amp;\u0026amp;visited[i][j]\u003d\u003dfalse)  {  p.x\u003di;p.y\u003dj;  DFS(p);  oo[d]\u003ddem+1;  ooo[d]\u003ddem+1;  o[d++]\u003dp;  }  }  }  flag\u003d1;  dd\u003dd;  sort(ooo,ooo+max,option);  for(int i\u003d0;i\u0026lt;n;i++)  for(int j\u003d0;j\u0026lt;m;j++)  visited[i][j]\u003dfalse;  for(int i\u003ddd-1;i\u0026gt;\u003d0;i--)  {  for(int j\u003d0;j\u0026lt;d;j++)  {  if(oo[j]\u003d\u003dooo[i])  {  a[o[j].x][o[j].y]\u003d\u0027*\u0027;  kq++;  kq+\u003dDFS(o[j]);  ans++;  oo[i]\u003d0;  break;  }  }  if(d-k\u003d\u003dans)  {  cout\u0026lt;\u0026lt;kq\u0026lt;\u0026lt;\u0026quot;\\n\u0026quot;;  for(int i\u003d0;i\u0026lt;n;i++)  {  for(int j\u003d0;j\u0026lt;m;j++)  {  cout\u0026lt;\u0026lt;a[i][j];  }  cout\u0026lt;\u0026lt;\u0026quot;\\n\u0026quot;;  }  break;  }  }  return 0; }\u003c/p\u003e\u003c/div\u003e","tags":["#dfs"]}}