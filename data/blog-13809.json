{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1410851020,"rating":-22,"authorHandle":"x-firdavs.95","modificationTimeSeconds":1410851020,"id":13809,"title":"\u003cp\u003ePython на Assembler (Tasm)\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eСегодня напишем в текстовом режиме с использованием прерываний BIOS и DOS змейку на Assembler. Для этого нужно знать основы, уметь ассемблировать (Tasm) и компоновать (Tlink) код.\u003c/p\u003e\u003cp\u003eДля начала напишем основу — змейку, которая перемещается в одном направлении по игровому полю. Змейка будет состоять из символа \u0026quot;*\u0026quot;, координаты каждого символа хранятся в памяти.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/7f/1f/7f1fa9488e04b16c47d14f3eea363cd54ac5c0e9.gif\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emodel\tsmall\n\n.data\t\t\t\t\t;Сегмент данных. Храним координаты тела змейки\nsnake\tdw 0000h\n        dw 0001h\n        dw 0002h\n        dw 0003h\n        dw 0004h\n        dw 7CCh dup(\u0027?\u0027)\n\n.stack 100h\n\n.code\n;В начале сегмента кода будем размещать процедуры\ndelay proc\n        push cx\n    mov ah,0\n    int 1Ah \n    add dx,3\n    mov bx,dx\nrepeat:   \n    int 1Ah\n    cmp dx,bx\n    jl repeat\n    pop cx\n    ret\ndelay endp\n\nstart:\n    mov ax,@data\n    mov ds,ax\n    mov es,ax\n\n    mov ax,0003h\n    int\t10h \t\t\t;Очищаем игровое поле\n\n    mov cx,5\n    mov ax,0A2Ah\n    int 10h \t\t\t;Выводим змейку из 5 символов \u0026quot;*\u0026quot;\n\n\n    mov si,8\t\t\t;Индекс координаты символа головы\n    xor di,di\t\t\t;Индекс координаты символа хвоста\n    mov cx,0001h\t\t;Регистр cx используем для управления головой. При сложении от значения cx будет изменяться координата x или y\n\nmain:\t\t\t\t;Основной цикл\n    call delay\n        xor bh,bh\n    mov ax,[snake+si]\t\t;Берем координату головы из памяти\n    add ax,cx\t\t        ;Изменяем координату x\n    inc si\t\t\t\t\n    inc si\n    mov [snake+si],ax\t\t;Заносим в память новую координату головы змеи\n    mov dx,ax\t\t\t\n    mov ax,0200h\n    int 10h \t\t\t;Вызываем прерывание. Перемещаем курсор\n    mov ah,02h\n    mov dl,002Ah\n    int 21h\t\t\t;Прерывание выводит символ \u0027*\u0027\n    \n    mov ax,0200h \t\t\n    mov dx,[snake+di]\n    int 10h\n    mov ax,0200h\n    mov dl,0020h\n    int 21h\t\t\t;Выводим пробел, тем самым удаляя хвост\n    inc di\n    inc di\njmp main\nend\tstart        \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eДобавим процедуру «key_press» обработки нажатия клавиши и присваивания значения регистру CX, отвечающему за направление головы.\u003c/p\u003e\u003cp\u003eУправление стрелками.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/ad/b2/adb292d30555e24320d24ff5ceb7068d9bd5d83a.gif\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ekey_press\u003c/strong\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ekey_press proc\n    mov ax, 0100h\n    int 16h\n    jz en \t\t\t;Без нажатия выходим\n    xor ah, ah\n    int 16h\n    cmp ah, 50h\n    jne up\n    cmp cx,0FF00h\t\t;Сравниваем чтобы не пойти на себя\n    je en\n    mov cx,0100h\n    jmp en\nup:\tcmp ah,48h\n    jne left\n    cmp cx,0100h\n    je en\n    mov cx,0FF00h\n    jmp en\nleft: cmp ah,4Bh\n    jne right\n    cmp cx,0001h\n    je en\n    mov cx,0FFFFh\n    jmp en\nright: cmp cx,0FFFFh\n    je en\n    mov cx,0001h\nen:\n    ret\nkey_press endp\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eВызовем её сразу после вызова процедуры delay:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emain:\n    call delay\n    call key_press\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eНакормим змейку, создаём процедуру «add_food». Эта процедура будет на игровом поле размещать еду, символы \u0026quot;$\u0026quot;. В качестве случайных чисел будем брать время. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eadd_food\u003c/strong\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eadd_food proc\nsc:\t\n    inc bl              ;В регистре BL рандомное число\n    cmp bx,50h    ;Проверяем границу числа\n    jng ex\n    shr bl,1           ;Если больше, делим на 2 логическим сдвигом\n    jmp sc\nex:\n    mov dl,bl         ;Запись координаты\nsc2:\t\n    cmp bx,19h\n    jng ex2\n    shr bl,2\n    jmp sc2\nex2:\n    mov dh,bl         ;Запись координаты\n    mov ax,0200h\n    int 10h\n    mov ax,0800h\n    int 10h\n    cmp al,2Ah       ;Проверяем пустое ли место\n    je sc\n    cmp al,40h      \n    je sc                  ;Если нет повторяем\n    mov ax,0200h\n    mov dl,0024h\n    int 21h\n    ret\nadd_food endp\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eВызовем 1 раз в начале.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emov bl,51h\n    call add_food\nmain:\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eДелаем проверку, съела змея еду или нет. Если съела, вызываем процедуру «add_food» и не удаляем хвост.\u003c/p\u003e\u003cp\u003eПроверку добавляем в код перед выводом символа головы:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emov ah,02h\n    int 10h \t\t\t;Вызываем прерывание. Перемещаем курсор\n\n    mov ax,0800h\n    int 10h                     ;Читает символ \n    mov dh,al\n\n    mov ah,02h\n    mov dl,002Ah\n    int 21h \t\t\t;Прерывание выводит символ \u0027*\u0027\n\n    cmp dh,24h\n    jne next\n    call add_food\n    jmp main\nnext:\t\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eУсложним игру. После того, как питон съест 5 символов, в хвосте будет появляться символ \u0026quot;@\u0026quot;. Пишем счетчик и вывод символа:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/36/4e/364e0ca19f6fbc0fffa959790844b2aa8f6a4c87.gif\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eshit\u003c/strong\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e;В сегмент данных добавим строчку\n.data\ntick\tdw 0\t\t\t;Счетчик\n--------------------------------------------------------------------\n\n    cmp dh,24h\n    jne next\n\n    push cx\t\t\t\t;В стек регистр\n    mov cx,[tick]\n    inc cx\n    cmp cx,5\n    jne exl\n    xor cx,cx\n    mov ax,0200h \t\t\n    mov dx,[snake+di-2]\n    int 10h\n    mov ax,0200h\n    mov dl,0040h\n    int 21h\nexl:mov [tick],cx\n    pop cx\n\n    call add_food\n    jmp main\nnext:\t\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eКакая игра без Game Over. Пишем процедуру проверки границы поля, а также врезание в себя и символ \u0026quot;@\u0026quot;.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003egame_over\u003c/strong\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egame_over proc\n;Проверяем границы\n    cmp dl,50h\n    je exit\n    cmp dl,0\n    jl exit\n    cmp dh,0\n    jl exit\n    cmp dh,19h\n    je exit\n;Проверяем символы\n    cmp al,2Ah\n    je exit\n    cmp al,40h\n    je exit\n    jmp good\nexit: \n    mov ax,4c00h\n    int 21h\ngood:\n    ret\ngame_over endp\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eВызываем её после считывания символа:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emov ax,0800h\n    int 10h \t\t\t;Считываем символ\n\n    call game_over\n\n    mov dh,al\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eНемного магии добавляем после инкремента индексов.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003emagic\u003c/strong\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e    inc si\t\t\t\t\n    inc si\n    cmp si,7CAh\n    jne nex\n    xor si,si\nnex:\t\n\n---------------------------------------------------------------------\n\n    inc di\n    inc di\n    cmp di,7CCh\n    jne main\n    xor di,di\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eНу вот и всё, также можно добавить меню с выбором уровня, паузу, заставку Game Over, счет очков.\u003c/p\u003e\u003cp\u003eПо \u003ca href\u003d\"https://drive.google.com/file/d/0B1DuOGcpSF39Zkc0clBCbS1wNk0/edit?usp\u003dsharing\"\u003eссылке\u003c/a\u003e архив с исходным кодом, exe\u0027шником и DosBox для тех, у кого не запустится.\u003c/p\u003e\u003cp\u003eGood Luck!!!\u003c/p\u003e\u003c/div\u003e","tags":[]}}