{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1473041436,"rating":16,"authorHandle":"Sherlock2000","modificationTimeSeconds":1473070616,"id":46953,"title":"\u003cp\u003e710E Generate a String [Simple Solution]\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eAt first, this solution is more simple than one solution i saw among the comments.\u003c/p\u003e\u003cp\u003enow let\u0027s see how to solve this problem.\u003c/p\u003e\u003cp\u003eFirst we know it just asks the minnium of cost. Obviously we should use DP.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e represent the minnium of cost to create the \u0027A\u0027 string which has n characters.\u003c/p\u003e\u003cp\u003eConsider first operation, easily we know \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003eF\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1] + \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eHow to deal with the second operation and third? We can consider them together!\u003c/p\u003e\u003cp\u003eBut why? After thinking about that, we know that we use \u0027delete operation\u0027 when we have excess characters.\u003c/p\u003e\u003cp\u003eHowever, if we just add \u0027a\u0027, it is impossible to exceed.\u003c/p\u003e\u003cp\u003eThe only reason of exceeding is we used the second operation!\u003c/p\u003e\u003cp\u003eAfter that, we can know \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ad/de/adde7ce4d32dacd78e136d3bd78b718ff9a36b2e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e E.G. we want aaaaa , we have aaa, so we first copy and paste(cost y), then we have aaaaaa, we have to delete one(cost x) \u003c/p\u003e\u003cp\u003eParticularly, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e3/e3/e3e3250cd214d40eaf920fdac49945a79e7953ec.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eTherefore, it is an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e algorithm. TLE!\u003c/p\u003e\u003cp\u003eWe can use humdrum queue to make it much faster. As a result, it is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\n#define mp make_pair\n#define fi first\n#define se second\n#define rep(i,s,t) for(int i \u003d s; i \u0026lt;\u003d t; ++ i)\ntypedef long long LL;\nconst int MaxN \u003d 10000050;\n\nint N, X, Y;\nLL dp[MaxN], Ans \u003d 1LL\u0026lt;\u0026lt;61;\npair\u0026lt;LL,int\u0026gt; Q[MaxN];\nint front, tail;\n\nint main()\n{\n    scanf(\u0026quot;%d%d%d\u0026quot;,\u0026amp;N,\u0026amp;X,\u0026amp;Y);\n    front \u003d 0; tail \u003d -1;\n    dp[1] \u003d X; Q[++tail] \u003d mp(3LL*X, 1);\n    rep(i,2,N)\n    {\n        while(front \u0026lt;\u003d tail \u0026amp;\u0026amp; Q[front].se \u0026lt; (int)(i/2)+(i%2)) ++ front;\n        dp[i] \u003d min(dp[i-1] + X, Q[front].fi + Y - (LL)i*X);\n        //f(i)\u003dmin{f(i-1)+x, f(j)+2*j*x-i*x+y}\n        while(front \u0026lt;\u003d tail \u0026amp;\u0026amp; dp[i] + 2LL*i*X \u0026lt; Q[tail].fi) -- tail;\n        Q[++tail] \u003d mp(dp[i] + 2LL*i*X, i);\n    }\n    printf(\u0026quot;%I64d\u0026quot;,dp[N]);\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eor see my submission \u003ca href\u003d\"//codeforces.com/contest/710/submission/20391900\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["dp","hudrum queue"]}}