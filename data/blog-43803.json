{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1458007248,"rating":2,"authorHandle":"Slamur","modificationTimeSeconds":1458007248,"id":43803,"title":"\u003cp\u003eОбновленный Java-шаблон\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eЯ хотел бы представить более продвинутую версию шаблона и инструкцию для его использования.\u003c/p\u003e\u003cp\u003eВ данном шаблоне улучшены следующие вещи:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eВозможность тестирования с файлами, не с консолью (будет описано ниже)\u003c/li\u003e   \u003cli\u003eБолее быстрый и удобный ввод данных (также добавлена возможность выбирать разделитель вводимых данных)\u003c/li\u003e   \u003cli\u003eПоказывается время выполнения (в миллисекундах) \u003cbr /\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eДля начала вот ссылка на сам шаблон: \u003ca href\u003d\"http://pastebin.com/hZB0b5mN\"\u003eTemplate\u003c/a\u003e\u003c/p\u003e\u003cp\u003eШаблон — это код к задаче с пустым решением. В нем описаны удобные методы ввода данных и какие-то дополнительные фишечки, чтобы не надо было его писать каждый раз заново.\u003c/p\u003e\u003cp\u003eЧтобы использовать шаблон, создайте файл с ним в папке проекта:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"After creating template\" src\u003d\"/predownloaded/a7/7e/a77eec4d4e6a466131dfab42d1c3201b24159cfd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eЯ советую выбрать для шаблона какое-нибудь удобное имя, чтобы можно было его всегда быстро найти в списке. Я называю шаблон, начиная с двух знаков нижнего подчеркивания, так он сортится первым по алфавиту.\u003c/p\u003e\u003cp\u003eЧтобы заюзать шаблон, выберите его в списке классов и заюзайте комбинацию \u0026quot;скопировать-вставить\u0026quot; в ту же папку (Ctrl+C, Ctrl+V). \u003c/p\u003e\u003cp\u003eВам скажут, что в данной папке уже содержится файл с таким именем (да, мы его и копируем же), поэтому предложат переименовать файл. Я обычно называю, чтобы было ясно, к какой задаче это решение.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"After copy of template\" src\u003d\"/predownloaded/86/9b/869b38863dc20683d3cee0a131d273e825cd8b3f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eДля примера я решил написать решение для задачи \u0026quot;4А. Арбуз\u0026quot; (вроде ее уже все сдали, так что спойлером это не будет).\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"Example of 4A\" src\u003d\"/predownloaded/0e/18/0e18594c4a2bc9a922b45c9de4ab058a63fa3152.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eОбратим внимание, что изменились методы ввода данных — работа с объектом ввода in скрыта, а методы чтения имеют префикс \u0026quot;read\u0026quot; (readInt, readString, ...).\u003c/p\u003e\u003cp\u003eХотел бы отдельно обсудить метод readString — в отличие от readLine, который читает строку до конца, readString юзается для чтения строки до ближайшего разделителя. Разделитель — это любой символ строки \u0026quot;delimiter\u0026quot;, вы найдете ее возле того метода (по умолчанию там пробел). Именно с помощью readString осуществляется чтение всех других типов данных — для чтения int мы просто вызываем Integer.parseInt от readString()(предлагаю вам самим масштабировать на чтение long и double).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eПример\u003c/strong\u003e: В случае, если вам понадобится считать, например, время в формате hh:mm-ss (я специально заюзал два разделителя), вы можете сделать это следующим способом:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estatic final int SECONDS_IN_MINUTES \u003d 60, MINUTES_IN_HOUR \u003d 60;\nstatic final int SECONDS_IN_HOUR \u003d SECONDS_IN_MINUTES * MINUTES_IN_HOUR;\n\nint readSeconds() throws IOException {\n\tdelimiter \u003d \u0026quot;-:\u0026quot;; // можно указать в любом порядке\n\t\n\tint hours \u003d readInt();\n\tint minutes \u003d readInt();\n\tint seconds \u003d readInt();\n\t\n\tdelimiter \u003d \u0026quot; \u0026quot;; // можно не возвращать обратно, если у вас в рамках задачи весь ввод в таком формате \n\t\n\treturn hours * SECONDS_IN_HOUR + minutes * SECONDS_IN_MINUTES + seconds;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eВернемся к нашему арбузу. Мы написали решение, теперь нам надо его протестить. Копировать каждый раз тест в консоль не очень удобно, особенно, когда вы хотите немного поменять прошлый тест. Поэтому мы будем писать тесты в файлы, из которых наше решение будет их считывать.\u003c/p\u003e\u003cp\u003eДля начала создадим файл для входных данных. Выберем File — New (или Ctrl+N ) -\u0026gt; File.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"Create file wizard\" src\u003d\"/predownloaded/f1/39/f139094cb6066e67d49ffc279e17fd34ac38b16f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eНа данный момент в шаблоне явно захардкожено название input.txt, но вы можете изменить шаблон на свой вкус.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"Create input file\" src\u003d\"/predownloaded/98/ad/98ad29f9b888ab18ee5e23e3230d8b791b52f6d3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eФайл создастся в корне проекта, вы можете видеть его в списке файлов проекта. Выберите его, Eclipse его откроет без сторонних программ. Давайте введем туда тест к нашей задаче.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"Filled input file\" src\u003d\"/predownloaded/ab/a4/aba4660d47fe0a0847c29585dfa53e8aa8ba91f2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eОбратно переключимся на класс с нашим решением и запустим его (если запускать в первый раз, выбрав файл input.txt, то среда просто не поймет, что же выхотите запустить).\u003c/p\u003e\u003cp\u003eУ меня среда не сразу поняла, как именно ей запускать шаблон (хз, может плагинов много понаставил), поэтому \u003cstrong\u003eна всякий случай\u003c/strong\u003e: надо выбирать Java Application.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"If your eclipse dont know how run\" src\u003d\"/predownloaded/c3/8d/c38d44ccb8f9bf422adf9c7dbcd1e184ed10d6f8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eПосле запуска программы в консоль выведется время выполнения в миллисекундах (1 секунда \u003d 1000 мс, ваш капитан). Обычно нас интересует время выполнения только на больших данных, когда оно достигает сотен или тысяч мс, так как стандартные Time Limit — 1 или 2 секунды.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"After running time\" src\u003d\"/predownloaded/39/c8/39c8f294c491b036ea1033c7ca32fef82e80c044.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eНо куда вывелся наш ответ? Он вывелся в файл с названием output.txt в нашем же проекте. Если вы не создавали его, то при запуске программы он создастся автоматически. В таком случае для его отображения надо обновить список с проектом кнопкой F5 (или ПКМ — Refresh).\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"After F5 output file\" src\u003d\"/predownloaded/55/bb/55bb349e6cefbd598168d6ba018bc7b91af74f7d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eНастройка ввода-вывода в шаблоне записана в методе init(). Для начала проверяется наличие системной переменной ONLINE_JUDGE (есть на Codeforces, Timus и некоторых других архивах задач). Если она присутствует, то используется стандартный ввод-вывод. В ином случае используется файловый ввод-вывод с input.txt и output.txt.\u003c/p\u003e\u003cp\u003eВы можете менять настройки ввода-вывода в зависимости от ваших предпочтений или от требований задачи. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eПример\u003c/strong\u003e: Пусть вам понадобится в задаче работать с файлами вида name.in/name.out, а тестировать вам удобнее, выводя в консоль, тогда можно записать так:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid init() throws IOException {\n\tif (ONLINE_JUDGE) {\n\t\tString fileName \u003d \u0026quot;\u0026quot;; // вписать имя файла, требуемое по задаче\n\t\tin \u003d new BufferedReader(new FileReader(fileName + \u0026quot;.in\u0026quot;));\n\t\tout \u003d new PrintWriter(fileName + \u0026quot;.out\u0026quot;)\n\t} else {\n\t\tin \u003d new BufferedReader(new FileReader(\u0026quot;input.txt\u0026quot;));\n\t\tout \u003d new PrintWriter(System.out);\n\t}\n\t\n\ttok \u003d new StringTokenizer(\u0026quot;\u0026quot;); // служебная переменная, используемая для работы метода readString()\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eПро ONLINE_JUDGE: вы можете ее юзать не только для настройки ввода-вывода, а вообще для более удобного тестирования локально, чтобы не отправить лишнего в тестирующую систему. Например, вы можете выводить дополнительно сортированный массив из входных данных для удобной проверки ответа вручную:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e...\n\nint[] a \u003d readIntArray(n); // такого метода в шаблоне нет\n\nif (!ONLINE_JUDGE) { // выполнится только локально\n\tint[] b \u003d a.clone();\n\tArrays.sort(b);\n\tout.println(Arrays.toString(b)); \n\t\n\t/*\n\t\tЭтот кусок может быть долгим по ограничениям задачи, \n\t\tно вы можете его использовать для поиска ошибки на малых данных\n\t\tи не беспокоиться, что нечаянно забудете удалить при отправке.\n\t*/\n\tfor (int i \u003d 0; i \u0026lt; n; ++i) {\n\t\tfor (int j \u003d i + 1; j \u0026lt; n; ++j) {\n\t\t\tif (b[i] * 2 \u0026lt; b[j]) {\n\t\t\t\tout.println(i + \u0026quot; \u0026quot; +  j);\n\t\t\t}\n\t\t}\n\t}\n}\n\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["java","template","tutorial"]}}