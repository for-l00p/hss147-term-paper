{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1495088413,"rating":4,"authorHandle":"coderbond007","modificationTimeSeconds":1495107080,"id":52049,"title":"\u003cp\u003eNumber of path pairs from node u to any vertex having distance \u0026lt;\u003d K\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHow can we calculate number of node — disjoint paths pair between \u003cem\u003eu\u003c/em\u003e and other vertex say \u003cem\u003ev\u003c/em\u003e (such that distance of \u003cem\u003ev\u003c/em\u003e from source vertex is \u003cem\u003eK\u003c/em\u003e).Vertex v is not known to us. I thought of implementing BFS for every node until maximum distance from source node is \u0026lt;\u003d \u003cstrong\u003eK\u003c/strong\u003e. But I am not getting idea for implementation. Anybody please help me? Given the number of vertices in graph can be up to than \u003cstrong\u003e10^5\u003c/strong\u003e and edges can be \u003cstrong\u003e6 * 10^5\u003c/strong\u003e. In every test case, value of K will be at max 10 % of number of edges.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eA path is sequence of vertices: s, v_1, .., v_m, t. Two paths s, v_1, .., v_m, t and s, u_1, ..., u_k, t are called node-disjoint if v_i !\u003d u_j for any valid i and j.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe are given a example graph shown as following. Adjacency List representation of given \u003cstrong\u003eDirected Graph\u003c/strong\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e1 - 2, 5\n2 - 3, 4, 6\n3 - 4\n4 - 8\n5 - 7\n6 - 11\n7 - 11\n8 - 9, 10\n9 - 10\n10 - 11\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eValue of \u003cstrong\u003eK\u003c/strong\u003e is 6(including source node and end node). \u003cimg alt\u003d\"Graph\" src\u003d\"/predownloaded/b4/6f/b46f8ddd76498fdd1a439ce950bc08e39c63b9db.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eTotal node — disjoint path pairs possible are 3(between 1 and 11) + 1(between 2 and 4) + 1(between 8 and 10). In case of path of 1 to 11\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePath 1: 1 - 6 - 11\nPath 2: 1 - 2 - 4 - 8 - 10 - 11\nPath 3: 1 - 5 - 7 - 11\n\nTotal combinations \u003d Comb(3, 2) \u003d 3\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnybody please help me out with implementation using BFS or DFS of above question. Can this question be solved using \u003cstrong\u003eDP + DFS\u003c/strong\u003e or \u003cstrong\u003eDP + BFS\u003c/strong\u003e?\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD\u003c/strong\u003e : In every test case, value of K will be at max 10 % of number of edges.\u003c/p\u003e\u003c/div\u003e","tags":["#graph","directed graph","bfs","#dfs","dfs and similar","#dp"]}}