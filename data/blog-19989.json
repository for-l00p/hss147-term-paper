{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1440613045,"rating":60,"authorHandle":"Miyukine","modificationTimeSeconds":1440752588,"id":19989,"title":"\u003cp\u003e1st Hunger Games Large Editorial — Community solutions\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThis is the second part of Hunger Games Editorial, hope you\u0027ll enjoy it :) And again, thanks for stuff for awesome contest, congratz for survivors too!\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD\u003c/strong\u003e: Problems B, D, E, Q, T, W are now available, more soon :) \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eEditorial Hall of Fame:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Stonefeang\" title\u003d\"Гроссмейстер Stonefeang\"\u003eStonefeang\u003c/a\u003e \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Andres_Unt\" title\u003d\"Кандидат в мастера Andres_Unt\"\u003eAndres_Unt\u003c/a\u003e \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/cuber2460\" title\u003d\"Мастер cuber2460\"\u003ecuber2460\u003c/a\u003e \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Anonym_KALEP\" title\u003d\"Эксперт Anonym_KALEP\"\u003eAnonym_KALEP\u003c/a\u003e \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/adamant\" title\u003d\"Кандидат в мастера adamant\"\u003eadamant\u003c/a\u003e \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ngoisao_93\" title\u003d\"Кандидат в мастера ngoisao_93\"\u003engoisao_93\u003c/a\u003e \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/gendelpiekel\" title\u003d\"Кандидат в мастера gendelpiekel\"\u003egendelpiekel\u003c/a\u003e \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/fcdkbear\" title\u003d\"Мастер fcdkbear\"\u003efcdkbear\u003c/a\u003e \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/izrak\" title\u003d\"Гроссмейстер izrak\"\u003eizrak\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem A: Good Numbers.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eTutorial by: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ngoisao_93\" title\u003d\"Кандидат в мастера ngoisao_93\"\u003engoisao_93\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCall \u003ccode\u003eLCM(i, j)\u003c/code\u003e the lowest common multiple of i and j.\u003c/p\u003e\u003cp\u003eFirst, we should analyse that if x is divisible by \u003ccode\u003eLCM(p^i, q^j)\u003c/code\u003e, then x is divisible by \u003ccode\u003ep^i\u003c/code\u003e and \u003ccode\u003eq^j\u003c/code\u003e at the same time.\u003c/p\u003e\u003cp\u003eCall set \u003ccode\u003es(i, j)\u003c/code\u003e the set of number x in range [l, r] that x is divisible by \u003ccode\u003eLCM(p^i, q^j)\u003c/code\u003e. Call \u003ccode\u003e|s(i, j)|\u003c/code\u003e the size of s(i, j). We can find out that:\u003c/p\u003e\u003cp\u003e\u003ccode\u003e|s(i, j)| \u003d |s(1, j)| - |s(1, i-1)| \u003d r/LCM(p^i, q^j) - (l-1)/LCM(p^i, q^j)\u003c/code\u003e\u003c/p\u003e\u003cp\u003eCall set \u003ccode\u003ed(i, j)\u003c/code\u003e the set of number x in range [l, r] that x is divisible by \u003ccode\u003eLCM(p^i, q^j)\u003c/code\u003e and doesn\u0027t belong to any set \u003ccode\u003ed(ii, jj)\u003c/code\u003e (\u003ccode\u003ei \u0026lt;\u003d ii\u003c/code\u003e, \u003ccode\u003ej \u0026lt;\u003d jj\u003c/code\u003e, \u003ccode\u003ei !\u003d ii or j !\u003d jj\u003c/code\u003e and \u003ccode\u003eLCM(p^ii, q^jj) \u0026lt;\u003d r\u003c/code\u003e). Call \u003ccode\u003e|d(i, j)|\u003c/code\u003e the size of \u003ccode\u003ed(i, j)\u003c/code\u003e. \u003c/p\u003e\u003cp\u003eOur answer is sum of \u003ccode\u003e|d(i, j)|\u003c/code\u003e with \u003ccode\u003ei \u0026gt; j\u003c/code\u003e and \u003ccode\u003eLCM(p^i, q^j) \u0026lt;\u003d r\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eWe also find out that \u003ccode\u003e|d(i, j)|\u003c/code\u003e \u003d \u003ccode\u003e|s(i, j)|\u003c/code\u003e — \u003ccode\u003esum of |d(ii, jj)|\u003c/code\u003e (\u003ccode\u003ei \u0026lt;\u003d ii\u003c/code\u003e, \u003ccode\u003ej \u0026lt;\u003d jj\u003c/code\u003e, \u003ccode\u003ei !\u003d ii or j !\u003d jj\u003c/code\u003e and \u003ccode\u003eLCM(p^ii, q^jj) \u0026lt;\u003d r\u003c/code\u003e). So we can use recursion with memorize to this.\u003c/p\u003e\u003cp\u003eOur biggest problem is now checking for overflow (since \u003ccode\u003eLCM(p^i, q^j)\u003c/code\u003e can exceed \u003ccode\u003eint64\u003c/code\u003e). I found a pretty easy way to do this in Pascal: \u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction CheckOverflow(m, n: int64): boolean;\nconst e \u003d 0.000001;\n      oo \u003d round(1e18)+1;\nvar tmp, tmpm, tmpn, tmpu, tmpr: double;\nbegin\n tmpm:\u003dm; tmpn:\u003dn; tmpu:\u003dGCD(m, n);\n tmp:\u003dtmpm/tmpu*tmpn;\n tmpr:\u003doo;\n exit(tmp-e \u0026lt; tmpr);\nend;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI wonder if there is a way to do this in C++ (without bignum)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Miyukine\" title\u003d\"Эксперт Miyukine\"\u003eMiyukine\u003c/a\u003e\u0027s update\u003c/strong\u003e: Let\u0027s check if p*q \u003d ret gives overflow. We can check if ret divides q and ret / q \u003d p. \u003c/p\u003e\u003cp\u003eComplexity of whole solution: O((log l)^2 * (log r)^2 * (log l + log r))\u003c/p\u003e\u003cp\u003eCode; \u003ca href\u003d\"http://ideone.com/R1AgnQ\"\u003ehttp://ideone.com/R1AgnQ\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem B: Hamro and array\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eTutorial by : \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ngoisao_93\" title\u003d\"Кандидат в мастера ngoisao_93\"\u003engoisao_93\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe first calculate array d with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003ea\u003c/i\u003e[1] - \u003ci\u003ea\u003c/i\u003e[2] + \u003ci\u003ea\u003c/i\u003e[3] - \u003ci\u003ea\u003c/i\u003e[4] + ... + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1] * ( - 1)\u003csup class\u003d\"upper-index\"\u003e\u003c/sup\u003e(\u003ci\u003ei\u003c/i\u003e + 1)\u003c/span\u003e in O(n) (if i is odd, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1] + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, else \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1] - \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e). Then, for each query, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e is odd then ans \u003d \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e] - \u003ci\u003ed\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e - 1]\u003c/span\u003e, else ans \u003d -(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e] - \u003ci\u003ed\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e - 1]\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eHis code: \u003ca href\u003d\"http://ideone.com/kMalCH\"\u003ehttp://ideone.com/kMalCH\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem C:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem D: Hamro and Tools\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eTutorial by : \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ngoisao_93\" title\u003d\"Кандидат в мастера ngoisao_93\"\u003engoisao_93\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can solve this problem by using Disjoint — Set Union (DSU). Beside the array pset[i] \u003d current toolset of i, we\u0027ll need another array contain with contain[i] \u003d the toolset that is put in box i. If no toolset is in box i, contain[i] \u003d 0. For each query that come, if box t is empty, then we\u0027ll put the toolset from box s to box t (contain[t] \u003d contain[s] and contain[s] \u003d 0). Otherwise, we\u0027ll \u0026quot;unionSet\u0026quot; the toolset in box s with the toolset in box t (unionSet(contain[s], contain[t]) and contain[s] \u003d 0).\u003c/p\u003e\u003cp\u003eFinally, we can find where each tool is by the help of another array box, with box[i] \u003d current box of toolset i. Finding array box is easy with help from array contain. The answer for each tool i is box[findSet(i)].\u003c/p\u003e\u003cp\u003eComplexity: O(n).\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://ideone.com/Te3wS9\"\u003ehttp://ideone.com/Te3wS9\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem E: LCM Query\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eTutorial by: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/fcdkbear\" title\u003d\"Мастер fcdkbear\"\u003efcdkbear\u003c/a\u003e\u003c/p\u003e\u003cp\u003eOur solution consists of 2 parts: preprocessing and answering the queries in O(1) time.\u003c/p\u003e\u003cp\u003eSo, in preprocessing part we are calculating the answers for all possible inputs.\u003c/p\u003e\u003cp\u003eHow to do that? Let\u0027s iterate through all possible left borders of the segments. Note, that moving the right border of the segment do not decrease the LCM (LCM increases or stays the same). How many times will LCM increase in case our left border is fixed? Not many. Theoretically, every power of prime, that is less than or equal to 60 may increase our LCM, and that\u0027s it.\u003c/p\u003e\u003cp\u003eSo for each left border let\u0027s precalculate the nearest occurrence of each power of each prime number. After that we\u0027ll have an information in the following form: if the left border of the segment is i, and the right border is between j and k, inclusive, LCM is equal to value. So, for each segment with length between j - i + 1 and k - i + 1 answer is not bigger than value. We may handle such types of requests using segment tree with range modification. In a node we will keep two numbers — double value of the LCM (actually, it\u0027s logarithm: note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elog\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e  *  \u003ci\u003eb\u003c/i\u003e) \u003d \u003ci\u003elog\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e)  +  \u003ci\u003elog\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e, so instead of multiplying we may just add the logarithms of our powers of primes) and the corresponding value modulo \u003cspan class\u003d\"tex-span\"\u003e1000000007\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAfter performing all the queries to segment tree we may run something like DFS on the segment tree and collect the answers for all possible inputs.\u003c/p\u003e\u003cp\u003eThe overall complexity is O(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e  *  \u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)  *  \u003ci\u003eM\u003c/i\u003e\u003c/span\u003e), where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e is a number of prime powers that are less than or equal to 60\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://pastebin.com/7zcYTced\"\u003ehttp://pastebin.com/7zcYTced\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem F: Forfeit\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eTutorial by: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Anonym_KALEP\" title\u003d\"Эксперт Anonym_KALEP\"\u003eAnonym_KALEP\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst we make an array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[]\u003c/span\u003e for each edge , for an edge like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e if after deleting it we have two components \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e , then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003ee\u003c/i\u003e]\u003c/span\u003e \u003d \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e| * |\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e|\u003c/span\u003e , It\u0027s easy to undrestand that if we increase weight of edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e by 1 the total sum of distances will increase by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ee\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow we consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSum\u003c/i\u003e\u003c/span\u003e as minimum total sum of distances , from where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMin\u003c/i\u003e(\u003ci\u003eSum\u003c/i\u003e) \u003d (\u003ci\u003eN\u003c/i\u003e - 1)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e We can be sure that for \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/30/69/3069c48d1cf5bc79af4b778e3de4440557bb37b6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e answer is \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e .\u003c/p\u003e\u003cp\u003eNow we can solve the problem with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e\u003c/span\u003e Where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e[\u003ci\u003eE\u003c/i\u003e][\u003ci\u003eS\u003c/i\u003e]\u003c/span\u003e\u003dnumber of ways we can weight tree with sum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e using first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e\u003c/span\u003e edges.Note that first we subtract \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSum\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e and we use dp for collecting \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e - \u003ci\u003eSum\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e[\u003ci\u003eE\u003c/i\u003e][\u003ci\u003eS\u003c/i\u003e] \u003d \u003ci\u003eDP\u003c/i\u003e[\u003ci\u003eE\u003c/i\u003e - 1][\u003ci\u003eS\u003c/i\u003e - (\u003ci\u003eL\u003c/i\u003e[\u003ci\u003eE\u003c/i\u003e] * \u003ci\u003eF\u003c/i\u003e[\u003ci\u003eE\u003c/i\u003e])] + \u003ci\u003eDP\u003c/i\u003e[\u003ci\u003eE\u003c/i\u003e - 1][\u003ci\u003eS\u003c/i\u003e - ((\u003ci\u003eL\u003c/i\u003e[\u003ci\u003eE\u003c/i\u003e] + 1) * \u003ci\u003eF\u003c/i\u003e[\u003ci\u003eE\u003c/i\u003e])] + ... + \u003ci\u003eDP\u003c/i\u003e[\u003ci\u003eE\u003c/i\u003e - 1][\u003ci\u003eS\u003c/i\u003e - (\u003ci\u003eR\u003c/i\u003e[\u003ci\u003eE\u003c/i\u003e] * \u003ci\u003eF\u003c/i\u003e[\u003ci\u003eE\u003c/i\u003e]]\u003c/span\u003e\u003c/p\u003e\u003cp\u003eThis DP is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e * \u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e but we can reduce it to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e * \u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e (where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u0026lt; 400\u003c/span\u003e )\u003c/p\u003e\u003cp\u003eSource code: \u003ca href\u003d\"http://ideone.com/WOZfbg\"\u003ehttp://ideone.com/WOZfbg\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem G: Hamro and Izocup\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eTutorial by: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Anonym_KALEP\" title\u003d\"Эксперт Anonym_KALEP\"\u003eAnonym_KALEP\u003c/a\u003e \u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/34/8e/348e5ca54515df3834d0e1b007771980a267a837.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003elet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e be the area of SECTOR \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eBOC\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e be area of TRIANGLE \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eBOC\u003c/i\u003e\u003c/span\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8f/47/8f47e03310a34fa0dfe3ce5ec76689df06d42f91.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eAnswer\u003c/i\u003e \u003d \u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - \u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eWe can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eOH\u003c/i\u003e\u003c/span\u003e using pythagorean theorem and length\u0027s of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eOB\u003c/i\u003e\u003c/span\u003e \u0026amp; \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eHB\u003c/i\u003e( \u003d α / 2)\u003c/span\u003e . so we can calculate area of triangle \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eBOC\u003c/i\u003e\u003c/span\u003e .\u003c/p\u003e\u003cp\u003efor calculating the area of sector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eBOC\u003c/i\u003e\u003c/span\u003e first we should find \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/77/c3/77c3588e3847149d325489237f515b802e71990d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e . We name \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/77/c3/77c3588e3847149d325489237f515b802e71990d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e as \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/41/b2/41b2268afa862fe498e75dc79cf190e60111738e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003ein triangle \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eBOH\u003c/i\u003e\u003c/span\u003e according to \u003ca href\u003d\"https://en.wikipedia.org/wiki/Law_of_sines\"\u003eLaw of sines\u003c/a\u003e : \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4a/f8/4af827df05904acc25ecb3ba9c1cec9e3ec3a3cd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003d \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/87/dc/87dcfd63c50c514a72479f70d716cfe2e605c680.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8f/47/8f47e03310a34fa0dfe3ce5ec76689df06d42f91.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esin\u003c/i\u003e(\u003ci\u003eO\u003c/i\u003e / 2)\u003c/span\u003e \u003d \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0f/c4/0fc4512fee48cee97cff6c1ee79ff48fdd24afa8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8f/47/8f47e03310a34fa0dfe3ce5ec76689df06d42f91.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/41/b2/41b2268afa862fe498e75dc79cf190e60111738e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003d \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e * \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6e/5c/6e5c1fbed4b110eb4be325a2865dcaa096ed0a19.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo area of sector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eBOC\u003c/i\u003e\u003c/span\u003e \u003d \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b4/c0/b4c0cae0e23833dadb01563e0395bc558aa498b7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e * \u003cspan class\u003d\"tex-span\"\u003eπ \u003ci\u003eR\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eNow we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e \u0026amp; \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e So we have answer !\u003c/p\u003e\u003cp\u003eSource code: \u003ca href\u003d\"http://ideone.com/Zkvh6p\"\u003ehttp://ideone.com/Zkvh6p\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem H: Hamro and circles\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThis problem is basically the same as G. First, imagine that second circle is a square and solve G. Then, swap the circles, solve G again and add results.\u003c/p\u003e\u003cp\u003eSource code: \u003ca href\u003d\"http://pastebin.com/ZvJJcAKP\"\u003ehttp://pastebin.com/ZvJJcAKP\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem I:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem J:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem K: Pepsi Cola \u0026lt;3\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThere are at least 2 different solutions for this problem, I\u0027ll try to explain them.\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/cuber2460\" title\u003d\"Мастер cuber2460\"\u003ecuber2460\u003c/a\u003e\u0027s solution:\u003c/p\u003e\u003cp\u003eLet\u0027s define A as log of the biggest value in sequence T. By the problem constraints, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e ≤ 17\u003c/span\u003e. I\u0027ll describe an O(3^A) solution, which will pass if implemented without additional log factor. \u003c/p\u003e\u003cp\u003eWe\u0027ll try to find for all possible values of OR how many subsequences have that OR. (Taking the result is pretty easy then).\u003c/p\u003e\u003cp\u003eDefine X contains Y iff (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eXORY\u003c/i\u003e \u003d \u003ci\u003eX\u003c/i\u003e\u003c/span\u003e). Notice, that OR X might be created only from values, which X contain.\u003c/p\u003e\u003cp\u003eWe\u0027ll write subset DP in a quite standard way. For all values of X, we\u0027ll first assign dp[X] \u003d \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e is number of values, which X contain. (L can be computed the same time we write DP, just for all subsets of active bits in X, we\u0027ll add L[x] +\u003d L[subset]). Then, we will just subtract all values, because not all the subsets have OR equal to X. But we\u0027ll have this computed before entering X, so we can remove them without any additional effort.\u003c/p\u003e\u003cp\u003eSource code: \u003ca href\u003d\"http://pastebin.com/R6B2a41u\"\u003ehttp://pastebin.com/R6B2a41u\u003c/a\u003e \u003c/p\u003e\u003cp\u003eMy old code, which is O(3^A * A), and gets TLE, but it\u0027s quite easier to understand: \u003ca href\u003d\"http://pastebin.com/7GNLJQ7E\"\u003ehttp://pastebin.com/7GNLJQ7E\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/izrak\" title\u003d\"Гроссмейстер izrak\"\u003eizrak\u003c/a\u003e\u0027s solution:\u003c/p\u003e\u003cp\u003eWe consider a number to be the sum of some powers of two. (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sup\u003e + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e + ...\u003c/span\u003e).\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2f/ed/2fed6e3bd841e4af674b4854dee9c8eceb172388.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e + similar terms for \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e2 * \u003ci\u003ei\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e3 * \u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWhere g[i][j][k] \u003d the number of subsequences with bits i, j and k set. We can use the Mobius DP similar to that described in this solution: \u003ca href\u003d\"http://www.usaco.org/current/data/sol_skyscraper.html\"\u003ehttp://www.usaco.org/current/data/sol_skyscraper.html\u003c/a\u003e to calculate f[i] \u003d # of elements in the input array which are \u0026quot;supersets\u0026quot; of i in O(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enlgn\u003c/i\u003e\u003c/span\u003e). Then, to calculate g[i][j][k], we can calculate how many elements of the array contain bit i but not j,k or bit i,k but not j etc (call these types of requirements classes) through inclusion exclusion with f[] in O(\u003cspan class\u003d\"tex-span\"\u003e3  *  23  *  23\u003c/span\u003e). Then by iterating over subsets of the classes to be included in our subsequence and doing some simple math we can determine g[i][j][k] in O(223 * 23 * 23). The overall complexity is thus O($n lg n + log^3 n) See code for details.\u003c/p\u003e\u003cp\u003eSource code: \u003ca href\u003d\"http://pastebin.com/Hphc3k2y\"\u003ehttp://pastebin.com/Hphc3k2y\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem L:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem M: Guni!\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eTutorial by: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Anonym_KALEP\" title\u003d\"Эксперт Anonym_KALEP\"\u003eAnonym_KALEP\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can solve this problem using 2 segment trees. In first tree we keep array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and after processing each query of type 1 on it we add score of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to second tree and for queries of type 2 we process this query on second tree and add result to it.\u003c/p\u003e\u003cp\u003eIn first tree we keep negative of array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and for queries of type 1 we apply \u003ca href\u003d\"https://en.wikipedia.org/wiki/Range_minimum_query\"\u003eRMQ\u003c/a\u003e on it for finding minimum element in the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u0027s interval , its obvious that absolute value of minimum element in that interval is maximum element in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e , cuz we kepp negative of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u0027s . also only information needed from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u0027s are their maximum element( their score ) , so after getting answer of queries of type 1 from first tree we only add max element of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e( that is negative also ) to the second tree .\u003c/p\u003e\u003cp\u003efor queries of type 2 we use RMQ again this time on second tree and now we have answer for query . answer of this query is needed information for this Guni!(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e) so we add this number to second tree again . \u003c/p\u003e\u003cp\u003eIn the end the answer is sum of all elements in second tree (scores of Gunis).\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://ideone.com/n00BPJ\"\u003ehttp://ideone.com/n00BPJ\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem N:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem O:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem P:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem Q: Mina :X\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eWe can preprocess answers for each set size with the following DP: dp[0] \u003d dp[1] \u003d 0\u003c/p\u003e\u003cp\u003edp[i] \u003d min(max(dp[j] + 1, dp[i — j] + 2) for each \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ej\u003c/i\u003e \u0026lt; \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAlso, we should find what j gives optimal answer, we\u0027ll need it later.\u003c/p\u003e\u003cp\u003eTherefore, when we\u0027ll get a set S of size i, we\u0027ll already know what is correct answer for it.\u003c/p\u003e\u003cp\u003eWhen we know which j gives optimal answer, we can just query first j elements from our set and query them.\u003c/p\u003e\u003cp\u003eIf the answer is \u0026quot;Yes\u0026quot;, we should take those elements (and extract every other from S). Else, we should extract those \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e elements.\u003c/p\u003e\u003cp\u003eSolution: \u003ca href\u003d\"http://pastebin.com/cQ9vFkPc\"\u003ehttp://pastebin.com/cQ9vFkPc\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAccording to \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Anonym_KALEP\" title\u003d\"Эксперт Anonym_KALEP\"\u003eAnonym_KALEP\u003c/a\u003e this may be done with Fibonacci search. His code: \u003ca href\u003d\"http://ideone.com/3dTmfO\"\u003ehttp://ideone.com/3dTmfO\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem R:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem S:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem T: The ranking\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/gendelpiekel\" title\u003d\"Кандидат в мастера gendelpiekel\"\u003egendelpiekel\u003c/a\u003e\u0027s explanation: \u003c/p\u003e\u003cp\u003eConsider the simplified case where we know that, for some interval, every competitor is either before the interval (say there are S of these competitors), after the interval, or somewhere inside the interval with uniform probability over the whole interval (say there are K of these). Then if this arrangement happens, each of the K competitors then has a chance to come each of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e  +  1\u003ci\u003eth\u003c/i\u003e, \u003ci\u003eS\u003c/i\u003e  +  2\u003ci\u003eth\u003c/i\u003e, ..., \u003ci\u003eS\u003c/i\u003e  +  \u003ci\u003eKth\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNote also that if we consider all endpoints together and then take the intervals between consecutive endpoints: then for each interval, every competitor will either not cover that interval at all, or will completely cover that interval (and thus if they are in it, they will have a uniform probability of being anywhere in that interval). Also, there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e of these intervals.\u003c/p\u003e\u003cp\u003eThis gives us the simple algorithm: for each interval \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e))\u003c/span\u003e, for each competitor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e))\u003c/span\u003e, calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eS\u003c/i\u003e][\u003ci\u003eK\u003c/i\u003e]\u003c/span\u003e \u003d the probability of S other competitors appearing before this interval and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e other competitors appearing inside this interval (which we can do in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e with DP). However, this is overall \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e)\u003c/span\u003e which is too slow. So we need to try and calculate \u0026quot;\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eS\u003c/i\u003e][\u003ci\u003eK\u003c/i\u003e]\u003c/span\u003e for all competitors except i\u0026quot;, for every i. One idea is to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eS\u003c/i\u003e][\u003ci\u003eK\u003c/i\u003e]\u003c/span\u003e for all competitors, and then \u0026quot;subtract\u0026quot; each competitor with some maths. Overall this would be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e)\u003c/span\u003e. Theoretically this is possible but in practice it is too inaccurate.\u003c/p\u003e\u003cp\u003eInstead we can calculate this with divide and conquer (overall \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e({\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e}\u003ci\u003elgN\u003c/i\u003e)\u003c/span\u003e, or buckets . For example, for divide and conquer we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003el\u003c/i\u003e,  \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e \u003d the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eS\u003c/i\u003e][\u003ci\u003eK\u003c/i\u003e]\u003c/span\u003e for all competitors outside of the range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e,  \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e, and then recurse on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003el\u003c/i\u003e,  \u003ci\u003emid\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003emid\u003c/i\u003e,  \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem U:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem V:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem W: Palindrome query\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eConsider strings S and S\u0027, to make implementation easier. We\u0027ll use hashing to comparing their substrings. We\u0027ll store their values in a Fenwick or Segment Tree. Suppose we change position x. (Do not forget to remove previous value!) Then, instead of p1[x] * pot[x] we\u0027ll have p2[x] * pot[x] at this place. We add this value to our data structure, and we\u0027re done. \u003c/p\u003e\u003cp\u003eFor each query we\u0027ll use binary search to answer it, as when there\u0027s palindrome of length K, we\u0027re sure there are palindromes of length K-2, K-4, .... \u003c/p\u003e\u003cp\u003eSource code: \u003ca href\u003d\"http://pastebin.com/gn4wNe6a\"\u003ehttp://pastebin.com/gn4wNe6a\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSource code by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/adamant\" title\u003d\"Кандидат в мастера adamant\"\u003eadamant\u003c/a\u003e : \u003ca href\u003d\"http://ideone.com/8kLke7\"\u003ehttp://ideone.com/8kLke7\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem X:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eI\u0027ll try to write all solutions as soon as possible :)\u003c/p\u003e\u003c/div\u003e","tags":["editorial","hunger-games"]}}