{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1484605014,"rating":209,"authorHandle":"pimenta","modificationTimeSeconds":1484775764,"id":49812,"title":"\u003cp\u003eDecide if a number equals the sum of some submultiset of positive integers\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003eIntroduction\u003c/h3\u003e\u003cp\u003eOne of the tasks of last sunday\u0027s round problem \u003ca href\u003d\"/contest/755/problem/F\" title\u003d\"8VC Venture Cup 2017 - Elimination Round\"\u003e755F - PolandBall and Gifts\u003c/a\u003e was to check if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is the sum of some submultiset of positive integers. The most important observation to solve the problem is:\u003c/p\u003e\u003cp\u003eThe sum of all elements in the multiset equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWild \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ae/61/ae61a7a7b51c4a44209071eeec401906f95b74e4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution appeared! But not for me :( In the whole puzzle, this was the only missing part. All I could think was about an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e DP. Although this is a well-known problem with well-known solutions, I couldn\u0027t find really good tutorials and I\u0027ve had to struggle with the poor explanations and the contest\u0027s source codes. The most helpful reference was \u003ca href\u003d\"//codeforces.com/blog/entry/45576?#comment-302358\"\u003ethis one\u003c/a\u003e, but it does not explain the trick in full details and it only shows half the solution for the problem we\u0027ll discuss here. So, in this post, I\u0027ll try to explain the solution from the beginning. Of course, any additional good references are welcome in the comments.\u003c/p\u003e\u003cp\u003eI chose a solution that was submitted by at least three different users, including \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/tourist\" title\u003d\"Legendary grandmaster tourist\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003et\u003c/span\u003eourist\u003c/a\u003e, \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/ershov.stanislav\" title\u003d\"Legendary grandmaster ershov.stanislav\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003ee\u003c/span\u003ershov.stanislav\u003c/a\u003e and \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/rajat1603\" title\u003d\"Grandmaster rajat1603\"\u003erajat1603\u003c/a\u003e. This is not the easiest solution to understand, but IMHO is the easiest to code. Check my implementation near the end of this post.\u003c/p\u003e\u003ch3\u003ePrerequisites\u003c/h3\u003e\u003cp\u003eDynamic programming and bitwise operations.\u003c/p\u003e\u003ch3\u003eProblem statement\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eWarning\u003c/strong\u003e: Here, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e has a \u003cem\u003edifferent\u003c/em\u003e meaning from problem \u003ca href\u003d\"/contest/755/problem/F\" title\u003d\"8VC Venture Cup 2017 - Elimination Round\"\u003e755F - PolandBall and Gifts\u003c/a\u003e\u0027s \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Symbol \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e will denote the same thing, though.\u003c/p\u003e\u003cp\u003eYou\u0027re given a multiset of positive integers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e \u003d {(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e), (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e), ..., (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e)}\u003c/span\u003e, i.e., integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e occurs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e times in the multiset. Decide if there\u0027s a submultiset with sum equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. For example, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e \u003d {(1, 7), (3, 2), (19, 5)}\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 10\u003c/span\u003e, then \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ad/f3/adf3afbb625168d1fbd314bc5a1c543289f585e5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is a solution, because \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f3/9e/f39e264b28da6de0f934216aa71925ec2ed35545.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s start with the upper bounds. Without loss of generality, we may assume that:\u003c/p\u003e \u003col\u003e   \u003cli\u003eThe integers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e are such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e yields a trivial answer and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is useless. Therefore we have at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e distinct integers: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ \u003ci\u003ek\u003c/i\u003e - 1 \u003d \u003ci\u003eO\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e. And, in the worst case, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.\u003c/li\u003e   \u003cli\u003eThe multiplicities \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e are such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, because if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, then we know that the integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e occurs in the solution at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e times.\u003c/li\u003e   \u003cli\u003eRemember the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e-th harmonic number: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f0/a3/f0a34f2d7296a3253551202a576c12c0656bd50f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. From that and from the previous bounds, we have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e2/ef/e2ef5c0933194c093b71abb9b767724142326776.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/li\u003e   \u003cli\u003eFinally, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ba/e6/bae60dc8184a7c051118b442189206a8805a8292.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003ca href\u003d\"https://goo.gl/gify6v\"\u003eProof\u003c/a\u003e.\u003c/li\u003e \u003c/ol\u003e\u003ch3\u003eSolutions\u003c/h3\u003e\u003ch4\u003eSimpler version, naive DP\u003c/h4\u003e\u003cp\u003eWe could replicate the repeated integers creating a sequence \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e such that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fe/20/fe203ac8d65e92826a163e83b9e5377f72615470.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and apply the following dynamic programming.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c7/c2/c7c2b1be7ee35400e102363c7f7d5dee1315eba8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e only if it\u0027s possible to find a subsequence from \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e with sum equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Then\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/10/64/1064a49d304fa90b6225a4d24ea54233facb254b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003ethe answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003er\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e and the cost is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/20/a7/20a7f3066fab9f9f9a32574df53c14ebc0a44fc0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, from Upper Bound 3. The only non-trivial transition is the last: if you can include \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in the solution, you can either take it (subproblem \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - 1, \u003ci\u003ej\u003c/i\u003e - \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e remains) or leave it (subproblem \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - 1, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e remains). If any of these choices return \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c7/c2/c7c2b1be7ee35400e102363c7f7d5dee1315eba8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, then subproblem \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e has a positive answer.\u003c/p\u003e\u003ch4\u003eSimpler version, tricky DP\u003c/h4\u003e\u003cp\u003eThe well-known \u003ccode\u003estd::bitset\u003c/code\u003e data structure is capable of performing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e bitwise operations with an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1 / 32)\u003c/span\u003e constant improvement (that actually depends on the underlying integral type being used... \u003ccode\u003estd::bitset\u003c/code\u003e uses \u003ccode\u003elong\u003c/code\u003e, which has 32 bits in the Codeforces environment). We can twist the DP above to be suitable for using bitsets.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e be a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/span\u003e-length bitset such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th bit (0-based) is 1 only if it\u0027s possible to find a subsequence from \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e with sum equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Then\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b1/40/b1408232eb37bfeb3738676a366a6ed6a5ad1963.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003ethe answer is the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-th bit of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003er\u003c/i\u003e)\u003c/span\u003e and the cost is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/db/2a/db2a43e67e132c5b2bd58ae3f6dfdf8fd766cefe.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. The non-trivial transition took me some minutes to understand, since I didn\u0027t know the precise meaning of this DP. But at this point, I think it\u0027s not hard to see that the \u003cem\u003eleft shift\u003c/em\u003e by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e positions combines all values allowed by subproblem \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - 1)\u003c/span\u003e with the current integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, while the \u003cem\u003eor\u003c/em\u003e ensures that all values allowed by subproblem \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - 1)\u003c/span\u003e stay allowed. The latter is the same as leaving the integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Pretty cool, right?! But there\u0027s something even cooler!\u003c/p\u003e\u003ch4\u003eFull problem, naive DP\u003c/h4\u003e\u003cp\u003eLet\u0027s go back to the multiplicities.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c7/c2/c7c2b1be7ee35400e102363c7f7d5dee1315eba8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e only if it\u0027s possible to find a submultiset from \u003cspan class\u003d\"tex-span\"\u003e{(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e), (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e), ..., (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)}\u003c/span\u003e with sum equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Then\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/72/a8/72a895d2324d244244995450a859a8d20b872a9d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003ethe answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e and the cost is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/78/f7/78f76d3f11c256c3ce47f956f32ed19c4ffe126c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. The only non-trivial transition is the last: all subproblems of the form \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - 1, \u003ci\u003ej\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003et\u003c/i\u003e)\u003c/span\u003e are or\u0027d together, subject to \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003et\u003c/i\u003e ≤ \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e ≥ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. In other words, we consider all possible amounts \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e of taking \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e into the solution. This is pretty much the same DP as the one for the simpler version of the problem. Notice that the upper bounds are the same!\u003c/p\u003e\u003ch4\u003eFull problem, tricky DP\u003c/h4\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e be a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/span\u003e-length bitset such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th bit (0-based) is 1 only if it\u0027s possible to find a submultiset from \u003cspan class\u003d\"tex-span\"\u003e{(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e), (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e), ..., (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)}\u003c/span\u003e with sum equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Then\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ee/b9/eeb9511f5e924921d16707be0a2011093c073347.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003ethe answer is the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-th bit of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e and the cost is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b6/40/b6401855ce8747fb77c9d3f2ab7a0e55a7798e4e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. The non-trivial transition combines all possible amounts \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e of taking \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e into the solution with all the values allowed by subproblem \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - 1)\u003c/span\u003e. If it\u0027s hard to understand this DP, spend some more time in the simpler version. Try to get everything clearly before going ahead.\u003c/p\u003e\u003ch4\u003eFull problem, trickiest DP\u003c/h4\u003e\u003cp\u003eNow, we\u0027re going to kill that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d4/49/d449d7cc3f851b3de08b6e43c8bd0e812bd88a2e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e factor. Consider the follwing C++ bottom-up implementation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  bitset\u0026lt;MAXK\u0026gt; dp;\n  dp[0] \u003d 1;\n  for (int i \u003d 1; i \u0026lt;\u003d n; i++) {\n    for (int x \u003d 0; (1\u0026lt;\u0026lt;x) \u0026lt;\u003d m[i]; x++) {\n      dp |\u003d (dp \u0026lt;\u0026lt; (a[i]*(1\u0026lt;\u0026lt;x)));\n      m[i] -\u003d (1\u0026lt;\u0026lt;x);\n    }\n    dp |\u003d (dp \u0026lt;\u0026lt; (a[i]*m[i]));\n  }\n  // now, dp[k] equals the k-th bit of f(n)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is the previous DP with a small but very important modification. Instead of blindly or\u0027ing all the possible shifts iterating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e from 0 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, we do that in a faster and smarter way. We only do that for the first powers of 2 that we can permanently subtract from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and for the remainder.\u003c/p\u003e\u003cp\u003eThe following loop invariant holds in the beginning of each iteration: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is combined with shifts \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 0, 1, 2, 3, ..., 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e. When \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d 0\u003c/span\u003e, the invariant trivially holds. Now, suppose this is true for some \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Then combination of shifts \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e will produce shift \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. Combination of shifts \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e will produce shift \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e + 1\u003c/span\u003e. Combination of shifts \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e will produce shift \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e + 2\u003c/span\u003e. Combination of shifts \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 3\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e will produce shift \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e + 3\u003c/span\u003e... Until combination of shifts \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e produces shift \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e - 1 \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e + 1\u003c/sup\u003e - 1\u003c/span\u003e and the invariant maintenance is complete.\u003c/p\u003e\u003cp\u003eFirst of all, we just showed that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/67/4d/674da49534ed996174337fe711158d77b85e13c5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for all non-negative integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e. Now, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e be the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e after the last iteration. We know that we subtracted \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1a/eb/1aebcf404c99e82b9f74a42532d4e6a8e91794da.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Then the last bitwise operation for a fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e combines the shifts \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 0, 1, 2, 3, ..., 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e with the final shift \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e \u003d \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - (2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sup\u003e - 1)\u003c/span\u003e. In the previous paragraph we saw that these combinations yield shifts \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d \u003ci\u003ew\u003c/i\u003e, \u003ci\u003ew\u003c/i\u003e + 1, \u003ci\u003ew\u003c/i\u003e + 2, \u003ci\u003ew\u003c/i\u003e + 3, ..., \u003ci\u003ew\u003c/i\u003e + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e. The last shift is actually \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - (2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sup\u003e - 1) + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sup\u003e - 1 \u003d \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. To see that shifts \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 0, 1, 2, 3, ..., \u003ci\u003ew\u003c/i\u003e - 1\u003c/span\u003e are also combined, just notice that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e - 1\u003c/span\u003e must be less or equal to \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e, since otherwise \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e would be larger than \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e and the loop would be still running. So we conclude that all shifts from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e are now combined in the bitset \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e! Now, \u003cem\u003ethat\u003c/em\u003e is cool, right?!?\u003c/p\u003e\u003cp\u003eThe cost of this algorithm is clearly \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/54/f3/54f30069751b4c253177feacef657b64bc12ad9b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, using Upper Bound 4.\u003c/p\u003e\u003ch3\u003eApplication to problem \u003ca href\u003d\"/contest/755/problem/F\" title\u003d\"8VC Venture Cup 2017 - Elimination Round\"\u003e755F - PolandBall and Gifts\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eWarning\u003c/strong\u003e: The \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e here refers to problem \u003ca href\u003d\"/contest/755/problem/F\" title\u003d\"8VC Venture Cup 2017 - Elimination Round\"\u003e755F - PolandBall and Gifts\u003c/a\u003e\u0027s \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. It \u003cem\u003edoes not\u003c/em\u003e refer to the number of distinct integers in the multiset anymore. Symbol \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e still refers to the goal value, though.\u003c/p\u003e\u003cp\u003eIn the more general version of the problem, discussed above, we used the fact that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to state Upper Bound 4: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/83/8d/838df173fb64312b4c01f848fadb6db31339f498.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. In the round\u0027s problem, we have an even tighter bound. Let me remind you about the first observation of this post: \u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8d/fb/8dfb5f85926dccac6ab5d391f48a6ba8a2043ebb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eNot only the product \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is bounded by some value for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, but the whole sum of these products over all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is bounded by that \u003cem\u003every same\u003c/em\u003e value. As proved \u003ca href\u003d\"//codeforces.com/blog/entry/49793?#comment-337754\"\u003ehere\u003c/a\u003e, this strong additional constraint gives us the upper bound \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b0/78/b07830211dc6575ccd1bb6ac59b8b44bf1752aa6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Hence, the overall complexity using the last algorithm discussed here is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0d/45/0d4556aa97e96abc29d76504bbeaac1f3e6f24ad.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003eConclusion\u003c/h3\u003e\u003cp\u003eDespite these upper bounds and algorithms are well-known to many people, they weren\u0027t to me until yesterday. I hope I\u0027ve gathered all necessary information about this subject in this post and hope this will help others.\u003c/p\u003e\u003c/div\u003e","tags":["subset sum","multi set","dynamic programming","bitset"]}}