{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1461927107,"rating":0,"authorHandle":"randomusername","modificationTimeSeconds":1461970022,"id":44613,"title":"\u003cp\u003eČas 23+24 — 29.04.2016.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eGradivo\u003c/h2\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eNeke teške stvari izbačene jer nećemo stići(Lazy segtree, SCC (Tarjan, Kosaraju), Matchings+Flow (Ford Fulkerson, Edmond Karp), SA+LCP)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eDanas ono što je ostalo od grafova + pomenuta sqrt dekompozicija [RMQ, podela na sqrt(N) bucketa, sqrt(N) po operaciji]\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eSledeći put KMP + Segtree + ponovo Sparse Table [nek neko nađe onaj hrvatski konstantna struktura page], i to je to\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eKao i uvek, bitne su ideje iza ovih stvari i treba znati o čemu se radi čak i ako ne kucate (a preporučuje se da kucate)\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003eNajkraći putevi u usmerenim težinskim grafovima\u003c/h4\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\"\u003eDijkstra\u003c/a\u003e\u003c/p\u003e   \u003cul\u003e     \u003cli\u003e\u003ca href\u003d\"http://pastebin.com/H0BvHXxU\"\u003esvež danas pisan kod\u003c/a\u003e\u003c/li\u003e     \u003cli\u003esingle source\u003c/li\u003e     \u003cli\u003eradi samo kada su sve težine grana nenegativne\u003c/li\u003e     \u003cli\u003eO(ElogV+VlogV)\u003c/li\u003e     \u003cli\u003euvek obrađujemo najbliži neobrađeni čvor\u003c/li\u003e     \u003cli\u003e!!! ovo ćemo najćešće koristiti kad nam trebaju najkraći putevi od nekog čvora\u003c/li\u003e   \u003c/ul\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm\"\u003eFloyd-Warshall\u003c/a\u003e\u003c/p\u003e   \u003cul\u003e     \u003cli\u003e\u003ca href\u003d\"http://pastebin.com/pPMNUFtv\"\u003eizuzetno mator kod\u003c/a\u003e\u003c/li\u003e     \u003cli\u003eall pairs\u003c/li\u003e     \u003cli\u003eradi i kada su težine negativne, daće d[0][0]\u0026lt;0 ako ima neg. ciklusa\u003c/li\u003e     \u003cli\u003eO(V^3)\u003c/li\u003e     \u003cli\u003ekoristimo prvih K čvorova za najbolji put\u003c/li\u003e     \u003cli\u003e!!! ovo koristimo za N do 100 na primer, kad znamo da nam trebaju sve distance između svaka dva, da izbegnemo N Dijkstri\u003c/li\u003e   \u003c/ul\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm\"\u003eBellman-Ford\u003c/a\u003e\u003c/p\u003e   \u003cul\u003e     \u003cli\u003e\u003ca href\u003d\"http://pastebin.com/LGbjqaNw\"\u003eizuzetno mator kod\u003c/a\u003e\u003c/li\u003e     \u003cli\u003esingle source\u003c/li\u003e     \u003cli\u003eradi i kada su težine negativne, daće poboljšanje u N-toj iteraciji ako ima neg. ciklusa\u003c/li\u003e     \u003cli\u003eO(V*E)\u003c/li\u003e     \u003cli\u003erelax-ujemo svaki edge N-1 puta\u003c/li\u003e     \u003cli\u003e!!! ovo koristimo često kad nam treba brza detekcija negativnih ciklusa\u003c/li\u003e   \u003c/ul\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eSide note: nismo ovo pominjali ali važna je nekad i rekonstrukcija najkraćeg puta. Za to često koristimo promenljivu \u0026quot;from\u0026quot; u svakom čvoru u kojoj upisujemo \u0026quot;odakle smo stigli\u0026quot; (npr. u Dijkstri, za ostale nije tako trivijalno ali nije teško) i onda pratimo \u0026quot;from\u0026quot; putanju\u003c/p\u003e\u003c/li\u003e   \u003cli\u003eSide note 2: u dijkstra kodu imate kako se pravi operator poređenja za bilo koje dve strukture\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003eMinimalna razapinjuća stabla (MST)\u003c/h4\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Prim%27s_algorithm\"\u003ePrim\u003c/a\u003e   \u003cul\u003e     \u003cli\u003e\u003ca href\u003d\"http://pastebin.com/bZurzGaB\"\u003eizuzetno mator kod, zaista\u003c/a\u003e\u003c/li\u003e     \u003cli\u003ene može da nađe minimalnu razapinjuću šumu tj. ne radi na nepovezanim grafovima za razliku od Kruskala (radi ako ga pozovemo nezavisno za svaku komponentu)\u003c/li\u003e     \u003cli\u003eO(ElogV) (imajte u vidu da je logV~logE, jer je V~Е^2 a log(E^2)~2logE~logE)\u003c/li\u003e     \u003cli\u003e!!! ako ne znate DSU lakši za skucati od Kruskala, ali su jednako brzi ako ne koristimo Fibonači hip, a ne koristimo\u003c/li\u003e   \u003c/ul\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\"\u003eKruskal\u003c/a\u003e   \u003cul\u003e     \u003cli\u003e\u003ca href\u003d\"http://pastebin.com/63XHatmk\"\u003eizuzetno mator kod, stvarno, ne kopi pejstujem ovo zaista jeste\u003c/a\u003e\u003c/li\u003e     \u003cli\u003emože da nađe minimalnu razapinjuću šumu tj. radi bez modifikacija na nepovezanim grafovima za razliku od Prima\u003c/li\u003e     \u003cli\u003eO(ElogV)\u003c/li\u003e     \u003cli\u003e!!! ako znate DSU lakši za skucati, jednako su brzi\u003c/li\u003e   \u003c/ul\u003e\u003c/li\u003e   \u003cli\u003ePomoćna struktura neophodna za Kruskal: \u003ca href\u003d\"https://en.wikipedia.org/wiki/Disjoint-set_data_structure\"\u003eUnion Find / DSU\u003c/a\u003e   \u003cul\u003e     \u003cli\u003eKod neće da se linkuje lepo: \u003ca\u003ehttps://github.com/Rand0mUsername/algorithms/blob/master/Data%20Structures/Disjoint%20Set%20(Union%20Find).cpp\u003c/a\u003e\u003c/li\u003e     \u003cli\u003ePodržava operacije Init (svako je u svom skupu sam), Find (nađi u kom skupu je X tj. nađi predstavnika skupa), Union (spoji dva skupa) amortizovano u (1) [\u0026quot;u proseku O(1)\u0026quot;] kada se dodaju sve optimizacije\u003c/li\u003e     \u003cli\u003eAko radimo sa listama union je konstantan ali je find linearan\u003c/li\u003e     \u003cli\u003eAko svi pokazuju na predstavnika liste find je konstantan ali union je linearan\u003c/li\u003e     \u003cli\u003eRešenje je nešto između, čudna stabla gde svako pokazuje na roditelja i praćenjem tog puta se stiže do predstavnika\u003c/li\u003e     \u003cli\u003eOPTIMIZACIJA 1 (Path compression): Kad radimo find koristimo priliku da povežemo sve direktno na predstavnika i tako skratimo dubinu (a dubina je ono što figuriše u složenosti)\u003c/li\u003e     \u003cli\u003eOPTIMIZACIJA 2 (Union by rank): Za svaki node definišemo rank tj. dubinu stabla i uvek radimo Union tako što spojimo pliće stablo na dublje ili ako su iste dubine spojimo bilo kako i uvećamo rank jednog od njih\u003c/li\u003e   \u003c/ul\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch2\u003eZadaci\u003c/h2\u003e\u003cp\u003eA. Najdalji manji desno u nizu (ne najblizi!) [ Urađeno, sort i pamtimo najdesniji max do sada; ako imamo i updates onda ide segmentno]\u003c/p\u003e\u003cp\u003eБ. Matrica velicine 1000x1000, i dva kverija (Q do 1e5): 1. promeni polje (x, y) 2. za dato polje nadji najdalje po menhetn distanci polje cija je vrednost manja od mog [ Urađeno, svodi se na prethodni zadatak ]\u003c/p\u003e\u003cp\u003eВ. MAX+MIN: Dat je niz od 1e5 brojeva i isto toliko ima upita:  za segment [L, R] naci indeks X iz [L, R] tako da je max[L, X] + min[L, X] maksimalno [ Urađeno, offline se radi + lazy segmentno + prvi desno veći ]\u003c/p\u003e\u003cp\u003eГ. \u003ca href\u003d\"http://www.spoj.com/problems/PT07Y/\"\u003ehttp://www.spoj.com/problems/PT07Y/\u003c/a\u003e [ Zadaci od ovog pa do CERC07B imaju veze sa gradivom iz grafova koje smo radili danas, ovaj je za zagrevanje iz DSU recimo ]\u003c/p\u003e\u003cp\u003eД. \u003ca href\u003d\"http://www.spoj.com/problems/DINOSM/\"\u003ehttp://www.spoj.com/problems/DINOSM/\u003c/a\u003e [ Bubblecup 2014, svesce se na neki graf, malo je tezi zadatak ]\u003c/p\u003e\u003cp\u003eЂ. \u003ca href\u003d\"http://www.spoj.com/problems/CHAMPS/\"\u003ehttp://www.spoj.com/problems/CHAMPS/\u003c/a\u003e [ Bubblecup 2014, i ovo ce biti neki graf i poznat algoritam, nije toliko tesko ]\u003c/p\u003e\u003cp\u003eE. \u003ca href\u003d\"http://www.usaco.org/index.php?page\u003dviewproblem2\u0026amp;cpid\u003d531\"\u003ehttp://www.usaco.org/index.php?page\u003dviewproblem2\u0026amp;cpid\u003d531\u003c/a\u003e [ Skroz kul forica ] \u003c/p\u003e\u003cp\u003eЖ. \u003ca href\u003d\"http://www.spoj.com/problems/AMR11F/\"\u003ehttp://www.spoj.com/problems/AMR11F/\u003c/a\u003e [ najkraci putevi with a twist ]\u003c/p\u003e\u003cp\u003eЗ. \u003ca href\u003d\"https://www.codechef.com/problems/COALSCAM\"\u003ehttps://www.codechef.com/problems/COALSCAM\u003c/a\u003e [ MST with a twist ] \u003c/p\u003e\u003cp\u003eИ. \u003ca href\u003d\"https://www.codechef.com//problems/GALACTIK\"\u003ehttps://www.codechef.com//problems/GALACTIK\u003c/a\u003e [ skroz lepa primena MST ]\u003c/p\u003e\u003cp\u003eЈ. \u003ca href\u003d\"https://www.codechef.com/INLO2015/problems/SCHEME01\"\u003ehttps://www.codechef.com/INLO2015/problems/SCHEME01\u003c/a\u003e [ dijkstra modifikacija ]\u003c/p\u003e\u003cp\u003eК. \u003ca href\u003d\"http://www.spoj.com/problems/CERC07B/\"\u003ehttp://www.spoj.com/problems/CERC07B/\u003c/a\u003e [ random lep zadatak, probajte da skrljate ] \u003c/p\u003e\u003cp\u003eЛ. \u003ca href\u003d\"http://www.spoj.com/problems/HELPBTW/\"\u003ehttp://www.spoj.com/problems/HELPBTW/\u003c/a\u003e [ bubblecup 2016 round 1, binarna po resenju ]\u003c/p\u003e\u003cp\u003eЉ. \u003ca href\u003d\"http://www.spoj.com/problems/CIRCIRC/\"\u003ehttp://www.spoj.com/problems/CIRCIRC/\u003c/a\u003e [ bubblecup 2016 round 1, neko je nabo resenje na casu ]\u003c/p\u003e\u003cp\u003eМ. \u003ca href\u003d\"http://www.spoj.com/problems/ROOBOT/\"\u003ehttp://www.spoj.com/problems/ROOBOT/\u003c/a\u003e [ bubblecup 2016 round 1, dinamicko i malo verovatnoce ]\u003c/p\u003e\u003cp\u003eН. \u003ca href\u003d\"http://www.spoj.com/problems/BGRAVITY/\"\u003ehttp://www.spoj.com/problems/BGRAVITY/\u003c/a\u003e [ bubblecup 2016 round 1, ad hoc forica ]\u003c/p\u003e\u003cp\u003eЊ. \u003ca href\u003d\"https://mindcoding.ro/pb/u\"\u003ehttps://mindcoding.ro/pb/u\u003c/a\u003e [ lagano dinamicko, najlaksi zadatak ovde cini mi se ]\u003c/p\u003e\u003cp\u003eО. \u003ca href\u003d\"https://mindcoding.ro/pb/kpath\"\u003ehttps://mindcoding.ro/pb/kpath\u003c/a\u003e [ mnogo lep zadatak na stablu, mnogo! ]\u003c/p\u003e\u003ch3\u003eDo sledećeg časa\u003c/h3\u003e \u003cul\u003e   \u003cli\u003eRazumeti sve ovo gore i uraditi što više ovih zadataka, spremiti pitanja u vezi sa njima\u003c/li\u003e   \u003cli\u003eJenko da digne slike na neki imgur ako ga ne mrzi da ja ne dižem jednu po jednu nego da samo ubacim linkove gde treba, mislim da bi značilo ostalima\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eBejaše: \u003ca class\u003d\"rated-user user-green\" href\u003d\"/profile/FreeJ\" title\u003d\"Pupil FreeJ\"\u003eFreeJ\u003c/a\u003e, \u003ca class\u003d\"rated-user user-green\" href\u003d\"/profile/jobelix\" title\u003d\"Pupil jobelix\"\u003ejobelix\u003c/a\u003e, \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Reichsmarschall\" title\u003d\"Expert Reichsmarschall\"\u003eReichsmarschall\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["čas"]}}