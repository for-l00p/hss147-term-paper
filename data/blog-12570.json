{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1401998005,"rating":0,"authorHandle":"HidenoriS","modificationTimeSeconds":1402001647,"id":12570,"title":"\u003cp\u003eDisjoint-set data structure (Implementation) \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eAs explained in the \u003ca href\u003d\"//codeforces.com/group/TkF7VfNoT4/blog/entry/132\"\u003eprevious entry\u003c/a\u003e, dsu allows two operations.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e1) Check if two nodes are connected.\u003cbr /\u003e 2) Connect two nodes. \u003cbr /\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eI also mentioned that each set has exactly one \u0027parent\u0027 and it plays an important role.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eIn order to implement it, you need to learn 1) how to initialize 2) how to connect nodes and 3) how to check if nodes are connected.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eThey are actually much easier than it sounds like!\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eFor the rest of this article, N represents the number of nodes, and each node is numbered from 1 .. N.\u003cbr /\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eInitialization\u003cbr /\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eYou need to do two things.\u003cbr /\u003e\u003cbr /\u003e First initialize an array p s.t. p[i] \u003d i for each i \u003d 1, ..., N.\u003cbr /\u003e Second, write a short function named \u0026quot;\u003ca href\u003d\"http://pastebin.com/5X4t4UCG\"\u003efind\u003c/a\u003e\u0026quot;(Click to see the code)\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eThis finds a parent of a node, and keeps the information in p. In other words, y\u003dfind(x) means y is the parent of x. And it assigns y to p[x].\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eAs you probably have expected, p[i] keeps a parent of node i.\u003cbr /\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eHow to connect nodes\u003cbr /\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eTo connect nodes u, v, just perform the following assignment.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003ep[find(u)]\u003dfind(v).\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eSimple enough. You already connected u and v!\u003cbr /\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eHow to check if node a and node b are connected.\u003cbr /\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eIf find(a) \u003d\u003d find(b), they are connected. Otherwise, not. \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eThat\u0027s it! It\u0027s really simple!\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eYou initialize an array, write a 3 line function, and you are good to go.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eJust perform one assignment when connecting nodes.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eI\u0027ll explain how this works in the actual problems in \u003ca href\u003d\"//codeforces.com/group/TkF7VfNoT4/blog/entry/134\"\u003ethe next article\u003c/a\u003e. \u003c/p\u003e\u003cp\u003eThank you very much for reading!\u003c/p\u003e\u003c/div\u003e","tags":[]}}