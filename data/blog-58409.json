{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1521274750,"rating":-26,"authorHandle":"ogrin_knyaz","modificationTimeSeconds":1521300355,"id":58409,"title":"\u003cp\u003eКрестики-нолики. не ставьте минусы!!!! Этот код, чтобы не потерять\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003einclude \u003c/h1\u003e\u003ch1\u003einclude \u003c/h1\u003e\u003ch1\u003einclude \u003c/h1\u003e\u003ch1\u003einclude \u003c/h1\u003e\u003cp\u003eusing namespace std; const char X \u003d \u0027X\u0027; const char O \u003d \u00270\u0027; const char EMPTY \u003d \u0027 \u0027; const char TIE \u003d \u0027T\u0027; const char NO_ONE \u003d \u0027N\u0027; void instructions(); char askYesNo(string question); int askNumber(string question, int high, int low \u003d 0); char humanPiece(); char opponent(char piece); void displayBoard(const vector\u0026amp; board); char winner(const vector\u0026amp; board); bool isLegal(const vector\u0026amp; board, int move); int humanMove(const vector\u0026amp; board, char human); int computerMove(vector board, char computer); void announceWinner(char winner, char computer, char human); void instructions() {  cout \u0026lt;\u0026lt; \u0026quot;Добро пожаловать в игру: Tic-Tac-Toe.\\n\u0026quot;;  cout \u0026lt;\u0026lt; \u0026quot;--где человеческий мозг ничто против кремниевого процессора\\n\\n\u0026quot;;  cout \u0026lt;\u0026lt; \u0026quot;Делайте ход с помощью номеров. От 0 до 8. Номер\\n\u0026quot;;  cout \u0026lt;\u0026lt; \u0026quot;соответствует указанному положению в таблице. Как показано:\\n\\n\u0026quot;;  cout \u0026lt;\u0026lt; \u0026quot; О | 1 | 2 \u0026quot;\u0026lt;\u0026lt; endl;  cout \u0026lt;\u0026lt; \u0026quot; --------- \u0026quot;\u0026lt;\u0026lt; endl;  cout \u0026lt;\u0026lt; \u0026quot; 3 | 4 | 5 \u0026quot;\u0026lt;\u0026lt; endl;  cout \u0026lt;\u0026lt;\u0026quot; --------- \u0026quot; \u0026lt;\u0026lt; endl;  cout \u0026lt;\u0026lt; \u0026quot; 6 | 7 | 8\u0026quot; \u0026lt;\u0026lt; endl;  cout \u0026lt;\u0026lt; endl;  cout \u0026lt;\u0026lt; \u0026quot;приготовься человек, игра начинается...\\n\\n\u0026quot;; } char askYesNo(string question) {  char response;  do  {  cout \u0026lt;\u0026lt; question \u0026lt;\u0026lt; \u0026quot;(y/n): \u0026quot;;  cin \u0026gt;\u0026gt; response;  }  while(response!\u003d\u0027y\u0027 \u0026amp;\u0026amp; response!\u003d\u0027n\u0027);  return response; } int askNumber(string question, int high, int low) {  int num;  do  {  cout \u0026lt;\u0026lt; question \u0026lt;\u0026lt; \u0026quot;(\u0026quot; \u0026lt;\u0026lt; low \u0026lt;\u0026lt; \u0026quot;-\u0026quot; \u0026lt;\u0026lt; high \u0026lt;\u0026lt; \u0026quot;):\u0026quot;;  cin \u0026gt;\u0026gt; num;  }  while(num\u0026gt;high || num \u0026lt; low);  return num; } char humanPiece() {  char go_first\u003daskYesNo(\u0026quot;Вы будете ходить первым?\u0026quot;);  if (go_first\u003d\u003d\u0027y\u0027)  {  cout \u0026lt;\u0026lt; \u0026quot;Тогда ходи, человек.\u0026quot; \u0026lt;\u0026lt; endl;  return X;  }  else  {  cout \u0026lt;\u0026lt; \u0026quot;Ваша храбрость будет вашим поражением. Что ж, я хожу первый\u0026quot; \u0026lt;\u0026lt; endl;  return O;  } } char opponent(char piece) {  if (piece \u003d\u003d X)  {  return O;  }  else  {  return X;  } } void displayBoard(const vector\u0026amp; board) {  cout \u0026lt;\u0026lt; \u0026quot;\\n\\t\u0026quot; \u0026lt;\u0026lt; board[0] \u0026lt;\u0026lt; \u0026quot;|\u0026quot; \u0026lt;\u0026lt; board[1] \u0026lt;\u0026lt; \u0026quot;|\u0026quot; \u0026lt;\u0026lt; board[2];  cout \u0026lt;\u0026lt; \u0026quot;\\n\\t\u0026quot; \u0026lt;\u0026lt; \u0026quot;-----\u0026quot;;  cout \u0026lt;\u0026lt; \u0026quot;\\n\\t\u0026quot; \u0026lt;\u0026lt; board[3] \u0026lt;\u0026lt; \u0026quot;|\u0026quot; \u0026lt;\u0026lt; board[4] \u0026lt;\u0026lt; \u0026quot;|\u0026quot; \u0026lt;\u0026lt; board[5];  cout \u0026lt;\u0026lt; \u0026quot;\\n\\t\u0026quot; \u0026lt;\u0026lt; \u0026quot;-----\u0026quot;;  cout \u0026lt;\u0026lt; \u0026quot;\\n\\t\u0026quot; \u0026lt;\u0026lt; board[6] \u0026lt;\u0026lt; \u0026quot;|\u0026quot; \u0026lt;\u0026lt; board[7] \u0026lt;\u0026lt; \u0026quot;|\u0026quot; \u0026lt;\u0026lt; board[8];  cout \u0026lt;\u0026lt; \u0026quot;\\n\\n\u0026quot;; } char winner(const vector\u0026amp; board) {  const int WINNING_ROWS[8][3]\u003d{{0,1,2},  {3, 4, 5},  {6, 7, 8},  {0, 3, 6},  {1, 4, 7},  {2, 5, 8},  {0, 4, 8},  {2, 4, 6}  };  const int TOTAL_ROWS\u003d8;  for (int row\u003d0; row\u0026lt;TOTAL_ROWS; row++)  {  if ((board[WINNING_ROWS[row][0]] !\u003d EMPTY) \u0026amp;\u0026amp;  (board[WINNING_ROWS[row][0]] \u003d\u003d board[WINNING_ROWS[row][1]]) \u0026amp;\u0026amp;  (board[WINNING_ROWS[row][1]] \u003d\u003d board[WINNING_ROWS[row][2]]))  {  return board[WINNING_ROWS[row][0]];  }  }  if (count(board.begin(), board.end(), EMPTY) \u003d\u003d 0)  return TIE;  return NO_ONE; } inline bool isLegal(int move, const vector\u0026amp; board) {  return (board[move] \u003d\u003d EMPTY); } int humanMove(const vector\u0026amp; board, char human) {  int move \u003d askNumber(\u0026quot;Ваш следующий ход?\u0026quot;, (board.size() -1));  while (!isLegal(move, board))  {  cout \u0026lt;\u0026lt; \u0026quot;\\nЭто поле уже занято, глупый человек.\\n\u0026quot;;  move \u003d askNumber(\u0026quot;Ваш следующий ход?\u0026quot;, (board.size() -1));  }  cout \u0026lt;\u0026lt; \u0026quot;Допустим...\\n\u0026quot;;  return move; } int computerMove(vector board, char computer) {  unsigned int move \u003d 0;  bool found \u003d false;  while (!found \u0026amp;\u0026amp; move \u0026lt; board.size())  {  if (isLegal(move, board))  {  board[move] \u003d computer;  found \u003d winner(board) \u003d\u003d computer;  board[move] \u003d EMPTY;  }  if (!found)  {  ++move;  }  }  if (!found)  {  move \u003d 0;  char human \u003d opponent(computer);  while (!found \u0026amp;\u0026amp; move \u0026lt; board.size())  {  if (isLegal(move, board))  {  board[move] \u003d human;  found \u003d winner(board) \u003d\u003d human;  board[move] \u003d EMPTY;  }  if(!found)  {  ++move;  }  }  }  if ( ! found)  {  move \u003d 0;  unsigned int i \u003d 0;  const int BEST_MOVES[] \u003d {4, 0, 2, 6, 8, 1, 3, 5, 7};  while (!found \u0026amp;\u0026amp; i \u0026lt; board.size())  {  move \u003d BEST_MOVES[i];  if (isLegal(move, board))  {  found \u003d true;  }  ++i;  }  }  cout \u0026lt;\u0026lt; \u0026quot;Тогда я схожу так \u0026quot; \u0026lt;\u0026lt; move \u0026lt;\u0026lt; endl;  return move; } void announceWinner(char winner, char computer, char human) {  if (winner \u003d\u003d computer)  {  cout \u0026lt;\u0026lt; winner \u0026lt;\u0026lt; \u0026quot; выйграл!\\n\u0026quot;;  cout \u0026lt;\u0026lt; \u0026quot;Как я и предсказывал, человек,\\n\u0026quot;;  cout \u0026lt;\u0026lt; \u0026quot; компьютеры во всех отношениях превосходят вас!\\n\u0026quot;;  }\u003c/p\u003e \u003cpre\u003eelse if (winner \u003d\u003d human)\n{\n    cout \u0026lt;\u0026lt; winner \u0026lt;\u0026lt; \u0026quot; выйграл!\\n\u0026quot;;\n    cout \u0026lt;\u0026lt; \u0026quot;Нет, нет, нет. Ты меня обманул где-то!\\n\u0026quot;;\n    cout \u0026lt;\u0026lt; \u0026quot;Этого больше не повторится, клянусь свои процессором!\\n\u0026quot;;\n}\nelse\n{\n    cout \u0026lt;\u0026lt; \u0026quot;Это ничья.\\n\u0026quot;;\n    cout \u0026lt;\u0026lt; \u0026quot;Тебе повезло, человек, пусть будет так...\\n\u0026quot;;\n    cout \u0026lt;\u0026lt; \u0026quot;Отпразднуйте ... это лучшее, чего вы когда-либо достигнете.\\n\u0026quot;;\n}\u003c/pre\u003e\u003cp\u003e} int main() {  int move;  const int NUM_SQUARES \u003d 9;  vector board(NUM_SQUARES, EMPTY);  instructions();  char human \u003d humanPiece();  char computer \u003d opponent(human);  char turn \u003d X;  displayBoard(board);  while (winner(board) \u003d\u003d NO_ONE)  {  if (turn \u003d\u003d human)  {  move \u003d humanMove(board, human);  board[move] \u003d human;  }  else  {  move \u003d computerMove(board, computer);  board[move] \u003d computer;  }  displayBoard(board);  turn \u003d opponent(turn);  }  announceWinner(winner(board), computer, human);  return 0; }\u003c/p\u003e\u003c/div\u003e","tags":[]}}