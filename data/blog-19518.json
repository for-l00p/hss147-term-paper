{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1438277169,"rating":100,"authorHandle":"Zlobober","modificationTimeSeconds":1438290851,"id":19518,"title":"\u003cp\u003eEditorial for VK Cup 2015 — Finals\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThanks everybody for participating. Tasks follow in the order of the original contest (the mirror order is given in the brackets).\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/562/problem/A\" title\u003d\"VK Cup 2015 - Finals\"\u003e562A - Logistical Questions\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e(in mirror: \u003ca href\u003d\"/contest/566/problem/C\" title\u003d\"VK Cup 2015 - Finals, online mirror\"\u003e566C - Logistical Questions\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eLet\u0027s think about formal statement of the problem. We are given a tricky definition of a distance on the tre: \u003cspan class\u003d\"tex-span\"\u003eρ(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e) \u003d \u003ci\u003edist\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e1.5\u003c/sup\u003e\u003c/span\u003e. Each vertex has its weight \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. We need to choose a place \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e for a competition such that the sum of distances from all vertices of the tree with their weights is minimum possible: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003eρ(1, \u003ci\u003ex\u003c/i\u003e) + \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003eρ(\u003ci\u003ex\u003c/i\u003e, 2) + ... + \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003eρ(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s understand how function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e works. Allow yourself to put point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e not only in vertices of the tree, but also in any point inside each edge by naturally expanding the distance definition (for example, the middle of the edge of length \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e km is located \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e km from both ends of this edge).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eFact 1\u003c/strong\u003e. For any path \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/65/08/650800f6943cef8f9d8a45e41a5be5ee9750befb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e in the tree the function \u003cspan class\u003d\"tex-span\"\u003eρ(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is convex. Actually, the function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e plot on each path \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e looks like the plot of a function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eabs\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e: it first decreases linearly to the minimum: the closes to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e point on a segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e, and then increases linearly. Taking a composition with a convex increasing function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e1.5\u003c/sup\u003e\u003c/span\u003e, as we can see, we get the convex function on any path in the tree. Here by function on the path we understand usual function of a real variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e that is identified with its location on path \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e. So, each of the summands in the definition of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is convex on any path in the tree, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is also convex on any path in the tree.\u003c/p\u003e\u003cp\u003eLet\u0027s call convex functions on any path in the tree \u003cem\u003econvex on tree\u003c/em\u003e. Let\u0027s formulate few facts about convex functions on trees.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eFact 2\u003c/strong\u003e. A convex function on tree can\u0027t have two different local minimums. Indeed, otherwise the path between those minimums contradicts the property of being convex on any path in the tree.\u003c/p\u003e\u003cp\u003eSo, any convex function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e on the tree has the only local minimum that coincides with its global minimum.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eFact 3\u003c/strong\u003e. From each vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e there exists no more than one edge in which direction the function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e decreases. Indeed, otherwise the path connecting two edges of function decrease would contradict the definition of a convex function in a point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s call such edge that function decreases along this edge to be a \u003cem\u003egradient\u003c/em\u003e of function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e in point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. By using facts 2 and 3 we see that in each vertex there is either a uniquely defined gradient or the vertex is a global minimum.\u003c/p\u003e\u003cp\u003eSuppose we are able to efficiently find a gradient direction by using some algorithm for a given vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. If our tree was a bamboo then the task would be a usual convex function minimization that is efficiently solved by a binary search, i. e. dichotomy. We need some equivalent of a dichotomy for a tree. What is it?\u003c/p\u003e\u003cp\u003eLet\u0027s use \u003cstrong\u003ecentroid decmoposition\u003c/strong\u003e! Indeed, let\u0027s take a tree center (i. e. such vertex that sizes of all its subtrees are no larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e / 2\u003c/span\u003e). By using fact \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e we may consider the gradient of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e in the center of the tree. First of all, there may be no gradient in this point meaning that we already found an optimum. Otherwise we know that global minimum is located in a subtree in direction of gradient, so all remaining subtrees and the center can be excluded from our consideration. So, by running one gradient calculation we reduced the number of vertices in a considered part of a tree twice.\u003c/p\u003e\u003cp\u003eSo, in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e runs of gradient calculation we almost solved the problem. Let\u0027s understand where exactly the answer is located. Note that the global optimum will most probably be located inside some edge. It is easy to see that the optimum vertex will be one of the vertices incident to that edge, or more specifically, one of the last two considered vertices by our algorithms. Which exactly can be determined by calculating the exact answer for them and choosing the most optimal among them.\u003c/p\u003e\u003cp\u003eNow let\u0027s calculate the gradient direction in a vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. Fix a subtree \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of a vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. Consider a derivative of all summands from that subtree when we move into that subtree. Denote this derivative as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eder\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Then, as we can see, the derivative of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e while moving from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e in direction of subtree \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e - \u003ci\u003eder\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - \u003ci\u003eder\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - ... - \u003ci\u003eder\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e + \u003ci\u003eder\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eder\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e - ... - \u003ci\u003eder\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is a degree of vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. So, by running one DFS from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e we may calculate all values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eder\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, and so we may find a gradient direction by applying the formula above and considering a direction with negative derivative.\u003c/p\u003e\u003cp\u003eFinally, we got a solution in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/562/problem/B\" title\u003d\"VK Cup 2015 - Finals\"\u003e562B - Clique in the Divisibility Graph\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e(in mirror: \u003ca href\u003d\"/contest/566/problem/F\" title\u003d\"VK Cup 2015 - Finals, online mirror\"\u003e566F - Clique in the Divisibility Graph\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eOrder numbers in the sought clique in ascending order. Note that set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e \u003d {\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, ..., \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e}\u003c/span\u003e is a clique iff \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b1/e7/b1e72975f97a97ed887abd362c5e48f888e1eaf6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e). So, it\u0027s easy to formulate a dynamic programming problem: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e is equal to the length of a longest suitable increasing subsequence ending in a number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. The calculation formula: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/af/f1/aff109d10122810871721a9faec703d12a6f9c34.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf DP is written in \u0026quot;forward\u0026quot; direction then it\u0027s easy to estimate the complexity of a solution. In the worst case we\u0027ll process \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f4/b9/f4b9a9013a3f7d47b9863ea2e4d7fa0dd8d8cd1f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e transitions.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/562/problem/C\" title\u003d\"VK Cup 2015 - Finals\"\u003e562C - Restoring Map\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e(in mirror: \u003ca href\u003d\"/contest/566/problem/E\" title\u003d\"VK Cup 2015 - Finals, online mirror\"\u003e566E - Restoring Map\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eLet\u0027s call a \u003cem\u003eneighborhood\u003c/em\u003e of a vertex — the set consisting of it and all vertices \u003cem\u003enear\u003c/em\u003e to it. So, we know the set of all neighborhoods of all vertices in some arbitrary order, and also each neighborhood is shuffled in an arbitrary order.\u003c/p\u003e\u003cp\u003eLet\u0027s call the tree vertex to be \u003cem\u003einternal\u003c/em\u003e if it is not a tree leaf. Similarly, let\u0027s call a tree edge to be \u003cem\u003einternal\u003c/em\u003e if it connects two internal vertices. An nice observation is that if two neighborhoods intersect exactly by two elements \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e have to be connected with an edge, in particular the edge \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e is internal. Conversely, any internal edge \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e may be represented as an intersection of some two neighborhoods \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eС\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e of some two vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e such that there is a path \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e – \u003ci\u003ea\u003c/i\u003e – \u003ci\u003eb\u003c/i\u003e – \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e in the tree. In such manner we may find all internal edges by considering pairwise intersections of all neighborhoods. This can be done in about \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e / 2\u003c/span\u003e operations naively, or in \u003cspan class\u003d\"tex-span\"\u003e32\u003c/span\u003e times faster, by using bitsets technique.\u003c/p\u003e\u003cp\u003eNote that knowing all internal edges we may determine all internal vertices except the only case of a star graph (i. e. the graph consisting of a vertex with several other vertices attached to it). The case of a star should be considered separately.\u003c/p\u003e\u003cp\u003eNow we know the set of all leaves, all internal vertices and a tree structure on all internal vertices. The only thing that remained is to determine for each leaf, to what internal vertex is should be attached. This can be done in following manner. Consider a leaf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e. Consider all neighborhoods containing it. Consider a minimal neighborhood among them; it can be shown that it is exactly the neighborhood \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e corresponding to a leaf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e itself. Consider all internal vertices in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e. There can be no less than two of them. \u003c/p\u003e\u003cp\u003eIf there are three of them or more then we can uniquely determine to which of them \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e should be attached — it should be such vertex from them that has a degree inside \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e larger than \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. If there are exactly two internal vertices in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e (let\u0027s say, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e), then determining the attach point for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e is a bit harder.\u003c/p\u003e\u003cp\u003eStatement: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e should be attached to that vertex among \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, that has an internal degree exactly \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. Indeed, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e was attached to a vertex with internal degree larger than \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, we would have considered this case before.\u003c/p\u003e\u003cp\u003eIf both of vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e have internal degree — \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e then our graph looks like a dumbbell (an edge \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e and all remaining vertices attached either to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e or to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e). Such case should also be considered separately.\u003c/p\u003e\u003cp\u003eThe solution for two special cases remains for a reader as an easy exercise.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/562/problem/D\" title\u003d\"VK Cup 2015 - Finals\"\u003e562D - Restructuring Company\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e(in mirror: \u003ca href\u003d\"/contest/566/problem/D\" title\u003d\"VK Cup 2015 - Finals, online mirror\"\u003e566D - Restructuring Company\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eThis problem allows a lot of solution with different time asymptotic. Let\u0027s describe a solution in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0f/23/0f239d055af9bea3474df8b031eb77f1e3db2398.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eLet\u0027s first consider a problem with only a queries of second and third type. It can be solved in a following manner. Consider a line consisting of all employees from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. An observation: any department looks like a contiguous segment of workers. Let\u0027s keep those segments in any logarithmic data structure like a balanced binary search tree (std::set or TreeSet). When merging departments from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, just extract all segments that are in the range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e]\u003c/span\u003e and merge them. For answering a query of the third type just check if employees \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e belong to the same segment. In such manner we get a solution of an easier problem in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e per query. \u003c/p\u003e\u003cp\u003eWhen adding the queries of a first type we in fact allow some segments to correspond to the same department. Let\u0027s add a DSU for handling equivalence classes of segments. Now the query of the first type is just using merge inside DSU for departments which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e belong to. Also for queries of the second type it\u0027s important not to forget to call merge from all extracted segments.\u003c/p\u003e\u003cp\u003eSo we get a solution in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/47/49/47492e6dc42d2154ceca1882e64bfdc236b1b482.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/562/problem/E\" title\u003d\"VK Cup 2015 - Finals\"\u003e562E - Max and Min\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e(in mirror: \u003ca href\u003d\"/contest/566/problem/G\" title\u003d\"VK Cup 2015 - Finals, online mirror\"\u003e566G - Max and Min\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eConsider a following geometrical interpretation. Both Max and Min have a set of vectors from the first plane quadrant and a point \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e. During his turn Max may add any of his vectors to a point \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e, and Min — may subtract any of his vectors. Min wants point \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e to be strictly in the third quadrant, Max tries to prevent his from doing it. Denote Max vectors as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and Min vectors as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eConsider a following obvious sufficient condition for Max to win. Consider some non-negative direction in a plane, i. e. such vector \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e ≥ 0\u003c/span\u003e and at least one of numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is not a zero. Then if among Max vectors there is such vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, that it\u0027s not shorter than any of Min vectors \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e along the direction \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e then Max can surely win. Here by the length of vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e along a direction \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e we mean a scalar product of vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e and vector \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eIndeed, let Max always use that vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Then during the turns of Max and Min point \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e is shifted by a vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for some \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, so its overall shift along the vector \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e((\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e), (\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)) \u003d (\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, (\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)) - (\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, (\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)) ≥ 0\u003c/span\u003e. By observing that initially the scalar produt \u003cspan class\u003d\"tex-span\"\u003e((\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e), (\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)) \u003d \u003ci\u003eax\u003c/i\u003e + \u003ci\u003eby\u003c/i\u003e \u0026gt; 0\u003c/span\u003e we see that at any moment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eax\u003c/i\u003e + \u003ci\u003eby\u003c/i\u003e\u003c/span\u003e will be strictly positive. This means that Min won\u0027t be able at any moment to make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e both be negative (since it would mean that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eax\u003c/i\u003e + \u003ci\u003eby\u003c/i\u003e \u0026lt; 0\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eNow let\u0027s formulate some kind of converse statement. Suppose Max vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e lies strictly inside the triangle formed by Min vectors \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. In particular, vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e endpoint can\u0027t lie on a segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e, but it may be collinear one of vectors \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eNote that since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e lies strictly inside the triangle formed by vectors \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e it can be extended to a vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u0027\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, whose endpoint lies on a segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e. By using linear dependence of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u0027\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e we have that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u0027\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d (\u003ci\u003ep\u003c/i\u003e / \u003ci\u003er\u003c/i\u003e)\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e + (\u003ci\u003eq\u003c/i\u003e / \u003ci\u003er\u003c/i\u003e)\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e \u003d \u003ci\u003er\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e\u003c/span\u003e — integer non-negative numbers. This is equivalent to a formula \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erMx\u003c/i\u003e\u0027\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003epMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eqMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. This means that if per each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e turns of Max in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e we will respond with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e turns of Min in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e turns of Min in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, then the total shift will be equal to \u003cspan class\u003d\"tex-span\"\u003e - \u003ci\u003epMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eqMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003erMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d  - \u003ci\u003erMx\u003c/i\u003e\u0027\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003erMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d  - \u003ci\u003er\u003c/i\u003e(\u003ci\u003eMx\u003c/i\u003e\u0027\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, that is the vector with strictly negative components. So, we are able to block that Max turn, i. e. it does not give any advantage to Max.\u003c/p\u003e\u003cp\u003eThe natural wish is to create a convex hull of all Min turns and to consider all Max turns in respect to it. If Max turn lies inside the convex hull of Min turns, then by using the previous fact this turn is meaningless to Max. Otherwise, there are two possibilities. \u003c/p\u003e\u003cp\u003eFirst, this turn may intersect the hull but go out of it somewhere; in this case this Max turn is no shorter than all Min turns in some non-negative direction (more specifically, in its own direction), so Max wins.\u003c/p\u003e\u003cp\u003eOn the other hand, Max vector lies to aside from the Min turns convex hull. Let\u0027s suppose the vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e lies to the left of the Min turns. This case requires a special analysis. Consider the topmost of the Min vectors \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is no lower than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, then by using the first fact Max is able to win by using only this vector. Otherwise the difference \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMn\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eMx\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is a vector with strictly negative components, by using which we are able to block that Max vector.\u003c/p\u003e\u003cp\u003eSo, the full version of a criteria for Min being a winner looks like the following. Consider a convex hull of Min turns and expand it to the left of the topmost point and to the bottom of the rightmost point. If all Max turns lie strictly inside the formed figure then Min wins, otherwise Max wins.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/562/problem/F\" title\u003d\"VK Cup 2015 - Finals\"\u003e562F - Matching Names\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e(в трансляции: \u003ca href\u003d\"/contest/566/problem/A\" title\u003d\"VK Cup 2015 - Finals, online mirror\"\u003e566A - Matching Names\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eForm a trie from all names and pseudonyms. Mark with red all vertices corresponding to names, and with blue all vertices corresponding to the pseudonyms (a single vertex may be marked several times, possibly with different colors). Note that if we match a name \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and a pseudonym \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, then the quality of such match is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elcp\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e) \u003d 1 / 2(2 * \u003ci\u003elcp\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)) \u003d 1 / 2(|\u003ci\u003ea\u003c/i\u003e| + |\u003ci\u003eb\u003c/i\u003e| - (|\u003ci\u003ea\u003c/i\u003e| - \u003ci\u003elcp\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)) - (|\u003ci\u003eb\u003c/i\u003e| - \u003ci\u003elcp\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)))\u003c/span\u003e, that is equal to a constant \u003cspan class\u003d\"tex-span\"\u003e1 / 2(|\u003ci\u003ea\u003c/i\u003e| + |\u003ci\u003eb\u003c/i\u003e|)\u003c/span\u003e, with subtracted half of a length of a path between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e over the trie. So, what we need is to connect all red vertices with blue vertices with paths of a minimum possible total length.\u003c/p\u003e\u003cp\u003eThis can be done with a following greedy procedure: if we have a vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e red vertices and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e blue vertices in its subtree then we must match \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e red vertices of its subtree to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e blue vertices of its subtree and leave the remaining \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e) - \u003ci\u003emin\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e ref or blue vertices to the level higher. The correctness of such algorithm may be easily shown by the next idea. Give each edge of each path a direction from a red vertex to a blue. If some edge recieves two different directions after this procedure, we may cross-change two paths through it so that their total length is reduced by two.\u003c/p\u003e\u003cp\u003eSo, we get a solution in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003esumlen\u003c/i\u003e)\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumlen\u003c/i\u003e\u003c/span\u003e is a total length of all names and pseudonyms.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/562/problem/G\" title\u003d\"VK Cup 2015 - Finals\"\u003e562G - Replicating Processes\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e(в трансляции: \u003ca href\u003d\"/contest/566/problem/B\" title\u003d\"VK Cup 2015 - Finals, online mirror\"\u003e566B - Replicating Processes\u003c/a\u003e)\u003c/p\u003e\u003cp\u003e\u003d\u003d\u003d\u003d \u003cstrong\u003eUNTRANSLATED SECTION, PLEASE WAIT A FEW MINUTES...\u003c/strong\u003e \u003d\u003d\u003d\u003d\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/a0/27/a0271aa648053b30b30fb6522d8d41d0dc4bb25a.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eKitten to take your attention :)\u003c/p\u003e\u003cp\u003eThis problem may be solved by simulating the replication process. Let\u0027s keep a list of all replications that may be applied by the current step. Apply an arbitrary replication, after that update a list by adding/removing all suitable or now unsuitable replications touching all affected on current step servers. The list of replications may be kept in a \u0026quot;double-linked list\u0026quot; data structure, that allows to add and remove elements to/from the set and to extract an arbitrary element of the set in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe proof of correctness of such algorithm is not hard and is left as an exercies (maybe it will appear here later).\u003c/p\u003e\u003cp\u003eWe got a solution in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e operation (though, the constant hidden by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e\u003c/span\u003e-notation is pretty large; the input size is already \u003cspan class\u003d\"tex-span\"\u003e12\u003ci\u003en\u003c/i\u003e\u003c/span\u003e numbers and the solution itself hides a constant \u003cspan class\u003d\"tex-span\"\u003e36\u003c/span\u003e or higher).\u003c/p\u003e\u003c/div\u003e","tags":["vk cup finals editorial"]}}