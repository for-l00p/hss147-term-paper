{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1512046689,"rating":0,"authorHandle":"Dehayat","modificationTimeSeconds":1512140439,"id":56082,"title":"\u003cp\u003eWeek 1 contest Tutorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003eProblem A:\u003c/h1\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eTags\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eImplementation\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eIf the amount of money is even just split it in half otherwise throw away one coin until there are non left.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHow to implement\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eKeep dividing the number by two and if at any point the number becomes odd add 1 to the answer.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ecode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n \nint main() {\n\tlong long n;\n\tcin \u0026gt;\u0026gt; n;\n\tint res \u003d 0;\n\twhile(n){\n\t\tres+\u003dn%2;\n\t\tn \u003d n/2;\n\t}\n\tcout \u0026lt;\u0026lt; res \u0026lt;\u0026lt; endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch1\u003eProblem B:\u003c/h1\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eTags\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eGame Theory\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eIt is easy to see that if the game starts with 1, 2, or 3 rocks you will win as you can just take all the rocks. However if there were 4 no matter what you take kilani will end up with either 1, 2, or 3 rocks thus he will win. If there were five you could take one and you will leave kilani with a losing state. We only want to check if we can get to kilani to a losing state.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHow to implement\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThis can be implemented simply by checking if the number is divisible by 4 if it is then kilani will win otherwise you will win.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ecode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nint main()\n{\n\tint n;\n  \tcin \u0026gt;\u0026gt;  n;\n  \tif (n%4\u003d\u003d0)\n    \tcout \u0026lt;\u0026lt; \u0026quot;Master\u0026quot;;\n  \telse\n   \tcout \u0026lt;\u0026lt; \u0026quot;Me\u0026quot;;\n  \treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch1\u003eProblem C:\u003c/h1\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eTags\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ecombinatorics\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ecut the picture into pieces of size 2 \u003cspan class\u003d\"tex-span\"\u003e × \u003c/span\u003e 2, count the frequency of each distinct piece , the answer will be the multiplication of the factorial of the frequency of each possible distinct piece.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHow to implement\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ethere are many ways to implement this one of them is to make a 4d frequency array, the one peace has 4 different cells and each cell could have 4 different colors.\u003c/p\u003e\u003cp\u003ecount the frequency for all the given pieces and then bruteforce on all the possible pieces and update the answer.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ecode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\nconst int N \u003d 101;\nint frq[4][4][4][4] , n , m , mod \u003d 1000000007;\nchar grid[N][N];\n\nint id(char x){\n\tif(x \u003d\u003d \u0027R\u0027) return 0;\n\tif(x \u003d\u003d \u0027G\u0027) return 1;\n\tif(x \u003d\u003d \u0027B\u0027) return 2;\n\treturn 3;\n}\n\nint fact(int num){\n\tint res \u003d 1;\n\tfor(int i\u003d1;i\u0026lt;\u003dnum;i++)\n\t\tres \u003d (long long)res * i % mod;\n\treturn res;\n}\n\nint main() {\n\tcin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m;\n\tfor(int i\u003d0;i\u0026lt;n;i++)\n\t\tfor(int j\u003d0;j\u0026lt;m;j++){\n\t\t\tcin \u0026gt;\u0026gt; grid[i][j];\n\t\t}\n\tfor(int i\u003d0;i\u0026lt;n;i+\u003d2){\n\t\tfor(int j\u003d0;j\u0026lt;m;j+\u003d2){\n\t\t\tfrq[id(grid[i][j])][id(grid[i+1][j])][id(grid[i][j+1])][id(grid[i+1][j+1])]++;\n\t\t}\n\t}\n\tint ans \u003d 1;\n\tfor(int i\u003d0;i\u0026lt;4;i++){\n\t\tfor(int j\u003d0;j\u0026lt;4;j++){\n\t\t\tfor(int k\u003d0;k\u0026lt;4;k++){\n\t\t\t\tfor(int l\u003d0;l\u0026lt;4;l++){\n\t\t\t\t\tans \u003d (long long)ans * fact(frq[i][j][k][l]) % mod;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl;\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch1\u003eProblem D:\u003c/h1\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eTags\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eNext array\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eYou need to check if the current sub-array is sorted or not, you will have 2 next arrays.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e ≥ \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and it is the first index such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e2\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≥ \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and it is the first index such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003efor each query the answer is yes if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e ≤ \u003ci\u003enext\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e ≤ \u003ci\u003enext\u003c/i\u003e2\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHow to implement\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eFirst of all will say that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e2\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen you will iterate on the array starting from index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e to index \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e \u003c/p\u003e\u003cp\u003eif \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e else \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003enext\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eand \u003c/p\u003e\u003cp\u003eif \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e2\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e else \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e2\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003enext\u003c/i\u003e2\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ecode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\nconst int N \u003d 100010;\nint n, q, arr[N] , nxt[N] , nxt2[N];\n\nint main(){\n\tscanf(\u0026quot;%d%d\u0026quot;,\u0026amp;n,\u0026amp;q);\n\tfor(int i\u003d1;i\u0026lt;\u003dn;i++)\n\t\tscanf(\u0026quot;%d\u0026quot;,\u0026amp;arr[i]);\n\tnxt[n] \u003d nxt2[n] \u003d n;\n\tfor(int i\u003dn-1;i\u0026gt;0;i--){\n\t\tif(arr[i] \u0026gt; arr[i+1]) \n\t\t\tnxt[i] \u003d i;\n\t\telse \n\t\t\tnxt[i] \u003d nxt[i+1];\n\t\tif(arr[i] \u0026lt; arr[i+1]) \n\t\t\tnxt2[i] \u003d i;\n\t\telse \n\t\t\tnxt2[i] \u003d nxt2[i+1];\n\t}\n\twhile(q--){\n\t\tint l , r;\n\t\tscanf(\u0026quot;%d%d\u0026quot;,\u0026amp;l,\u0026amp;r);\n\t\tif(nxt[l] \u0026gt;\u003d r || nxt2[l] \u0026gt;\u003d r)\n\t\t\tputs(\u0026quot;YES\u0026quot;);\n\t\telse\n\t\t\tputs(\u0026quot;NO\u0026quot;);\n\t}\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}