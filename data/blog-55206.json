{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1508081455,"rating":3,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1508081455,"id":55206,"title":"\u003cp\u003eNotes on Codeforces Beta Round #84, Div2-A, B, C, D, E, Div1-D\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/110/problem/A\" title\u003d\"Codeforces Beta Round 84 (Div. 2 Only)\"\u003e110A - Nearly Lucky Number\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can read in the integer as a string, and count the total number of \u00274\u0027 and \u00277\u0027. As the length of string is at most 18, it is sufficient to check whether the total number is 4 or 7.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/110/problem/B\" title\u003d\"Codeforces Beta Round 84 (Div. 2 Only)\"\u003e110B - Lucky String\u003c/a\u003e\u003c/p\u003e\u003cp\u003eOne can find that the optimal sequence should have pattern \u0027abcdabcdabcd...\u0027, and thus we can just output the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e letters.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/110/problem/C\" title\u003d\"Codeforces Beta Round 84 (Div. 2 Only)\"\u003e110C - Lucky Sum of Digits\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSuppose that the minimum integer has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003es and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e7\u003c/span\u003es. Then, we have \u003cspan class\u003d\"tex-span\"\u003e4\u003ci\u003ex\u003c/i\u003e + 7\u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. To construct the minimum integer, we must have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e as small as possible. If there are multiple such pairs, we should further find the one with the maximum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, which must be unique. After obtaining the optimal \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e, the minimum integer have a form of \u003cspan class\u003d\"tex-span\"\u003e444...777..77\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/110/problem/D\" title\u003d\"Codeforces Beta Round 84 (Div. 2 Only)\"\u003e110D - Lucky Probability\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAt first, we find out all the lucky integers and sort them in an increasing order. These lucky numbers in fact have divided the interval \u003cspan class\u003d\"tex-span\"\u003e[1, 1\u003ci\u003eE\u003c/i\u003e + 9]\u003c/span\u003e into several sub-intervals, whose borders are just these lucky numbers. Suppose that we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e intervals \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e], [\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e], ..., [\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u003d 1, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d 4, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u003d 7, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u003d 44, ...\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e \u003d 1\u003ci\u003eE\u003c/i\u003e + 9\u003c/span\u003e. For any interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e]\u003c/span\u003e that contains exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e lucky numbers, we must have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d0/2c/d02cce7398f2764556418bab06c69d1e94923820.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6e/dc/6edc7e7aa2774ade2c2bba13c987a2918a29a501.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Therefore, it suffices to count the number of pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e that satisfy the above condition. Equivalently, we can enumerate all the feasible intervals, i.e., \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e]\u003c/span\u003e, and find out the number of common integers that also appear in \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eMoreover, one should take care of one tricky case, i.e., \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 1\u003c/span\u003e. As one can see, when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e]\u003c/span\u003e have a common integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e, which implies that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e has been counted twice if it belongs to both \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e. Therefore, one should decrease the counting result by one if this case occurs.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/110/problem/E\" title\u003d\"Codeforces Beta Round 84 (Div. 2 Only)\"\u003e110E - Lucky Tree\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAs this is a tree, deleting any edges will divide it into several independent smaller trees. We can first delete all the edges that have a weight of lucky number and then adopt “union and find” to construct the smaller connected components.\u003c/p\u003e\u003cp\u003eWe use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to denote the number of nodes belonging to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th component. Now, instead of counting the required answer, we count the number of triples that do not satisfy the requirements. Note that if we pick all the three nodes from the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th component, they definitely are against the requirements. This case gives \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/92/0a/920a8591c0809a5c9fea9c0fb186ce4e1d9bd6bc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≥ 3\u003c/span\u003e. Next, if we pick two nodes from the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th component while one node from another different component, this gives \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/63/0c/630c7b2c3e46945028ed0b6ce9509307e5883b81.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≥ 2\u003c/span\u003e. Finally, the desired result is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1)(\u003ci\u003en\u003c/i\u003e - 2) - \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/109/problem/D\" title\u003d\"Codeforces Beta Round 84 (Div. 1 Only)\"\u003e109D - Lucky Sorting\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIf the given sequence is not initially non-decreasing, we need at least one lucky number.\u003c/p\u003e\u003cp\u003eWe denote the original sequence and the sorted sequence as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, respectively. For each element in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, it appears in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e at a unique position. There are exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e such pairs, and thus we can adopt two arrays to record their relationship. We use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eatob\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e to denote that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th element in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is at position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eatob\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, while using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebtoa\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e to denote that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th element in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is at position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebtoa\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. Then, we enumerate each element in array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, and try to move the “required” element to the current position.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d \u003ci\u003ebtoa\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, it is not necessary to move any element. On the contrary, we should move the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebtoa\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e-th element to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th position. If either one of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ebtoa\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]]\u003c/span\u003e is a lucky number, it takes one “move” to exchange their positions. Otherwise, we can first exchange \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e with a lucky number at position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, and then move \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ebtoa\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]]\u003c/span\u003e to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th position, which costs two “moves”.\u003c/p\u003e\u003cp\u003eFrom the above operations, one can check that it is always feasible to sort the original array in a non-decreasing order within \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e “moves as long as there is at least one lucky number. Note that whenever we exchange two elements, both \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eatob\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebtoa\u003c/i\u003e\u003c/span\u003e should be updated at the same time.\u003c/p\u003e\u003c/div\u003e","tags":[]}}