{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1497101786,"rating":127,"authorHandle":"simonlindholm","modificationTimeSeconds":1497101786,"id":52513,"title":"\u003cp\u003eOpen sourcing KTH\u0027s Team Reference Document\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eWe just made KTH\u0027s ICPC team reference document \u003ca href\u003d\"https://github.com/kth-competitive-programming/kactl\"\u003eopen source\u003c/a\u003e. It contains a few nice things that I haven\u0027t seen elsewhere:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eErgonomic API\u0027s for \u003ca href\u003d\"https://github.com/kth-competitive-programming/kactl/blob/master/content/graph/SCC.h\"\u003eSCC\u003c/a\u003e, \u003ca href\u003d\"https://github.com/kth-competitive-programming/kactl/blob/master/content/graph/BiconnectedComponents.h\"\u003ebiconnected components\u003c/a\u003e, \u003ca href\u003d\"https://github.com/kth-competitive-programming/kactl/blob/master/content/graph/2sat.h\"\u003e2-SAT\u003c/a\u003e, \u003ca href\u003d\"https://github.com/kth-competitive-programming/kactl/blob/master/content/geometry/Angle.h\"\u003eangle sweepings\u003c/a\u003e, and \u003ca href\u003d\"https://github.com/kth-competitive-programming/kactl/blob/master/content/various/ConstantIntervals.h\"\u003emonotone function partitioning\u003c/a\u003e.\u003c/li\u003e   \u003cli\u003eI don\u0027t recall seeing \u003ca href\u003d\"https://github.com/kth-competitive-programming/kactl/blob/master/content/numerical/Tridiagonal.h\"\u003etridiagonal linear equation solving\u003c/a\u003e or \u003ca href\u003d\"https://github.com/kth-competitive-programming/kactl/blob/master/content/graph/CompressTree.h\"\u003etree compression\u003c/a\u003e in other TRD\u0027s, but they have definitely turned out useful from time to time.\u003c/li\u003e   \u003cli\u003eA large section on \u003ca href\u003d\"https://github.com/kth-competitive-programming/kactl/tree/master/content/various\"\u003econstant factor optimization\u003c/a\u003e, with notes about how to best do loop unrolling, bump allocation, SIMD. It also notes the existence of \u0026quot;#pragma GCC optimize (\u0026quot;Ofast\u0026quot;)\u0026quot;, which makes GCC auto-vectorize and unroll code to win a nice constant factor in code with tight loops.\u003c/li\u003e   \u003cli\u003eFancy-looking 3-column layout!\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eFor people with archaeological interest, we also have \u003ca href\u003d\"https://github.com/kth-competitive-programming/tinykactl/\"\u003eour old TRD available\u003c/a\u003e, with version control history going back to 2002. (Did you know that in 2003, the ICPC did not have a page limit for TRDs? KTH\u0027s was 129 pages pages long, and included four different bigint implementations. At one point it even contained a re-implementation of the STL, since that wasn\u0027t necessarily available on all platforms.)\u003c/p\u003e\u003cp\u003e(Anyone else have some part of their TRD that they are proud of and want to share?)\u003c/p\u003e\u003c/div\u003e","tags":["team reference","open source"]}}