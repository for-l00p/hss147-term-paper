{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1421676359,"rating":156,"authorHandle":"evima","modificationTimeSeconds":1422033744,"id":15889,"title":"\u003cp\u003eCodeforces Round #286 Editorial (Complete)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eEdit (Jan 22, 2:45 AM UTC):\u003c/strong\u003e Added Div1E and the editorial is now complete. I am sorry for the delay.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eEdit (Jan 21, 9:45 AM UTC):\u003c/strong\u003e Added the explanation for Div1C/2E, and the problem setters\u0027 codes. Div1E will need several more hours. Thank you again for your patience.\u003c/p\u003e\u003cp\u003eFirst, here are some statistics on this round: \u003ctable\u003e  \u003ctbody\u003e\u003ctr\u003e  \u003ctd\u003eDivision\u003c/td\u003e  \u003ctd\u003eRegistrants\u003c/td\u003e  \u003ctd\u003eParticipants\u003c/td\u003e  \u003ctd\u003eA Accepted\u003c/td\u003e  \u003ctd\u003eB Accepted\u003c/td\u003e  \u003ctd\u003eC Accepted\u003c/td\u003e  \u003ctd\u003eD Accepted\u003c/td\u003e  \u003ctd\u003eE Accepted\u003c/td\u003e  \u003c/tr\u003e  \u003ctr\u003e  \u003ctd\u003e1\u003c/td\u003e  \u003ctd\u003e1364\u003c/td\u003e  \u003ctd\u003e572 (*)\u003c/td\u003e  \u003ctd\u003e294\u003c/td\u003e  \u003ctd\u003e199\u003c/td\u003e  \u003ctd\u003e8\u003c/td\u003e  \u003ctd\u003e113\u003c/td\u003e  \u003ctd\u003e1\u003c/td\u003e  \u003c/tr\u003e  \u003ctr\u003e  \u003ctd colspan\u003d\"3\"\u003e(Estimated number of AC by me)\u003c/td\u003e  \u003ctd\u003e800 (wrong)\u003c/td\u003e  \u003ctd\u003e500 (wrong)\u003c/td\u003e  \u003ctd\u003e70 (FAIL)\u003c/td\u003e  \u003ctd\u003e90 (ok)\u003c/td\u003e  \u003ctd\u003e5 (wrong)\u003c/td\u003e  \u003c/tr\u003e  \u003ctr\u003e  \u003ctd\u003e2\u003c/td\u003e  \u003ctd\u003e4016\u003c/td\u003e  \u003ctd\u003e2028\u003c/td\u003e  \u003ctd\u003e1355\u003c/td\u003e  \u003ctd\u003e945\u003c/td\u003e  \u003ctd\u003e41\u003c/td\u003e  \u003ctd\u003e5\u003c/td\u003e  \u003ctd\u003e0\u003c/td\u003e  \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e (*) Where did the remaining 792 people go? :) \u003cbr /\u003e \u003cbr /\u003e We are sorry for terribly underestimating the difficulty of the problems (except Div1D), especially Div1A/2C and Div1C/2E. \u003cbr /\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003ch3\u003eDiv.2 A: \u003ca href\u003d\"/contest/505/problem/A\" title\u003d\"Codeforces Round 286 (Div. 2)\"\u003e505A - Mr. Kitayuta\u0027s Gift\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e[Problem] Given a string, turn it into a palindrome by inserting one letter or state that it is impossible.\u003c/p\u003e\u003cp\u003e(Problem by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/evima\" title\u003d\"Master evima\"\u003eevima\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eSince the string is short (at most 10 characters), you can simply try every possible way of inserting a letter (\u0026quot;where\u0026quot; and \u0026quot;what\u0026quot; to insert), and check if the resulting string is a palindrome.\u003c/p\u003e\u003cp\u003eThe writer\u0027s code (C++): \u003ca href\u003d\"/contest/505/submission/9501249\" title\u003d\"Submission 9501249 by evima\"\u003e9501249\u003c/a\u003e\u003cbr /\u003e\u003cs\u003eNote: For some strange reason, we (contest managers) cannot submit solutions so that everyone can see them.\u003c/s\u003e \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/I_lost_my_handle\" title\u003d\"Candidate Master I_lost_my_handle\"\u003eI_lost_my_handle\u003c/a\u003e told us how to do so. Thank you! \u003cbr /\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003ch3\u003eDiv.2 B: \u003ca href\u003d\"/contest/505/problem/B\" title\u003d\"Codeforces Round 286 (Div. 2)\"\u003e505B - Mr. Kitayuta\u0027s Colorful Graph\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e[Problem] Given an undirected graph whose edges are painted in colors, process the queries of the following form:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eGiven two vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, find the number of the colors that satisfies the following condition: the edges of that color connect \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (possibly indirectly).\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e(Problem by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/hogloid\" title\u003d\"Grandmaster hogloid\"\u003ehogloid\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eSince neither the graph nor the number of queries is too large, for each query you can simply count the number of the \u0026quot;good\u0026quot; colors (the colors that satisfies the condition) by checking if each color is \u0026quot;good\u0026quot;. To do that, you can perform Depth First Search (or Breadth First Search) and verify whether you can reach \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e traversing only the edges of that color. If you prefer using Union-Find, it will also do the job.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/tZU3kZ\"\u003eThe writer\u0027s code (DFS, C++)\u003c/a\u003e\u003cbr /\u003e\u003ca href\u003d\"http://ideone.com/NyCK8v\"\u003eThe writer\u0027s code (Union-Find, C++)\u003c/a\u003e \u003cbr /\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003ch3\u003eDiv.2 C / Div.1 A: \u003ca href\u003d\"/contest/505/problem/C\" title\u003d\"Codeforces Round 286 (Div. 2)\"\u003e505C - Mr. Kitayuta, the Treasure Hunter\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e[Problem] Since it is hard to summarize this problem, please refer to the official statement.\u003c/p\u003e\u003cp\u003e(Problem by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/yosupo\" title\u003d\"Master yosupo\"\u003eyosupo\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eBelow is the explanation from \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/yosupo\" title\u003d\"Master yosupo\"\u003eyosupo\u003c/a\u003e, translated by me.\u003c/p\u003e\u003cp\u003e[From here]\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e be the number of the islands (that is, \u003cspan class\u003d\"tex-span\"\u003e30001\u003c/span\u003e). First, let us describe a solution with time and memory complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWe will apply Dynamic Programming. let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e be the number of the gems that Mr. Kitayuta can collect after he jumps to island \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, when the length of his previous jump is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e (let us assume that he have not collect the gems on island \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e). Then, you can calculate the values of the table \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003c/span\u003e by the following:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d 0\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≥ \u003ci\u003em\u003c/i\u003e\u003c/span\u003e\u003cbr /\u003e(actually these islands do not exist, but we can suppose that they exist and when Mr. Kitayuta jumps to these islands, he stops jumping)\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d \u003c/span\u003e (the number of the gems on island \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e) \u003cspan class\u003d\"tex-span\"\u003e + \u003ci\u003emax\u003c/i\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e], \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e + 1])\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u0026lt; \u003ci\u003em\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e \u003d 1\u003c/span\u003e\u003cbr /\u003e(he cannot perform a jump of length \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e)\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d \u003c/span\u003e (the number of the gems on island \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e) \u003cspan class\u003d\"tex-span\"\u003e + \u003ci\u003emax\u003c/i\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e - 1], \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e], \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e + 1])\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u0026lt; \u003ci\u003em\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e ≥ 2\u003c/span\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThis solution is unfeasible in terms of both time and memory. However, the following observation makes it an Accepted solution: there are only \u003cspan class\u003d\"tex-span\"\u003e491\u003c/span\u003e values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e that we have to consider, which are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e - 245, \u003ci\u003ed\u003c/i\u003e - 244, \u003ci\u003ed\u003c/i\u003e - 243, ..., \u003ci\u003ed\u003c/i\u003e + 244\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e + 245\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWhy? First, let us find the upper bound of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Suppose Mr. Kitayuta always performs the \u0026quot;\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e + 1\u003c/span\u003e\u0026quot; jump (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e: the length of the previous jump). Then, he will reach the end of the islands before he performs a jump of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e + 246\u003c/span\u003e, because\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e + (\u003ci\u003ed\u003c/i\u003e + 1) + (\u003ci\u003ed\u003c/i\u003e + 2) + ... + (\u003ci\u003ed\u003c/i\u003e + 245) ≥ 1 + 2 + ... + 245 \u003d 245·(245 + 1) / 2 \u003d 30135 \u0026gt; 30000\u003c/span\u003e. Thus, he will never be able to perform a jump of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e + 246\u003c/span\u003e or longer.\u003c/p\u003e\u003cp\u003eNext, let us consider the lower bound of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e in a similar way. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e ≤ 246\u003c/span\u003e, then obviously he will not be able to perform a jump of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e - 246\u003c/span\u003e or shorter, because the length of a jump must be positive. Suppose Mr. Kitayuta always performs the \u0026quot;\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e - 1\u003c/span\u003e\u0026quot; jump, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e ≥ 247\u003c/span\u003e. Then, again he will reach the end of the islands before he performs a jump of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e - 246\u003c/span\u003e, because\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e + (\u003ci\u003ed\u003c/i\u003e - 1) + (\u003ci\u003ed\u003c/i\u003e - 2) + ... + (\u003ci\u003ed\u003c/i\u003e - 245) ≥ 245 + 244 + ... + 1 \u003d 245·(245 + 1) / 2 \u003d 30135 \u0026gt; 30000\u003c/span\u003e. Thus, he will never be able to perform a jump of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e - 246\u003c/span\u003e or shorter.\u003c/p\u003e\u003cp\u003eTherefore, we have obtained a working solution: similar to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e one, but we will only consider the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e - 245\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e + 245\u003c/span\u003e. The time and memory complexity of this solution will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e1.5\u003c/sup\u003e)\u003c/span\u003e, since the value \u0026quot;\u003cspan class\u003d\"tex-span\"\u003e245\u003c/span\u003e\u0026quot; is slightly larger than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1c/15/1c15cd07f16f9597a713a6ab08e34bf4fbedc790.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eThis solution can be implemented by, for example, using a \u0026quot;normal\u0026quot; two dimensional array with a offset like this: \u003ccode\u003edp[i][j - offset]\u003c/code\u003e. The time limit is set tight in order to fail most of naive solutions with search using std::map or something, so using hash maps (unordered_map) will be risky although the complexity will be the same as the described solution.\u003c/p\u003e\u003cp\u003e[End]\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://ideone.com/GLXkVj\"\u003eThe writer\u0027s code (memoized recursion, C++)\u003c/a\u003e \u003cbr /\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003ch3\u003eDiv.2 D / Div.1 B: \u003ca href\u003d\"/contest/505/problem/D\" title\u003d\"Codeforces Round 286 (Div. 2)\"\u003e505D - Mr. Kitayuta\u0027s Technology\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e[Problem] Given an integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e pairs of integers \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e), find the minimum number of edges in a directed graph that satisfies the following condition:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eFor each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, there exists a path from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e(Problem from \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/evima\" title\u003d\"Master evima\"\u003eevima\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e be the directed graph built from the input, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e be a directed graph that satisfies the given conditions. What we seek is the minimum number of edges in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e. Also, we say that two vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e in a directed graph are \u0026quot;weakly connected\u0026quot; if we can reach \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e by traversing edges, not considering their directions.\u003c/p\u003e\u003cp\u003eIf a pair \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e is present in the input, then vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e must be weakly connected in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e. Therefore, for each weakly connected component (abbreviated to wcc) in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, the vertices in that component must also be in the same wcc in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e. We can \u0026quot;merge\u0026quot; multiple wccs in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and create a larger wcc in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, but for now, let us find the minimum number of edges required in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e for each wcc in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e when we do not \u0026quot;merge\u0026quot; them. There are two cases to consider:\u003c/p\u003e \u003col\u003e   \u003cli\u003eIf a wcc in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e does not have cycles, then we can perform topological sort on that wcc, and we can make a \u0026quot;chain\u0026quot; (see the image below) using the topological order to satisfy the conditions. We need (the number of the vertices in the wcc) \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e edges, which is the minimum required number since any connected graph with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eV\u003c/i\u003e\u003c/span\u003e vertices has at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eV\u003c/i\u003e - 1\u003c/span\u003e edges. \u003ccenter\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/d1/3a/d13a1e2a1a994ff456366be43e362c065c931e6a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003c/li\u003e   \u003cli\u003eIf a wcc in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e has cycles, then topological sort cannot be applied. We need at least (the number of the vertices in the wcc) edges this time, since any connected graph with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eV\u003c/i\u003e\u003c/span\u003e vertices and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eV\u003c/i\u003e - 1\u003c/span\u003e edges is a tree, which does not contain cycles. Actually, this number (the number of the vertices in the wcc) is always achievable by connecting the vertices into a \u0026quot;ring\u0026quot; (see the image below), thus it is the minimum required number that we seek. \u003ccenter\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/04/bb/04bb15a7098daa90f029e322bb49b45a85356a66.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eWe have found the minimum required number of edges for each wcc in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e when we do not \u0026quot;merge\u0026quot; them. Let us show that \u0026quot;merging\u0026quot; wccs in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e do not reduce the number of required edges. Suppose we combine \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e( \u0026gt; 1)\u003c/span\u003e wccs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e into one wcc \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e. Again, there are two cases to consider:\u003c/p\u003e \u003col\u003e   \u003cli\u003eIf none of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e contains cycles, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e will need \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e| + |\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e| + ... + |\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e| - 1\u003c/span\u003e edges. However, if we do not combine them, we will only need \u003cspan class\u003d\"tex-span\"\u003e(|\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e| - 1) + (|\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e| - 1) + ... + (|\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e| - 1)\u003c/span\u003e edges in total, which is fewer.\u003c/li\u003e   \u003cli\u003eIf some of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e contain cycles, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e will need \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e| + |\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e| + ... + |\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e|\u003c/span\u003e edges. However, if we do not combine them, we will need\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e(|\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e| - \u003ci\u003enoCycles\u003c/i\u003e(\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e)) + (|\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e| - \u003ci\u003enoCycles\u003c/i\u003e(\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)) + ... + (|\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e| - \u003ci\u003enoCycles\u003c/i\u003e(\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e ≤ |\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e| + |\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e| + ... + |\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e|\u003c/span\u003e edges\u003cbr /\u003e(here, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enoCycles\u003c/i\u003e(\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e do not contain cycles, otherwise \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e), thus combining them does not reduce the number of required edges.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eThus, we do not need to combine multiple wccs into one wcc in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e in order to obtain the optimal solution. That is, the final answer to the problem is the sum of the minimum required number of edges for each wcc in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, when they are considered separately.\u003c/p\u003e\u003cp\u003eAs for the implementation, detecting cycles in a directed graph with \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e vertices and edges might be a problem if this is your first encounter with it. One possible way is to paste a code that decomposes a graph into strongly connected components. If the size of a strongly connected component is more than one, then that means the component contains cycles.\u003c/p\u003e\u003cp\u003eThe writer\u0027s code (strongly connected component decomposition, C++): \u003ca href\u003d\"/contest/506/submission/9501202\" title\u003d\"Submission 9501202 by evima\"\u003e9501202\u003c/a\u003e \u003cbr /\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003ch3\u003eDiv.2 E / Div.1 C: \u003ca href\u003d\"/contest/505/problem/E\" title\u003d\"Codeforces Round 286 (Div. 2)\"\u003e505E - Mr. Kitayuta vs. Bamboos\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e[Problem] Since it is hard to summarize this problem, please refer to the official statement.\u003c/p\u003e\u003cp\u003e(Problem from \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/yosupo\" title\u003d\"Master yosupo\"\u003eyosupo\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eBelow is the explanation from \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/yosupo\" title\u003d\"Master yosupo\"\u003eyosupo\u003c/a\u003e, translated by me.\u003c/p\u003e\u003cp\u003e[From here]\u003c/p\u003e\u003cp\u003eLet us begin by applying Binary Search. The problem becomes: \u0026quot;is it possible that all the bamboos are at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e meters after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e days?\u0026quot; It is complicated by the fact that the height does not become negative; the excessive decrease will be wasted. We have found two approaches to this problem.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eSolution 1\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eMr. Kitayuta must beat the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th bamboo at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(0, ⌈(\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003em\u003c/i\u003e·\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eX\u003c/i\u003e) / \u003ci\u003eP\u003c/i\u003e⌉)\u003c/span\u003e times (let this number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e). Actually, it is not necessary for him to beat it more than this number of times. Thus, let us assume that he beat the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th bamboo exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e times. Also, for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e), find the day \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e such that, if the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th beat on the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th bamboo is performed before day \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, it will be no longer possible to keep the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th bamboo\u0027s height after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e days at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e (it can be found by doing simple math). If Mr. Kitayuta can beat the bamboos under this constraint, all the bamboos\u0027 heights will become \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e meters or less after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e days. Otherwise, some bamboos\u0027 heights will exceed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e meters.\u003c/p\u003e\u003cp\u003eThe time complexity of this solution will be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7a/67/7a678e2272caba562bdac8ac5ec3a85962707797.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, if we first calculate only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, then if the sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e exceeds \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ekm\u003c/i\u003e\u003c/span\u003e, we skip finding \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (the answer is \u0026quot;NO\u0026quot;).\u003c/p\u003e \u003cul\u003e   \u003cli\u003eSolution 2\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThis problem becomes simpler if we simulate Mr. Kitayuta\u0027s fight backwards, that is, from day \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e to day \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. It looks like this:\u003c/p\u003e\u003cp\u003e[Problem\u0027] There are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e bamboos. At the moment, the height of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th bamboo is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e meters, and it \u003cem\u003eshrinks\u003c/em\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e meters at the \u003cem\u003ebeginning\u003c/em\u003e of each day. Mr. Kitayuta will play a game. He can use Magic Hammer at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e times per day to \u003cem\u003eincrease\u003c/em\u003e the height of a bamboo by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e meters. If some bamboo\u0027s height becomes negative at any moment, he will lose the game immediately. Also, in order for him to win the game, the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th bamboo\u0027s height must be \u003cem\u003eat least\u003c/em\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e meters after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e days. Is victory possible?\u003c/p\u003e\u003cp\u003eBelow is an illustration of this \u0026quot;reverse simulation\u0026quot;: \u003c/p\u003e\u003ccenter\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/cd/69/cd69947d5aa851d6dbc167eef817e7741834ebc8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eThis version is simpler because he is increasing the heights instead of decreasing, thus we do not need to take into account the \u0026quot;excessive decrease beyond \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e meters\u0026quot; which will be wasted. Let us consider an optimal strategy. If there exist bamboos whose heights would become negative after day \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e, he should beat the one that is the earliest to make him lose. Otherwise, he can choose any bamboo whose height would be less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e meters after day \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e. Repeat beating the bamboos following this strategy, and see if he can actually claim victory.\u003c/p\u003e\u003cp\u003eThe writer\u0027s implementation of this solution uses a priority queue, and its time complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/51/c4/51c4c4881cb1e9b221140203f6e03a0eaecebd65.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e[End]\u003c/p\u003e\u003cp\u003eThe tester\u0027s code (Solution 1, C++): \u003ca href\u003d\"/contest/506/submission/9501229\" title\u003d\"Submission 9501229 by evima\"\u003e9501229\u003c/a\u003e\u003cbr /\u003e\u003ca href\u003d\"https://ideone.com/AGflsb\"\u003eThe writer\u0027s code (Solution 2, C++)\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003ch3\u003eDiv.1 D: \u003ca href\u003d\"/contest/506/problem/D\" title\u003d\"Codeforces Round 286 (Div. 1)\"\u003e506D - Mr. Kitayuta\u0027s Colorful Graph\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e[Problem] Given an undirected graph whose edges are painted in colors, process the queries of the following form:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eGiven two vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, find the number of the colors that satisfies the following condition: the edges of that color connect \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (possibly indirectly).\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eNote: this is the exact same problem as Div.2 B except the constraints, which are \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e instead of \u003cspan class\u003d\"tex-span\"\u003e100\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e(Problem from \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/hogloid\" title\u003d\"Grandmaster hogloid\"\u003ehogloid\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eBelow is the explanation from \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/hogloid\" title\u003d\"Grandmaster hogloid\"\u003ehogloid\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e[From here]\u003c/p\u003e\u003cp\u003eFor each color, make a new graph that consists of the edges of the color and vertices connected by the edges. Make UnionFind for each graph, and you can check whether a color connects vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e , using it. For each query, find a vertex which has smaller degree(let this vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, and the other vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e) For each colors such that a edge of the color connects to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, check whether \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e is connected by the color. After answering the query, memorize its tuple — \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e, \u003ci\u003eanswer\u003c/i\u003e)\u003c/span\u003e. If the same query is requested, answer using this information.\u003c/p\u003e\u003cp\u003eThis will lead to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3e/94/3e9410a3cf21b9d7e3ac682392cc9f03a00ab936.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution.\u003c/p\u003e\u003cp\u003eFor each query, the complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/47/44/47441a2901b03bd98d99da1b3f52466523033cd7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (For each color connects \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, find a vertex of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e of the color \u0026amp; check whether they are connected) The queries that require longest computing time are, to ask every pair among \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/32/db/32db1127ebe513f1f747c2fc33bc4f0a6c619cc5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e vertices which have largest degrees. Let the indices of the \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/32/db/32db1127ebe513f1f747c2fc33bc4f0a6c619cc5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e vertices be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b5/c7/b5c7e891153cc4c0b7a7ec9df7308d6f6d3717b5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and degrees of the \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/32/db/32db1127ebe513f1f747c2fc33bc4f0a6c619cc5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e vertices be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ...\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Now, let\u0027s fix vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. The total computing time of the queries such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e is vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is\u003cbr /\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ea/ee/eaeeb25256bfb3ed9a32fa5fa1b9af6be88f0590.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/53/81/5381fd9b3e89afc12c1e7d454dafc60f2ece8277.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003cbr /\u003e Vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e can vary from \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Hence, the total complexity is at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/6a/906a88a13a547b781e5d0013635f1553c70e364d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. This complexity is at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/56/8c/568c9bb0c1cfbdb348bfc4421151a20641d20959.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eBy the way, in C++, using unordered_map, total complexity would be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/59/23/5923d21ddddb7621781da6aef997505c14284bba.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e[End]\u003c/p\u003e\u003cp\u003eThere will be many other solutions. I will briefly explain one of them which I think is typical.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the number of colors of the edges incident to vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. The sum of all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e does not exceed \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003em\u003c/i\u003e\u003c/span\u003e since each edge increases this sum by at most 2. Thus, there will be at most \u003cspan class\u003d\"tex-span\"\u003e450\u003c/span\u003e values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≥ 450\u003c/span\u003e (let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e \u003d 450\u003c/span\u003e). We will call these vertices \u003cem\u003elarge\u003c/em\u003e, and the remaining ones \u003cem\u003esmall\u003c/em\u003e. Using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e / \u003ci\u003eB\u003c/i\u003e·\u003ci\u003em\u003c/i\u003e) \u003d \u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e / \u003ci\u003eB\u003c/i\u003e)\u003c/span\u003e time and memory, we can precalculate and store the answer for all the possible queries where at least one of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is \u003cem\u003elarge\u003c/em\u003e, then we can immediately answer these queries. For the remaining queries, both \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e will be \u003cem\u003esmall\u003c/em\u003e, therefore it is enough to directly count the color that connects vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eB\u003c/i\u003e)\u003c/span\u003e time. The total time required will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e / \u003ci\u003eB\u003c/i\u003e + \u003ci\u003eBq\u003c/i\u003e)\u003c/span\u003e. If we choose \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c5/c8/c5c830228eae727dfa6dca8f63f0ad974f077c86.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we can solve the problem in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/47/1b/471bb45e77f35350c74f683bf351d1ece53ed35a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/Uh7oXa\"\u003eThe writer\u0027s code (the first solution, C++)\u003c/a\u003e\u003cbr /\u003eThe tester\u0027s code (the second solution, C++): \u003ca href\u003d\"/contest/506/submission/9501240\" title\u003d\"Submission 9501240 by evima\"\u003e9501240\u003c/a\u003e \u003cbr /\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003ch3\u003eDiv.1 E: \u003ca href\u003d\"/contest/506/problem/E\" title\u003d\"Codeforces Round 286 (Div. 1)\"\u003e506E - Mr. Kitayuta\u0027s Gift\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e[Problem] Given a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and an integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, find the number of the palindromes that can be obtained by inserting exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e letters into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNote: Div.2 A is a similar problem, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is fixed to \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e(Problem from \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/evima\" title\u003d\"Master evima\"\u003eevima\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eFirst of all, let us note that we are asked to count the resulting palindromes, not the ways to obtain them. For example, if we are to insert \u0026quot;b\u0026quot; into \u0026quot;abba\u0026quot;, there are 5 possible positions, but only 3 strings will be produced (\u0026quot;babba\u0026quot;, \u0026quot;abbba\u0026quot; and \u0026quot;abbab\u0026quot;). Rather than trying to count the ways of inserting a letter \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e times and removing the duplicated results, we should directly count the resulting palindrome. To do that, let us reformulate the problem:\u003c/p\u003e\u003cp\u003e[Problem\u0027] Given a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and an integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, find the number of the palindromes of length \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e| + \u003ci\u003en\u003c/i\u003e\u003c/span\u003e (let this number be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e) that contains \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e as a subsequence (not necessarily contiguous).\u003c/p\u003e\u003cp\u003eConsider constructing a palindrome from both ends, and matching it to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e from both left and right. For example, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u003d \u003c/span\u003e\u0026quot;abaac\u0026quot; and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 11\u003c/span\u003e. Let us call the final resulting string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. We first decide what letter to use as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e11\u003c/sub\u003e\u003c/span\u003e (they must be equal in order for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e to be a palindrome). Let us say \u0027\u003cb\u003ec\u003c/b\u003e\u0027 is chosen. Now, we have to construct the remaining part of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, that is, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e..\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e10\u003c/sub\u003e\u003c/span\u003e, so that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e..\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e10\u003c/sub\u003e\u003c/span\u003e contains \u0026quot;abaa\u0026quot; as a substring (note that the \u0027c\u0027 at the end of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e is discarded). Again, we decide what letter to use as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e10\u003c/sub\u003e\u003c/span\u003e. This time we choose \u0027\u003cb\u003ea\u003c/b\u003e\u0027. Then, we have to construct \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e..\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e9\u003c/sub\u003e\u003c/span\u003e, so that it contains \u0026quot;ba\u0026quot; as a substring (this time the two \u0027a\u0027s at the both ends of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e are discarded). We choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u003d \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e9\u003c/sub\u003e \u003d \u003c/span\u003e\u0027\u003cb\u003ec\u003c/b\u003e\u0027. Next, we construct \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e..\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e8\u003c/sub\u003e\u003c/span\u003e, so that it contains \u0026quot;ba\u0026quot; as a substring (this time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e remains unchanged). We choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e \u003d \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e8\u003c/sub\u003e \u003d \u003c/span\u003e\u0027\u003cb\u003eb\u003c/b\u003e\u0027. Then, we construct \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e5\u003c/sub\u003e..\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e7\u003c/sub\u003e\u003c/span\u003e, so that it contains \u0026quot;a\u0026quot; as a substring. We choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e5\u003c/sub\u003e \u003d \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e7\u003c/sub\u003e \u003d \u003c/span\u003e\u0027\u003cb\u003ea\u003c/b\u003e\u0027 (it is becoming repetitive, isn\u0027t it?). The last part of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, that is, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e6\u003c/sub\u003e\u003c/span\u003e, has no restriction (this time we choose a letter for only one position of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, not two). We choose \u0027\u003cb\u003ed\u003c/b\u003e\u0027, and we have obtained a palindrome \u0026quot;\u003cb\u003ec\u003cu\u003ea\u003c/u\u003ec\u003cu\u003eba\u003c/u\u003edabc\u003cu\u003eac\u003c/u\u003e\u003c/b\u003e\u0026quot; that contains \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e \u003d \u0026quot;abaac\u0026quot; as a subsequence.\u003c/p\u003e\u003cp\u003eThis problem is mostly about analyzing this process carefully.\u003c/p\u003e\u003cp\u003eThe most naive solution other than literally enumerating all palindromes of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e would be the following Dynamic Programming: let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003eleft\u003c/i\u003e][\u003ci\u003eright\u003c/i\u003e]\u003c/span\u003e be the number of the palindromes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e that can be obtained if you have already decided the leftmost and the rightmost \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e letters (\u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in total), and the substring \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eleft\u003c/i\u003e\u003c/sub\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eleft\u003c/i\u003e + 1\u003c/sub\u003e..\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eright\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e remains unmatched. Each value in this table can be computed in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e time. Of course, since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e can be up to \u003cspan class\u003d\"tex-span\"\u003e⌊\u003ci\u003en\u003c/i\u003e / 2⌋\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e), this solution is far from our goal.\u003c/p\u003e\u003cp\u003eNotice that the transitions from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1]\u003c/span\u003e are the same regardless of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, thus we can calculate the table by matrix exponentiation. However, since there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003es\u003c/i\u003e|\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e possible pairs for \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eleft\u003c/i\u003e, \u003ci\u003eright\u003c/i\u003e)\u003c/span\u003e, we will need \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/43/6f/436fd61c4d946901e863ca37db770124c6d5961f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time, which is actually worse than the naive calculation considering that \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e can be up to \u003cspan class\u003d\"tex-span\"\u003e200\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThis is where we need to observe the process which we have gone through at the beginning more carefully. Let us build a automaton corresponding to the process (the image below). \u003c/p\u003e\u003ccenter\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/61/e9/61e9c25b977bad7af00165b92070a9acabf16704.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003cbr /\u003e(*) An self-loop with a number means that there are actually that number of edges.\u003c/center\u003e\u003cp\u003eA process of producing a palindrome of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e that contains \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e as a subsequence corresponds to a path of length \u003cspan class\u003d\"tex-span\"\u003e⌈\u003ci\u003eN\u003c/i\u003e / 2⌉\u003c/span\u003e from the upper-right vertex to the lower-left vertex. Each red vertex has 24 self-loops since the letters at the both ends of the remaining part of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e is different, which correspond to two non-self-loop transitions. Similarly, each green vertex has 25 self-loops since the first letter and the last letter of the remaining string is the same, and the blue vertex, the destination, has 26 self-loops, as there are no more non-self-loop transitions available.\u003c/p\u003e\u003cp\u003eHere is an important fact: there are not so many possible combination of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e24, \u003ci\u003en\u003c/i\u003e25)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e24\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e25\u003c/span\u003e are the number of times a path from START to GOAL visits a red vertex (with 24 self-loops) and a green vertex (with 25 self-loops), respectively. Why? Each time we leave a red vertex, the length of the remaining unmatched part of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e decreases by 1, since exactly one of the two letters at the ends of the remaining part is matched and discarded. Similarly, each time we leave a green vertex, the length of the remaining string decreases by 2, since both of the two letters at the ends are matched and discarded. There is a exception, however: if the length of the remaining string is 1, then it will be a green vertex, but in this case the length will decrease by 1. Thus, for any path from START to GOAL, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e24 + 2·\u003ci\u003en\u003c/i\u003e25\u003c/span\u003e will be equal to either \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e| + 1\u003c/span\u003e. If we fix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e24\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e25\u003c/span\u003e will be uniquely determined by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e25 \u003d ⌈(|\u003ci\u003es\u003c/i\u003e| - \u003ci\u003en\u003c/i\u003e24) / 2⌉\u003c/span\u003e. Since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e24\u003c/span\u003e can only take the value between \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e| - 1\u003c/span\u003e, there are at most \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e possible pairs of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e24, \u003ci\u003en\u003c/i\u003e25)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWith this fact, we are ready to count the paths: let us classify them by the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e24\u003c/span\u003e. For each possible pair of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e24, \u003ci\u003en\u003c/i\u003e25)\u003c/span\u003e, let us count the number of corresponding paths. To do that, we divide each paths into two parts: first we count the number of paths from START to GOAL, using only non-self-loop transitions. Then, we count the ways of inserting self-loop transitions into each of these paths. The product of these two numbers will be the number that we seek.\u003c/p\u003e\u003cp\u003eThe first part is straightforward to solve: let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eleft\u003c/i\u003e][\u003ci\u003eright\u003c/i\u003e][\u003ci\u003en\u003c/i\u003e24]\u003c/span\u003e be the number of paths from the vertex that corresponds to the substring \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eleft\u003c/i\u003e\u003c/sub\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eleft\u003c/i\u003e + 1\u003c/sub\u003e..\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eright\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, visiting exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e24\u003c/span\u003e red vertices using only non-self-loop transitions. Each value of the table can be found in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e time, thus the whole table can be computed in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003es\u003c/i\u003e|\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e time, which is fast enough for the input size (\u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e| ≤ 200\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eThe main obstacle will be the second part. For example, let us consider the case where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u003d \u003c/span\u003e\u0026quot;abaac\u0026quot;, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 11, \u003ci\u003en\u003c/i\u003e24 \u003d 2\u003c/span\u003e, which corresponds to the example at the beginning. From the fact we found earlier, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e25 \u003d ⌈(|\u003ci\u003es\u003c/i\u003e| - \u003ci\u003en\u003c/i\u003e24) / 2⌉ \u003d ⌈(5 - 2) / 2⌉ \u003d 2\u003c/span\u003e. Thus, we have to insert \u003cspan class\u003d\"tex-span\"\u003e⌈\u003ci\u003eN\u003c/i\u003e / 2⌉ - \u003ci\u003en\u003c/i\u003e24 - \u003ci\u003en\u003c/i\u003e25 \u003d 6 - 2 - 2 \u003d 2\u003c/span\u003e self-loop transitions into this path (the image): \u003c/p\u003e\u003ccenter\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/1a/46/1a46a6e5a205f97d99f47d51742923169cd65aa4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eThe order in which red, green and blue vertices appears in this path does not affect the number of ways of insertion, and can be arbitrary. The number of ways to insert \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e self-loop transitions will be equal to the number of the path of length \u003cspan class\u003d\"tex-span\"\u003e⌈\u003ci\u003eN\u003c/i\u003e / 2⌉ \u003d 6\u003c/span\u003e from START to GOAL in this automaton (we have to take into account the non-self-loop transitions in it), which can be calculated by matrix exponentiation.\u003c/p\u003e\u003cp\u003eAre we done? No! Consider the case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u003d \u003c/span\u003e\u0026quot;abbb..(\u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e| - 1\u003c/span\u003e times)..bb\u0026quot;. There are \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e| - 1\u003c/span\u003e possible values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e24\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e24 \u003d 1\u003c/span\u003e corresponds to the case where you match and discard the \u0027a\u0027 first, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e24 \u003d |\u003ci\u003es\u003c/i\u003e| - 1\u003c/span\u003e corresponds to the case where you keep the \u0027a\u0027 until \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e becomes \u0026quot;ab\u0026quot;). Thus, you need to perform matrix exponentiation \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e| - 1\u003c/span\u003e times, which results in a total of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e2/32/e232b34164a404b1296317660c07a60913375c0d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time, which will be too much under the given constraints.\u003c/p\u003e\u003cp\u003eThere is still hope, though, and here is the climax. Notice that these automata are very similar to each other, and they differ only in the number of the red and green vertices. We can combine these automata into one larger automaton like this (the image): \u003c/p\u003e\u003ccenter\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/5e/54/5e54f2c067227e74f7a2c1338e076f3b2a0874aa.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003cbr /\u003eThe combined automaton should have \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e| - 1\u003c/span\u003e red, \u003cspan class\u003d\"tex-span\"\u003e⌈|\u003ci\u003es\u003c/i\u003e| / 2⌉\u003c/span\u003e green and \u003cspan class\u003d\"tex-span\"\u003e⌈|\u003ci\u003es\u003c/i\u003e| / 2⌉\u003c/span\u003e blue vertices.\u003c/center\u003e\u003cp\u003eBy performing matrix exponentiation on this automaton instead of many small automata, we can find all the required value in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b3/ea/b3ea4d4fc96800d13017e893adfabceab6a52ce5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time, which should be enough. We recommend speeding up matrix multiplication by noticing that the matrix will be upper triangular (6 times faster on paper), since the time limit is not so generous (in order to reject \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e2/32/e232b34164a404b1296317660c07a60913375c0d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solutions).\u003c/p\u003e\u003cp\u003eThe problem is almost solved, but there is one more challenge. When \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is odd, the situation becomes a little complicated: as we have seen at the beginning, in the last (\u003cspan class\u003d\"tex-span\"\u003e⌈\u003ci\u003eN\u003c/i\u003e / 2⌉\u003c/span\u003e-th) step of producing a palindrome we choose a letter for only one position of the resulting string, that is, the center of that string. In other words, the last transition in the path in the automaton we have first built must not be one from a green vertex with a string of length 2 (for example, \u0026quot;aa\u0026quot;) to GOAL.\u003c/p\u003e\u003cp\u003eLet us find the number of the paths that violates this condition and subtract it from the answer. As previously mentioned, for each path \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e24 + 2·\u003ci\u003en\u003c/i\u003e25\u003c/span\u003e will be equal to either \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e| + 1\u003c/span\u003e, and if we fix the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e24\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e25\u003c/span\u003e will be uniquely determined by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e25 \u003d ⌈(|\u003ci\u003es\u003c/i\u003e| - \u003ci\u003en\u003c/i\u003e24) / 2⌉\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e| - \u003ci\u003en\u003c/i\u003e24\u003c/span\u003e is odd, then it means that the last non-self-loop transition is one from a green vertex with a string of length 1, therefore in this case no path will violate the condition. If \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e| - \u003ci\u003en\u003c/i\u003e24\u003c/span\u003e is even, then the last non-self-loop trantision is from a green vertex with a string of length 2, thus the paths that does not contain the self-loop from GOAL to itself violate the condition. It will be equal to the number of the paths of length \u003cspan class\u003d\"tex-span\"\u003e⌈\u003ci\u003eN\u003c/i\u003e / 2⌉ - 1\u003c/span\u003e from START to the vertex just before GOAL, which can be found in a similar way to the second part of the solution.\u003c/p\u003e\u003cp\u003eThe journey has finally come to an end. Actually, it is also possible to solve this problem in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9d/4e/9d4e060286a145d99554e2a9fb1b66d1520e4b07.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time without matrix exponentiation, but this margin is too small to explain it. I will just paste the link to the code.\u003c/p\u003e\u003cp\u003eThe writer\u0027s code (matrix exponentiation, C++): \u003ca href\u003d\"/contest/506/submission/9501164\" title\u003d\"Submission 9501164 by evima\"\u003e9501164\u003c/a\u003e\u003cbr /\u003eThe writer\u0027s code (without matrix exponentiation, C++): \u003ca href\u003d\"/contest/506/submission/9501177\" title\u003d\"Submission 9501177 by evima\"\u003e9501177\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCongratulations again to \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Petr\" title\u003d\"International Grandmaster Petr\"\u003ePetr\u003c/a\u003e who was the only participant to solve this problem in 108 minutes. Also, I would like to give a special mention to \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/rng_58\" title\u003d\"International Grandmaster rng_58\"\u003erng_58\u003c/a\u003e, who was VERY close to solving it in only 63 minutes. He was just one byte away from getting AC (compare \u003ca href\u003d\"/contest/506/submission/9460984\" title\u003d\"Submission 9460984 by rng_58\"\u003e9460984\u003c/a\u003e and \u003ca href\u003d\"/contest/506/submission/9465440\" title\u003d\"Submission 9465440 by rng_58\"\u003e9465440\u003c/a\u003e)! \u003cbr /\u003e \u003cbr /\u003e \u003cbr /\u003e \u003cbr /\u003e If you find a possible error, or have a question, please feel free to ask here. Alternative solutions are also welcome.\u003c/p\u003e\u003c/div\u003e","tags":["editorial","codeforces round 286"]}}