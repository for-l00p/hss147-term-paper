{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1489156697,"rating":10,"authorHandle":"kirakira","modificationTimeSeconds":1489156697,"id":50903,"title":"\u003cp\u003eHow to do RMQ using two BITs?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI know RMQ normally is solved by some maybe more complicated data structures like segment tree, yet sometime ago I found this paper online: \u003ca href\u003d\"http://www.ioinformatics.org/oi/pdf/v9_2015_39_44.pdf\"\u003ehttp://www.ioinformatics.org/oi/pdf/v9_2015_39_44.pdf\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIt shows a way to use two BITs to find the RMQ (though only support point update, not range update).\u003c/p\u003e\u003cp\u003eI have read through the paper several times, I understand how to build the BITs and how to query it, but I totally don\u0027t know how to update it. I have post a question on \u003ca href\u003d\"http://stackoverflow.com/questions/42685826/rmq-using-two-fenwick-trees-binary-indexed-tree\"\u003eStack Overflow\u003c/a\u003e about this too but seems the answer is not fully convincing.\u003c/p\u003e\u003cp\u003eTherefore I would like to know:\u003c/p\u003e \u003col\u003e   \u003cli\u003eIs this method solving RMQ well known \u0026amp; common?\u003c/li\u003e   \u003cli\u003eHow exactly is the update operation be done? I would be appreciate if someone can demonstrate with an update on index 5 (1-based)\u003c/li\u003e \u003c/ol\u003e\u003c/div\u003e","tags":["#rmq","fenwick tree","binary indexed tree"]}}