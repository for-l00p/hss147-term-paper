{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1464980020,"rating":64,"authorHandle":"usaxena95","modificationTimeSeconds":1516606090,"id":45223,"title":"\u003cp\u003eSOS Dynamic Programming [Tutorial]\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eIntroduction\u003c/h2\u003e\u003cp\u003eIn this post, I am going to share my little knowledge on how to solve some problems involving calculation of \u003cstrong\u003eSum over Subsets(SOS)\u003c/strong\u003e using dynamic programming. Thus the name \u003cstrong\u003eSOS DP\u003c/strong\u003e. I have chosen this topic because it appears frequently in contests as mediu2m-hard and above problems but has very few blogs/editorials explaining the interesting DP behind it. I also have a predilection for this since I came across it for the first time in ICPC Amritapuri Regionals 2014. Since then I have created many questions based on this concept on various platforms but the number of accepted solutions always seems to be disproportionate to the lucidity of the concept. Following is a small attempt to bridge this gap ðŸ˜‰ \u003c/p\u003e\u003ch2\u003eProblem\u003c/h2\u003e\u003cp\u003eI will be addressing the following problem: Given a fixed array \u003cstrong\u003eA\u003c/strong\u003e of \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e integers, we need to calculate âˆ€ x function \u003cstrong\u003eF(x)\u003c/strong\u003e \u003d Sum of all \u003cstrong\u003eA[i]\u003c/strong\u003e such that \u003cstrong\u003ex\u0026amp;i \u003d i\u003c/strong\u003e, i.e., \u003cstrong\u003ei\u003c/strong\u003e is a subset of \u003cstrong\u003ex\u003c/strong\u003e.\u003cbr /\u003e\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/34/ea/34ead825270ffa9a9bcd92bf3b994c2117f4f964.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003ch2\u003ePrerequisite\u003c/h2\u003e \u003cul\u003e   \u003cli\u003eBasic Dynamic Programming\u003c/li\u003e   \u003cli\u003eBitmasks\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eIn no way this should be considered an introduction to the above topics.\u003c/p\u003e\u003ch2\u003eSolutions\u003c/h2\u003e\u003ch4\u003eBruteforce\u003c/h4\u003e \u003cpre\u003e\u003ccode\u003efor(int mask \u003d 0;mask \u0026lt; (1\u0026lt;\u0026lt;N); ++mask){\n\tfor(int i \u003d 0;i \u0026lt; (1\u0026lt;\u0026lt;N); ++i){\n\t\tif((mask\u0026amp;i) \u003d\u003d i){\n\t\t\tF[mask] +\u003d A[i];\n\t\t}\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis solution is quite straightforward and inefficient with time complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(4\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003ch4\u003eSuboptimal Solution\u003c/h4\u003e \u003cpre\u003e\u003ccode\u003e// iterate over all the masks\nfor (int mask \u003d 0; mask \u0026lt; (1\u0026lt;\u0026lt;n); mask++){\n\tF[mask] \u003d A[0];\n    // iterate over all the subsets of the mask\n    for(int i \u003d mask; i \u0026gt; 0; i \u003d (i-1) \u0026amp; mask){\n    \tF[mask] +\u003d A[i];\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNot as trivial, this solution is more efficient with time complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(3\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e. To calculate the time complexity of this algorithm, notice that for each mask we iterate only over its subsets. Therefore if a mask has \u003cem\u003eK\u003c/em\u003e on bits, we do \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e iterations. Also total number of masks with \u003cem\u003eK\u003c/em\u003e \u003cem\u003eon\u003c/em\u003e bits is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3b/39/3b3941e3262751dc3e6f31a0e231b767de7d7361.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Therefore total iterations \u003d \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4f/e5/4fe52cac5727b484cd7d44a5925998f84568e791.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003c/p\u003e\u003ch4\u003eSoS Dynamic Programming solution\u003c/h4\u003e\u003cp\u003eIn this approach we will try to iterate over all subsets of mask in a smarter way. A noticeable flaw in our previous approach is that an index \u003cstrong\u003eA[x]\u003c/strong\u003e with \u003cstrong\u003ex\u003c/strong\u003e having \u003cstrong\u003eK\u003c/strong\u003e \u003cem\u003eoff\u003c/em\u003e bits is visited by \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e \u003cstrong\u003emasks\u003c/strong\u003e. Thus there is repeated recalculation.\u003cbr /\u003eA reason for this overhead is that we are not establishing any relation between the \u003cstrong\u003eA[x]\u0027s\u003c/strong\u003e that are being used by different \u003cstrong\u003eF[mask]\u0027s\u003c/strong\u003e. We must somehow add another state to these masks and make semantic groups to avoid recalculation of the group.\u003c/p\u003e\u003cp\u003eDenote \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cc/ef/ccefc8fb1d6e3e5da0a969006172fda7da5335fd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Now we will partition this set into non intersecting groups. \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b3/55/b35599b58d942d1085f7b4dcae2dc0451f39c070.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, that is set of only those subsets of \u003cstrong\u003emask\u003c/strong\u003e which \u003cem\u003ediffer\u003c/em\u003e from \u003cstrong\u003emask\u003c/strong\u003e only in the first \u003cstrong\u003ei\u003c/strong\u003e bits (zero based). \u003cbr /\u003e For example \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/42/39/423940a7babd83ffbc3033d233d8baac774b5937.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e . Using this we can denote any set as a union of some non intersecting sets. \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eLets try to relate these sets of numbers. S(mask, i) contains all subsets of \u003cem\u003emask\u003c/em\u003e which differ from it only in the first \u003cstrong\u003ei\u003c/strong\u003e bits.\u003cbr /\u003eConsider that \u003cstrong\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/strong\u003e bit of mask is \u003cstrong\u003e0\u003c/strong\u003e. In this case no subset can differ from mask in the \u003cstrong\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/strong\u003e bit as it would mean that the numbers will have a \u003cstrong\u003e1\u003c/strong\u003e at \u003cstrong\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/strong\u003e bit where \u003cstrong\u003emask\u003c/strong\u003e has a \u003cstrong\u003e0\u003c/strong\u003e which would mean that it is not a subset of \u003cstrong\u003emask\u003c/strong\u003e. Thus the numbers in this set can now only differ in the first \u003cstrong\u003ei-1\u003c/strong\u003e bits. \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f5/de/f5de890ec55e9e98a8bb401405ebc521b544c02e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e S(mask,i) \u003d S(mask, i-1).\u003cbr /\u003eConsider that \u003cstrong\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/strong\u003e bit of mask is \u003cstrong\u003e1\u003c/strong\u003e. Now the numbers belonging to S(mask, i) can be divided into two non intersecting sets. One containing numbers with \u003cstrong\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/strong\u003e bit as \u003cstrong\u003e1\u003c/strong\u003e and differing from \u003cem\u003emask\u003c/em\u003e in the next \u003cstrong\u003ei-1\u003c/strong\u003e bits. Second containing numbers with \u003cstrong\u003ei\u003csup\u003eth\u003c/sup\u003e\u003c/strong\u003e bit as \u003cstrong\u003e0\u003c/strong\u003e and differing from \u003cem\u003emaskâŠ•2\u003csup\u003ei\u003c/sup\u003e\u003c/em\u003e in next \u003cstrong\u003ei-1\u003c/strong\u003e bits. \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f5/de/f5de890ec55e9e98a8bb401405ebc521b544c02e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e S(mask, i) \u003d S(mask, i-1) âˆª S(maskâŠ•2\u003csup\u003ei\u003c/sup\u003e, i-1). \u003cbr /\u003e\u003cbr /\u003e\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cd/89/cd89346ca587936aa5d3659676a3146ab8c33658.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003e\u003cbr /\u003e The following diagram depicts how we can relate the \u003cstrong\u003eS(mask,i)\u003c/strong\u003e sets on each other. Elements of any set \u003cstrong\u003eS(mask,i)\u003c/strong\u003e are the \u003cstrong\u003eleaves\u003c/strong\u003e in its subtree. The \u003cfont color\u003d\"red\"\u003ered\u003c/font\u003e prefixes depicts that this part of mask will be common to all its members/children while the black part of mask is allowed to differ.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/b2/de/b2deb315ff5f2d3ecc27eea26f2ae2e5d10d47c3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003cbr /\u003e Kindly note that these relations form a directed acyclic graph and not necessarily a rooted tree (think about different values of \u003cstrong\u003emask\u003c/strong\u003e and same value of \u003cstrong\u003ei\u003c/strong\u003e)\u003cbr /\u003e After realization of these relations we can easily come up with the corresponding dynamic programming.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e//iterative version\nfor(int mask \u003d 0; mask \u0026lt; (1\u0026lt;\u0026lt;N); ++mask){\n\tdp[mask][-1] \u003d A[mask];\t//handle base case separately (leaf states)\n\tfor(int i \u003d 0;i \u0026lt; N; ++i){\n\t\tif(mask \u0026amp; (1\u0026lt;\u0026lt;i))\n\t\t\tdp[mask][i] \u003d dp[mask][i-1] + dp[mask^(1\u0026lt;\u0026lt;i)][i-1];\n\t\telse\n\t\t\tdp[mask][i] \u003d dp[mask][i-1];\n\t}\n\tF[mask] \u003d dp[mask][N-1];\n}\n\u003c/code\u003e\u003c/pre\u003e \u003cpre\u003e\u003ccode\u003e//memory optimized, super easy to code.\nfor(int i \u003d 0; i\u0026lt;(1\u0026lt;\u0026lt;N); ++i)\n\tF[i] \u003d A[i];\nfor(int i \u003d 0;i \u0026lt; N; ++i) for(int mask \u003d 0; mask \u0026lt; (1\u0026lt;\u0026lt;N); ++mask){\n\tif(mask \u0026amp; (1\u0026lt;\u0026lt;i))\n\t\tF[mask] +\u003d F[mask^(1\u0026lt;\u0026lt;i)];\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe above algorithm runs in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003eâ€‰2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e time.\u003c/p\u003e\u003ch2\u003eDiscussion Problem\u003c/h2\u003e\u003cp\u003eNow you know how to calculate Sum over Subsets for a \u003cstrong\u003efixed\u003c/strong\u003e array \u003cstrong\u003eA\u003c/strong\u003e. What would happen if \u003cstrong\u003eA\u003c/strong\u003e and \u003cstrong\u003eF\u003c/strong\u003e are SOS functions of each other ðŸ˜‰ . Consider following modification to the problem. Assume H1, H2 to be 32 bit integer valued hash functions (just to avoid any combinatoric approach to circumvent this problem) and can be evaluated at any point in constant time.:\u003cbr /\u003e \u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/31/3f/313f9f78e6fb41d9dfff1a55412d7681a7a82bed.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003e\u003cbr /\u003e I enjoyed solving this with \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/_shil\" title\u003d\"Candidate Master _shil\"\u003e_shil\u003c/a\u003e. Lets discuss the approaches in comments :)\u003c/p\u003e\u003ch2\u003ePractice Problems\u003c/h2\u003e\u003cp\u003eI hope you enjoyed it. Following are some problems built on SOS.\u003cbr /\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.hackerearth.com/problem/algorithm/special-pairs-7/?utm_source\u003dheader\u0026amp;utm_medium\u003dsearch\u0026amp;utm_campaign\u003dhe-search\"\u003eSpecial Pairs\u003c/a\u003e\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/165/problem/E\"\u003eCompatible Numbers\u003c/a\u003e\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/383/problem/E\"\u003eVowels\u003c/a\u003e\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.codechef.com/problems/COVERING\"\u003eCovering Sets\u003c/a\u003e\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"http://hsin.hr/coci/archive/2011_2012/contest6_tasks.pdf\"\u003eCOCI 2011/2012 Problem KOSARE\u003c/a\u003e\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/w16/challenges/vim-war\"\u003eVim War\u003c/a\u003e\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/449/D\"\u003eJzzhu and Numbers\u003c/a\u003e\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/countercode/challenges/subset\"\u003eSubset\u003c/a\u003e\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://icpcarchive.ecs.baylor.edu/index.php?option\u003dcom_onlinejudge\u0026amp;Itemid\u003d8\u0026amp;category\u003d635\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d4997\"\u003eJersey Number\u003c/a\u003e\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.codechef.com/SNFL16MR/problems/BEAUTY\"\u003eBeautiful Sandwich\u003c/a\u003e\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/group/qcIqFPYhVr/contest/203881/problem/K\"\u003ePepsi Cola\u003c/a\u003e(resembles above \u003cem\u003ediscussion problem\u003c/em\u003e). Need to join \u003ca href\u003d\"//codeforces.com/group/qcIqFPYhVr/join\"\u003ethis\u003c/a\u003e group.\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.hackerearth.com/problem/algorithm/uchiha-brothers-and-two-products-circuit/\"\u003eUchiha and Two Products\u003c/a\u003e(resembles above \u003cem\u003ediscussion problem\u003c/em\u003e)\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.codechef.com/IPC15P2B/problems/STR_FUNC\"\u003eStrange Functions\u003c/a\u003e(Same as above \u003cem\u003ediscussion problem\u003c/em\u003e)\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/800/problem/D\"\u003eVarying Kibibits\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eEDIT\u003c/strong\u003e: Practice problems are now arranged in almost increasing order of difficulty.\u003c/p\u003e\u003c/div\u003e","tags":["dynamic programming","bitmasks","subset","summation"]}}