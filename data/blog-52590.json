{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1497395688,"rating":0,"authorHandle":"SAeed","modificationTimeSeconds":1497395688,"id":52590,"title":"\u003cp\u003eSPU Contest #5\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e \u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214087/problem/Blue\"\u003eBlue — Round House\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eImplementation\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eJust simulate the moves.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(n x b)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits\\stdc++.h\u0026gt;\nusing namespace std;\n\n#define Files\n\ntypedef long long         ll;\n\nint main() {\n#ifdef Filesx\n\tfreopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\tfreopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n#endif\n\tios::sync_with_stdio(0);\n\n\tint n, a, b; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b;\n\tfor (int i \u003d 0; i \u0026lt; abs(b); i++){\n\t\tif (b \u0026lt; 0) a--;\n\t\telse a++;\n\t\tif (a \u0026lt; 1) a \u003d n;\n\t\tif (a \u0026gt; n) a \u003d 1;\n\t}\n\tcout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214087/problem/Green\"\u003eGreen — Infinite Sequence\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eMath\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eCalculate the distance between a \u0026amp; b.\u003c/p\u003e\u003cp\u003eThe answer if yes only if:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003ea \u003d b\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003edistanceAB % abs(c) \u003d\u003d 0 \u0026amp; b is bigger than a \u0026amp; the sequence is becoming greater\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003edistanceAB % abs(c) \u003d\u003d 0 \u0026amp; b is smaller than a \u0026amp; the sequence is becoming smaller\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(1)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits\\stdc++.h\u0026gt;\nusing namespace std;\n\n#define Files\n\ntypedef long long         ll;\n\nint main() {\n#ifdef Filesx\n\tfreopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\tfreopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n#endif\n\tios::sync_with_stdio(0);\n\n\tll a, b, c; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b \u0026gt;\u0026gt; c;\n\t// special case\n\tif (c \u003d\u003d 0){\n\t\tif (a \u003d\u003d b) cout \u0026lt;\u0026lt; \u0026quot;YES\u0026quot; \u0026lt;\u0026lt; endl;\n\t\telse cout \u0026lt;\u0026lt; \u0026quot;NO\u0026quot; \u0026lt;\u0026lt; endl;\n\t\treturn 0;\n\t}\n\n\tll distanceAB \u003d max(a, b) - min(a, b);\n\tif (a \u003d\u003d b) cout \u0026lt;\u0026lt; \u0026quot;YES\u0026quot; \u0026lt;\u0026lt; endl;\n\telse if (distanceAB % abs(c) \u003d\u003d 0 \u0026amp;\u0026amp; b \u0026gt; a \u0026amp;\u0026amp; c \u0026gt; 0) cout \u0026lt;\u0026lt; \u0026quot;YES\u0026quot; \u0026lt;\u0026lt; endl;\n\telse if (distanceAB % abs(c) \u003d\u003d 0 \u0026amp;\u0026amp; b \u0026lt; a \u0026amp;\u0026amp; c \u0026lt; 0) cout \u0026lt;\u0026lt; \u0026quot;YES\u0026quot; \u0026lt;\u0026lt; endl;\n\telse cout \u0026lt;\u0026lt; \u0026quot;NO\u0026quot; \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214087/problem/Purple\"\u003ePurple — Approximating a Constant Range\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003e2 pointers\u003c/strong\u003e\u003c/p\u003e\u003cp\u003ekeep a multi-set named taken, to keep the elements you took. Each time move \u003ccode\u003eend\u003c/code\u003e forward, and then check how much you need to move \u003ccode\u003estart\u003c/code\u003e to make the current range acceptable. You have to keep moving \u003ccode\u003estart\u003c/code\u003e while the greatest element int the current range is bigger by no more than one from the smallest element in the current range (remember that the elements for the current range are in taken) (biggest element is in the end so it\u0027s in \u003ccode\u003erbegin\u003c/code\u003e) (smallest element is in the start so it\u0027s on \u003ccode\u003ebegin\u003c/code\u003e)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(n)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits\\stdc++.h\u0026gt;\nusing namespace std;\n\n#define Files\n\ntypedef long long         ll;\n\nint n;\nint a[100100];\nmultiset\u0026lt;int\u0026gt; taken;\n\nint main() {\n#ifdef Filesx\n\tfreopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\tfreopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n#endif\n\tios::sync_with_stdio(0);\n\n\tcin \u0026gt;\u0026gt; n;\n\tfor (int i \u003d 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i];\n\tint start \u003d 0;\n\tint ans \u003d 0;\n\tfor (int end \u003d 0; end \u0026lt; n; end++){\n\t\ttaken.insert(a[end]);\n\t\t// while biggest taken element - smallest taken element \u0026gt; 1\n\t\twhile (start \u0026lt; end \u0026amp;\u0026amp; (*taken.rbegin()) - (*taken.begin()) \u0026gt; 1){\n\t\t\ttaken.erase(taken.find(a[start]));\n\t\t\tstart++;\n\t\t}\n\t\tans \u003d max(ans, end - start + 1);\n\t}\n\tcout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214087/problem/Red\"\u003eRed — Orchestra\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eBrute Forces\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIterate over all the rectangles and check if they are accepted. You need 2 for loops to determine the starting point, 2 for loops to determine the ending point, and 2 for loops to check the current rectangle.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(n ^ 6)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits\\stdc++.h\u0026gt;\nusing namespace std;\n\n#define Files\n\ntypedef long long         ll;\n\nint a[11][11];\n\nint main() {\n#ifdef Filesx\n\tfreopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\tfreopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n#endif\n\tios::sync_with_stdio(0);\n\n\tint r, c, n, k; cin \u0026gt;\u0026gt; r \u0026gt;\u0026gt; c \u0026gt;\u0026gt; n \u0026gt;\u0026gt; k;\n\tmemset(a, 0, sizeof a);\n\tfor (int i \u003d 0; i \u0026lt; n; i++){\n\t\tint x, y; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y;\n\t\tx--, y--;\n\t\ta[x][y] \u003d 1;\n\t}\n\n\tint ans \u003d 0;\n\tfor (int startX \u003d 0; startX \u0026lt; r; startX++){\n\t\tfor (int startY \u003d 0; startY \u0026lt; c; startY++){\n\t\t\tfor (int endX \u003d 0; endX \u0026lt; r; endX++){\n\t\t\t\tfor (int endY \u003d 0; endY \u0026lt; c; endY++){\n\t\t\t\t\tint cnt \u003d 0;\n\t\t\t\t\tfor (int i \u003d startX; i \u0026lt;\u003d endX; i++){\n\t\t\t\t\t\tfor (int j \u003d startY; j \u0026lt;\u003d endY; j++){\n\t\t\t\t\t\t\tif (a[i][j] \u003d\u003d 1) cnt++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (cnt \u0026gt;\u003d k) ans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214087/problem/Yellow\"\u003eYellow — King\u0027s Path\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eBFS\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSince the number of the allowed cells is at most 10^5, we can run a BFS with some modefications:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003einstead of visited being an array, we have to make it a set (to check if we have visited this cell before)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003ewe create a set named allowed where we will store all the allowed cells (since it\u0027s guaranteed that there won\u0027t be more than 10^5 accepted cells)\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003enow just run a BFS and each time check that the cell you want to go to is allowed and not visited before.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(n)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits\\stdc++.h\u0026gt;\nusing namespace std;\n\n#define Files\n\ntypedef long long         ll;\n\nset\u0026lt;pair\u0026lt;int, int\u0026gt; \u0026gt; allowed;\nset\u0026lt;pair\u0026lt;int, int\u0026gt; \u0026gt; vis;\nint dx[8] \u003d { -1, 0, 1, 1, 1, 0, -1, -1 };\nint dy[8] \u003d { 1, 1, 1, 0, -1, -1, -1, 0 };\n\nint main() {\n#ifdef Filesx\n\tfreopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\tfreopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n#endif\n\tios::sync_with_stdio(0);\n\n\tint startX, startY, endX, endY; cin \u0026gt;\u0026gt; startX \u0026gt;\u0026gt; startY \u0026gt;\u0026gt; endX \u0026gt;\u0026gt; endY;\n\tint n; cin \u0026gt;\u0026gt; n;\n\tfor (int i \u003d 0; i \u0026lt; n; i++){\n\t\tint r, a, b; cin \u0026gt;\u0026gt; r \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b;\n\t\tfor (int j \u003d a; j \u0026lt;\u003d b; j++) allowed.insert(make_pair(r, j));\n\t}\n\tqueue\u0026lt;pair\u0026lt;int, pair\u0026lt;int, int\u0026gt; \u0026gt; \u0026gt; q;\n\tq.push(make_pair(0, make_pair(startX, startY)));\n\tvis.insert(make_pair(startX, startY));\n\tint ans \u003d -1;\n\twhile (!q.empty()){\n\t\tint x \u003d q.front().second.first, y \u003d q.front().second.second, dist \u003d q.front().first;\n\t\tq.pop();\n\t\tfor (int i \u003d 0; i \u0026lt; 8; i++){\n\t\t\tint u \u003d x + dx[i];\n\t\t\tint v \u003d y + dy[i];\n\t\t\tif (allowed.find(make_pair(u, v)) \u003d\u003d allowed.end()) continue;\n\t\t\tif (vis.find(make_pair(u, v)) !\u003d vis.end()) continue;\n\t\t\tif (u \u003d\u003d endX \u0026amp;\u0026amp; v \u003d\u003d endY) ans \u003d dist + 1;\n\t\t\tq.push(make_pair(dist + 1, make_pair(u, v)));\n\t\t\tvis.insert(make_pair(u, v));\n\t\t}\n\t}\n\tcout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}