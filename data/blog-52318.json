{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1496335708,"rating":95,"authorHandle":"Ahmad_Elsagheer","modificationTimeSeconds":1496513794,"id":52318,"title":"\u003cp\u003e[Editorial] Codeforces Round #417 (Div. 2)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello Codeforces, I hope you enjoyed the round!\u003c/p\u003e\u003cp\u003eJust some notes about the problems:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eIn problem A, the picture and example notes should complete your understanding for the problem if the statement itself is not clear.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eSolutions that check the lights of each part separately should have failed on pretests. My bad.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eProblem C was assigned as B at the beginning, but moved to C lest it is harder than B difficulty. However, I think problem B is still easier than problem C (check the solution below).\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eI thought problem D is easier than problem E. Once, conditions are well-understood and related to each other and the problem is modeled correctly, then its implementation is easy.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThe points I have just described is my own opinion in the problems. Of course, you might have a different point of view. However, I would like you to keep in mind that I did my best to make statements clear and pretests strong. \u003c/p\u003e\u003cp\u003eThanks for your understanding!\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/812/problem/A\" title\u003d\"Codeforces Round 417 (Div. 2)\"\u003e812A - Sagheer and Crossroads\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eFor pedestrian crossing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ 4)\u003c/span\u003e, lanes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 2\u003c/sub\u003e, \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e are the only lanes that can cross it. So, we have to check that either \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e or all mentioned lanes are \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/0OJSCH\"\u003eImplementation\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/812/problem/B\" title\u003d\"Codeforces Round 417 (Div. 2)\"\u003e812B - Sagheer, the Hausmeister\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eWhen Sagheer reaches a floor for the first time, he will be standing at either left or right stairs. If he is standing at the left stairs, then he will go to the rightmost room with lights on. If he is standing at the right stairs, then he will go to the leftmost room with lights on. Next, he will either take the left stairs or the right stairs to go to the next floor. We will brute force on the choice of the stairs at each floor. Note that Sagheer doesn’t have to go to the last floor, so he will go to the highest floor that has a room with lights on.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e·2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/egb6Vr\"\u003eImplementation\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/812/problem/C\" title\u003d\"Codeforces Round 417 (Div. 2)\"\u003e812C - Sagheer and Nubian Market\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIf Sagheer can buy \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e items, then he can also buy less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e items because they will be within his budget. If he can’t buy \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e items, then can’t also buy more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e items because they will exceed his budget. So, we can apply binary search to find the best value for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. For each value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, we will compute the new prices, sort them and pick the minimum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e prices to find the best minimum cost for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e items.\u003c/p\u003e\u003cp\u003eComplexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/83/db/83db5f431a0bd0efc679260c5e7d5db0018b907a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/IYaFQC\"\u003eImplementation\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/812/problem/D\" title\u003d\"Codeforces Round 417 (Div. 2)\"\u003e812D - Sagheer and Kindergarten\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eLet’s go through scenario requests one by one. For request \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, if toy \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is free, then child \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e can take it. Otherwise, child \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e will wait until the last child \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e who requested toy \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e finishes playing. Since, no child can wait for two toys at the same time, each child depends on at most one other child. So we can put an edge from the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. Thus, we can model the scenario as a forest (set of rooted trees) as each node has at most one outgoing edge (to its parent). \u003c/p\u003e\u003cp\u003eFor query \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, if toy \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e is free, then child \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e can take it and no child will cry. Otherwise, toy \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e is held by another child. Lets denote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e to be the last child who requested toy \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. So \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e now depends on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e is in the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, then all children in the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e will cry. Otherwise, no child will cry. We can check that a node is in the subtree of another node using euler walk (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ein\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eout\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e) with preprocessing in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e and query time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e + \u003ci\u003en\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/8cH3RX\"\u003eImplementation\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/812/problem/E\" title\u003d\"Codeforces Round 417 (Div. 2)\"\u003e812E - Sagheer and Apple Tree\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIn the standard nim game, we xor the values of all piles, and if the xor value is \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, then the first player loses. Otherwise, he has a winning strategy. One variant of the nim game has an extra move that allows players to add positive number of stones to a single pile (given some conditions to make the game finite). The solution for this variant is similar to the standard nim game because this extra move will be used by the winning player, and whenever the losing player does it, the winning player can cancel it by throwing away these added stones.\u003c/p\u003e\u003cp\u003eThis problem can be modeled as the mentioned variant. Lets color leaf nodes with blue. The parent of a blue node is red and the parent of a red node is blue (that’s why all paths from root to leaves must have the same parity). Blue nodes are our piles while red nodes allow discarding apples or increasing piles. \u003c/p\u003e\u003cp\u003eIf the xor value of blue nodes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u003d 0\u003c/span\u003e, then Soliman loses on the initial tree. To keep this state after the swap, Sagheer can:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eswap any two blue nodes or any two red nodes.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eswap a blue node with a red node if they have the same number of apples.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eIf the xor value of blue nodes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e ≠ 0\u003c/span\u003e, then Sagheer loses on the initial tree. To flip this state after the swap, Sagheer must swap a blue node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e with a red node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e such that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/30/32/303251f09cd42ffa72887f7b2b7bbe2075504165.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003emaxA\u003c/i\u003e)\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxA\u003c/i\u003e\u003c/span\u003e is the maximum value for apples in a single node.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/9wj5dm\"\u003eImplementation\u003c/a\u003e\u003c/p\u003e\u003cp\u003eYou can read more about games from \u003ca href\u003d\"http://e-maxx.ru/algo/sprague_grundy\"\u003ethis link\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}