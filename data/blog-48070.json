{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1477723266,"rating":33,"authorHandle":"abcdef6199","modificationTimeSeconds":1477723266,"id":48070,"title":"\u003cp\u003eA problem about palindrome\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eStatement summary: \u003c/p\u003e\u003cp\u003eGiven a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e and an array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e. You need to find the shortest substring of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e which contains \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e disjointed palindromes substring of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e[1], \u003ci\u003eL\u003c/i\u003e[2]...\u003ci\u003eL\u003c/i\u003e[\u003ci\u003eK\u003c/i\u003e]\u003c/span\u003e in any order.\u003c/p\u003e\u003cp\u003eFor example: if\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e \u003d \u003ci\u003eaaappbbccccdrrr\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e \u003d {4, 2, 3}\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen the answer is 10 (the substring \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebbccccdrrr\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eaaappbbcccc\u003c/i\u003e\u003c/span\u003e satisfies too, but its length is 11).\u003c/p\u003e\u003cp\u003eConstraint: \u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e ≤ 13\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThe best I can come up with is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eNK\u003c/i\u003e.2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e which iterate over all position in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e, consider it as the beginning of the substring and then DP with bitmask to find the end of the substring. Of course this won\u0027t fit in the TL.\u003c/p\u003e\u003cp\u003eI wonder if there exist some observation which will reduce the numbers of beginning position, or there is an entirely different approach that will fit in the TL.\u003c/p\u003e\u003cp\u003eThanks in advanced.\u003c/p\u003e\u003c/div\u003e","tags":[]}}