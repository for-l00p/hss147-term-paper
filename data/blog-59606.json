{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1526906842,"rating":119,"authorHandle":"sdnr1","modificationTimeSeconds":1527144032,"id":59606,"title":"\u003cp\u003e[Tutorial] Optimized solution for Knapsack problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eProblem Statement\u003c/h2\u003e\u003cp\u003eWe are going to deal with the well known knapsack problem with an additional constraint. We are given a list of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e items and a knapsack of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e\u003c/span\u003e. Every item has a cost \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e associated with it (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003eN\u003c/i\u003e\u003c/span\u003e). We can select some items from the list such sum of the cost of all the selected items does not exceed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e\u003c/span\u003e. The goal is tell for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ew\u003c/i\u003e ≤ \u003ci\u003eW\u003c/i\u003e\u003c/span\u003e), if we can select any number of items such that their total cost equals \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e. This is also known as the 0/1 knapsack problem. This can be easily solved in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eNW\u003c/i\u003e)\u003c/span\u003e time complexity using standard knapsack approach.\u003c/p\u003e\u003cp\u003eThe addition constraint we have is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1e/c6/1ec6228b1b9274689c9085f3a210d401aa82d1c6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003ch2\u003eThe bounded knapsack problem\u003c/h2\u003e\u003cp\u003eThe bounded knapsack problem is like the 0/1 knapsack problem, except in this we are also given a count for each item. In other words, each item has a count \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e associated with it and we can select an item \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e times (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003eN\u003c/i\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003ch2\u003eSolving bounded knapsack problem\u003c/h2\u003e\u003cp\u003eThe solution is simple. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e be the minimum count of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003eth item that has to be used to get a total cost of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e while using some number (possibly \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e) of first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e items. If a total cost of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e can not be obtained using first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e items, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d  - 1\u003c/span\u003e. The following code is used to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e,\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif(dp[i-1][j] \u0026gt;\u003d 0)\n    dp[i][j] \u003d 0;\nelse if(dp[i][j - c[i]] \u0026gt;\u003d 0 and dp[i][j - c[i]] \u0026lt; s[i])\n    dp[i][j] \u003d dp[i][j - c[i]] + 1;\nelse\n    dp[i][j] \u003d -1;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, \u003ccode\u003ec[i]\u003c/code\u003e is the cost and \u003ccode\u003es[i]\u003c/code\u003e is the count for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003eth item. Also, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[0][\u003ci\u003ej\u003c/i\u003e] \u003d  - 1\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003eW\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[0][0] \u003d 0\u003c/span\u003e. Time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eNW\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\u003ch2\u003eOptimizing 0/1 Knapsack\u003c/h2\u003e\u003cp\u003eNow we can present a faster solution to our problem. Notice that number of items is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1e/c6/1ec6228b1b9274689c9085f3a210d401aa82d1c6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Hence, there can only be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/50/f5/50f569c1460b0cfb4ec5311b369b5e122b4a409e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e unique costs. So we convert our problem to a bounded knapsack problem with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/50/f5/50f569c1460b0cfb4ec5311b369b5e122b4a409e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e unique items having some count. This can be solved in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/76/8c/768c7660602d8bbea92e24733118fefbf2e34131.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e !!!\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e \u003cstrong\u003ePS:\u003c/strong\u003e I wrote this blog since I could not find a good source on the internet to learn about this approach. I hope there is no error since I really didn\u0027t read about this anywhere and worked out this approach myself.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eEDIT:\u003c/strong\u003e As some people have pointed out, this method has been discussed in some previous blogs (see comments for links). The only practise problem I could find is \u003ca href\u003d\"//codeforces.com/contest/755/problem/F\"\u003e755F\u003c/a\u003e. Also, the method discussed in this blog is not the most optimal one possible and can be optimized further using a \u003ccode\u003ebitset\u003c/code\u003e (which I will discuss in a future blog).\u003c/p\u003e\u003c/div\u003e","tags":["#dp","knapsack"]}}