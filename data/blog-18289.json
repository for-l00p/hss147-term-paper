{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1433283354,"rating":80,"authorHandle":"MikeMirzayanov","modificationTimeSeconds":1433790566,"id":18289,"title":"\u003cp\u003eBriefly about testlib.h\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cem\u003eSection about testlib is temporary, at some day it will be merged into global documentation section when it appears.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eIf you are developing a programming contest problem and you are doing it with using C++ then testlib.h is a right choice to write all axillary programs. This library is a standard solution in a professional community of problemsetters in Russia and several other countries. Many contests are prepared by using testlib.h: All-Russian school olympiads, ACM-ICPC regional contests, all Codeforces round and many others.\u003c/p\u003e\u003cp\u003eRecently testlib.h was moved onto GitHub, now it is available by the following link: \u003ca href\u003d\"https://github.com/MikeMirzayanov/testlib\"\u003ehttps://github.com/MikeMirzayanov/testlib\u003c/a\u003e\u003c/p\u003e\u003cp\u003etestlib.h library is contained in a single header file. In order to include it you should just put testlib.h in the same directory with a program you are writing (checker, generator, validator or interactor) and just add a following line to the beginning of your program: \u003ccode\u003e#include \u0026quot;testlib.h\u0026quot;\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eHere are the cases when testlib.h is really useful:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"/blog/entry/18291\"\u003eIn writing \u003cem\u003egenerators\u003c/em\u003e\u003c/a\u003e. These are the programs that create tests for your problem, since it is not always possible to type a whole content of the test by using the keyboard (at least because of their possible large size);\u003c/li\u003e   \u003cli\u003eIn writing \u003cem\u003evalidators\u003c/em\u003e. These are programs that read the whole test and verifies that it is correct and that it satisfies the constraints of the problem. Validators should be maximally strict with respect to spaces, endlines, leading zeroes etc;\u003c/li\u003e   \u003cli\u003eIn writing \u003cem\u003einteractors\u003c/em\u003e. These are programs that are used in interactive problems, if your problem isn\u0027t interactive then just nevermind;\u003c/li\u003e   \u003cli\u003eIn writing \u003cem\u003echeckers\u003c/em\u003e. If your problem allows several possible answers for the tests then you should write a special program that checks participant\u0027s answer against jury\u0027s answer and the input data.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003etestlib.h is fully compatible with \u003ca href\u003d\"https://polygon.codeforces.com\"\u003ePolygon\u003c/a\u003e problem preparation system.\u003c/p\u003e\u003cp\u003eFirst versions of testlib.h appeared in 2005 as a result of testlib.pas porting on C++. Since then testlib.h has evolved, its features and performance were improved. Last versions of testlib.h are compatible with different versions of Visual Studio compilers and GCC g++ (in editions for many platforms), also it is compatible with C++11.\u003c/p\u003e\u003c/div\u003e","tags":[]}}