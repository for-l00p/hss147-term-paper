{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1427569416,"rating":31,"authorHandle":"Xellos","modificationTimeSeconds":1427569416,"id":17176,"title":"\u003cp\u003eSlovak OI, national round 2015\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThese days (26.-27.3.2015), another national round of Slovak Olympiad in Informatics took place. Just short problem statements for now, I\u0027ll write it in more detail and with solutions later:\u003c/p\u003e\u003ch4\u003e1.\u003c/h4\u003e\u003cp\u003eThere\u0027s a hazelnut chocolate of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e × \u003ci\u003eM\u003c/i\u003e\u003c/span\u003e, which can be viewed as a 2D grid. In each cell of the grid, there\u0027s a given number of nuts. Two players play a game, alternating turns: each player has to cut off either the bottom row or the rightmost column of the remaining part of the chocolate in her turn (and do with it guess what). The cut off row/column has to contain an even number of nuts. The player that can\u0027t make a move loses. Determine the winner if both play optimally.\u003c/p\u003e\u003ch4\u003e2.\u003c/h4\u003e\u003cp\u003eYou have two numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e, \u003ci\u003eK\u003c/i\u003e\u003c/span\u003e (\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b1/70/b1701ec8cf3029ca6376aed56cb67ee4d7da195f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e), one input file with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e - \u003ci\u003eK\u003c/i\u003e\u003c/span\u003e distinct numbers between \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003eK\u003c/i\u003e + 2\u003c/span\u003e empty files. Find the missing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e numbers.\u003c/p\u003e\u003cp\u003eYour program has a very limited amount of memory (the files\u0027 content isn\u0027t stored in that memory), just 10 kB for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e ≤ 100\u003c/span\u003e; its memory complexity can\u0027t depend on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e. Primarily, you need to minimise the worst-case number of reads+writes to files; only then are you minimising the time and memory complexity of your algorithm.\u003c/p\u003e\u003cp\u003eFiles work like queues and can be erased in small constant time.\u003c/p\u003e\u003ch4\u003e3.\u003c/h4\u003e\u003cp\u003ea very long introductory text and some heavily theoretical magic with simulating boolean conditions using other conditions and proving that it\u0027s always possible/impossible\u003c/p\u003e\u003ch4\u003e4.\u003c/h4\u003e\u003cp\u003eThere are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e numbers up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e and another number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e, also up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e. Find up to 4 numbers (one number can\u0027t be used multiple times) among these \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e that sum up to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e or decide that they don\u0027t exist. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e ≤ 4000\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003e5.\u003c/h4\u003e\u003cp\u003eThere\u0027s a straight river of constant width, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e points on one side of it and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e on the other side. You need to connect some of them with (obviously straight) lines that have the minimum total length in such a way that each of these \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e + \u003ci\u003eM\u003c/i\u003e\u003c/span\u003e points has at least one line connecting it with another point on the other side of the river. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e, \u003ci\u003eM\u003c/i\u003e ≤ 20000\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe first 3 problems are theoretical (points for explaining your algorithm), the other 2 practical (typical contest style, partial scoring); the max. time limit was 10s in both.\u003c/p\u003e\u003c/div\u003e","tags":["slovak oi","2015"]}}