{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1479975095,"rating":10,"authorHandle":"AnotherRound","modificationTimeSeconds":1479975095,"id":48591,"title":"\u003cp\u003ePersistent segment tree where modifications are not linear\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello!\u003c/p\u003e\u003cp\u003eI\u0027ve recently read about persistent segment trees and I found some good resources on the internet. I then remembered a problem I\u0027ve seen earlier, which is requires algorithm for the following task:\u003c/p\u003e\u003cp\u003eYou\u0027re given an array A1, A2, A3, ... An (n \u0026lt;\u003d 100000) and lets say that this array is in version 1. Then m \u0026lt;\u003d 100000 queries follow. For each query, we create a new \u0026quot;version\u0026quot; of the array, which is copied from some previous version v, then we increment all elements in the range [l, r] in this new version. Then we must say what is the sum of the elements in the range [i, j] for the new version.\u003c/p\u003e\u003cp\u003eThis problem clearly resembles persistent segment tree (sum of ranges). Problem is, changes made aren\u0027t linear(if we draw a diagram of the versions, it will be a tree). I think this can be done using the following algorithm (in C++). For representing nodes of segment tree, we create a structure with pointers for left and right and we use lazy propagation. In some array we keep references to the roots of all versions up to now. When we have to build the new version, we take the tree of the old version, we create a new root for the new version. As we do the first step (updating the range [l, r]) we just create new nodes when a modification is needed and reuse those from the old version if they are not used. The problem is, I think that this approach would give correct answer, but I\u0027m not sure about complexity of the algorithm (I need O(nlog(n))). Can somebody tell me whether my idea would work and if yes, what complexity would it have? Thank you in advance. I\u0027ll also appreciate if there is some other, easier way to create non-linear persistent segment tree.\u003c/p\u003e\u003c/div\u003e","tags":["persistent segment trees","#trees"]}}