{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1513347189,"rating":0,"authorHandle":"acmASCIS","modificationTimeSeconds":1513347189,"id":56369,"title":"\u003cp\u003eStrings part(2) — Week 7\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch4\u003e\u003cstrong\u003ePREFIX and SUFFIX\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003eA Prefix is a substring that exists at the beginning of a string while the Suffix is a Substring that exists at the end of a string.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/c5/54/c554686228a247360034eb5cc637090a715704b6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e“CODE”, “COD”, “CO”, “C”, are prefixes of the string “CODE”\u003c/p\u003e\u003cp\u003e“CODE”, “ODE”, “DE”, “E”, are suffixes of the string “CODE”\u003c/p\u003e\u003cp\u003eA Prefix’s beginning MUST be the same as the word’s beginning. While Suffix’s end MUST be the same as the word’s ending.\u003c/p\u003e\u003ch4\u003e\u003cstrong\u003eLexicographical sorting (dictionary order)\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003eIt’s a generalization of the way words are alphabetically ordered based on the alphabetical order of their component letters or simply its sorting words in dictionary order.\u003c/p\u003e\u003cp\u003elet\u0027s take an example, we want to sort these strings according to lexicographical order.\u003c/p\u003e\u003cp\u003e{ “acm” , “abc” , “acpc” , “algorithm” }\u003c/p\u003e\u003cp\u003eFirstly, we start comparing the first letter of each word in the 4 strings according to the alphabetical order.\u003c/p\u003e\u003cp\u003esince the 4 strings starts with the same letter we start comparing the second letter.\u003c/p\u003e\u003cp\u003eb comes before c then c comes before l in the alphabetical order.\u003c/p\u003e\u003cp\u003e{ “abc” , “acm” , “acpc” , “algorithm” }\u003c/p\u003e\u003cp\u003ewe found strings “acpc” and “acm” both consist of letter c at the second position then we start comparing the third letter of both strings.\u003c/p\u003e\u003cp\u003e{ “abc” , “acpc” , “acm” , “algorithm” }\u003c/p\u003e\u003cp\u003eSo that our technique is: When comparing two strings, we start by comparing the first letters of each word, then the second letters, and so on until one of the strings end or find the first letter pair that doesn’t match. if one of the strings ends the longer string is considered the larger one.\u003c/p\u003e\u003ch4\u003e\u003cstrong\u003eSorting Characters of a String\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003eWhat should we do if we want to sort a sequence of characters in a string? Shall we use bubble/selection sort on it? It’s not the only way. \u003ccode\u003esort()\u003c/code\u003e function is used to sort the string in lexicographical order.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint main()\n{\n        string sorted \u003d \u0026quot;dbac\u0026quot;;\n\tsort(sorted.begin(),sorted.end()); //prints \u0026quot;abcd\u0026quot;\n\tcout \u0026lt;\u0026lt; sorted \u0026lt;\u0026lt; endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e\u003cstrong\u003eWhat is ASCII?\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003eASCII (American Standard Code for Information Interchange) Short for American Standard Code for Information Interexchange, ASCII is a standard that assigns letters, numbers, and other characters within the 256 slots available in the 8-bit code. The ASCII decimal (Dec) number is created from binary, which is the language of all computers. As shown in the table below, the lower case “G\u0026quot; character (Char) has a decimal value of 71, which is \u0026quot;1000111\u0026quot; in binary.\u003c/p\u003e\u003cp\u003eSimply, every character you use has its own code that the computer deal with.\u003c/p\u003e\u003cp\u003eProgram to Print All ASCII Value Table in C Programming\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor(int i\u003d0;i\u0026lt;256;i++)\n{\n\tcout\u0026lt;\u0026lt;i\u0026lt;\u0026lt;\u0026quot; -\u0026gt; \u0026quot;\u0026lt;\u0026lt;char(i)\u0026lt;\u0026lt;\u0026quot; \u0026quot;;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eLet\u0027s play with strings\u003c/strong\u003e\u003c/p\u003e\u003cp\u003ewhat if we have a \u003ccode\u003estring \u003d “2171”\u003c/code\u003e and we want to convert it to an integer.\u003c/p\u003e\u003cp\u003eNow when you have a char that represents an ASCII digit (like \u00277\u0027), and you subtract the smallest possible ASCII from it \u003ccode\u003e(\u00270\u0027)\u003c/code\u003e, then you\u0027ll be left with the digit\u0027s corresponding value.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estring word \u003d \u0026quot;2171\u0026quot;;\nint result \u003d 0;\nfor(int i \u003d 0; i \u0026lt; word.size(); i++) \n{\n\tresult \u003d result * 10;\n\tresult \u003d result + ( word[i] \u0026amp;mdash; \u00270\u0027 );\n}\n\tcout\u0026lt;\u0026lt;result;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":[]}}