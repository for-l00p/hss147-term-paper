{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1403580681,"rating":3,"authorHandle":"k790alex","modificationTimeSeconds":1403580681,"id":12810,"title":"\u003cp\u003eHow to find the longest repeated (non-overlapping) substring\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eProblem:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eGiven a string S find the longest repeated substring non overlaps.\n\n1 \u0026lt;\u003d |S| \u0026lt;\u003d 50,000\n\nInput:\nABBBB\n\noutput:\nBB\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI\u0027m trying to solve a problem like this, after thinking some time I came up with this solution using suffix array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epos[i] -\u0026gt; sorted suffix array\nlcp[i] -\u0026gt; longest common prefix between i-th suffix and (i-1)-th suffix\nlcp2[i] -\u0026gt; like lcp but without overlaps -\u0026gt; lcp[i] \u003d min(l p[i], abs( pos[i] - pos[i - 1] ) )\n\nans \u003d max( lcp2[i] ) for 1 \u0026lt;\u003d i \u0026lt; |S|\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003emy approach was working for some cases but it fails for the test I wrote before.\u003c/p\u003e\u003cp\u003eI could think in a brute force solution which I think its some obvious:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eFor all repeated substring SUB, try all substring of SUB and test if have overlaps.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eDo you have a better way?\u003c/p\u003e\u003cp\u003eThanks.\u003c/p\u003e\u003c/div\u003e","tags":[]}}