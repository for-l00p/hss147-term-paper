{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1420229571,"rating":0,"authorHandle":"PrashantM","modificationTimeSeconds":1420265778,"id":15557,"title":"\u003cp\u003eSSN Coding Contest — 6 (Editorial)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eEditorial by Roopesh\u003c/p\u003e\u003cp\u003eA ----- Present from Lena \u003ca href\u003d\"//codeforces.com/problemset/problem/118/B\"\u003ehttp://codeforces.com/problemset/problem/118/B\u003c/a\u003e\u003c/p\u003e\u003cp\u003eJust print the given pattern :P . Take care of the trailing spaces .\u003c/p\u003e\u003cp\u003eTip from RaghavN — Use # instead of \u0026quot; \u0026quot; to debug the errors faster where u get the trailing spaces .\u003c/p\u003e\u003cp\u003ePossible areas of incorrectness — 1\u0026gt;First and the last row where there is a single element . 2\u0026gt;And as obvious , end of each line .\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"//codeforces.com/group/957fuDQyd8/contest/202208/submission/9348008\"\u003ehttp://codeforces.com/group/957fuDQyd8/contest/202208/submission/9348008\u003c/a\u003e\u003c/p\u003e\u003cp\u003eB ----- Books \u003ca href\u003d\"//codeforces.com/problemset/problem/279/B\"\u003ehttp://codeforces.com/problemset/problem/279/B\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAnother 2-pointer question (sliding window question) . Order of the reading of books is essential and hence sorting fails . Use 2 variables (say , upper and lower) that store array indices of the left and right limit of the current order of books . \u003c/p\u003e\u003cp\u003eFor the given t seconds, if u can still allocate time to read a book completely , increment upper . If not increment lower towards upper. If lower exceeds upper ,increment upper too . \u003c/p\u003e\u003cp\u003eThe number of books read in a order configuration is upper — lower + 1 .\u003c/p\u003e\u003cp\u003eMaximize the number of books read out of all the configurations. \u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"//codeforces.com/contest/279/submission/9348349\"\u003ehttp://codeforces.com/contest/279/submission/9348349\u003c/a\u003e\u003c/p\u003e\u003cp\u003eC ----- Squares \u003ca href\u003d\"//codeforces.com/problemset/problem/263/B\"\u003ehttp://codeforces.com/problemset/problem/263/B\u003c/a\u003e\u003c/p\u003e\u003cp\u003eVasya again ! Thank god , one end of the square is fixed at 0,0 . Take the opposite corners\u0027 coordinates in an array . Add another element in it as 0 . \u003c/p\u003e\u003cp\u003eSort the array containing the coordinates . If n \u0026lt; k , there exists no possible solution . \u003c/p\u003e\u003cp\u003eThe solution is x\u003darray[n-k]+1 , y\u003darray[n-k] .\u003c/p\u003e\u003cp\u003eHow this works ? The point (a\u003darray[n-k],b\u003darray[n-k]) is common to k+1 squares , because any point in the perimeter of the square is also a part of it . Printing the next adjacent point to it will solve the problem . Either it cant be (a+1 , b) or (a , b+1).\u003c/p\u003e\u003cp\u003eThere are multiple solutions for this problem.\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"//codeforces.com/contest/263/submission/9348352\"\u003ehttp://codeforces.com/contest/263/submission/9348352\u003c/a\u003e\u003c/p\u003e\u003cp\u003eD ----- Hexadecimal numbers \u003ca href\u003d\"//codeforces.com/problemset/problem/9/C\"\u003ehttp://codeforces.com/problemset/problem/9/C\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTo find the number of numbers which are made up of digits 0 or 1 . Brute force method of iterating from 1 to n and checking whether the number has only 0 or 1 doesnt work because n \u0026lt; \u003d 10 pow 9 . Anything above 10 pow 7 to 10 pow 8 computations per second causes an TLE (Time Limit Exceeded errors ) .\u003c/p\u003e\u003cp\u003eSeries — 1 10 11 100 101 110 111 . . . . . Many ways to do this problem — 1\u0026gt; Recursively — Did u find a pattern in the series ? Starting from 1 , for an given element , 10 * ele and (10*ele + 1) also is a part of the sequence . This is a binary recurrence . The base case is element \u0026gt; N . 2\u0026gt;Using strings . Using pigeon hole principle, the number of possible configuration of n digits with only 0 and 1 is 2 pow N . But 0 \u0027s shouldnt be counted. so (2 pow N )- 1 possible strings . There can be atmost 10 digits , N \u0026lt;\u003d10 pow 9 . So totally at most 1023 possible outcomes , We can use strings to depict the possible configurations and count number of outcomes less than n . \u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"//codeforces.com/contest/9/submission/9348347\"\u003ehttp://codeforces.com/contest/9/submission/9348347\u003c/a\u003e\u003c/p\u003e\u003cp\u003eE ----- \u003ca href\u003d\"//codeforces.com/problemset/problem/292/B\"\u003ehttp://codeforces.com/problemset/problem/292/B\u003c/a\u003e \u003c/p\u003e\u003cp\u003eConsidering n vertices and m edges , and this is non — directed or bi directional graph .\u003c/p\u003e\u003cp\u003eFor star topology — one of the vertex has n-1 edges and rest all vertices have 1 edge . \u003c/p\u003e\u003cp\u003eFor ring topology — all the vertices have 2 edges . \u003c/p\u003e\u003cp\u003eFor bus topology — 2 vertices have 1 edge and all the other vertices have 2 edges .\u003c/p\u003e\u003cp\u003eThis can be implemented by simply keeping track of number of edges \u0026quot;adjacent\u0026quot; to each vertex. Basically increment a counter for each vertex with each edge. Or a full adjacency list of the graph can be stored and used which is not required for this problem.\u003c/p\u003e\u003cp\u003eCode:\u003ca href\u003d\"//codeforces.com/contest/292/submission/9348355\"\u003ehttp://codeforces.com/contest/292/submission/9348355\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}