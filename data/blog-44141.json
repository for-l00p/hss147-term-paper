{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1459533927,"rating":121,"authorHandle":"Nickolas","modificationTimeSeconds":1459533927,"id":44141,"title":"\u003cp\u003eApril Fools Day Contest 2016: editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI\u0027m happy to see that this year there were 3 people who managed to solve all 7 problems! Unfortunately, only 1097 participants solved at least one problem, which is less than in 2014.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/656/problem/A\" title\u003d\"April Fools Day Contest 2016\"\u003e656A - Da Vinci Powers\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eThis problem asked to figure out an integer sequence from two samples and problem title. It turned out to be surprisingly hard, a lot harder than I anticipated. A quick search through OEIS shows that while there are a lot of sequences which have these two numbers in them, only one is related to Leonardo da Vinci (and if you\u0027re looking for da Vinci, there are only two sequences overall). \u003ca href\u003d\"http://oeis.org/A221180\"\u003ehttp://oeis.org/A221180\u003c/a\u003e is an erroneous series of powers of 2, written down by da Vinci in his diaries and available as part of \u0026quot;Codex Madrid I\u0026quot;.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/656/problem/B\" title\u003d\"April Fools Day Contest 2016\"\u003e656B - Scrambled\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eJust one word: \u003ca href\u003d\"https://en.wikipedia.org/wiki/Typoglycemia\"\u003etypoglycemia\u003c/a\u003e. The urban legend (unsupported by any known research) claims that people can easily read text even if letters in each word are scrambled, as long as the first and the last letters stay in place. Looked like a fun thing to verify on a small (and strongly biased) sample of competitive programmers. Judging from the results, it\u0027s really not much of an obstacle :-)\u003c/p\u003e\u003cp\u003eWhen un-scrambled, the lengthy statement becomes a story about two roommates who are trying to figure out a fair way to split dishes washing duty. (Fun fact: this problem idea is actually inspired not by any real-life events but by a theater play.) \u0026quot;You agree on two arrays of integers M and R, number upcoming days (including the current one) with successive integers (the current day is zero), and you wash the dishes on day N if and only if there exists an index i such that N % M[i] \u003d R[i], otherwise your roommate does it... Calculate the percentage of days on which you end up doing the washing.\u0026quot;\u003c/p\u003e\u003cp\u003eTo find the answer, you can find least common multiple of numbers in array M. The infinite number of days ahead can be split into identical blocks of M days, so the percentage of all days on which you end up with the chore will be the same as the percentage of the first LCM days. Iterate over days 0..LCM-1 and for each day check who gets to do the chore on it (since each element is at most 16, LCM will be at most 720720, and iteration will be sufficiently fast).\u003c/p\u003e\u003cp\u003eA much simpler approach would be just to iterate over a lot of days regardless of LCM and calculate the answer based on them — the absolute error will be small enough for this solution to pass.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/656/problem/C\" title\u003d\"April Fools Day Contest 2016\"\u003e656C - Without Text\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eOne more statement-less problem (and one more problem which turned out to be harder than I thought), but at least this one has a picture! By this time anyone with a history of participation in my contests should recognize a program regardless of the language in which it is written. In this case it is \u003ca href\u003d\"http://progopedia.com/language/sanscript/\"\u003eSanscript\u003c/a\u003e, a visual dataflow language. The image doesn\u0027t represent the whole program, just the body of the main loop, but it contains most of the logic.\u003c/p\u003e\u003cp\u003eIndividual elements of the program (functions) are fairly well annotated, so it shouldn\u0027t be too hard to figure out the overall purpose of the \u0026quot;code\u0026quot;. The whole mess of the blocks and arrows calculates sum of indices of uppercase letters in English alphabet (A is 1, B is 2 etc.) minus sum of indices of lowercase letters in alphabet. Non-letter characters are ignored.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/656/problem/D\" title\u003d\"April Fools Day Contest 2016\"\u003e656D - Rosetta Problem\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eI love so many unusual programming languages that one language per problem just can\u0027t cover all of them. The solution is simple: have several languages per problem! Unfortunately, most people on Codeforces don\u0027t share my passion for languages, and this problem, while being trivial to implement, turned out to be the hardest in the whole contest.\u003c/p\u003e\u003cp\u003eEach paragraph of the statement is a short program in one of esoteric languages. If you recognize each one, find an interpreter for it and execute the program, you\u0027ll get a piece of statement. Put them together to find out what is it that you need to do to solve the actual problem:\u003c/p\u003e \u003cul\u003e   \u003cli\u003ePrint number (\u003ca href\u003d\"http://progopedia.com/language/brainfuck/\"\u003eBrainfuck\u003c/a\u003e) — \u003ca href\u003d\"http://ideone.com\"\u003ehttp://ideone.com\u003c/a\u003e\u003c/li\u003e   \u003cli\u003eof ones in (\u003ca href\u003d\"http://progopedia.com/language/malbolge/\"\u003eMalbolge\u003c/a\u003e) — \u003ca href\u003d\"http://www.malbolge.doleczek.pl/\"\u003ehttp://www.malbolge.doleczek.pl/\u003c/a\u003e\u003c/li\u003e   \u003cli\u003ebase 8 (\u003ca href\u003d\"http://progopedia.com/language/piet/\"\u003ePiet\u003c/a\u003e) — \u003ca href\u003d\"http://www.rapapaing.com/blog/?page_id\u003d6\"\u003ehttp://www.rapapaing.com/blog/?page_id\u003d6\u003c/a\u003e\u003c/li\u003e   \u003cli\u003enotation of a (\u003ca href\u003d\"http://progopedia.com/language/befunge/\"\u003eBefunge\u003c/a\u003e) — \u003ca href\u003d\"http://www.quirkster.com/iano/js/befunge.html\"\u003ehttp://www.quirkster.com/iano/js/befunge.html\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/656/problem/E\" title\u003d\"April Fools Day Contest 2016\"\u003e656E - Out of Controls\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eThis problem was the first and the last one to tell you clearly and without doubt what you have to do: write a solution to a simple graph problem (likely using a Floyd-Warshall algorithm) without any traditional reserved words for loops and conditional statements.\u003c/p\u003e\u003cp\u003eThere is a number of workarounds possible, which strongly depend on the language you use. Three main approaches were:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eHonestly rewrite the solution in a recursive way.\u003c/li\u003e   \u003cli\u003eAdd some other characters in the middle of each forbidden keyword (/*..*/ in C++ or @ in Python with eval)\u003c/li\u003e   \u003cli\u003eUse built-in functions like map, each etc.\u003c/li\u003e   \u003cli\u003eI suspect the few Haskell users were not inconvenienced at all :-)\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/656/problem/F\" title\u003d\"April Fools Day Contest 2016\"\u003e656F - Ace It!\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eThis problem was contributed by \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/kit1980\" title\u003d\"Specialist kit1980\"\u003ekit1980\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eOne of the most common tricks in April Fool\u0027s day contests is OEIS lookup. Most statement-less problems can be solved by thoroughly searching the website. In this problem, you were given OEIS sequence numbers, and if you checked them on the website, you could notice that the answer is the first element of the given sequence. Now it\u0027s just a matter of encoding this lookup process, given that Codeforces doesn\u0027t allow solutions to visit external websites...\u003c/p\u003e\u003cp\u003eOk, it\u0027s about time to shout \u0026quot;April Fool!\u0026quot; and burst into laughter. Forget about OEIS. This problem was carefully forged to look very much like what I\u0027ve described (and I hope it did!), but the actual solution is much, much simpler. The input represents a hand of cards in a game of blackjack, and you have to calculate the sum of points for it. A stands for Ace, worth 1 point (the minimal sum of the 6 digits part of the hand is 12, so if Ace is counted as 11, you\u0027re guaranteed to go bust), digits 2..9 correspond to matching cards, and pair of digits 10 represents, well, a ten. The reference to \u0026quot;validity\u0026quot; in the statement meant that 1 or 0 will never appear alone, but will always form a valid card.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/656/problem/G\" title\u003d\"April Fools Day Contest 2016\"\u003e656G - You\u0027re a Professional\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eThis problem was a kind of tribute to a story called \u0026quot;The Expert\u0026quot; (\u003ca\u003ehttps://www.youtube.com/watch?v\u003dBKorP55Aqvg)\u003c/a\u003e. You are given a simple task, but the checker, a.k.a. the customer, keeps throwing new requirements at you. First, you have to rewrite your solution in any other language (that\u0027s when you don\u0027t want C++ to be the only programming language you know!) regardless of what was your original language. Next, the solution turns out to be too long (again, regardless of its original length). Finally, you have to add a kitten to it (just put a word \u0026quot;kitten\u0026quot; anywhere in the code). Turned out to be much easier than decoding weird programming languages!\u003c/p\u003e\u003c/div\u003e","tags":["april 1st"]}}