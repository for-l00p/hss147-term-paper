{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1482183906,"rating":375,"authorHandle":"Um_nik","modificationTimeSeconds":1482184327,"id":49189,"title":"\u003cp\u003eBin search and relative error\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSuppose we want to solve a problem by doing binary search on answer. Then the answer will be checked against jury\u0027s answer by absolute or relative error (one of them should be smaller then \u003cspan class\u003d\"tex-span\"\u003eε\u003c/span\u003e). For simplicity we will assume that our answer is always greater than \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and smaller than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. Because of that, we will always use relative error rather than absolute.\u003c/p\u003e\u003cp\u003eSuppose we have made \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e iterations of our binary search — what information do we have now? I state that we know that real answer is lying in some segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e]\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e1 \u003d \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u0026lt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026lt; ... \u0026lt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; ... \u0026lt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003c/sub\u003e \u003d \u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. And what is great — we can choose all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e except for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow, for simplicity, we will also assume that we will answer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e for segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e]\u003c/span\u003e and the real answer was \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — it is the worst case for us. It is obvious that we will not do that in real life, any other answer would be better, but you will get the idea.\u003c/p\u003e\u003cp\u003eSo, what is our relative error? It is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/36/b1/36b1ebe3dc35c8401a07eb050ad21e232fccb6d5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Worst case for us is when relative error is maximal. It is logical to make them equal — exactly what we do by binary search with absolute errors. \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6c/6e/6c6e8120de3b7b030cd7c80cf06ee2509f09712d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. We can assume that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/38/9c/389c38eedf82fabcf2495616c021c47e46562742.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e so \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f5/88/f588d85c0954cc2754189c1a1afe2f24990dd5bf.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Now we have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3e/3d/3e3dba672d86f2e6a4456ae7ad9df76d225a641d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, but \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cb/13/cb1380a8bfcc20b182f38f5f809ce70edb191fd0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, so \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e3/99/e39918bfe652631b452b565411c94ca77cbe3874.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. How large should be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e to get error less than \u003cspan class\u003d\"tex-span\"\u003eε\u003c/span\u003e? \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/36/f0/36f0c2dc0519fb5340ba3e0e85c52b78cd7ab1d3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Much smaller than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/12/43/1243e587674b762f91718e1a05b3304a261db325.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eHow to write such binary search? We want to choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e in such a way that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1c/b4/1cb4e395f83cbeac97712f5fb7dab268670ba19f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e or simply \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/17/d9/17d98cb0d692aa930e50cddb2c350d373e7f5bd5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eNow I want to deal with some assumptions I made.\u003c/p\u003e\u003cp\u003eHow to choose answer in the end? Again, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/75/56/7556cf2bf381d1e45f73dca183f35bab9e942f5d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (it is basically the same as dividing the segment in binary search).\u003c/p\u003e\u003cp\u003eWhat to do if the answer can be smaller than \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e? Try \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e; if answer is smaller than \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e~--- use standard binary search (because absolute error smaller than relative); is answer is bigger than \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e~--- use the binary search above.\u003c/p\u003e\u003cp\u003eP.S. I have never heard about this idea and come up with this while solving \u003ca href\u003d\"/contest/744/problem/D\" title\u003d\"Codeforces Round 385 (Div. 1)\"\u003e744D - Hongcow Draws a Circle\u003c/a\u003e. I\u0027m sorry if it is known for everyone except for me.\u003c/p\u003e\u003c/div\u003e","tags":["binary search"]}}