{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1419445961,"rating":63,"authorHandle":"IAmNotDaniil","modificationTimeSeconds":1419536637,"id":15353,"title":"\u003cp\u003eCodeforces Round #284 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/499/problem/A\" title\u003d\"Codeforces Round 284 (Div. 2)\"\u003e499A - Watching a movie\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eOne can solve the problem using greedy algorithm: if we can skip \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e minutes at current moment without skipping any good moment — we do that, otherwise — watch another minute of the film.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/499/problem/B\" title\u003d\"Codeforces Round 284 (Div. 2)\"\u003e499B - Lecture\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIn this task you must find for every string in the text the pair containing that string, and from two strings of that pair output the shortest one.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/498/problem/A\" title\u003d\"Codeforces Round 284 (Div. 1)\"\u003e498A - Crazy Town\u003c/a\u003e / \u003ca href\u003d\"/contest/499/problem/C\" title\u003d\"Codeforces Round 284 (Div. 2)\"\u003e499C - Crazy Town\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIt can be easily proved that, if two points from statement are placed on different sides of some line, this line will be crossed anyway. So, all we need to do is to cross all these lines, so the answer is the number of these lines.\u003c/p\u003e\u003cp\u003eTo check if two points lies on different sides of a line one can simply use its coordinates to place in line equation and check if these two values have different signs. \u003c/p\u003e\u003cp\u003eSolution complexity — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/498/problem/B\" title\u003d\"Codeforces Round 284 (Div. 1)\"\u003e498B - Name That Tune\u003c/a\u003e / \u003ca href\u003d\"/contest/499/problem/D\" title\u003d\"Codeforces Round 284 (Div. 2)\"\u003e499D - Name That Tune\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eLet\u0027s numerate all the songs and seconds starting from 0.\u003c/p\u003e\u003cp\u003eProblem will be solved using DP approach. State will be described by two integers \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e is probability of that we named exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e songs, and the last named song was named exactly before \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e\u0027th second (after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e - 1\u003c/span\u003e seconds). \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[0][0] \u003d 1\u003c/span\u003e obviously.\u003c/p\u003e\u003cp\u003eTo make a move from state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e to state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ej\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ek\u003c/i\u003e \u0026lt; \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e), we must name the song exactly after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e seconds its playing — probability of that is \u003cspan class\u003d\"tex-span\"\u003e(1 - \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/sup\u003e·\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eTo fixed state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e sum of that moves can be represented as \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/61/bd/61bda1f08bad33137294d896773bfbd82d98b198.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Simple calculation of this value for each state gives \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enT\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e complexity, so one must notice, that this values can be calculated using two pointers for fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e (in common case it represent a segment with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e length) for every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e in time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eT\u003c/i\u003e)\u003c/span\u003e. This way calculating this type of moves takes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enT\u003c/i\u003e)\u003c/span\u003e time.\u003c/p\u003e\u003cp\u003eThere is also a move to \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ej\u003c/i\u003e + \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e and a move from \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, (\u003ci\u003ej\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e) \u003d \u003ci\u003eT\u003c/i\u003e)\u003c/span\u003e, when we couldn\u0027t name current song in time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e. This types of moves is calculated with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enT\u003c/i\u003e)\u003c/span\u003e too.\u003c/p\u003e\u003cp\u003eSolution complexity — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enT\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/498/problem/C\" title\u003d\"Codeforces Round 284 (Div. 1)\"\u003e498C - Array and Operations\u003c/a\u003e / \u003ca href\u003d\"/contest/499/problem/E\" title\u003d\"Codeforces Round 284 (Div. 2)\"\u003e499E - Array and Operations\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eWe will divide only by prime numbers.\u003c/p\u003e\u003cp\u003eFirst, let\u0027s build a graph, where each of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e numbers have own vertex group:\u003c/p\u003e\u003cp\u003eFind all prime factors of current number. Every factor will have its own vertex in a group, furthermore, if some factor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e has power of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in current number, it will have exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e vertexes in group.\u003c/p\u003e\u003cp\u003eThe number of vertexes in such graph is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/55/7b/557bd4f353fc652b215146af33fa416d713cbe6e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eNow we will make edges in our graph: edge between two vertexes exists if and only if there is a good pair (given in statement) of vertexes group numbers and the prime values of a vertexes are the same. That means that we can divide that group numbers by that prime.\u003c/p\u003e\u003cp\u003eThe number of edges is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d9/95/d995d2101b3aa7a9b1106284a55028cb236ff649.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eGood pairs are given the way that our graph is bipartite. After finding maximum matching in this graph we represent the way of doing operations as described in the statement.\u003c/p\u003e\u003cp\u003eAs soon as solution is using Kuhn\u0027s algorithm, its complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/51/e9/51e97e3b02aaefbef2b47ba57d918ace200b23c6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. One could notice that some of the edges are useless and reduce it to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ab/fc/abfcfcbc4882b45223fb7960bf9176098cf5b2c1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/498/problem/D\" title\u003d\"Codeforces Round 284 (Div. 1)\"\u003e498D - Traffic Jams in the Land\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThe solution of a problem — 60 (LCM of a numbers from 2 to 6) segment trees.\u003c/p\u003e\u003cp\u003eIn \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e\u0027th segment tree we will hold for every segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e the next value: minimum time needed to get from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e if we start in a moment of time equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e modulo 60. Using these trees\u0027 values it is easy to quickly answer the questions, carefully changing the trees\u0027 values.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/498/problem/E\" title\u003d\"Codeforces Round 284 (Div. 1)\"\u003e498E - Stairs and Lines\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThe problem is solved using DP approach \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e]\u003c/span\u003e — the number of ways to paint first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e blocks of a ladder the way that the last layer of vertical edges is painted as described in mask \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003c/span\u003e. This could be easily recalculated using matrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e[\u003ci\u003emask\u003c/i\u003e1][\u003ci\u003emask\u003c/i\u003e2]\u003c/span\u003e — the number of ways to paint horizontal edges between two neighbour vertical layers painted as represented by masks \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e2\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e layers, so this matrix must be multiplied by itself \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e times, which can be quickly done by binary-pow algorithm. After that this matrix is simply used in dynamic described above.\u003c/p\u003e\u003cp\u003eSolution complexity — \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/82/87/828712b1677616ad232f54086ce3f1cabf42fb58.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["codeforces","editorial","284"]}}