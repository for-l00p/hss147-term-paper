{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1473678992,"rating":16,"authorHandle":"C137","modificationTimeSeconds":1473679120,"id":47074,"title":"\u003cp\u003eRegular problem analysis blog (2) / Dynamic programing problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003c/p\u003e\u003cp\u003eHello Codeforces, my name is \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/New_Horizons\" title\u003d\"Expert New_Horizons\"\u003eNew_Horizons\u003c/a\u003e and as I said before, I will continue writing regularly in this blog:\u003c/p\u003e\u003cp\u003eThe idea is, every 7-10 days i am gonna select a problem that i really found it useful and interesting, and then i will talk about the way i solved this problem, with long editorial and analysis, by this way of sharing my thoughts i hope that grey, green and cyan contestants will benefit from it and learn something new, also i am hoping that top rated contestants will also add their notes to my solution, and suggest some more optimized code.\u003c/p\u003e\u003cp\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003c/p\u003e\u003cp\u003eToday, I choose to you this dp problem, I really liked this problem because in the round I solved it in the last 23 minutes, and this helped me becoming blue for the first time, I hope you will like it:\u003c/p\u003e\u003cp\u003eP.S: if you are familiar with the basics of dynamic programing, then i strongly recommend you to try with this problem at least for one hour before reading this blog, otherwise as a start you should check \u003ca href\u003d\"https://www.youtube.com/watch?v\u003dNnD96abizww\"\u003ethis\u003c/a\u003e as it contains a description to the Longest common sub-sequence (LCS) problem .\u003c/p\u003e\u003cp\u003eBefore I start, I would like to thank \u003ca class\u003d\"rated-user user-green\" href\u003d\"/profile/Nour_R\" title\u003d\"Pupil Nour_R\"\u003eNour_R\u003c/a\u003e for solving this problem after reading this blog, and adding his notes and suggestions to make it even more clear.\u003c/p\u003e\u003cp\u003eproblem name: Alyona and Strings\u003c/p\u003e\u003cp\u003eLink: \u003ca href\u003d\"//codeforces.com/contest/682/problem/D\"\u003ethis\u003c/a\u003e\u003c/p\u003e\u003cp\u003etype: dp\u003c/p\u003e\u003cp\u003eDifficulty level: Medium\u003c/p\u003e\u003cp\u003eShort Description:\u003c/p\u003e\u003cp\u003eYou are given two strings, and number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e, you should find the length of the longest sub-string consisting of at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e groups of continuous characters.\u003c/p\u003e\u003cp\u003eExample:\u003c/p\u003e\u003cp\u003eLet the two strings be:\u003c/p\u003e\u003cp\u003eaabbcc\u003c/p\u003e\u003cp\u003eaadccc\u003c/p\u003e\u003cp\u003eand \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 2\u003c/span\u003e\u003c/p\u003e\u003cp\u003ethe answer would be \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e, and the sub-string is: aacc\u003c/p\u003e\u003cp\u003eProblem Analysis:\u003c/p\u003e\u003cp\u003eWhen you read such problem, the first thing that clicks to your mind is dp, there is a famous dp problem so familiar to this one, it\u0027s the Longest Common sub-sequence(LCS) so i knew i should start from LCS code, and I wrote the following code on a piece of paper:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint lcs(int i, int j){\n\tif(i\u003d\u003ds1.length() || j\u003d\u003ds2.length())return 0;\n\tint \u0026amp;ret\u003ddp[i][j];\n\tif(ret!\u003d-1)return ret;\n\tif(s1[i]\u003d\u003ds2[j])return ret\u003d 1+lcs(i+1,j+1);\n\treturn ret\u003dmax(lcs(i+1,j) , lcs(i,j+1) );\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, any dp problem could be solved easily if you can determinate three main things:\u003c/p\u003e\u003cp\u003eFirst, how to represent your state, like the LCS my state should be represented using my position in the first string, and my position in the second one, in addition this problem requires another parameter, its the number of remaining groups, so the state is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[pos_first_string][pos_second_string][rem_groups]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSecond, the end case of the cal function, also like the LCS my cal function should return 0 when i reach the end of one of the two strings, in addition, when i have no remaining groups, i should return 0, because i can\u0027t take any more characters, so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif(i\u003d\u003ds1.length() || j\u003d\u003ds2.length() || rem_groups\u003d\u003d0)return 0;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow after i represented my state, decided when the cal function should stop, there is only one more thing to consider, how to move from state_a to state_b ??? I mean how to move from a state to another.\u003c/p\u003e\u003cp\u003eNow there are two cases to consider, if there is a common continues characters to take, or if there isn\u0027t. If there isn\u0027t any common continues characters, which means:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif(s1[i]!\u003ds2[j]) return ret\u003dmax(cal(i+1 , j, rem_groups), cal(i, j+1 , rem_groups) );\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eeither i move in the first string, or in the second one, and the number of remaining groups doesn\u0027t change.\u003c/p\u003e\u003cp\u003eNow, if there is a common group of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e\u003c/span\u003e then I should take it, and increase the answer by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e\u003c/span\u003e, so i wrote:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif(s1[i]!\u003ds2[j]) return ret\u003dmax(cal(i+1 , j,  rem_groups),cal(i, j+1 , rem_groups) );\nelse ret\u003dlen+cal(i+len, j+len, rem_groups-1);\nreturn ret;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewhen i first saw this problem, there was only 23 minutes remaining in the round, so i was in a big hurry, and have no time to debug my code, I submitted it like this and got wrong answer on the pretests.\u003c/p\u003e\u003cp\u003ewith short time remaining, i checked my code on some samples, and it gave me a wrong answer on the following sample:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e1\naxsss\nacsss\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003emy code was printing 1, but the answer is 3, taking sub-string \u0026quot;sss\u0026quot;\u003c/p\u003e\u003cp\u003ewhat was happening, is sometimes i shouldn\u0027t take the group, because perhaps there is longer group after it, so I wrote:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eret\u003dmax(cal(i+1 , j,rem_groups),cal(i      , j+1 , rem_groups) );\nif(s1[i]!\u003ds2[j])return ret;\nelse ret\u003dmax(ret,len+cal(i+len,j+len,rem_groups-1) );\nreturn ret;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewith five minuted remaining, i submitted my code, to get TLE on pretests, i was surprised, as my complexity is:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elenoffirststring\u003c/i\u003e * \u003ci\u003elenofsecondstring\u003c/i\u003e * \u003ci\u003ek\u003c/i\u003e \u003d 1000 * 100 * 10 \u003d 1\u003csup class\u003d\"upper-index\"\u003e7\u003c/sup\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003esomething small, and easily passes the pretests, however after a quick look at the code, i found that i forget in the cal function to write:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif(ret!\u003d-1)return ret;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewith three minutes remaining, i fixed the code, and got pretests passed, and finally got it accepted, after very interesting and nervous 19 minutes.\u003c/p\u003e\u003cp\u003ethere are some things that i would like to talk about, while solving a dp problem, always check if you passed this state before, so you won\u0027t cal the same states multiple times, never forget to initialize your dp array with \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e, and don\u0027t forget the return at the cal function, these are three common bugs at dp codes, that makes you sometimes hate your day.\u003c/p\u003e\u003cp\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003c/p\u003e\u003cp\u003eThis is all I can say for this problem, I hope you liked my analysis and you benefit from it, I am not gonna post my code, because I think you can code it now after reading the analysis, If there is still something unclear, then fell free to ask me in the comments below, or send me a message...\u003c/p\u003e\u003cp\u003eI will try to post the next blog about the next problem in the following week... Happy coding, and have a nice day :D\u003c/p\u003e\u003cp\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003c/p\u003e\u003c/div\u003e","tags":["regular problem analysis","new_horizons","dp","lcs"]}}