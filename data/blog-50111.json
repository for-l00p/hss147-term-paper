{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1485735159,"rating":67,"authorHandle":"poikniok","modificationTimeSeconds":1485735159,"id":50111,"title":"\u003cp\u003eImproving Problem Solving through Reading Problem Editorials / Solutions\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI have a question to ask experienced contestants about the plausibility of a possible way to improve at programming contests, by somewhat rapidly trying to read through problems and their editorials / solutions. \u003c/p\u003e\u003cp\u003eThere have been several existing blog posts on Codeforces about reading theory vs solving problems, however my question is rather different, as rather than reading theory I am curious about specifically reading problems, and then the solutions to the problem immediately, without spending any time on personally thinking about or implementing solutions. \u003c/p\u003e\u003cp\u003eTo give a specific example of such a source of problems I am considering attempting doing this with past Topcoder SRMs, as they have the nice property of having both editorials and also the ability to browse contestant solutions through the TC browser \u003ca href\u003d\"http://felix-halim.net/tc/\"\u003ehere\u003c/a\u003e ordered by the ranking / competence of the solver, and also the forums of course which at a certain time period were quite active. \u003c/p\u003e\u003cp\u003eHaving done this for about a dozen SRMs this approach seems mildly promising to me, as by removing the need to solve the problem one can get a general idea of what kind of ideas are solvable by certain methods very rapidly. Certainly one does not gain any deep understanding of the problem, but it seems on a per time basis training oneâ€™s self to recognize patterns in problem types is somewhat useful. Particularly for me, there is no realistic way that I will ever actually work my way through solving the massive archive of past problems on Topcoder, and thus it seems nice to get some intuition from all the past work that people put into creating the problems and their editorials. \u003c/p\u003e\u003cp\u003eOn the other hand I have not heard much about anybody implementing such a training method, which does provoke some skepticism I suppose. General advice has always seemed to me to involve either reading books / blogs / forums about general concepts, or solving problems oneself. Thus I must ask if anybody has embarked on such a project, and if it had any positive results, or alternatively if the consensus is that reading problems and their solutions is useless without personally implementing them? \u003c/p\u003e\u003cp\u003eThanks for any advice!\u003c/p\u003e\u003c/div\u003e","tags":[]}}