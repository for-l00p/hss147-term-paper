{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1430677265,"rating":97,"authorHandle":"Zlobober","modificationTimeSeconds":1430800761,"id":17697,"title":"\u003cp\u003eVK Cup Round 3 editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/542/problem/A\" title\u003d\"VK Cup 2015 - Round 3 (unofficial online mirror, Div. 1 only)\"\u003e542A - Place Your Ad Here\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eLet\u0027s fix the TV channel window and look for a commerical having the largest intersection with it. There are four types of commercials: lying inside the window, overlapping the window and partially intersecting the window from the left and from the right.\u003c/p\u003e\u003cp\u003eIt\u0027s easy to determine if there is overlapping commercial: it\u0027s enough to sort commercials in increasing order of the left end and then while iterating over them from left to right, keep the minimum value of a right end of a commercial. If when we pass the window \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e and see that current value of the maximum right end is no less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e then there exists a commercial overlapping our window and the value is equal to the \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)·\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAmong all commercials that lie inside our window we need the longest one. It can be done by similar but a bit harder manner. Let\u0027s use sweepline method. While passing through the end of the commercial \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, let\u0027s assign in some data structure (like segment tree) the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. While passing through the end of a window, let\u0027s calculate answer for it as a maximum on segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e. By doing this, we consider all commercials inside the window.\u003c/p\u003e\u003cp\u003eWe can process partially intersecting commercials in the similar way. While passing the right end of the commercial \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e let\u0027s put the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in the point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in our data structure. While passing through the right end of a window \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e let\u0027s calculate the answer for it as a maximum on the segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e minus \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAmong all answers for all commercials we need to choose the largest one. So we have the solution in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e. What if there are weights not only on windows, but on commercials also, and those weights are multiplied with the intersection length? You can solve this task in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ca/4c/ca4c38da7d143fc87534d50aa6d551dd861caae9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and get a virtual medal!\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/542/problem/B\" title\u003d\"VK Cup 2015 - Round 3 (unofficial online mirror, Div. 1 only)\"\u003e542B - Duck Hunt\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eFirst of all, let\u0027s say that ducks stay still and the one that moves is the hunter. Let\u0027s define the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003es\u003c/i\u003e]\u003c/span\u003e as the minimum number of ducks among having the right end no further than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, that we \u003cstrong\u003ecan\u0027t\u003c/strong\u003e shot if the last shot was in the point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. In particular, the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003es\u003c/i\u003e]\u003c/span\u003e includes all ducks located inside the segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003es\u003c/i\u003e + 1, \u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e. Values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003es\u003c/i\u003e]\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u0026gt; \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e let\u0027s consider as undefined.\u003c/p\u003e\u003cp\u003eLet\u0027s look on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e as on a function of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. This function is defined on all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e inclusive. The key idea is in investigating how \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1][·]\u003c/span\u003e differs from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][·]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s first suppose that in point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + 1\u003c/span\u003e there is no end of the duck. Then in definition of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1][·]\u003c/span\u003e we consider the same set of the ducks as for the definition f \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][·]\u003c/span\u003e. That means that all values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003es\u003c/i\u003e]\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e ≤ \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e are the same for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1]\u003c/span\u003e. Let\u0027s understand what happens with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1][\u003ci\u003ex\u003c/i\u003e + 1]\u003c/span\u003e. It\u0027s easy to see that the shot in point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + 1\u003c/span\u003e can\u0027t kill any of the ducks that end no further than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + 1\u003c/span\u003e (since we just supposed that there are no ducks ending in exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + 1\u003c/span\u003e). So, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1][\u003ci\u003ex\u003c/i\u003e + 1] \u003d \u003ci\u003emin\u003c/i\u003e \u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1][0... \u003ci\u003ex\u003c/i\u003e + 1 - \u003ci\u003er\u003c/i\u003e] \u003d \u003ci\u003emin\u003c/i\u003e \u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][0... \u003ci\u003ex\u003c/i\u003e + 1 - \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow let\u0027s suppose that in point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + 1\u003c/span\u003e the duck \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e + 1]\u003c/span\u003e ends. In this case we can say that all values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1][0... \u003ci\u003el\u003c/i\u003e - 1]\u003c/span\u003e should be increased by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e (since at the moment of shot in point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u0026lt; \u003ci\u003el\u003c/i\u003e\u003c/span\u003e the duck \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e + 1]\u003c/span\u003e can\u0027t be killed yet). From the other hand, all values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1][\u003ci\u003el\u003c/i\u003e... \u003ci\u003ex\u003c/i\u003e + 1]\u003c/span\u003e remain the same since the last shot kills the newly added duck.\u003c/p\u003e\u003cp\u003eNow let\u0027s understand how to implement all this stuff. Function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][·]\u003c/span\u003e is piecewise constant, so it can be stored in a Cartesian tree as a sequence of pairs (beginning of segment, value on segment). Such storage allows us to easily add \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e on prefix and take minimum on prefix of a function.\u003c/p\u003e\u003cp\u003eNow let\u0027s think that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][·]\u003c/span\u003e is defined on all posistive values but the values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003es\u003c/i\u003e]\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u0026gt; \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e do not satisfy the definition of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003es\u003c/i\u003e]\u003c/span\u003e above. In other words, let\u0027s just suppose that the lats segment in structure \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e is infinite in right direction.\u003c/p\u003e\u003cp\u003eLet\u0027s sweep with the variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. The function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1][·]\u003c/span\u003e changes in comparsion to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][·]\u003c/span\u003e very rarely For example, the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1][\u003ci\u003ex\u003c/i\u003e + 1]\u003c/span\u003e is almost always the same as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e + 1]\u003c/span\u003e (that is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e as said above). Indeed, if we suppose that there is no duck ending in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + 1\u003c/span\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e] \u003d \u003ci\u003emin\u003c/i\u003e(\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][0... \u003ci\u003ex\u003c/i\u003e - \u003ci\u003er\u003c/i\u003e])\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1][\u003ci\u003ex\u003c/i\u003e + 1] \u003d \u003ci\u003emin\u003c/i\u003e(\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e + 1][0... \u003ci\u003ex\u003c/i\u003e + 1 - \u003ci\u003er\u003c/i\u003e]) \u003d \u003ci\u003emin\u003c/i\u003e(\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][0... \u003ci\u003ex\u003c/i\u003e + 1 - \u003ci\u003er\u003c/i\u003e]) ≤ \u003ci\u003emin\u003c/i\u003e(\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][0... \u003ci\u003ex\u003c/i\u003e - \u003ci\u003er\u003c/i\u003e])\u003c/span\u003e. So, there is an interesting event only if value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e - \u003ci\u003er\u003c/i\u003e + 1]\u003c/span\u003e is smaller than the whole prefix before it. On the other hand, the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][0... \u003ci\u003ex\u003c/i\u003e - \u003ci\u003er\u003c/i\u003e])\u003c/span\u003e can\u0027t increase more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e times by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e (each time when we pass through the right end of the duck) and so, it also can\u0027t decrease more then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e times (since it is a non-negative value).\u003c/p\u003e\u003cp\u003eSo, the events \u0026quot;we passed through the right end of the duck\u0026quot; and \u0026quot;we should non-trivially calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e\u0026quot; are in total linear. Each of them can be processed in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e operation with Cartesian tree, that gives as totally an \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution. Whooray! \u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/542/problem/C\" title\u003d\"VK Cup 2015 - Round 3 (unofficial online mirror, Div. 1 only)\"\u003e542C - Idempotent functions\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIn order to solve this task it\u0027s good to understand how does the graph corresponding the function from \u003cspan class\u003d\"tex-span\"\u003e{1, ..., \u003ci\u003en\u003c/i\u003e}\u003c/span\u003e to itself looks. Let\u0027s consider a graph on vertices \u003cspan class\u003d\"tex-span\"\u003e1, ..., \u003ci\u003en\u003c/i\u003e\u003c/span\u003e with edges from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to the vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e. Such graph always looks like a set of cycles with several trees leading to that cycles. How should the graph look like for function to be the idempotent? It\u0027s easy to see that in such graph all cycles should be of length \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and all vertex that are not cycles of length \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e (i. e. all not fixed points) should immediatly lead to some fixed point.\u003c/p\u003e\u003cp\u003eSo, we should satisfy two conditions. First, all cycles should become of length \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e — in order to do that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e should be divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elcm\u003c/i\u003e(\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e are the lengths of all cycles. Second, all vertices not lying on cycles should become leading to the vertices lying on cycles. In other words, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e should be no less than the distance from any vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to the cycle it goes into (or, that the same, the length of pre-period in the sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e), \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)), \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e))), ...\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eSo, are task is about finding the smallest number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e that is no less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e, it is not hard at all.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e. What is the maximum possible answer for this task? (Answer: \u003ca href\u003d\"http://oeis.org/A000793\"\u003efirst\u003c/a\u003e \u003ca href\u003d\"http://oeis.org/A000793/b000793.txt\"\u003esecond\u003c/a\u003e)\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/542/problem/D\" title\u003d\"VK Cup 2015 - Round 3 (unofficial online mirror, Div. 1 only)\"\u003e542D - Superhero\u0027s Job\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst step is to understand the properties of a Joker function. It\u0027s important property is that it is multiplicative: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eJ\u003c/i\u003e(\u003ci\u003eab\u003c/i\u003e) \u003d \u003ci\u003eJ\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e)\u003ci\u003eJ\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e) \u003d 1\u003c/span\u003e, so we can write the value of function knowing the factorization of an argument: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eJ\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sup\u003e... \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e\u003c/sup\u003e) \u003d \u003ci\u003eJ\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e)\u003ci\u003eJ\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sup\u003e)... \u003ci\u003eJ\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e\u003c/sup\u003e) \u003d (\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e + 1)(\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sup\u003e + 1)... (\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e\u003c/sup\u003e + 1)\u003c/span\u003e. Let\u0027s use this knowledge in order to solve the task with dynamic programming. \u003c/p\u003e\u003cp\u003eLet\u0027s denote as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e the set of prime \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e such that the multiple including it may appear in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e \u003d \u003ci\u003eJ\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e. There are not that many such primes: each divisor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e of number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e can correspond no more than one such prime, namely, the one whose power the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e - 1\u003c/span\u003e is (if it is a prime power at all). Let\u0027s calculate the set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e and also remember for each prime number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e in it in which powers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e the value \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e + 1)\u003c/span\u003e divides \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eNow we can calculate value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e][\u003ci\u003ed\u003c/i\u003e]\u003c/span\u003e that is equal to the number of ways to get a divisor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e of a number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e as a product of brackets of first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e primes in set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e. Such value can be caluclated by using dynamic programming in time \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/34/d3/34d3e7e5a3121c64f5e44b74e51684814f381464.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e where \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8a/d0/8ad09b74c23dbe019fbe3e3faec6f9f7b6af60f9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is the number of divisors of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e (as it was shown above that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f9/dd/f9dd36d2a780573e2ba1be066f3634ac1be61a18.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e). So, overall complexity of the solution is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5d/e3/5de32d510237f9940c964f6b9b36a15f01b363dc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e. How the \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8a/d0/8ad09b74c23dbe019fbe3e3faec6f9f7b6af60f9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e behaves when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e increases? What is the maximum values of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8a/d0/8ad09b74c23dbe019fbe3e3faec6f9f7b6af60f9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e over all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e12\u003c/sup\u003e\u003c/span\u003e? (The answer: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/38/cf/38cfc74c2a6593122c57fdc19c3f9607eb9e708f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Nice estimate that is not an exact asymptotic, though, is that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1c/0c/1c0c129f131f7ae57c183cb8779427103f55e5bb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e. What is the maximum answer in this task? If you are able to create a test with answer larger than million, a great respect from me!\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/542/problem/E\" title\u003d\"VK Cup 2015 - Round 3 (unofficial online mirror, Div. 1 only)\"\u003e542E - Playing on Graph\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eFirst, if the original graph isn\u0027t bipartite then the answer is (-1). Indeed, any odd cycle, while being contracted by the pair of vertices, always produces an odd cycle of smaller size, so at some point we will get a triangle that blocks us from doing anything.\u003c/p\u003e\u003cp\u003eFrom the other way, each bipartite component can be contracted in order to get a chain whose length is a diameter of the component. Suppose that the pair of vertices \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e is a diamater of some connected component. Then, by contracting all vertices located on the same distance from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e we can achieve the chain we want.\u003c/p\u003e\u003cp\u003eThe last step is that the answer fror the original graph is the sum of the answers for all the connected components since we can attach all of them together. So, the answer is the sum of diameters of all connected components if all of them are bipartite, otherwise answer is -1. Solution has the complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eE\u003c/i\u003e + \u003ci\u003eVE\u003c/i\u003e)\u003c/span\u003e (The first summand is checking for being bipartite, the second one is calculation diameters by running BFS from each vertex).\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/542/problem/F\" title\u003d\"VK Cup 2015 - Round 3 (unofficial online mirror, Div. 1 only)\"\u003e542F - Quest\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThis task can be solved in lot of ways. The most straightforward is DP. The task can be seen in the following way. We want some set of vertices as leaves and for each potential leaf we know the upper bound for its depth and its cost.\u003c/p\u003e\u003cp\u003eLet\u0027s sweep over the tree from down to up. Let\u0027s calculate the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003eh\u003c/i\u003e][\u003ci\u003ec\u003c/i\u003e]\u003c/span\u003e that is the maximum possible cost that we can achieve if we stay on the level \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e and have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e vertices on it. For transition let\u0027s fix how many leaves of the deepness exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e we will take (it\u0027s easy to see that among them we should task several greatest). Suppose we will take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e of them. Then from this state we can move to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003eh\u003c/i\u003e - 1][⌈(\u003ci\u003ec\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e) / 2⌉]\u003c/span\u003e. The answer will be located in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[0][1]\u003c/span\u003e because when we are on the level \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e we should have the only vertex that is the root of the tree.\u003c/p\u003e\u003cp\u003eThe complexity of such solution is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003eT\u003c/i\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e Improve the solution above to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/96/e5/96e5053f885e746580e5e6e9b83e5d313fb3cf19.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and then to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/57/da/57daab42af4aa48eded7d50ff70a31c89ac9da16.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003c/div\u003e","tags":["vk cup round 3 editorial"]}}