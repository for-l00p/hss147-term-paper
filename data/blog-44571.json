{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1461734045,"rating":64,"authorHandle":"Handled","modificationTimeSeconds":1461860732,"id":44571,"title":"\u003cp\u003ePrepare a mashups contest using polygon system for newbies \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eFirst things first, I\u0027m so sorry because of my bad english, if have any confusions in wording. Thanks :)\u003c/p\u003e\u003cp\u003eOkay, here we go ! \u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eStep 1:\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eYou have to prepare problems for contest. Have many ways to do this, but i recommended using \u003ca href\u003d\"//polygon.codeforces.com\"\u003epolygon\u003c/a\u003e system — The professional way to prepare programming contest problem. \u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eCreate an account on polygon system.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eAfter login, you\u0027ll see Dasboard Screen like this \u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/a3/28/a328a3700cb5f1ce75379e44a9c8b634c9237dfd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eChoose tab New Problem\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eStart Edit Session \u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/80/cc/80cc772679655df40a05b45ceb4c8fa1b9e624ac.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eStep 2:\u003c/strong\u003e\u003c/h3\u003e\u003ch4\u003e• \u003cstrong\u003eGeneral Info\u003c/strong\u003e\u003c/h4\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eInput file — input file name or \u0026quot;stdin\u0026quot; in case of standard input\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eOutput file — output file name or \u0026quot;stdout\u0026quot; in case of standard output\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eTime limit — time limit per test in milliseconds\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eMemory limit — memory limit in megabytes\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003e• \u003cstrong\u003eStatement\u003c/strong\u003e\u003c/h4\u003e \u003cul\u003e   \u003cli\u003ePrepare problem content here:\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/14/66/14669a9b6c586b1fa01866108034efc54d87d642.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch4\u003e• \u003cstrong\u003eFiles\u003c/strong\u003e\u003c/h4\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eResources — Header files, library files and other files you need in process of compilation of your sources. All resources will be copied to the compilation folder while compilation. Also some system files are resources. For example, \u0026quot;problem.tex\u0026quot; (which will be renamed) is also resources. You can change these files if you want to change some system behavior.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eSources — Source files of generators, checkers (verifiers) and validator. As since you can change resources and make your sources uncompilable, it is possible to that sources are compilable with the button \u0026quot;Check sources for compilability\u0026quot;. You can use one of the prewritten checker (special program which checks that answer is correct), so don\u0027t write your own if you really don\u0027t need it.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eAdditional files — Any other files. It can be problem manual in Microsoft Word format, some reports in Microsoft Excel or pictures. You can place here problem statement if you have non-standard statement format (for example, Microsoft Word).\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003e• \u003cstrong\u003eChecker\u003c/strong\u003e\u003c/h4\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eHere you can select one of the prewritten checker or any of your sources to play checker role. Checker is a special program which uses three command line parameters: \u0026quot;check.exe input-file output-file answer-file\u0026quot;. Checker should read and analyze these files and return verdict. It should return:\u003c/p\u003e\u003cp\u003e• Exit code 0 — If the answer is correct\u003c/p\u003e\u003cp\u003e• Exit code 1 — If the answer is incorrect\u003c/p\u003e\u003cp\u003e• Exit code 2 — If it can\u0027t parse output-file\u003c/p\u003e\u003cp\u003e• Exit code 3 — If some assertion failed (for example participant has found better solution that jury expects).\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eAlso it is good practice than checker prints some short message to stdout describing the reason for the verdict. It is better to use English for it.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eThe best way to prepare checker is to use testlib library from the \u003ca href\u003d\"http://code.google.com/p/testlib/\"\u003etestlib\u003c/a\u003e Latest release of the testlib is placing in the resources by default to make easy testlib usage.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003e• \u003cstrong\u003eValidator\u003c/strong\u003e\u003c/h4\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eValidator is a special program to validate that all the tests are satisfy the constraints from the statement. It expects to get input file from the standard input. If it thinks that input is incorrect, it should return non-zero exit code and prints short message to the stdout or stderr.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIt is highly recommended to use validator. Validator will be transparently executed on each test usage (sample tests injecting into the statement, solution invocation, test preview and so on).\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/68/a1/68a1b860c1906a8b23986006ab2cec92ed912279.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch4\u003e• \u003cstrong\u003eTests\u003c/strong\u003e\u003c/h4\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eEach problem has one or more testset. Many problems have only one testset and the typical name for it is \u0026quot;tests\u0026quot;. But there are some cases than you need several testsets (for official testing and for internal testing). Each testset contains 1-based enumerated tests. Polygon will check enumeration and write warning message if enumeration is invalid.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eYou have three ways to add tests:\u003c/p\u003e\u003cp\u003e• Use \u0026quot;Add Test\u0026quot; form — it is good way to manual test.\u003c/p\u003e\u003cp\u003e• Use Script — script contains lines like \u0026quot;gen 45 | permute \u0026gt; 33\u0026quot; which will create test 33 using generators \u0026quot;gen\u0026quot; and \u0026quot;permute\u0026quot;. \u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eYou should have sources \u0026quot;gen\u0026quot; and \u0026quot;permute\u0026quot; on the files tab. First, the \u0026quot;gen\u0026quot; executable will be invoked with the command line parameter \u0026quot;45\u0026quot;. After it the output will be redirected to \u0026quot;permute\u0026quot; executable. The standard output from the \u0026quot;permute\u0026quot; execution will be used as test 33. You don\u0027t need \u0026quot;\u0026gt; test-index\u0026quot; part if you use script line on the \u0026quot;Add Test\u0026quot; form.\u003c/p\u003e\u003cp\u003e• Use \u0026quot;Add tests from archive\u0026quot; feature — upload ZIP file with the tests. Polygon will use all the files in the archive as test files. It will automatically set test indexes.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eEach test has several setting such as:\u003c/p\u003e\u003cp\u003e• Use in statements — inject the test (with answer) input the statements;\u003c/p\u003e\u003cp\u003e• Description — just for information to describe the test specific;\u003c/p\u003e\u003cp\u003e• Output in statements — raw text which will be included into statements as answer instead of solution generated.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eTests page also contains \u0026quot;Preview Tests\u0026quot; link. You should use it if you want to preview all the tests (and answers) on the single page. It will use correct model solution to generate test answers.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eFor example: \u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/d1/2d/d12d9700d8d4a2a2ef92c879d4bd631187b8a2c3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIf you use igen.cpp, test script you should write is: \u003c/p\u003e\u003cp\u003eigen [parameter] \u0026gt; $\u003c/p\u003e\u003ch4\u003e• \u003cstrong\u003eSolution Files\u003c/strong\u003e\u003c/h4\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eOn the \u0026quot;Solutions\u0026quot; tab you can upload solution source files. Each solution file has type (or tag) associated with it:\u003c/p\u003e\u003cp\u003e• Main correct solution — it is the model solution to generate all answers\u003c/p\u003e\u003cp\u003e• Correct solution — it is the correct solution, you will be notified if it returns verdict different from OK\u003c/p\u003e\u003cp\u003e• Incorrect — it is the incorrect solution, you will not be notified for any solution behavior\u003c/p\u003e\u003cp\u003e• Time limit exceeded — you will be notified if it runs with verdict different from OK and TL\u003c/p\u003e\u003cp\u003e• Wrong Answer — you will be notified if it runs with verdict different from OK and WA\u003c/p\u003e\u003cp\u003e• Wrong answer — you will be notified if it runs with verdict different from OK and WA\u003c/p\u003e\u003cp\u003e• Presentation error — you will be notified if it runs with verdict different from OK and PE\u003c/p\u003e\u003cp\u003e• Memory limit exceeded — you will be notified if it runs with verdict different from OK and ML\u003c/p\u003e\u003cp\u003e• Failed — you will be notified if it runs with verdict different from OK and RE (run-time-error)\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003e• \u003cstrong\u003eInnovations\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003eSelect the solutions and tests you want to run. On this page you can see detailed reports about invocations. Invocation rows in grid are highlighted if at least one solution got unexpected verdict on at least one test.\u003c/p\u003e\u003ch4\u003e• \u003cstrong\u003eManage Access\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003eImportantly, you need set permission for Codeforces to read your problem.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/b0/13/b0130f12961b8f0a68007ce44e0dfb5c38e64552.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch4\u003e• \u003cstrong\u003ePackages\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003ePackages are ZIP-files containing problem files in some special format. Typically packages are used by Online Judges. Polygon supports flexible model for packaging. In future versions you will be able to select the package format, but now we are using popular format. \u003c/p\u003e\u003cp\u003ePackage contains compiled sources, but doesn\u0027t contain generated tests. To generate tests in package run \u0026quot;doall.bat\u0026quot; inside the package.\u003c/p\u003e\u003cp\u003eYou can\u0027t create package if you have changes in your edit session. \u003cstrong\u003eCommit the changes before package creation.\u003c/strong\u003e\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eStep 3:\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eNow, you\u0027ve already completed prepare problem for mashup contest. Then, login to codeforces. Choose Gym \u0026gt; \u003ca href\u003d\"//codeforces.com/mashups\"\u003eMashups\u003c/a\u003e \u0026gt; Create new mashups — Fill information \u003c/p\u003e\u003cp\u003ePaste problem URL into text box, codeforces\u0027ll auto define your problem and add to mashups contest. Find URL problem here :\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/77/c5/77c564d14a04177cc31944081cb03a0b2873c5fb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch4\u003eAfter click \u0026quot;Create Mashups Contest\u0026quot;, you can edit contest\u0027s information or Invite users.\u003c/h4\u003e\u003ch4\u003e\u003cstrong\u003eThat\u0027s all, hope you enjoy with codeforces !\u003c/strong\u003e\u003c/h4\u003e\u003c/div\u003e","tags":["tutorials","codeforces polygon","mashup","mashup contest","polygon"]}}