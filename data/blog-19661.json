{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1439058344,"rating":28,"authorHandle":"natsukagami","modificationTimeSeconds":1439058344,"id":19661,"title":"\u003cp\u003eInverse sum of coprime pairs\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eToday in one of our contests there was one difficult problem:\u003c/p\u003e\u003cp\u003eDefine \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the sum of all \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/93/b7/93b709353999172b1b5fb972eb8c8689888a1803.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e such that:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e are positive integers, \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ep\u003c/i\u003e \u0026lt; \u003ci\u003eq\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e are coprime. In other words, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e) \u003d 1\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e ≥ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eGiven the positive integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003en\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e), calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eI could not figure out any working solution. After the contest ended, someone mentioned a very interesting observation within his comment on the problem. That is, if we change the condition \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e ≥ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e \u0026gt; \u003ci\u003en\u003c/i\u003e\u003c/span\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e will always be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d3/6f/d36f67e14a68fdb4330adb6b6d1d32002929071b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (!). It was, indeed, a very obvious observation, but only on screen when we do a brute force run. I hoped for someone to come up with a mathematical explanation for it, but it seemed like no one got any ideas :D\u003c/p\u003e\u003cp\u003eHow about you guys? \u003c/p\u003e\u003c/div\u003e","tags":["inverse sum","coprime"]}}