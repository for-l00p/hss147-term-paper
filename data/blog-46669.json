{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1471717801,"rating":0,"authorHandle":"StrikingResemblence","modificationTimeSeconds":1471717886,"id":46669,"title":"\u003cp\u003eNeed help with a job scheduling problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello, recently I faced with a problem that I have no idea how to solve. The problem goes like this:\u003c/p\u003e\u003cp\u003eA computer has Five(5) processing cores. \u0027N\u0027 processes or jobs come to the cores at a certain time to get processed. Each core has a queue of its own which is used to store jobs. Each job has an \u0027entry time\u0027 and a \u0027length\u0027. Whenever a core starts processing a job it takes \u0027length\u0027 amount of time to complete. Whenever a job sits on some core\u0027s queue it accrues \u0027waiting time\u0027 till it is processed. The \u0027processing time\u0027 of a job is equal to the \u0027waiting time\u0027 plus \u0027length\u0027. That is:\u003c/p\u003e\u003cp\u003eProcessing Time \u003d Waiting Time + Length\u003c/p\u003e\u003cp\u003e(Notice that the \u0027entry time\u0027 is not contained within the \u0027waiting time\u0027.)\u003c/p\u003e\u003cp\u003eWhichever core will take a certain job is up to us. If a job is selected to be processed by a core but the core is already processing something, the job will enter the core\u0027s queue. Our task is to \u003cstrong\u003eminimize\u003c/strong\u003e the \u003cstrong\u003enumber of cores\u003c/strong\u003e used, such the the \u003cstrong\u003e\u0027processing time\u0027 of every job is less or than equal to \u003cem\u003eten(10)\u003c/em\u003e\u003c/strong\u003e. We cannot skip jobs and the jobs have be processed according to the sequence that they are in the queue.\u003c/p\u003e\u003cp\u003eInput format: First line contains a single integer \u0027T\u0027 equal the number of test cases. (1\u0026lt;\u003dT\u0026lt;\u003d50) For every test case the first line contains a single integer \u0027N\u0027 equal the number of jobs. (1\u0026lt;\u003dN\u0026lt;\u003d1000) The next \u0027N\u0027 lines contain two integers \u0027E\u0027 and \u0027L\u0027 each, showing the \u0027entry time\u0027 and \u0027length\u0027. (1\u0026lt;\u003dE\u0026lt;\u003d5000 , 1\u0026lt;\u003dL\u0026lt;\u003d10) It is guaranteed for each test case that \u0027E\u0027 appears in non decreasing order.\u003c/p\u003e\u003cp\u003eOutput Format: For every test case output in a new line the minimum number of cores required to process all \u0027N\u0027 jobs with the constraint mentioned above. If the number of cores required exceeds five(5), then output \u0026quot;-1\u0026quot; instead.\u003c/p\u003e\u003cp\u003eAdditional Constraints: Time limit of five(5) seconds for all test cases combined. Memory limit is 256MB and 1MB for internal stack.\u003c/p\u003e\u003cp\u003eExample Input and Output:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e 3 3 1 2 2 3 4 5 7 1 4 1 3 1 2 1 2 2 3 2 4 3 2 6 4 10 5 10 6 10 7 10 8 10 9 10\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 1 2 -1\u003c/p\u003e\u003cp\u003eExplanation of test case 1: The first job enters at time 1. The core immediately takes in the job and processes it till time is equal 3. The next job arrives at time equal to 2 and waits for 1 time unit for the core to finish processing the first job. At time equal 4, the core starts processing the second job up till time equal to 7. The third job enters at time equal 4 and waits 3 time units after which the core starts processing it till 12.\u003c/p\u003e\u003cp\u003eProcessing time of first job \u003d 0 + 2 \u003d 2. Processing time of second job \u003d 1 + 3 \u003d 4. Processing time of first job \u003d 3 + 5 \u003d 8.\u003c/p\u003e\u003cp\u003eAs it can be seen that only one core is required to complete all job such that none of their processing time exceeds 10.\u003c/p\u003e\u003cp\u003eExplanation of test case 2: We can use two cores here: the first core will handle the first, third and the sixth job, while the second core handles the others.\u003c/p\u003e\u003cp\u003eReally hope someone can provide some solutions. Thank you.\u003c/p\u003e\u003c/div\u003e","tags":["help needed","job scheduling"]}}