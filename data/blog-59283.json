{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1525584262,"rating":33,"authorHandle":"usernameson","modificationTimeSeconds":1525584262,"id":59283,"title":"\u003cp\u003eMy 2018 Codejam adventure\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eIntroduction\u003c/h2\u003e\u003cp\u003eThis is the story of how I failed to qualify for round 2 to in the 2018 Google Codejam. Hopefully you find it interesting and learn some things you shouldn\u0027t do in Codejam.\u003c/p\u003e\u003ch2\u003eQualification Round\u003c/h2\u003e\u003cp\u003eQualification was fairly easy due to the ample time of 24 hours. I managed to solve everything correctly apart from the large dataset for the last question. I tried to see if anyone had done mathematical analysis of Madison Cube garden from Futuruma since that seemed closely related to the last question but to no avail.\u003c/p\u003e\u003ch2\u003eRound 1A\u003c/h2\u003e\u003cp\u003eThe ideas to solve questions just did not come to me during this round. I only managed to solve the small set for question A. \u003c/p\u003e\u003cp\u003eWhat I learnt:\u003c/p\u003e\u003cp\u003eEat a good breakfast before doing a competition in the morning. \u003c/p\u003e\u003ch2\u003eRound 1B\u003c/h2\u003e\u003cp\u003eI looked at question A and could not think of a correct approach. Then I looked at B and decided to work on it since it seemed simpler. I saw a the equations and coded a solution. The solution failed the sample test cases. Then I realised I had misunderstood what the question was asking. So I modified my code and it also failed the sample test cases. Turns out I still misunderstood the question. After I finally understood what the question wanted I was running low on time so decided to code a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e solution to pass the small. This worked. \u003c/p\u003e\u003cp\u003eAfter looking at the other questions I decided it was best to spend the remaining time modifying the solution so it would not TLE on the large. I did some simple micro-optimisations then a beautiful two pointer style approach that would take my solution to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e came to me with roughly five minutes to go. I coded quickly and the solution passed the sample cases. I submitted it with less than a minute to go, however it failed the small test set. After the contest I managed to get my \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e solution to work. Turns out the code I submitted was correct apart from two lines where I wrote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e when I should have written \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e. Also if I had got that solution to work I would have qualified for round 2.\u003c/p\u003e\u003cp\u003eWhat I learnt:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eRead the question carefully before coding.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eBe thankful for sites like csacademy that give you problems without stupid stories about jackasses looking at road signs. \u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003ch2\u003eRound 1C\u003c/h2\u003e\u003cp\u003eQuestion A seemed fairly straightforward after a bit of thought. I considered using a prefix tree to be fancy and ensure a sufficiently low time complexity but my previously written prefix tree implementation was not well suited to the task. Looking at the limits I decided a binary search should be fast enough. I also suspected a two pointer style approach might exist but decided to stick with the binary search rather than look for it. Question A passed after I fixed how I handled an edge case in my implementation.\u003c/p\u003e\u003cp\u003eAfter a brief look at B and C I decided to attack the small C since it looked like a knapsack style dp approach should work. I was able to get C to work without too much trouble but knew there was no way my code would pass the large.\u003c/p\u003e\u003cp\u003eI had a look at the B and came up with a greedy approach. First I got an idleness limit exceeded. I realised I had to change the template I used for codejam problems since interactive problems have a different format for the expected output. Doing this allowed me to convert my idleness limit exceeded into a WA. Yay progress! Then I spent the rest of the contest fiddling with my greedy approach to no avail. After the contest I read the editorial and learnt my initial greedy approach was correct. I looked at my code found out when I altered my template I did not allow for multiple test cases. One simple for loop and I would have got AC. Like round 1B if I had this loop I would have qualified for round 2.\u003c/p\u003e\u003cp\u003eWhat I learnt:\u003c/p\u003e\u003cp\u003ePay special attention to how you code interactive problems. \u003c/p\u003e\u003ch2\u003eConclusion\u003c/h2\u003e\u003cp\u003eI didn\u0027t make it to round 2 of gcj this year. There were some interesting problems and I looking forward to seeing and upsolving the problems from future rounds. Best of luck to everyone who made it round 2. \u003c/p\u003e\u003c/div\u003e","tags":["gcj"]}}