{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1426322502,"rating":17,"authorHandle":"I_love_Hoang_Yen","modificationTimeSeconds":1426349055,"id":16944,"title":"\u003cp\u003e[GYM] ACM ICPC Vietnam National Second Round Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eBelow is very short description of solutions to problem that I can solve. Because it is \u0026quot;short description\u0026quot;, for most problems, there is no proof of correctness. Proving the solutions is up to you.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100541/problem/A\" title\u003d\"2014 ACM-ICPC Vietnam National Second Round\"\u003e100541A - Stock Market\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is the most simple problem in the set.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eObservations:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eIf you buy stock, you\u0027re better to buy as much as possible.\u003c/li\u003e   \u003cli\u003eIf you buy stock on the i-th day, then you will always sell every stock on some j-th day, where j \u0026gt; i and the price of the stock on the j-th day is maximal.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eNow we have an algorithm that runs in time O(N):\u003c/p\u003e \u003cul\u003e   \u003cli\u003eInitialize f(i) to be the maximum value of the stock price from i-th day to N-th day.\u003c/li\u003e   \u003cli\u003eFor each value of i from 1 to N, try to buy stock on i-th day, and find the value that you will sell these stocks using f(i+1).\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100541/problem/B\" title\u003d\"2014 ACM-ICPC Vietnam National Second Round\"\u003e100541B - Sum\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eObservation:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eThere\u0027s only small number of different values of [N/i]. In fact, we can prove that there\u0027s only O(sqrt(N)) different values:\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eUsing the above observation, we have a O(sqrt(N)) algorithm:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ei \u003d 1\nresult \u003d 0\nwhile i \u0026lt;\u003d N:\n    value \u003d N / i\n    last \u003d N / value    // This is the last value such that (N / last) still equals to (N / i)\n    result +\u003d (last - i + 1) * value\n    i \u003d last + 1\nprint result\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100541/problem/C\" title\u003d\"2014 ACM-ICPC Vietnam National Second Round\"\u003e100541C - ATM withdrawal\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst, there\u0027s no solution when N mod 1000 \u0026gt; 0. After dealing with this, we can divide N by 1000.\u003c/p\u003e\u003cp\u003eObvious (and wrong) greedy solution:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eLet u \u003d N mod 10. Using notes 1, 2, 3, 5, pay u.\u003c/li\u003e   \u003cli\u003eDivide N by 10\u003c/li\u003e   \u003cli\u003eRepeat the above 2 steps for c+1 times.\u003c/li\u003e   \u003cli\u003eFor the remaining values, pay using 5*10^c.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThis greedy is wrong with the following test: N \u003d 110 (after dividing by 1000), and c \u003d 1. It calculate the number of ways to pay N value incorrectly. (correct answer is 2: 110 \u003d 50 + 30 + 30 \u003d 50 + 50 + 10, while the greedy will find 1).\u003c/p\u003e\u003cp\u003eBut we can fix this greedy solution:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eLet t \u003d the note with maximum value. Before applying the above greedy, we pay X notes with value t, where X \u003d (N — t) / t.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100541/problem/D\" title\u003d\"2014 ACM-ICPC Vietnam National Second Round\"\u003e100541D - Treasure Box\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eObservation:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eAfter at most 100 transformations, X mod 100 will become some value that we already seen.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eIn other words, the sequences of transformation will look like this:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e... + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e... + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e... + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e + ...\u003c/span\u003e\u003c/p\u003e\u003cp\u003eSo we can group \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e together, and calculate the result in O(k).\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100541/problem/E\" title\u003d\"2014 ACM-ICPC Vietnam National Second Round\"\u003e100541E - ACM\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eObservation:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eThere is only small number of primes (36 primes) below 150.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eAlgorithm:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eBuild 36 segment trees. Each node in the k-th segment tree stores the power of the k-th prime in the product of in the corresponding segment.\u003c/li\u003e   \u003cli\u003eUsing the segment trees, we can update / query for each prime in time O(log(N)).\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eTraps:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eYou must use long long\u003c/li\u003e   \u003cli\u003eMOD can be equal to 1\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100541/problem/H\" title\u003d\"2014 ACM-ICPC Vietnam National Second Round\"\u003e100541H - Pencil Game\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet i, j be the first and last column of the result sub-rectangle. Let u, v be the first and last row of the result sub-rectangle.\u003c/p\u003e\u003cp\u003eBy using basic algebraic transformations, we have:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e2 * \u003ci\u003eL\u003c/i\u003e \u003d (\u003ci\u003ej\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e + 1) * (\u003ci\u003ev\u003c/i\u003e - \u003ci\u003eu\u003c/i\u003e + 1) * (\u003ci\u003eN\u003c/i\u003e * (\u003ci\u003eu\u003c/i\u003e + \u003ci\u003ev\u003c/i\u003e) + (\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e))\u003c/span\u003e\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e \u003d \u003ci\u003ej\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e \u003d \u003ci\u003ev\u003c/i\u003e - \u003ci\u003eu\u003c/i\u003e + 1\u003c/span\u003e. Note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e * \u003ci\u003eH\u003c/i\u003e\u003c/span\u003e is our solution.\u003c/p\u003e\u003cp\u003eBecause the number of factors of an integer is small, we can loop through all possible values of W and H (first generate all factors of L, then consider only the factors of L). For each pair (W, H), we can uniquely find u and i, and check if it is indeed a valid solution.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100541/problem/I\" title\u003d\"2014 ACM-ICPC Vietnam National Second Round\"\u003e100541I - Space Tour\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is a dynamic programming problem. Note that the 4 different paths do not have a common point, so we can consider them separatedly. Use 4 different dp functions to calculate the length of each 4 path.\u003c/p\u003e\u003cp\u003eFor example, the path that initially go to left direction can be calculated this way:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor i \u003d 1..M:\n    for j \u003d 1..N:\n        if a[i][j] \u003d\u003d 1:\n            f[i][j] \u003d 1\n            if a[i-1][j] \u003d\u003d 1:\n               f[i][j] \u003d f[i-1][j-1] + 2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAfter calculating the 4 dp functions, we can loop through each starting position (i, j) and calculate the result if we start at this position.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100541/problem/J\" title\u003d\"2014 ACM-ICPC Vietnam National Second Round\"\u003e100541J - Math Magic\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is another dynamic programming problem.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, \u003ci\u003ez\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e)\u003c/span\u003e be the maximum score you can get if you used some tiles 1..i, and the colors at the four directions are x, y, z, t.\u003c/p\u003e\u003cp\u003eFrom \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, \u003ci\u003ez\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e)\u003c/span\u003e, you can calculate all values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ex\u003c/i\u003e\u0027, \u003ci\u003ey\u003c/i\u003e\u0027, \u003ci\u003ez\u003c/i\u003e\u0027, \u003ci\u003et\u003c/i\u003e\u0027)\u003c/span\u003e by trying all possibilities of adding the \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1) - \u003ci\u003eth\u003c/i\u003e\u003c/span\u003e tile to one of the four directions.\u003c/p\u003e\u003cp\u003eThis solution is a bit slow to get accepted. You can try following optimizations:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eOnly consider reachable states (i, x, y, z, t).\u003c/li\u003e   \u003cli\u003eOnly consider states where x \u0026lt;\u003d y \u0026lt;\u003d z \u0026lt;\u003d t.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eTraps:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eResult can be negative\u003c/li\u003e \u003c/ul\u003e\u003c/div\u003e","tags":["acm","gym","solutions","whoreadstaganyway"]}}