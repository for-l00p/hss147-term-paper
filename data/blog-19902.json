{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1440188623,"rating":0,"authorHandle":"rekt_n00b","modificationTimeSeconds":1440188623,"id":19902,"title":"\u003cp\u003eBrief explanation of B \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003edevz123\u0027s approach :\u003c/h3\u003e\u003cp\u003eA really interesting problem which seemed really difficult at first. So, in order to fasten the code, I thought of storing all the factors from 1 to 1000000 in an array, such that the \u003cstrong\u003eith position of the array has the sum of factors of the numbers from 1 to i i.e sum of f(x) for all x from 1 to i.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e\u003cbr /\u003e To get the factor of the nth number, I used the square root technique where I ran a loop, say j loop from I to the square root of the number. \u003cbr /\u003e \u003cstrong\u003eIf j was a factor of i. then I added j as well as i/j as the factors always exist in pairs.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cbr /\u003e \u003cbr /\u003e Having precomputed the above array, \u003cstrong\u003eI simply found the difference between a[r] and a[l-1] and did the modulus to get the answer.\u003c/strong\u003e \u003cbr /\u003e\u003cbr /\u003e Devang\u0027s solution is N * root N. \u003cbr /\u003e There also exists a solution in N * log (N) which was the intended solution that passes in less than 1 second. \u003cbr /\u003e I will be posting a detailed analysis of all the 3 problems in today\u0027s contest soon. \u003cbr /\u003e \u003cbr /\u003e Thank you for participating!\u003c/p\u003e\u003c/div\u003e","tags":[]}}