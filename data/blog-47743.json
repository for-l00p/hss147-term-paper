{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1476439152,"rating":0,"authorHandle":"HARRYPOTTER0","modificationTimeSeconds":1476439152,"id":47743,"title":"\u003cp\u003eCompetitive programming for a BEGINNER(like me..:))....\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eFirst do a self analysis (truthful) — don’t assume you are the best or the worst.\u003c/p\u003e\u003cp\u003eList the areas to improve,\u003c/p\u003e\u003cp\u003eLanguage skills — C++/Java Math skills Data structures — including the tough ones Trees, Graphs etc. Algorithms (not just simple sorting, but advanced ones that’s required for competitive programming). Once you have a fair idea, then start work — be humble enough to admit you do not have the skills of Anudeep Nekkanti or Ashish Kedia at the beginning.\u003c/p\u003e\u003cp\u003eKeep a small goal to solve enough Div-II 250 problems without peaking into solutions, then 500 pointers, and then 1000 pointer in Div-II. During this process, you can learn and improve your skills in implementation, solving and speed.\u003c/p\u003e\u003cp\u003eThe process will be slow and may take up to 2–3 years, be patient and measure growth in each step. As you slowly climb the steps, your confidence will improve and one day can be among the top programmers. The most important point is to not loose patience, and when you do take a break and come back stronger.\u003c/p\u003e\u003cp\u003eSome things you could do are read/ view/study the following,\u003c/p\u003e\u003cp\u003eMathematics for Computer science (MIT OCW) Stanford — Algorithms I \u0026amp; II — Coursera — Free Online Courses From Top Universities | Coursera Introduction to Algorithms — CLRS Concrete Mathematics by Graham, Knuth \u0026amp; Patashnik. This should be more than sufficient to start with and reach a level above average programmers. Be patient while reading these books, as they are little difficult to understand and learn. Try reading multiple times — if you did not understand the content.\u003c/p\u003e\u003cp\u003eIn short : practice make perfectness. \u003c/p\u003e\u003cp\u003eYou should try to practice the competitive problems which are beyond your ability or knowledge but no more than a lot beyond your ability. For OJ, I recommend HackerRank or Topcoder since on these site, you can review other programmer\u0027s code or solution. Find some descent algorithm books to learn(CLRS for example), but do not only read the book, keep practice during the process. You can find problems of the topic you\u0027re reading to practice. On hackerrank, this is easy, since they already classify the problem by topics. Learn math, especially discrete mathematics. I recommend the book \u0026quot;Concrete mathematics\u0026quot; Solve, review, solve review, repeat this process Prepare your coding library from the start, try to review your library once in a while Find some persons with the same passion as you to form a team, go along the way together since ACM-ICPC is a team contests. And encourage each other. Finally, and most important one: Have fun, avoid over training. If you find it is tired to train, drop it, play with friends, find a girlfriend, do some other things. And then returned with passion and energy again.\u003c/p\u003e\u003cp\u003eYou can read the story of the most successful topcoder Petr(The Story of Petr Mitrichev — Target in Six Steps) to find some keys to success in competitive programming.\u003c/p\u003e\u003c/div\u003e","tags":[]}}