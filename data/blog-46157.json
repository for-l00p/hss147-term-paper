{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1469030625,"rating":9,"authorHandle":"Ahmad_Elsagheer","modificationTimeSeconds":1469031023,"id":46157,"title":"\u003cp\u003eCounting successors in DAGs\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello,\u003c/p\u003e\u003cp\u003eI have tried to solve this problem [\u003ca href\u003d\"https://uva.onlinejudge.org/index.php?option\u003donlinejudge\u0026amp;Itemid\u003d99999999\u0026amp;page\u003dshow_problem\u0026amp;category\u003d\u0026amp;problem\u003d4903\"\u003ePromotions\u003c/a\u003e]. It was in SWERC 2015. This problem is reduced to counting successors of every node in a DAG. My best algorithm to solve it is to make a dfs for every node and count the number of reachable nodes. So, the complexity is O(VE), but I got TLE with Java. I checked online solutions and found nothing different (except they are in C++). I wonder if there is a more efficient algorithm, maybe O(V^2) or if someone can provide an efficient AC Java implementation for it.\u003c/p\u003e\u003cp\u003eThanks!\u003c/p\u003e\u003c/div\u003e","tags":[]}}