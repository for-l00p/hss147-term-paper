{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1402233977,"rating":38,"authorHandle":"andrewzta","modificationTimeSeconds":1402243453,"id":12608,"title":"\u003cp\u003eRCC 2014 Отборочный тур — разбор задач\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eБлагодарности\u003c/h2\u003e\u003cp\u003eПрежде чем перейти к разбору задач, я хотел бы поблагодарить всех, кто помогал делать отборочные раунды Russian Code Cup.\u003c/p\u003e\u003cp\u003eЧлены жюри, авторы и разработчики задач: \u003c/p\u003e\u003cul\u003e \u003cli\u003eВиталий Аксенов \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Aksenov239\" title\u003d\"Candidate Master Aksenov239\"\u003eAksenov239\u003c/a\u003e \u003c/li\u003e\u003cli\u003eАртем Васильев \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/VArtem\" title\u003d\"Candidate Master VArtem\"\u003eVArtem\u003c/a\u003e \u003c/li\u003e\u003cli\u003eНиколай Ведерников \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Niko\" title\u003d\"Expert Niko\"\u003eNiko\u003c/a\u003e \u003c/li\u003e\u003cli\u003eВиталий Демьянюк \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/chavit\" title\u003d\"Master chavit\"\u003echavit\u003c/a\u003e \u003c/li\u003e\u003cli\u003eАндрей Комаров \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/komarov\" title\u003d\"Candidate Master komarov\"\u003ekomarov\u003c/a\u003e \u003c/li\u003e\u003cli\u003eГеоргий Корнеев \u003c/li\u003e\u003cli\u003eПавел Кротков \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/pashkal\" title\u003d\"Candidate Master pashkal\"\u003epashkal\u003c/a\u003e \u003c/li\u003e\u003cli\u003eДемид Кучеренко \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/BLIZZARD\" title\u003d\"Expert BLIZZARD\"\u003eBLIZZARD\u003c/a\u003e \u003c/li\u003e\u003cli\u003eАнна Малова \u003c/li\u003e\u003cli\u003eБорис Минаев \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/qwerty787788\" title\u003d\"Grandmaster qwerty787788\"\u003eqwerty787788\u003c/a\u003e \u003c/li\u003e\u003cli\u003eАндрей Станкевич \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/andrewzta\" title\u003d\"International master andrewzta\"\u003eandrewzta\u003c/a\u003e \u003c/li\u003e\u003c/ul\u003e\u003cp\u003eКоординатор разборов Виталий Аксенов \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Aksenov239\" title\u003d\"Candidate Master Aksenov239\"\u003eAksenov239\u003c/a\u003e\u003c/p\u003e\u003cp\u003eПрорешивали раунды: \u003c/p\u003e\u003cul\u003e \u003cli\u003eГеннадий Короткевич \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/tourist\" title\u003d\"Legendary grandmaster tourist\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003et\u003c/span\u003eourist\u003c/a\u003e \u003c/li\u003e\u003cli\u003eПавел Маврин \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/pashka\" title\u003d\"Candidate Master pashka\"\u003epashka\u003c/a\u003e \u003c/li\u003e\u003cli\u003eНияз Нигматуллин \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/niyaznigmatul\" title\u003d\"International Grandmaster niyaznigmatul\"\u003eniyaznigmatul\u003c/a\u003e \u003c/li\u003e\u003cli\u003eВладимир Смыкалов \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/enot.1.10\" title\u003d\"Grandmaster enot.1.10\"\u003eenot.1.10\u003c/a\u003e \u003c/li\u003e\u003cli\u003eДмитрий Филиппов \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/DimaPhil\" title\u003d\"Expert DimaPhil\"\u003eDimaPhil\u003c/a\u003e \u003c/li\u003e\u003cli\u003eСергей Цаплин \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Sert\" title\u003d\"Candidate Master Sert\"\u003eSert\u003c/a\u003e \u003c/li\u003e\u003c/ul\u003e\u003cp\u003eРазумеется, те, кто участвовал в чемпионате, прорешивали только раунды, в которых они не могли участвовать.\u003c/p\u003e \u003ch2\u003eЗадача A. Разбор задач.\u003c/h2\u003e\u003cp\u003e\u003cb\u003eИдея:\u003c/b\u003e Анна Малова.\u003cbr /\u003e \u003cb\u003eРеализация:\u003c/b\u003e Андрей Комаров.\u003cbr /\u003e \u003cb\u003eРазбор:\u003c/b\u003e Андрей Комаров.\u003cbr /\u003e\u003c/p\u003e \u003cp\u003e В задаче требуется составить план разбора задач так, чтобы суммарная продолжительность разбора была минимальной. Задачи должны разбираться в порядке с первой до \u003ci\u003em\u003c/i\u003e-й. Время разбора одной задачи состовляет \u003ci\u003et\u003c/i\u003e секунд. Замена разбирающего задачу члена жюри — \u003ci\u003ec\u003c/i\u003e секунд. Если один и тот же член жюри разбирает несколько задач подряд, то замена не требуется. Про каждого члена жюри известно, какие задачи он хочет разбирать, а какие — нет. \u003c/p\u003e \u003cp\u003e Эта задача решается жадным алгоритмом. Выберем члена жюри, который умеет решать максимальное число задач, начиная с первой. Пусть он умеет решать \u003ci\u003ek\u003c/i\u003e задач. Затем, выберем того, кто умеет решать максимальное число задач начиная с \u003ci\u003ek\u003c/i\u003e-й. Будем продолжать так, пока не будут разобраны все задачи. Тогда ответом на задачу будет \u003ci\u003em\u003c/i\u003e · \u003ci\u003et\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e · \u003ci\u003ec\u003c/i\u003e, где \u003ci\u003eq\u003c/i\u003e — число произведённых замен. \u003c/p\u003e \u003cp\u003e Почему это является оптимальным ответом? Пусть в какой-то момент был выбран член жюри, желающий проводить разбор не максимального числа задач. Тогда, от того, что его заменят на того, кто умеет разбирать больше и дать ему разобрать больше, ответ может только улучшиться. \u003c/p\u003e \u003cp\u003eДанное решение работает за \u003ci\u003eO\u003c/i\u003e(\u003ci\u003en·m\u003c/i\u003e).\u003c/p\u003e \u003cp\u003e Также можно было написать простое решение с помощью динамического программирования. \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] равно минимальному времени, которое тратится, если разобрали \u003ci\u003ei\u003c/i\u003e задач и \u003ci\u003ei\u003c/i\u003e-ую разбирал \u003ci\u003ej\u003c/i\u003e-ый член жюри. Данный массив можно легко посчитать за \u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003em). \u003c/p\u003e \u003ch2\u003eЗадача B. На далекой Амазонке.\u003c/h2\u003e\u003cp\u003e\u003cb\u003eИдея:\u003c/b\u003e Виталий Аксенов.\u003cbr /\u003e \u003cb\u003eРеализация:\u003c/b\u003e Демид Кучеренко.\u003cbr /\u003e \u003cb\u003eРазбор:\u003c/b\u003e Демид Кучеренко.\u003cbr /\u003e \u003c/p\u003e\u003cp\u003e В данной задаче необходимо построить ориентированный граф, состоящий из \u003ci\u003en\u003c/i\u003e вершин, в котором выполняются следующие условия: \u003c/p\u003e\u003cul\u003e \u003cli\u003eВ графе не должно быть циклов\u003c/li\u003e \u003cli\u003eВ каждую вершину ведёт максимум одно ребро\u003c/li\u003e \u003cli\u003eВ графе должно быть ровно \u003ci\u003ea\u003c/i\u003e вершин, из которых существовуют исходящие ребра\u003c/li\u003e \u003cli\u003eВ графе должно быть ровно \u003ci\u003eb\u003c/i\u003e вершин, в которые существуют входящие ребра\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e Для начала разберем случаи, когда ответ «IMPOSSIBLE». Это случаи, когда выполняется хотя бы одно из условий: \u003c/p\u003e\u003cul\u003e \u003cli\u003eМатерей больше, чем дочерей\u003c/li\u003e \u003cli\u003eМатерей больше, чем \u003ci\u003en\u003c/i\u003e-1 (все матерьми быть не могут)\u003c/li\u003e \u003cli\u003eДочерей больше, чем \u003ci\u003en\u003c/i\u003e-1\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e Если такой граф возможно построить, то сначала построим цепочку из \u003ci\u003ea\u003c/i\u003e ребер (Таким образом у нас будет задействованы \u003ci\u003ea\u003c/i\u003e+1 женщина, и будет \u003ci\u003ea\u003c/i\u003e матерей и \u003ci\u003ea\u003c/i\u003e дочерей). После чего, дополним дочерьми любых матерей, чтобы дочерей стало ровно \u003ci\u003eb\u003c/i\u003e. Может получиться так, что некоторые женщины не будут ни матерьми, ни дочерьми, но это не противоречит условию задачи. \u003c/p\u003e \u003ch2\u003eЗадача C. Лабораторная по физике.\u003c/h2\u003e\u003cp\u003e\u003cb\u003eИдея:\u003c/b\u003e Виталик Аксенов.\u003cbr /\u003e \u003cb\u003eРеализация:\u003c/b\u003e Артем Васильев.\u003cbr /\u003e \u003cb\u003eРазбор:\u003c/b\u003e Артем Васильев.\u003cbr /\u003e \u003c/p\u003e\u003cp\u003e В данной задаче требуется определить, какую температуру воды можно получить при смешивании воды из двух сосудов с холодной и горячей водой. Требовалось отвечать на несколько таких запросов при заданной температуре. \u003c/p\u003e \u003cp\u003e Запишем формулу температуры воды, если мы смешиваем холодную воду из сосуда объёмом \u003ci\u003ec\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e и горячую воду из сосуда объёмом \u003ci\u003eh\u003csub\u003ej\u003c/sub\u003e\u003c/i\u003e: \u003ci\u003eT\u003c/i\u003e \u003d \u003ci\u003ep\u003c/i\u003e / \u003ci\u003eq\u003c/i\u003e \u003d (\u003ci\u003eC\u003c/i\u003e·\u003ci\u003ec\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e + \u003ci\u003eH\u003c/i\u003e·\u003ci\u003eh\u003csub\u003ej\u003c/sub\u003e\u003c/i\u003e) / (\u003ci\u003ec\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e + \u003ci\u003eh\u003csub\u003ej\u003c/sub\u003e\u003c/i\u003e) Преобразовав эту формулу, получим, что (\u003ci\u003eH\u003c/i\u003e·\u003ci\u003eq\u003c/i\u003e — \u003ci\u003ep\u003c/i\u003e) / (\u003ci\u003ep\u003c/i\u003e — \u003ci\u003eC\u003c/i\u003e·\u003ci\u003eq\u003c/i\u003e) \u003d \u003ci\u003ec\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e / \u003ci\u003eh\u003csub\u003ej\u003c/sub\u003e\u003c/i\u003e Таким образом, мы свели задачу к следующей: задана несократимая дробь и множество числителей и знаменателей, можно ли выбрать числитель и знаменатель так, чтобы получилась заданная дробь? \u003c/p\u003e \u003cp\u003e Введем обозначения \u003ci\u003eA\u003csub\u003ex\u003c/sub\u003e\u003c/i\u003e — множество всех \u003ci\u003ec\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e / x, где \u003ci\u003ec\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e делится на \u003ci\u003ex\u003c/i\u003e. Аналогично, \u003ci\u003eB\u003csub\u003ey\u003c/sub\u003e\u003c/i\u003e — множество всех \u003ci\u003eh\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e / y, где \u003ci\u003eh\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e делится на \u003ci\u003ey\u003c/i\u003e. Тогда несократимую дробь \u003ci\u003ep\u003c/i\u003e / \u003ci\u003eq\u003c/i\u003e можно представить тогда и только тогда, когда \u003ci\u003eA\u003csub\u003ep\u003c/sub\u003e\u003c/i\u003e и \u003ci\u003eB\u003csub\u003eq\u003c/sub\u003e\u003c/i\u003e пересекаются. Стоит отметить, что суммарный размер всех множеств \u003ci\u003eA\u003csub\u003ex\u003c/sub\u003e\u003c/i\u003e и \u003ci\u003eB\u003csub\u003ey\u003c/sub\u003e\u003c/i\u003e равен \u003ci\u003eO\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e log \u003ci\u003eM\u003c/i\u003e), где \u003ci\u003eM\u003c/i\u003e — ограничение на объем сосудов (в данной задаче \u003ci\u003eM\u003c/i\u003e равно 10\u003csup\u003e5\u003c/sup\u003e). \u003c/p\u003e \u003cp\u003e При представлении \u003ci\u003eA\u003csub\u003ex\u003c/sub\u003e\u003c/i\u003e и \u003ci\u003eB\u003csub\u003ey\u003c/sub\u003e\u003c/i\u003e в виде отсортированных списков один запрос можно выполнить за \u003ci\u003eO\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e / \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)). Если представлять \u003ci\u003eA\u003csub\u003ex\u003c/sub\u003e\u003c/i\u003e и \u003ci\u003eB\u003csub\u003ey\u003c/sub\u003e\u003c/i\u003e как битовые множества, то получается решение за \u003ci\u003eO\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e / 64) на запрос. \u003c/p\u003e \u003cp\u003e Самое быстрое решение получается, если не считать ответы для одной и той же дроби несколько раз. В этом случае можно доказать более точную оценку на время работы решения. Докажем оценку \u003ci\u003eO\u003c/i\u003e((\u003ci\u003eM\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e) \u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e)), где \u003ci\u003ek\u003c/i\u003e — количество запросов. Если максимум из \u003ci\u003ep\u003c/i\u003e и \u003ci\u003eq\u003c/i\u003e больше, чем \u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e), то запрос можно выполнить за \u003ci\u003eO\u003c/i\u003e(\u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e)), просмотрев все элементы меньшего из множеств.\u003c/p\u003e\u003cp\u003eОценим сумму времен выполнения всех остальных запросов. Запросов, выполняющихся за \u003ci\u003eO\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e / \u003ci\u003ex\u003c/i\u003e) не больше, чем 2\u003ci\u003ex\u003c/i\u003e. Cуммируя по всем \u003ci\u003ex\u003c/i\u003e, и учитывая, что \u003ci\u003ex\u003c/i\u003e не больше, чем \u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e), получаем оценку \u003ci\u003eO\u003c/i\u003e((\u003ci\u003eM\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e) \u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e)) Суммарное время работы решения: \u003ci\u003eO\u003c/i\u003e((\u003ci\u003eM\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e) \u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e)). \u003c/p\u003e  \u003ch2\u003eЗадача D. Конструктор пил.\u003c/h2\u003e\u003cp\u003e\u003cb\u003eИдея:\u003c/b\u003e Николай Ведерников.\u003cbr /\u003e \u003cb\u003eРеализация:\u003c/b\u003e Николай Ведерников.\u003cbr /\u003e \u003cb\u003eРазбор:\u003c/b\u003e Николай Ведерников.\u003cbr /\u003e \u003c/p\u003e\u003cp\u003e В задаче требуется посчитать количество перестановок, таких что: \u003c/p\u003e\u003cul\u003e  \u003cli\u003e\u003ci\u003ea\u003c/i\u003e\u003csub\u003e2·\u003ci\u003ei\u003c/i\u003e-1\u003c/sub\u003e≤ \u003ci\u003ea\u003c/i\u003e\u003csub\u003e2·\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/li\u003e  \u003cli\u003e\u003ci\u003ea\u003c/i\u003e\u003csub\u003e2·\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≥ \u003ci\u003ea\u003c/i\u003e\u003csub\u003e2·\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/li\u003e \u003c/ul\u003e Для всех \u003ci\u003ei\u003c/i\u003e от 1 до \u003ci\u003en\u003c/i\u003e ⁄ 2. Назовём такую перестановку \u003ci\u003eвозрастающей пилообразной\u003c/i\u003e.  \u003cp\u003e Заметим, что количество таких перестановок равно количеству перестановок, у которых на нечётных позиция стоят числа, больше своих соседей. Биективное соответствие: \u003ci\u003eb\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e — \u003ci\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e. Назовём такую перестановку \u003ci\u003eубывающей пилообразной\u003c/i\u003e. Это нам пригодится дальше для решения задачи. \u003c/p\u003e \u003cp\u003e Очевидно, что если длина перестановки равна 0 или 1, то ответ — 1. \u003c/p\u003e \u003cp\u003e Пусть мы знаем ответ для всех длин от 0 до \u003ci\u003en\u003c/i\u003e, найдём ответ для \u003ci\u003en\u003c/i\u003e+1. Будем считать общее количество пилообразных последовательностей. Для того чтобы получить количество возрастающих, нужно общее число последовательностей разделить на 2, так как количество возрастающих равно количеству убывающих. \u003c/p\u003e \u003cp\u003e Пусть \u003ci\u003en\u003c/i\u003e+1 поставили на позицию 2·\u003ci\u003ek\u003c/i\u003e, тогда сначала у нас идёт возрастающая пилообразная длиной 2·\u003ci\u003ek\u003c/i\u003e−1, а после возрастающая длиной \u003ci\u003en\u003c/i\u003e−2·\u003ci\u003ek\u003c/i\u003e+1. На первые 2·\u003ci\u003ek\u003c/i\u003e−1 позиций мы можем выбрать любые из \u003ci\u003en\u003c/i\u003e чисел. Итого, получаем, что количество перестановок длины \u003ci\u003en\u003c/i\u003e+1, у которых число \u003ci\u003en\u003c/i\u003e+1 на позиции 2·\u003ci\u003ek\u003c/i\u003e: \u003ci\u003eans\u003c/i\u003e\u003csub\u003e2·\u003ci\u003ek\u003c/i\u003e−1\u003c/sub\u003e · \u003ci\u003eans\u003c/i\u003e\u003csub\u003e\u003ci\u003en\u003c/i\u003e−2·\u003ci\u003ek\u003c/i\u003e+1\u003c/sub\u003e · \u003ci\u003eBinom\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, 2·\u003ci\u003ek\u003c/i\u003e−1). \u003c/p\u003e \u003cp\u003e Пусть \u003ci\u003en\u003c/i\u003e+1 поставили на позицию 2·\u003ci\u003ek\u003c/i\u003e+1, тогда сначала у нас идёт убывающая пилообразная длиной 2·\u003ci\u003ek\u003c/i\u003e, а после возрастающая длиной \u003ci\u003en\u003c/i\u003e−2·\u003ci\u003ek\u003c/i\u003e. На первые 2·\u003ci\u003ek\u003c/i\u003e позиций мы можем выбрать любые из \u003ci\u003en\u003c/i\u003e чисел. Итого получам, что количество перестановок длины \u003ci\u003en\u003c/i\u003e+1, у которых число \u003ci\u003en\u003c/i\u003e+1 на позиции 2·\u003ci\u003ek\u003c/i\u003e+1: \u003ci\u003eans\u003c/i\u003e\u003csub\u003e2·\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e · \u003ci\u003eans\u003c/i\u003e\u003csub\u003e\u003ci\u003en\u003c/i\u003e−2·\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e · \u003ci\u003eBinom\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, 2·\u003ci\u003ek\u003c/i\u003e). \u003c/p\u003e \u003cp\u003e Итого, общее число пилообразных последовательностей длины \u003ci\u003en\u003c/i\u003e+1: \u003ci\u003eans\u003c/i\u003e\u003csub\u003e\u003ci\u003en\u003c/i\u003e+1\u003c/sub\u003e \u003d ∑\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003csub\u003e\u003ci\u003ek\u003c/i\u003e \u003d 0\u003c/sub\u003e \u003ci\u003eans\u003c/i\u003e\u003csub\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e · \u003ci\u003eans\u003c/i\u003e\u003csub\u003e\u003ci\u003en\u003c/i\u003e−\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e · \u003ci\u003eBinom\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e).\u003c/p\u003e \u003ch2\u003eЗадача E. Зарплата.\u003c/h2\u003e\u003cp\u003e\u003cb\u003eИдея:\u003c/b\u003e Анна Малова.\u003cbr /\u003e \u003cb\u003eРеализация:\u003c/b\u003e Павел Кротков.\u003cbr /\u003e \u003cb\u003eРазбор:\u003c/b\u003e Павел Кротков.\u003cbr /\u003e \u003c/p\u003e\u003cp\u003e В данной задаче дан ориентированный граф. Все ребра можно было классифицировать на три части. \u003c/p\u003e\u003cul\u003e \u003cli\u003eпри любой расстановке окладов и бонусов в вершинах этого ребра условие руководства будет выполняться\u003c/li\u003e \u003cli\u003eдля выполнения условия руководства необходимо или поменять оклад с бонусом в обеих вершинах этого ребра,  или не менять ни на одной\u003c/li\u003e \u003cli\u003eдля выполнения условия руководства необходимо поменять оклад с бонусом ровно в одной из вершин этого ребра\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e Забудем про все ребра первого типа и про ориентированность ребер второго и третьего типа. После этого объединим вершины, достижимые друг из друга по ребрам второго типа. После этого задача о проверке того, можно ли выполнить требование руководства, сводится к проверке того, можно ли раскрасить получившийся граф в два цвета, решающейся обходом в глубину. \u003c/p\u003e \u003cp\u003e Для получения минимального количества вершин, в которых нужно поменять местами оклад с бонусом, модифицируем этот поиск в глубину. После обхода и раскраски в два цвета очередной компоненты связности, посчитаем количество вершин (исходного графа, до объединения по ребрам второго типа), раскрашенных в тот и в другой цвет, и, при необходимости, инвертируем раскраску. \u003c/p\u003e \u003ch2\u003eЗадача F. Робот.\u003c/h2\u003e\u003cp\u003e\u003cb\u003eИдея:\u003c/b\u003e Борис Минаев.\u003cbr /\u003e \u003cb\u003eРеализация:\u003c/b\u003e Борис Минаев, Артем Васильев\u003cbr /\u003e \u003cb\u003eРазбор:\u003c/b\u003e Борис Минаев, Артем Васильев\u003cbr /\u003e \u003c/p\u003e\u003cp\u003e В задаче требуется посчитать количество различных путей из одной клетки поля в другую за определенное количество шагов. При этом робот, который совершает действия, не может посетить конечную клетку раньше чем в последний ход. Также робот может ходить только по одной четверти бесконечной плоскости. \u003c/p\u003e \u003cp\u003e Для начала найдем количество способов добраться из одной клетки в другую без условия, что нельзя посещать конечную клетку раньше последнего хода. Такую задачу можно решать независимо по координатам, а потом перебрать, сколько ходов было совершено по одной координате, а сколько по другой. Как решать задачу в одномерном случае? Пусть изначально робот имеет координату \u003ci\u003ex\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e, а в конце должен иметь координату \u003ci\u003ex\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e. Пусть \u003ci\u003ea\u003c/i\u003e\u003d|\u003ci\u003ex\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e-\u003ci\u003ex\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e|, а всего было совершено \u003ci\u003et\u003c/i\u003e ходов. Тогда количество различных способов будет равно количеству сочетаний из \u003ci\u003et\u003c/i\u003e по (\u003ci\u003et\u003c/i\u003e-\u003ci\u003ea\u003c/i\u003e)/2 (при этом \u003ci\u003et\u003c/i\u003e-\u003ci\u003ea\u003c/i\u003e должно быть неотрицательным и четным). Однако нужно учесть, что робот может иметь только положительную координату в процессе путешествия. Для этого необходимо просто вычесть из полученного результата количество способов добраться из клетки -\u003ci\u003ex\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e в \u003ci\u003ex\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e. Это справедливо, так как между путями из \u003ci\u003ex\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e, которые нарушают требование положительности координаты, а также всеми путями из -\u003ci\u003ex\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e можно показать взаимно однозначное соответствие. Соответствующие друг другу пути будут иметь зеркальные первые части (до момента входа в клетку 0) и общие вторые части. \u003c/p\u003e \u003cp\u003e Вернемся к рассмотрению двумерной задачи. Пусть мы уже посчитали количество способов добраться по каждой координате от одной клетки до другой (для каждой фиксированной длины путешествия). Чтобы посчитать аналогичные значения для двумерной задачи, необходимо перебрать количество времени, которое потрачено на каждую координату, а потом перемножить соответствующие значения в уже посчитанных массивах, а также умножить на количество различных способов выбрать какие именно ходы будут соответствовать каким координатам. Чтобы посчитать эти значения быстро, можно воспользоваться преобразованием Фурье. Чтобы свести задачу к перемножению полиномов, необходимо избавиться от присутствия в формуле количества сочетаний. Для этого распишем его через факториалы. Сгруппировав слагаемые, получим, что можно \u003ci\u003ei\u003c/i\u003e-е элементы исходных массивов поделить на \u003ci\u003ei\u003c/i\u003e!, перемножить получившиеся полиномы, а потом значение в \u003ci\u003ei\u003c/i\u003e-м разряде умножить на \u003ci\u003ei\u003c/i\u003e! В задаче модуль, по которому необходимо выполнять все операции, был подобран таким образом, что по нему можно выполнять быстрое преобразование Фурье. \u003c/p\u003e \u003cp\u003e Теперь рассмотрим, как учесть то, что робот не может заходить в конечную клетку до последнего хода. Будем считать ответ с помощью динамического программирования. Пусть уже посчитано количество способов дойти до клетки за меньше чем \u003ci\u003et\u003c/i\u003e ходов. Чтобы посчитать это значения для \u003ci\u003et\u003c/i\u003e ходов, рассмотрим общее количество способов сделать это за \u003ci\u003et\u003c/i\u003e ходов и вычтем из него все способы, которые заходят в конечную клетку до хода \u003ci\u003et\u003c/i\u003e. Для этого переберем номер первого хода, в который робот посетит конечную клетку и умножим соответствующее ему количество способов на количество способов выйти из клетки (\u003ci\u003ex\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e) и вернуться в нее за оставшиеся время. При этом, робот может сколько угодно раз посещать конечную клетку (во второй части). \u003c/p\u003e \u003cp\u003e Заметим, что изложенное решение работает пока за \u003ci\u003et\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e. Для более быстрого решения следует рассуждать в терминах производящих функций. Обозначим \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003ci\u003ef\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e \u003ci\u003ex\u003csup\u003e0\u003c/sup\u003e\u003c/i\u003e + \u003ci\u003ef\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e \u003ci\u003ex\u003csup\u003e1\u003c/sup\u003e\u003c/i\u003e + ... + \u003ci\u003ef\u003csub\u003et\u003c/sub\u003e\u003c/i\u003e \u003ci\u003ex\u003csup\u003et\u003c/sup\u003e\u003c/i\u003e + ..., где \u003ci\u003ef\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e — ответ не задачу. Аналогично определим \u003ci\u003ecount\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) — производящая функция для количества путей, без учета условия первого захода в конечную клетку на последнем ходу,  \u003ci\u003ecycle\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) — производящая функция для количества путей из конечной клетки в саму себя. Из рекуррентных соотношения для \u003ci\u003ef\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e, можно вывести соотношение на производящие функции: \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003ci\u003ecount\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) — \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003ci\u003ecycle\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e), откуда \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003ci\u003ecount\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) / (\u003ci\u003ecycle\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) + 1) \u003d \u003ci\u003ecount\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) (\u003ci\u003ecycle\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) + 1)\u003csup\u003e-1\u003c/sup\u003e. Для вычисления \u003ci\u003ef\u003c/i\u003e необходимо посчитать первые \u003ci\u003et\u003c/i\u003e + 1 членов дроби в правой части. Это можно сделать, вычислив обратный к \u003ci\u003ecycle\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) + 1 многочлен по модулю \u003ci\u003ex\u003csup\u003et+1\u003c/sup\u003e\u003c/i\u003e, и перемножив \u003ci\u003ecount\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) с результатом. Взятие обратного многочлена по модулю \u003ci\u003ex\u003csup\u003et+1\u003c/sup\u003e\u003c/i\u003e можно выполнить за время \u003ci\u003eO\u003c/i\u003e(\u003ci\u003et\u003c/i\u003e log \u003ci\u003et\u003c/i\u003e) с использованием быстрого преобразования Фурье. Итоговое время работы: \u003ci\u003eO\u003c/i\u003e(\u003ci\u003et\u003c/i\u003e log \u003ci\u003et\u003c/i\u003e). \u003c/p\u003e\u003c/div\u003e","tags":[]}}