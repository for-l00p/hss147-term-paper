{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1493635688,"rating":61,"authorHandle":"Chmel_Tolstiy","modificationTimeSeconds":1493703652,"id":51789,"title":"\u003cp\u003eYandex.Algorithm 2017 Qualification Round Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eProblemset was prepared by Yandex employees from Minsk.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"https://contest.yandex.com/algorithm2017/contest/4502/problems/A/\"\u003eProblem А. Task Management\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eConsider a solution with the complexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ea/26/ea26350dd8496edcc681089063982e2fff6200d4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Use a variable to track the last closed task and go through the list of tasks from the beginning to the end. Increase the counter when passing through the element corresponding to the next task. The constrains are quite large, so this solution doesn\u0027t fit the timelimit.\u003c/p\u003e\u003cp\u003eWhat is the case when we can not find any suitable tasks up to the end of the list? There is only one case: the task number \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e + 1)\u003c/span\u003e is closer to the beggining of the list then the closed task number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Therefore, to solve the problem we can determine position of each task in the task list and count the number of distinct numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e such that the position of task number \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e + 1)\u003c/span\u003e is less than the position of task number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eDon\u0027t forget to consider the first pass through the task list. The final complexity of the solution is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d1/49/d149e37848c7f7e231f2f79fcfe74bfa4ddab02a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"https://contest.yandex.com/algorithm2017/contest/4502/problems/B/\"\u003eProblem B. Cross-City Communication\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem \u0027\u0027Cross-City Communication`` does not contain any special algorithmic ideas, so we have to implement behavior described in the problem statement.\u003c/p\u003e\u003cp\u003eFor each hour from 0 to 23 we need to check the free conference rooms in the reqired cities.\u003c/p\u003e\u003cp\u003eNote that for larger constrains determining of free conference room for each pair \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ecity\u003c/i\u003e, \u003ci\u003ehour\u003c/i\u003e)\u003c/span\u003e can help to answer queries faster. This information allows to answer a query in time proportional to the number of cities instead of the total number of conference rooms.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"https://contest.yandex.com/algorithm2017/contest/4502/problems/C/\"\u003eProblem C. Test Invocation\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThere are several different approaches to solve the problem, consider two of them.\u003c/p\u003e\u003cp\u003eThe first solution is based on counting the number of times the test number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e will be run. In the original system each test runs once, and in the new system it runs \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/sup\u003e\u003c/span\u003e times, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is the distance from the root test to test number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. This can be easily proved by the induction (this fact can be guessed from the description of the samples). \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e can be calculated by any traversal of the tree.\u003c/p\u003e\u003cp\u003eThe second approach is based on dynamic programming. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e be equal to the total running time of the test number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, i.e. sum of the running timeS of the tests it depends and the checking time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. So we have:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1e/7c/1e7caa382566f2cb90d368c4778b5d6acfd5f977.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eTo compute the answer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e(1)\u003c/span\u003e we run a tree traversal and calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e values using the recurrent formula above.\u003c/p\u003e\u003cp\u003eThe complexity of solution is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d1/49/d149e37848c7f7e231f2f79fcfe74bfa4ddab02a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"https://contest.yandex.com/algorithm2017/contest/4502/problems/D/\"\u003eProblem D. Artihmetic Mean Encoding\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eСonsider next problem. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e are powers of two with non-negative integer exponents, find all possible values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. We will show that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e can be equal to any integer from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epopcount\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e (where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epopcount\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e is the number of set bits in binary representation of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e). \u003c/p\u003e\u003cp\u003eIt is obvious that we cannot use less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epopcount\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e numbers and more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. If we have a sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u0026lt; \u003ci\u003en\u003c/i\u003e\u003c/span\u003e) it always contains an element \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e with a positive value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. We can replace it with the two elements \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003et\u003c/i\u003e - 1\u003c/sup\u003e\u003c/span\u003e, obtaining a sequence of length \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e + 1)\u003c/span\u003e. The sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epopcount\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e can be build from the binary representation of the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTo solve the problem we can start from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e equals to 1 and check existence of the sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. As shown above, we need to find the minimum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epopcount\u003c/i\u003e(\u003ci\u003ekn\u003c/i\u003e) ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e and construct the answer. \u003c/p\u003e\u003cp\u003eFor problem constraints \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e does not exceed 60 (\u003cspan class\u003d\"tex-span\"\u003e60·(2\u003csup class\u003d\"upper-index\"\u003e50\u003c/sup\u003e - 1) \u0026lt; 2\u003csup class\u003d\"upper-index\"\u003e60\u003c/sup\u003e - 1 \u003d 2\u003csup class\u003d\"upper-index\"\u003e0\u003c/sup\u003e + 2\u003csup class\u003d\"upper-index\"\u003e1\u003c/sup\u003e + ... + 2\u003csup class\u003d\"upper-index\"\u003e59\u003c/sup\u003e\u003c/span\u003e).\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"https://contest.yandex.com/algorithm2017/contest/4502/problems/E/\"\u003eProblem E. Cluster Connection\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eGraph should not contain brigdes, so the degree of each vertice is not less than two. Since the sum of degree of all vertices is equal to \u003cspan class\u003d\"tex-span\"\u003e2·\u003ci\u003en\u003c/i\u003e + 2\u003c/span\u003e we have two possible cases:\u003c/p\u003e \u003cul\u003e   \u003cli\u003ethere is one vertex of degree 4;\u003c/li\u003e   \u003cli\u003ethere are two vertices of degree 3.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eConsider the first case. Graph is an union of two cycles of length \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003em\u003c/i\u003e + 1)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e with a common vertex. In this case, we need to choose which vertices will be in the first cycle (other will go to the second), and the order in which vertices will be on these cycles. The number of ways to construct such graph is\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/17/b2/17b2e08ebb8f7fe1a7d91b31fd1ee3fe22a8de68.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eConsider the second case. In the graph there are two vertices of degree three connected by chains of edges. All the other \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e - 2)\u003c/span\u003e vertices are located on this chains. Note that there can be only one connection with zero additional vertices (an edge). Let the chains have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e vertices are \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003eb\u003c/i\u003e ≤ \u003ci\u003ec\u003c/i\u003e)\u003c/span\u003e. Consider a few cases:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e \u0026lt; \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, then the number of graphs is equal to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5d/10/5d1004bb8c630ab063e737a9d827dcb2da565985.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e0 \u0026lt; \u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003eb\u003c/i\u003e \u0026lt; \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, then the number of graphs is equal to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/61/47/61470b83da6fd9bb962582ece9a943d3914d8b5f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, then the number of graphs is equal to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/61/47/61470b83da6fd9bb962582ece9a943d3914d8b5f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e0 \u0026lt; \u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003eb\u003c/i\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, then the number of graphs is equal to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4c/08/4c085e59a8740861544f32e83d48d21dc9d8c78c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eCombine all formulas together and obtain the final result.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"https://contest.yandex.com/algorithm2017/contest/4502/problems/F/\"\u003eProblem F. Repetitions\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTo solve this problem, refer to the string terminology. A border of a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e is some string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e starts with and ends with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eFor each prefix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e of the text we need to find the maximum length of the border, which has at least one additional occurrence in this prefix. To do this, we can find all borders of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, go through this list in descending order of lengths to find the first with additional occurence.\u003c/p\u003e\u003cp\u003eTo search for all borders we can use the \u003ca href\u003d\"https://web.stanford.edu/class/cs97si/10-string-algorithms.pdf\"\u003eprefix-function\u003c/a\u003e. Additionally, remembering that \u003cspan class\u003d\"tex-span\"\u003eπ(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e is the maximal border of the prefix with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, and length of all the borders form sequence \u003cspan class\u003d\"tex-span\"\u003eπ(\u003ci\u003ei\u003c/i\u003e), π(π(\u003ci\u003ei\u003c/i\u003e)), π(π(π(\u003ci\u003ei\u003c/i\u003e))), ...\u003c/span\u003e etc.\u003c/p\u003e\u003cp\u003eInteresting fact: the border of length \u003cspan class\u003d\"tex-span\"\u003eπ(π(\u003ci\u003ei\u003c/i\u003e))\u003c/span\u003e always has at least three occurrences in the prefix with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e (the first starts in the first position, the second ends in the position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and the third ends in position \u003cspan class\u003d\"tex-span\"\u003eπ(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eTo find the answer of the problem we need the way to check whether the additional entry of the maximum length border (of length \u003cspan class\u003d\"tex-span\"\u003eπ(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e) exists. If such occurrence exists then text has a position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ej\u003c/i\u003e \u0026lt; \u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003eπ(\u003ci\u003ej\u003c/i\u003e) ≥ π(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e. For a quick check of this inequality, it is sufficient to compute the prefix maximum values of the prefix-function.\u003c/p\u003e\u003cp\u003eThe complexity of algorithm is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/53/7e/537eddd24a68da04d32fa5fcc37b33656c7de956.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["yandex.algorithm","qualification","editorial"]}}