{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1509933884,"rating":2,"authorHandle":"Bliss8","modificationTimeSeconds":1509934183,"id":55608,"title":"\u003cp\u003eRecusion. update external variable vs composite return\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eGiven a problem:\u003cbr /\u003efind diameter of binary tree (diameter is longest possible path between any two nodes in a tree)\u003cbr /\u003eNode format: \u003c/p\u003e \u003cpre\u003e\u003ccode\u003epublic class TreeNode {\n    TreeNode left;\n    TreeNode right;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eExternal variable approach:\u003c/strong\u003e \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint maxDiameter \u003d 0; //we will update this external variable from recursion calls\npublic int diameterOfBinaryTree(TreeNode root) {\n    explore(root);\n    return maxDiameter;\n}\n\npublic int explore(TreeNode node) {\n    if (node \u003d\u003d null) {\n        return 0;\n    }\n    int left \u003d explore(node.left);\n    int right \u003d explore(node.right);\n    maxDiameter \u003d Math.max(maxDiameter, left + right);\n    return Math.max(left, right) +  1;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eComposite return approach:\u003c/strong\u003e\u003cbr /\u003eTo solve this task in clear functional way, without external variables, need to return information about max diameter found instead of updating a variable. As now it\u0027s needed to return 2 values (max diameter found and depth), will simply return \u003ccode\u003eint[]\u003c/code\u003e. \u003c/p\u003e \u003cpre\u003e\u003ccode\u003epublic int diameterOfBinaryTree(TreeNode root) {\n    return explore(root)[1];\n}\n\npublic int[] explore(TreeNode node) {\n    if (node \u003d\u003d null) {\n        return new int[]{0, 0};\n    }\n    int[] left \u003d explore(node.left);\n    int[] right \u003d explore(node.right);\n    int maxDepth \u003d Math.max(left[0], right[0]);\n    int maxDiameter \u003d Math.max(Math.max(left[1], right[1]), left[0] + right[0]);\n    return new int[]{maxDepth + 1, maxDiameter};\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhich approach do you prefer?\u003cbr /\u003eFrom my point of view, if mutability is acceptable, external variable is the way to go. \u003c/p\u003e\u003c/div\u003e","tags":["recursion"]}}