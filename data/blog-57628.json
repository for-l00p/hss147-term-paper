{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1518104089,"rating":0,"authorHandle":"Ahmad_Elsagheer","modificationTimeSeconds":1518104089,"id":57628,"title":"\u003cp\u003e\u0026quot;Persistent Data Structures\u0026quot; Assignments\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello everyone. I hope you enjoyed today\u0027s lecture. Here are a few points to keep in mind:\u003c/p\u003e\u003ch4\u003eAssignments Content\u003c/h4\u003e \u003cul\u003e   \u003cli\u003ePractice assignment 1 \u0026amp; assignment 1 statements have been updated. Some notes are added to remove any ambiguity. If you still not sure about what the problem wants, \u003cstrong\u003edon\u0027t assume anything. Ask!\u003c/strong\u003e\u003c/li\u003e   \u003cli\u003eAssignment 1 has \u003cstrong\u003eno restrictions\u003c/strong\u003e.\u003c/li\u003e   \u003cli\u003eIn practice assignment 1, you \u003cstrong\u003emust\u003c/strong\u003e solve all problems using path copying as discussed in the lecture and the lab. However, you don\u0027t have to implement path copying using references. You can implement it using array indices as we did in the segment tree (we implemented all nodes with no objects, only some arrays where indices are equivalent to nodes references).\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003eDeadlines and Admin Stuff\u003c/h4\u003e \u003cul\u003e   \u003cli\u003eAssignment 1 is due 21 Feb 2018 23:59. You are encouraged to start as early as possible, so as not run out of time.\u003c/li\u003e   \u003cli\u003eThe grading of assignments will be based on the percentage of test cases that you passed in addition to manual evaluation to make sure you followed any restrictions announced (for example, using a specific data structure).\u003c/li\u003e   \u003cli\u003eYou can submit practice assignment 1 problems by the end of midterms. However, you are recommended to solve them before attempting to solve assignment 1.\u003c/li\u003e   \u003cli\u003eDon\u0027t assume anything! Just think freely. Anything that you think will work (produce correct output and passes the time/memory limit) is acceptable \u003cstrong\u003eunless there are some restrictions\u003c/strong\u003e. In such case, you have to consider them in your solution.\u003c/li\u003e   \u003cli\u003eFeel free to ask anyone in the practice assignments. However, since assignments are individual, you should only ask me if you need help. Feel free to ask always (preferably in the group chat).\u003c/li\u003e   \u003cli\u003eYou can view anyone\u0027s submission in the practice assignments. You can always view the test cases in both practice and graded assignments.\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003eTips\u003c/h4\u003e \u003cul\u003e   \u003cli\u003eIf you have a set of strings \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and you want to print them space-separated, use \u003ccode\u003eStringBuilder\u003c/code\u003e using \u003ccode\u003eappend()\u003c/code\u003e instead of \u003ccode\u003eString\u003c/code\u003e using \u003ccode\u003econcat()\u003c/code\u003e (or \u003ccode\u003e+\u003c/code\u003e). The reason behind this is that the concatenation function creates a new string not appending one string to another. So, if \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e| \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, then \u003ccode\u003econcat()\u003c/code\u003e runs in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003ek\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e while \u003ccode\u003eappend()\u003c/code\u003e runs in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e.\u003c/li\u003e \u003c/ul\u003e\u003c/div\u003e","tags":[]}}