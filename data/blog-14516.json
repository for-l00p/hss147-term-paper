{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1414736124,"rating":118,"authorHandle":"kien_coi_1997","modificationTimeSeconds":1414736198,"id":14516,"title":"\u003cp\u003eAn amazing way to calculate 10^18-th fibonacci number using 25 lines of code.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eBased on the approach in \u003ca href\u003d\"//codeforces.com/blog/entry/14385\"\u003emy previous blog\u003c/a\u003e, today, I found an amazing way to calculate large fibonacci numbers (in some modulo). According to part IV of my previous blog, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e be the \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e + 1)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e fibonacci number, we have two case: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is even and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is odd.\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(2 * \u003ci\u003ek\u003c/i\u003e) \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e) * \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e) + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e - 1) * \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e - 1)\u003c/span\u003e\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(2 * \u003ci\u003ek\u003c/i\u003e + 1) \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e) * \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e + 1) + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e - 1) * \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThere are only at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c9/f7/c9f748f5ae2d2c87ab4a20dbd0083ad4f3ccf24e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e states. I don\u0027t like to prove this, but I can ensure it is true by doing some following experiment. Let\u0027s divide n into groups by depth, you will realize a special property: Each depths only contains at most 4 values of n.\u003c/p\u003e\u003cp\u003ecall f(1000):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr /\u003eDepth[0] : 1000 \nDepth[1] : 499 500 \nDepth[2] : 248 249 250 \nDepth[3] : 123 124 125 \nDepth[4] : 60 61 62 63 \nDepth[5] : 29 30 31 32 \nDepth[6] : 13 14 15 16 \nDepth[7] : 5 6 7 8 \nDepth[8] : 1 2 3 4 \nDepth[9] : 0 1 2 \nDepth[10] : 0 1 \n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ecall f(123123123122):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr /\u003eDepth[0] : 123123123122 \nDepth[1] : 61561561560 61561561561 \nDepth[2] : 30780780779 30780780780 30780780781 \nDepth[3] : 15390390388 15390390389 15390390390 15390390391 \nDepth[4] : 7695195193 7695195194 7695195195 7695195196 \nDepth[5] : 3847597595 3847597596 3847597597 3847597598 \nDepth[6] : 1923798796 1923798797 1923798798 1923798799 \nDepth[7] : 961899397 961899398 961899399 961899400 \nDepth[8] : 480949697 480949698 480949699 480949700 \nDepth[9] : 240474847 240474848 240474849 240474850 \nDepth[10] : 120237422 120237423 120237424 120237425 \nDepth[11] : 60118710 60118711 60118712 60118713 \nDepth[12] : 30059354 30059355 30059356 30059357 \nDepth[13] : 15029676 15029677 15029678 15029679 \nDepth[14] : 7514837 7514838 7514839 7514840 \nDepth[15] : 3757417 3757418 3757419 3757420 \nDepth[16] : 1878707 1878708 1878709 1878710 \nDepth[17] : 939352 939353 939354 939355 \nDepth[18] : 469675 469676 469677 469678 \nDepth[19] : 234836 234837 234838 234839 \nDepth[20] : 117417 117418 117419 117420 \nDepth[21] : 58707 58708 58709 58710 \nDepth[22] : 29352 29353 29354 29355 \nDepth[23] : 14675 14676 14677 14678 \nDepth[24] : 7336 7337 7338 7339 \nDepth[25] : 3667 3668 3669 3670 \nDepth[26] : 1832 1833 1834 1835 \nDepth[27] : 915 916 917 918 \nDepth[28] : 456 457 458 459 \nDepth[29] : 227 228 229 230 \nDepth[30] : 112 113 114 115 \nDepth[31] : 55 56 57 58 \nDepth[32] : 26 27 28 29 \nDepth[33] : 12 13 14 15 \nDepth[34] : 5 6 7 8 \nDepth[35] : 1 2 3 4 \nDepth[36] : 0 1 2 \nDepth[37] : 0 1 \n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAccording to the amazing property, we can calculate \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e18\u003c/sup\u003e\u003c/span\u003e-th fibonacci number by using little code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e#include \u0026lt;map\u0026gt;\n#include \u0026lt;iostream\u0026gt;\nusing namespace std;\n\n#define long long long\nconst long M \u003d 1000000007; // modulo\nmap\u0026lt;long, long\u0026gt; F;\n\nlong f(long n) {\n\tif (F.count(n)) return F[n];\n\tlong k\u003dn/2;\n\tif (n%2\u003d\u003d0) { // n\u003d2*k\n\t\treturn F[n] \u003d (f(k)*f(k) + f(k-1)*f(k-1)) % M;\n\t} else { // n\u003d2*k+1\n\t\treturn F[n] \u003d (f(k)*f(k+1) + f(k-1)*f(k)) % M;\n\t}\n}\n\nmain(){\n\tlong n;\n\tF[0]\u003dF[1]\u003d1;\n\twhile (cin \u0026gt;\u0026gt; n)\n\tcout \u0026lt;\u0026lt; (n\u003d\u003d0 ? 0 : f(n-1)) \u0026lt;\u0026lt; endl;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe complexity of above code is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ce/91/ce917fa3a82cb714da366403775d0da25c720dc9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eYou can reproduce my experiment by using \u003ca href\u003d\"http://paste.ubuntu.com/8756521/\"\u003ethis code\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["fibonacci","dynamic programming"]}}