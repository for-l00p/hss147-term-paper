{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1525524200,"rating":6,"authorHandle":"kayak","modificationTimeSeconds":1525524200,"id":59268,"title":"\u003cp\u003eIs \u003cstrong\u003ebuiltin\u003c/strong\u003epopcount O(1) or O(log_2 k) ?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eIn \u003ca href\u003d\"//codeforces.com/blog/entry/13134?#comment-179154\"\u003ethis\u003c/a\u003e comment, it\u0027s mentioned that the complexity of \u003ccode\u003e__builtin__popcount\u003c/code\u003e for any integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u003d \u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e (i.e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/83/64/836456ee5c7d83e8d45e6b0a20fa8f4413d8c1b7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e) instead of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e. So to count the number of one in a large binary string of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026gt;  \u0026gt; 64\u003c/span\u003e, if I split \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e into \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/33/7c33f8422288e3c68d080d0cf2fc596bb3f35de9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e substrings (with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 64 / 32 / 16\u003c/span\u003e) and apply builtin popcount to each of the substrings and add them up, then the total time complexity should be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ba/14/ba145b897f988d781443b5955588f132ab5a9359.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e instead of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f3/5f/f35fe8c846347f149acac8efd7cbda1d45e3d4c5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eBut in page 101 of Competitive programmers handbook on the topic Counting Subgrids, based on the time taken to compute the results, the time should be same no matter if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 64\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 32\u003c/span\u003e. But it turns out that they\u0027re different as \u0026quot;the bit optimized version only took 3.1 seconds with N \u003d 32 (int numbers) and 1.7 seconds with N \u003d 64 (long long numbers)\u0026quot;. \u003c/p\u003e\u003cp\u003eWhy \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 64\u003c/span\u003e takes less time ? \u003c/p\u003e\u003c/div\u003e","tags":["c++","__builtin_popcount"]}}