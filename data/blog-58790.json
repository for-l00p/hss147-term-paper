{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1523086237,"rating":0,"authorHandle":"Len","modificationTimeSeconds":1523086273,"id":58790,"title":"\u003cp\u003eРазбор задач\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eA. XOR цифр\u003c/strong\u003e Пусть get(x, j) это количество чисел в отрезке [1..x] с f(x) \u003d j. Тогда ответ для [L, R] равно get(R, j) — get(L — 1, j). Научимся вычислять get(x, j) для фиксированного j. Пусть n это длина числа x. Сначала прибавим к ответу числа с длиной меньше n. Для этого можно посчитать динамику dp[i][j] — количество чисел с длиной i и f(x) \u003d j. Теперь осталось посчитать кол-во чисел с длиной n. Переберем первую цифру до которой все цифры числа равны, цифра в этой позиции строго меньше, назовем эту позицию pos. Пусть now это xor всех цифр до pos, тогда нам нужно найти кол-во чисел с xor now ^ j и с длиной n — i. Для этого тоже можно использовать динамику.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eB. Braid\u003c/strong\u003e Сначала посчитаем nxt(i) для всех i. Для этого можно использовать стек. Теперь посчитаем go[i][j] — f(i, 2^j) за O(n*log2(n)). Для ответа на запросы можно разложить r на степени двойки и использовать массив go.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eC. Легкая задача\u003c/strong\u003e Пусть нам нужно проверить делится ли число x на число y. Давайте разложим число x и y на простые. Число x делится на y если все степени простых не больше чем степени простых числа y. Тогда можно использовать vector для хранения индексов, и бинарный поиск для ответа на запросы. \u003c/p\u003e\u003cp\u003eЕсли есть вопросы по задачам, можете в комментариях этого блога спрашивать.\u003c/p\u003e\u003c/div\u003e","tags":[]}}