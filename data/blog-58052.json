{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1519648762,"rating":0,"authorHandle":"strawberrry","modificationTimeSeconds":1521096012,"id":58052,"title":"\u003cp\u003eRound #226 solution\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cblockquote\u003e\u003cp\u003eall problems solved at 2.26\u003c/p\u003e \u003c/blockquote\u003e\u003ch3\u003eA. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/385/problem/A\"\u003eBear and Raspberry\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eTag：\u003c/strong\u003e \u003ccode\u003eimplementation\u003c/code\u003e\u003c/p\u003e\u003cp\u003e答案是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(0, \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e))\u003c/span\u003e 对于每个 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e 。\u003c/p\u003e\u003ch3\u003eB. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/385/problem/B\"\u003eBear and Strings\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eTag：\u003c/strong\u003e \u003ccode\u003emath\u003c/code\u003e\u003c/p\u003e\u003cp\u003e最开始写了 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e 暴力，果断过不了 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 5000\u003c/span\u003e ，仔细分析，我们对于每个 \u003ccode\u003ebear\u003c/code\u003e 可以算出前后缀区间，考虑 \u003ccode\u003elast\u003c/code\u003e 表示上一个 \u003ccode\u003ebear\u003c/code\u003e 的位置，那么线性扫一遍，每次答案就是 \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - \u003ci\u003elast\u003c/i\u003e) * (\u003ci\u003elen\u003c/i\u003e - (\u003ci\u003ei\u003c/i\u003e + 3) + 1)\u003c/span\u003e 累加求和即可。\u003c/p\u003e\u003ch3\u003eC. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/385/problem/C\"\u003eBear and Prime Numbers\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eTag：\u003c/strong\u003e \u003ccode\u003emath\u003c/code\u003e\u003c/p\u003e\u003cp\u003e最暴力的做法是对于每个 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e 、$r$ 枚举区间素数，暴力判断整除情况，这样复杂度是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enmq\u003c/i\u003e)\u003c/span\u003e ，稍微想一下就可以发现，可以用前缀和维护连续区间答案，这样复杂度减少到 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e + \u003ci\u003eqn\u003c/i\u003e)\u003c/span\u003e 但是还不够优，考虑这种连续出现 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d 100000,  \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u003d 100000\u003c/span\u003e ...这种情况，重复出现，那么我们可以考虑预处理（类似素数的线性筛）出每个数出现次数，一次计算答案，最后再对它求一遍前缀和，这样复杂度就是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e + \u003ci\u003en\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e 能过，最开始傻到去筛一遍素数，每次枚举素数，还是做了重复工作...\u003c/p\u003e\u003ch3\u003eD. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/385/problem/D\"\u003eBear and Floodlight\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eTag：\u003c/strong\u003e \u003ccode\u003ebitmasks\u003c/code\u003e \u003ccode\u003edp\u003c/code\u003e \u003ccode\u003egeometry\u003c/code\u003e\u003c/p\u003e\u003cp\u003e考虑到 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 20\u003c/span\u003e 可以枚举每个灯塔照明的顺序，根据角度可以用正弦定理或者其他几何关系计算出某一个方向它所能照到的长度，那么对于状态 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e，用 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e)\u003c/span\u003e 表示对于状态 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e 对应的灯塔所能照明的最大长度，那么每次转移可以枚举未被照明的灯塔，计算它紧贴着上一个灯塔区域的最大长度更新，转移方程就是 \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0d/5d/0d5d7aec0cc494a02e27813380ee750604316ff9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e， 最后答案就是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e - 1)\u003c/span\u003e ！\u003c/p\u003e\u003ch3\u003eE. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/385/problem/E\"\u003eBear in the Field\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eTag：\u003c/strong\u003e \u003ccode\u003emath\u003c/code\u003e \u003ccode\u003ematrices\u003c/code\u003e\u003c/p\u003e\u003ch4\u003e1.题意概述\u003c/h4\u003e \u003cul\u003e   \u003cli\u003e有一片 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e×\u003ci\u003en\u003c/i\u003e\u003c/span\u003e 的草莓地，每个位置的初始草莓量为横坐标和纵坐标的和，然后每过一秒增长一个草莓。然后给出熊的初始位置 \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003esx\u003c/i\u003e, \u003ci\u003esy\u003c/i\u003e)\u003c/span\u003e ，以及移动的速度 \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003edx\u003c/i\u003e, \u003ci\u003edy\u003c/i\u003e)\u003c/span\u003e ，每一秒发生的事：\u003c/li\u003e \u003c/ul\u003e \u003col\u003e   \u003cli\u003e速度增加 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e （ \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e 为该位置的草莓数）\u003c/li\u003e   \u003cli\u003e熊的位置发生移动\u003c/li\u003e   \u003cli\u003e每个位置上草莓数 \u003cspan class\u003d\"tex-span\"\u003e + 1\u003c/span\u003e\u003c/li\u003e \u003c/ol\u003e\u003ch4\u003e2.解题思路\u003c/h4\u003e \u003cul\u003e   \u003cli\u003e容易推出的转移方程是：\u003c/li\u003e \u003c/ul\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/73/14/7314d140cb8e396e65f9717751f100be80423f07.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003e但是看数据范围：\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e1 ≤\u003ci\u003en\u003c/i\u003e≤ 10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e 1 ≤\u003ci\u003esx\u003c/i\u003e,  \u003ci\u003esy\u003c/i\u003e≤ \u003ci\u003en\u003c/i\u003e   -  100 ≤ \u003ci\u003edx\u003c/i\u003e,  \u003ci\u003edy\u003c/i\u003e ≤ 100 0 ≤ \u003ci\u003et\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e18\u003c/sup\u003e\u003c/span\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e正常的转移时间复杂度 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003et\u003c/i\u003e)\u003c/span\u003e 是很难接受的，根据递推的线性，我们可以考虑构造矩阵加速转移过程：\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/f8/ec/f8ec64dfd914a1ced5220962fa6776df75fa0037.latex\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}