{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1467898783,"rating":-11,"authorHandle":"wrick","modificationTimeSeconds":1467925956,"id":45925,"title":"\u003cp\u003eSearch over Int/Long using bit hacks\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eIf you are binary searching over Ints (or Longs), there is a neat trick you can use to quickly find the answer in exactly 32 (or 64 for Longs) operations. This code is simple to write, less error prone than binary search (off by 1 mistakes) and in practice often faster.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport java.util.OptionalLong;\nimport java.util.function.LongPredicate;\nimport java.util.stream.LongStream;\n\n/**\n * Find the largest long that satisfies the predicate f using exactly 64 bit-wise operations: O(64 * O(f))\n *\n * @param f Monotonous predicate\n * @return The largest number that satisfies f\n */\nstatic OptionalLong binarySearch(LongPredicate f) {\n    long p \u003d 0L, n \u003d Long.MIN_VALUE;\n    for(long t \u003d n \u0026gt;\u0026gt;\u0026gt; 1; t \u0026gt; 0; t \u0026gt;\u0026gt;\u003d 1) {\n      if (f.test(p|t)) p |\u003d t;\n      if (f.test(n|t)) n |\u003d t;\n    }\n    return LongStream.of(p, n).filter(f).findFirst();\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you only want to search over non-negative numbers, its even simpler (showing with Ints instead of Longs):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estatic Integer binarySearch(IntPredicate f) {\n    int p \u003d 0;\n    for(int t \u003d Integer.MIN_VALUE \u0026gt;\u0026gt;\u0026gt; 1; t \u0026gt; 0; t \u0026gt;\u0026gt;\u003d 1) {\n      if (f.test(p|t)) p |\u003d t;\n    }\n    return f.test(p) ? p : null;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eHow does it work\u003c/strong\u003e: There are only 64-bits in a long. Just toggle them one by one from left to right depending on whether the predicate is satisfied or not.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExercise for reader\u003c/strong\u003e: Modify code to search for smallest instead of largest.\u003c/p\u003e\u003c/div\u003e","tags":["bit manipulation","binary seach","java 8","java"]}}