{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1496531898,"rating":0,"authorHandle":"ZzZZzzzZZZZZzzzzzzzz","modificationTimeSeconds":1496531898,"id":52365,"title":"\u003cp\u003eDay #4\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cul\u003e   \u003cli\u003e1) \u003ca href\u003d\"http://e-maxx.ru/algo/dijkstra\"\u003eDijkstra(N^2 + M)\u003c/a\u003e and \u003ca href\u003d\"http://e-maxx.ru/algo/dijkstra_sparse\"\u003eDijkstra(MlogN)\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e2) \u003ca href\u003d\"http://e-maxx.ru/algo/ford_bellman\"\u003eFord-Bellman\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e3) \u003ca href\u003d\"http://e-maxx.ru/algo/floyd_warshall_algorithm\"\u003eFloyd\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e4) \u003ca href\u003d\"http://e-maxx.ru/algo/mst_kruskal_with_dsu\"\u003eKruskal\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eKruscal\u0027s code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;   \n\n# define F first\n# define S second\n# define mp make_pair                                                                                              \n# define pii pair\u0026lt;int,int\u0026gt;\n\n# define long long long\n# define pb push_back\n# define sz(a) (int)(a.size())\n\n# define y1     tipa_y1\n# define left   tipa_left\n# define right  tipa_right\n\nconst int Mod \u003d (int)1e9 + 7;\nconst int MX \u003d 1073741822;\nconst long MXLL \u003d 4611686018427387903;\nconst int Sz \u003d 1110111;\n\nusing namespace std;\n\ninline void Read_rap () {\n  ios_base :: sync_with_stdio(0);\n  cin.tie(0);\n}\nint n, m;\n       \nvector \u0026lt;int\u0026gt; g[Sz];\n\nint p[Sz], sz[Sz];\n\nlong sum;\n         \nstruct edge {\n  int x, y, w;\n} e[Sz]; \n       \nint get (int v) { \n  if (p[v] \u003d\u003d v)  return v;\n  return p[v] \u003d get(p[v]);\n}\n\ninline void unite (int x, int y) {\n  x \u003d get (x);\n  y \u003d get (y);\n  if (x \u003d\u003d y) return;\n     \n  if (sz[x] \u0026lt; sz[y])  swap (x, y);\n  p[y] \u003d x;\n  sz[x] +\u003d sz[y];\n}\n\nint main()\n{\n  Read_rap ();\n  cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m;\n\n  for (int i \u003d 1;i \u0026lt;\u003d m;i ++)\n    cin \u0026gt;\u0026gt; e[i].x \u0026gt;\u0026gt; e[i].y \u0026gt;\u0026gt; e[i].w;\n\n  sort (e + 1, e + m + 1, [] (edge a, edge b) {\n    return a.w \u0026lt; b.w;\n  });\n\n  for (int i \u003d 1;i \u0026lt;\u003d n;i ++)\n    p[i] \u003d i, sz[i] \u003d 1;\n\n  for (int i \u003d 1;i \u0026lt;\u003d m;i ++) {            \n    if (get (e[i].x) !\u003d get (e[i].y))\n    {\n      unite (e[i].x, e[i].y);\n      sum +\u003d e[i].w;\n    }\n  }      \n  cout \u0026lt;\u0026lt; sum;\n\n\n  return 0;\n}\n\n\n\n\n\n\n\n\n\n// Coded by Z...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}