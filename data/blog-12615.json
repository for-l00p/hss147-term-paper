{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1402253769,"rating":50,"authorHandle":"IAmNotDaniil","modificationTimeSeconds":1402297404,"id":12615,"title":"\u003cp\u003eCodeforces Round #252 (Div. 2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/441/problem/A\" title\u003d\"Codeforces Round 252 (Div. 2)\"\u003e441A - Valera and Antique Items\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/gridnevvvit\" title\u003d\"Candidate Master gridnevvvit\"\u003egridnevvvit\u003c/a\u003e\u003c/p\u003e\u003cp\u003eYou need to implement what written in statement. You could act like that: let\u0027s calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — minimum item price from seller \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Then if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, we can make a deal with seller \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, otherwise we can\u0027t.\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/441/submission/6850474\" title\u003d\"Submission 6850474 by gridnevvvit\"\u003e6850474\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/441/problem/B\" title\u003d\"Codeforces Round 252 (Div. 2)\"\u003e441B - Valera and Fruits\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/gridnevvvit\" title\u003d\"Candidate Master gridnevvvit\"\u003egridnevvvit\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s start counting days from 1 to 3001. Let current day be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Additionally, we\u0027ll have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e variable — number of fruit we didn\u0027t collect previous days. Suppose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enow\u003c/i\u003e\u003c/span\u003e fruit is ripen current day. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enow\u003c/i\u003e + \u003ci\u003ecur\u003c/i\u003e ≤ \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, we need to add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enow\u003c/i\u003e + \u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e to answer and update \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e value (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e \u003d 0\u003c/span\u003e). Otherwise we add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e to answer, but \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e value need to be updated as follows. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etv\u003c/i\u003e \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e - \u003ci\u003ecur\u003c/i\u003e, 0)\u003c/span\u003e. Then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e \u003d \u003ci\u003enow\u003c/i\u003e - \u003ci\u003etv\u003c/i\u003e\u003c/span\u003e. In other words, we try to collect fruits that will not be collectable next day.\u003c/p\u003e\u003cp\u003eAdditionally, problem could be solved with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5d/1f/5d1f29f648247e77966a5b1703590aea2a6a75b6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, but this is not required.\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/441/submission/6850502\" title\u003d\"Submission 6850502 by gridnevvvit\"\u003e6850502\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBonus\u003c/strong\u003e. Suppose fruit can be collected at days \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — some number for each tree. How to solve this task optimally?\u003c/p\u003e\u003cp\u003eAdditionaly, for every day there will be its own \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e (maximum number of fruit collected).\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/441/problem/C\" title\u003d\"Codeforces Round 252 (Div. 2)\"\u003e441C - Valera and Tubes \u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/gridnevvvit\" title\u003d\"Candidate Master gridnevvvit\"\u003egridnevvvit\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe solution is pretty simple. First we need to make such route that visits every cell exactly one time. It is not difficult:\u003c/p\u003e \u003col\u003e   \u003cli\u003eInitially we stay in \u003cspan class\u003d\"tex-span\"\u003e(1, 1)\u003c/span\u003e cell. Moving from left to right, we should reach \u003cspan class\u003d\"tex-span\"\u003e(1, \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e cell.\u003c/li\u003e   \u003cli\u003eMove to the next line, in \u003cspan class\u003d\"tex-span\"\u003e(2, \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e cell. Moving from right to left, we should reach the most left sell of 2nd line, \u003cspan class\u003d\"tex-span\"\u003e(2, 1)\u003c/span\u003e.\u003c/li\u003e   \u003cli\u003eMove to the next line. Repeat 1. and 2. while we have not all cells visited.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/ee/36/ee36d474dd1e90b452541b945703bc34790d5787.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eAfter that, we can easily find the solution: you can make first \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ek\u003c/i\u003e - 1)\u003c/span\u003e tubes length be \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, and the last \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e tube will consist from cells left. \u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/441/submission/6850508\" title\u003d\"Submission 6850508 by gridnevvvit\"\u003e6850508\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/441/problem/D\" title\u003d\"Codeforces Round 252 (Div. 2)\"\u003e441D - Valera and Swaps\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/dans\" title\u003d\"Expert dans\"\u003edans\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn this task you should represent permutation as graph with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e vertexes, and from every vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e exists exactly one edge to vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. It\u0027s easy to understand that such graph consists of simple cycles only.\u003c/p\u003e\u003cp\u003eIf we make swap \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e, edges \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0e/58/0e588d2a24d1106942f3de42060561854177e4f3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b0/43/b0433ebeb2796f93e5b4dd85776ca8005c9468e5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e will become edges \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d1/49/d14929ec3a2d95da9f4e65a729c251a49dc362e7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d0/a1/d0a138e05c3f5f53bd7750d7c014cfa7ae18c64a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e respectively. Then if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e is in the same cycle, this cycle will break:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/bc/e8/bce8a944eee6d41b7621a19805cd5ed2caa00d26.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003ebut if they are in different cycles, these cycles will merge into one:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/2d/b5/2db5524ca57db517fc78891a047baada455c947e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003ethis means that every swap operation increases number of cycles by one, or decreases it by one.\u003c/p\u003e\u003cp\u003eAssuming all above, to get permutation \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e from permutation \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, we need to increase (or decrease) number of cycles in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e — number of cycles in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e. Then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e always equals \u003cspan class\u003d\"tex-span\"\u003e|(\u003ci\u003en\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e) - \u003ci\u003ec\u003c/i\u003e|\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor satisfying lexicographical minimality we will review three cases:\u003c/p\u003e\u003cp\u003e1) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e \u0026lt; \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eIt\u0027s easy to understand, that in this case you must decrease cycles number by merging cycles one by one with cycle containing vertex 1. This way every swap has form \u003cspan class\u003d\"tex-span\"\u003e(1, \u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e \u0026gt; 1\u003c/span\u003e. Because every cycle vertex is bigger than previous cycle vertex, this case can be solved with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e2) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e \u0026gt; \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eIn this case you should break cycle for every vertex, making swap with smallest possible vertex (it should be in this cycle too). This could be done if represent cycle by line \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cf/1c/cf1ccdaca8f878c92cba9ce6cbc48e110e33f7b1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. As soon as every cycle is broken with linear asymptotics, this case solution works with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBonus\u003c/strong\u003e: this way of representing cycle lets us optimize solution to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e asymptotics, you may think how.\u003c/p\u003e\u003cp\u003e3) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e \u003d \u003ci\u003eс\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eBesause in this case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 0\u003c/span\u003e, there is nothing need to be swapped.\u003c/p\u003e\u003cp\u003eIt\u0027s highly recommended to inspect jury\u0027s solution: \u003ca href\u003d\"/contest/441/submission/6850515\" title\u003d\"Submission 6850515 by gridnevvvit\"\u003e6850515\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/441/problem/E\" title\u003d\"Codeforces Round 252 (Div. 2)\"\u003e441E - Valera and Number\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/gridnevvvit\" title\u003d\"Candidate Master gridnevvvit\"\u003egridnevvvit\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe will solve the task by calculating dynamic \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e][\u003ci\u003elast\u003c/i\u003e][\u003ci\u003ecnt\u003c/i\u003e]\u003c/span\u003e — possibility of getting \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e which \u003cspan class\u003d\"tex-span\"\u003e8\u003c/span\u003e last bits equals \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003c/span\u003e, 9th bit equals \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elast\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e — number of consecutive bits (following 9th bit) and equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elast\u003c/i\u003e\u003c/span\u003e, after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e steps.\u003c/p\u003e\u003cp\u003eGood, but why we left other bits? It\u0027s clear, that using operation \u003cspan class\u003d\"tex-span\"\u003e +  \u003d 1\u003c/span\u003e we can change only first 0 bit with index \u003cspan class\u003d\"tex-span\"\u003e ≥ 9\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTransitions is pretty obvious: we add 1 or multiply by 2 (it\u0027s recommended to see them in jury\u0027s solution). Perhaps, you should ask following question. For example, we have number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d 1011111111\u003c/span\u003e in binary representation.\u003c/p\u003e\u003cp\u003eAnd at this moment, we make \u003cspan class\u003d\"tex-span\"\u003e +  \u003d 1\u003c/span\u003e. According to all above, we must go to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[1][0][1][2]\u003c/span\u003e condition, but we can\u0027t do that because we don\u0027t have any information about \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e in 10th position. But, as we can not change any bit with index \u003cspan class\u003d\"tex-span\"\u003e ≥ 9\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e \u003d 0\u003c/span\u003e) we make transition to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[1][0][1][1]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/441/submission/6850523\" title\u003d\"Submission 6850523 by gridnevvvit\"\u003e6850523\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBonus\u003c/strong\u003e. Let us have other pseudocode.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// input x, k, p\n \nfor(i \u003d 0; i \u0026lt; k; i +\u003d 1) {\n   if (x is even) {\n     rnd \u003d random number from interval [1, 100]\n     if (rnd \u0026lt;\u003d p)\n       x *\u003d 2;\n     else\n       x +\u003d 1;\n   } else {\n      x *\u003d 2;\n   }\n}\n \ns \u003d 0;\n \nwhile (x is even) {\n  x /\u003d 2;\n  s +\u003d 1;\n}\n \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs before, you must find expected value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eHow effectively you can solve this problem? Can you prove your solution?\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eYour corrections of my bad English are welcome, thank you.\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}