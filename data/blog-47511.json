{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1475506287,"rating":131,"authorHandle":"Michael","modificationTimeSeconds":1475511962,"id":47511,"title":"\u003cp\u003eAdvanced Algorithms and Complexity Course\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI \u003ca href\u003d\"//codeforces.com/blog/entry/44924\"\u003ewrote\u003c/a\u003e in May about the launch of \u003ca href\u003d\"https://goo.gl/jV5fbe\"\u003eData Structures and Algorithms\u003c/a\u003e Specialization at Coursera. In September, the \u003ca href\u003d\"https://goo.gl/TalA42\"\u003eAdvanced Algorithms and Complexity\u003c/a\u003e Course of this Specialization was launched, and I\u0027d like to tell you more about it.\u003c/p\u003e\u003cp\u003eCourse topics:\u003c/p\u003e \u003col\u003e   \u003cli\u003eNetwork Flows (Ford-Fulkerson and Edmonds-Karp algorithms).\u003c/li\u003e   \u003cli\u003eLinear Programming (the Simplex Method).\u003c/li\u003e   \u003cli\u003eNP-completeness (theory, reductions, solving NP-complete problems using SAT-solvers).\u003c/li\u003e   \u003cli\u003eCoping with NP-completeness (bruteforce optimizations, solvable cases, approximation algorithms).\u003c/li\u003e   \u003cli\u003eStreaming Algorithms.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eThe problems for this course were prepared by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/ifsmirnov\" title\u003d\"Grandmaster ifsmirnov\"\u003eifsmirnov\u003c/a\u003e, \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Ilyakor\" title\u003d\"International Grandmaster Ilyakor\"\u003eIlyakor\u003c/a\u003e, \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Michael\" title\u003d\"Master Michael\"\u003eMichael\u003c/a\u003e, \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Perlik\" title\u003d\"Expert Perlik\"\u003ePerlik\u003c/a\u003e, \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/romanandreev\" title\u003d\"Grandmaster romanandreev\"\u003eromanandreev\u003c/a\u003e, \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"International Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e and Paul Melnichuk.\u003c/p\u003e\u003cp\u003eNetwork flows and the algorithms covered in the Specialization can sound as not very advanced topic for many Codeforcers. On the other hand, it is definitely a popular topic: there is a problem on network flows application virtually in every contest nowadays, and knowing the basic algorithms for finding flows is a must. One of the problems in the Programming Assignment of the Network Flows module supports that: \u003ca href\u003d\"https://code.google.com/codejam/\"\u003eGoogle Code Jam\u003c/a\u003e officially allowed us to use the statement of the problem \u003ca href\u003d\"https://code.google.com/codejam/contest/204113/dashboard#s\u003dp2\"\u003eStock Charts\u003c/a\u003e from GCJ 2009 R2 (\u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/ilyakor\" title\u003d\"International Grandmaster ilyakor\"\u003eilyakor\u003c/a\u003e has prepared the tests and the solutions for our version). Also, it often turns out that you should solve competitive programming problems on flows using Ford-Fulkerson algorithm, because it can be implemented extremely fasta, and it works fast in practice, but for the rare cases when the authors prepared specialized test cases breaking Ford-Fulkerson which is non-trivial.\u003c/p\u003e\u003cp\u003eLinear Programming has never been a competitive programming topic...right until the ACM ICPC World Finals 2016 where \u003ca href\u003d\"https://icpc.baylor.edu/worldfinals/problems/icpc2016.pdf\"\u003eproblem I\u003c/a\u003e just screamed \u0026quot;implement Dijkstra and Simplex Method\u0026quot;. In the end, only one team from Stanford University solved this problem, and only two more teams tried. Stanford got lucky: they had the simplex method in their team notebook. However, according to what I observed during the finals as an ICPC analyst, they got unlucky too: it seems their implementation had a bug) As a result, they\u0027ve spent a lot of time on fixing it and got the problem accepted only during the last hour, although they\u0027ve started trying much earlier. I might have confused Stanford team\u0027s troubles with Wroclaw university\u0027s, though â€” sorry if that\u0027s the case. Anyway, so many teams have missed their chance for a much better result! One didn\u0027t have to solve anything, just needed to implement two algorithms, one of which many ACM ICPC finalists can implement without opening their eyes at night. \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/romanandreev\" title\u003d\"Grandmaster romanandreev\"\u003eromanandreev\u003c/a\u003e who prepared the problems on linear programming made sure that his solution passes on the problem I from World Finals 2016. Forums on the Coursera are flooded with discussions of accuracy problems and other subtleties of Simplex Method. Some of the students even complained that they have passed a full separate course just about Linear Programming, and have passed this problem there, but can\u0027t pass it in our course :) So you can test your implementation for the team notebook pretty well)\u003c/p\u003e\u003cp\u003eAs opposed to competitive programming, in the real life Linear Programming finds lots of applications from optimizing advertising budgets, investment portfolios, diets, transportation, manufacturing, telecommunications to approximation algorithms for NP-hard problems, including the Travelling Salesman Problem.\u003c/p\u003e\u003cp\u003eIt might sound surprising, but NP-completeness and coping with it could be seen as the most practical part of the course. You\u0027d argue that this is all about Complexity, but in practice most of the problems are NP-complete and it is much more efficient to see the problem is NP-complete at once and think of ways to cope with that (that\u0027s what we talk about in the two modules) instead of trying to come up with some clever data structure, essentially trying to prove P!\u003dNP wrong, without knowing it. Some of the problems use SAT-solver as a checker, because the problem is to reduce the initial problem to a SAT instance, and then it turns out modern SAT-solvers based on the latest research advances can solve huge instances in practice.\u003c/p\u003e\u003cp\u003eStreaming Algorithms are on the rise now, because often in Big Data processing you need to compute some statistic (number of different keys, the most frequent key, estimate the size of intersection of two sets of keys) based on terabytes of data using very limited amount of memory and reading the data just once or maybe twice. We\u0027ve invited \u003ca href\u003d\"http://theory.epfl.ch/kapralov/\"\u003eMichael Kapralov\u003c/a\u003e to cover this topic. We are going to add a problem on application of streaming algorithms later. It is challenging to separate the Streaming Algorithms from the regular ones under the typical time limits, but we already have a prototype, now it\u0027s only left to package what we got into a problem.\u003c/p\u003e\u003c/div\u003e","tags":["coursera","algorithms","data structures","acm","acm icpc","maxflow"]}}