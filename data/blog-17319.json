{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1428437187,"rating":13,"authorHandle":"amrSamir","modificationTimeSeconds":1428439040,"id":17319,"title":"\u003cp\u003eRound 5 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eWell done for completing the 5th round.\u003c/p\u003e\u003cp\u003eGreat performance by: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/RedNextYears\" title\u003d\"Candidate Master RedNextYears\"\u003eRedNextYears\u003c/a\u003e \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Hasan0540\" title\u003d\"Candidate Master Hasan0540\"\u003eHasan0540\u003c/a\u003e \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/AmrMahmoud\" title\u003d\"Expert AmrMahmoud\"\u003eAmrMahmoud\u003c/a\u003e \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/naggar\" title\u003d\"Expert naggar\"\u003enaggar\u003c/a\u003e Keep it up! :)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eA — Non Absorbing DFA\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/mostafa_fahim\" title\u003d\"Expert mostafa_fahim\"\u003emostafa_fahim\u003c/a\u003e\u003c/p\u003e\u003cp\u003eGraph Contraction then simple DP.\u003c/p\u003e\u003cp\u003eWell, this looks like an easy problem from the first sight. After all you can quickly think of the obvious DP solution with state: (remaining length, current character, current state) with another internal loop of alphabet count. You should also take care of the cycles in the DFA since not all characters are consumed in each transitions.\u003c/p\u003e\u003cp\u003eSo after all, this solution has around 40kk operations which is not that bad. I coded it up and it gave WA and as expected. The culprit was that long is not long enough for the answer so change to BigInteger and unsurprisingly TLE..\u003c/p\u003e\u003cp\u003eThinking a bit, an optimization arises. Contracting the graph along the not-needed edges which don\u0027t consume characters. Doing so will improve things a bit but won\u0027t avoid the TLE.\u003c/p\u003e\u003cp\u003eLast optimization, since all edges currently in the graph are consuming edges (after contraction), then you don\u0027t need the character dimension in the DP state anymore and Voila AC :D\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://ideone.com/UFeLBV\"\u003ehttp://ideone.com/UFeLBV\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eB — Robbers\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/mostafa_fahim\" title\u003d\"Expert mostafa_fahim\"\u003emostafa_fahim\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s start with the fact that in the solution some robbers will get the first integer number of coins less than (or equal) their (possibly fractional) share and others will get the first integer more than it.\u003c/p\u003e\u003cp\u003eSo it is safe to give every one that first integer less than or equal their fair share. After doing so we will be left with some coins that are not distributed yet. Intuitively it doesn\u0027t make sense to give any robber more than one extra coin, proof is easy but left as exercise :D.\u003c/p\u003e\u003cp\u003eSo now the only problem left is to which robbers we should give an extra coin. Assume for example the the fair share of one robber is 3.2 coins and for another is 2.8. Given that we already gave the first 3 coins and the second 2 coins, which one of them better deserves an extra coin? Let\u0027s see, giving the first one a coin will increase the sum by 0.6/M (0.2/M removed and 0.8/M added) but giving it to the second robber will increase the sum by -0.6/M (0.8/M removed and 0.2/M added).\u003c/p\u003e\u003cp\u003eSo it seems like it is always better to give a coin to the robber whose fractional part is maximal.\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://ideone.com/D22cF9\"\u003ehttp://ideone.com/D22cF9\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eC — More Divisors\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/ahmad_mamdouh\" title\u003d\"Expert ahmad_mamdouh\"\u003eahmad_mamdouh\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://pastebin.com/uHkg8cnv\"\u003ehttp://pastebin.com/uHkg8cnv\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eD — Minimal Cut Matrix\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/islam-al-aarag\" title\u003d\"Candidate Master islam-al-aarag\"\u003eislam-al-aarag\u003c/a\u003e\u003c/p\u003e\u003cp\u003eGiven the sample test case, you can try to find a manual solution where the graph is a tree and you will actually succeed. \u003c/p\u003e\u003cp\u003eYou may now assume it\u0027s always the case that we can contruct a tree with the costs in the given matrix if it\u0027s valid. \u003c/p\u003e\u003cp\u003eLet\u0027s try to construct this tree. Pick the two nodes with the highest code in between. These nodes has to be connected directly by an edge with that value because if they are not, there will be another smaller edge on the path between them with a smaller value. \u003c/p\u003e\u003cp\u003eNow let\u0027s look at the edge costs one by one in descending order. If the edge connects nodes between two different components C1 and C2, then Cost[x][y] must be equal to edge cost for every x in C1 and every y in C2, otherwise the input is wrong. \u003c/p\u003e\u003cp\u003eYou can implement the algorithm and test it thoroughly by generating random graphs and running MCMF on them and it will pass all cases.\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://ideone.com/VH3C9b\"\u003ehttp://ideone.com/VH3C9b\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eE — Yet Another Rooks Problem\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/ahmad_mamdouh\" title\u003d\"Expert ahmad_mamdouh\"\u003eahmad_mamdouh\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://pastebin.com/RwCTFy8t\"\u003ehttp://pastebin.com/RwCTFy8t\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eF — Suffix Automaton\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/ahmad_mamdouh\" title\u003d\"Expert ahmad_mamdouh\"\u003eahmad_mamdouh\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://pastebin.com/dphBfUxy\"\u003ehttp://pastebin.com/dphBfUxy\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eG — Dinner Problem\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/ahmad_mamdouh\" title\u003d\"Expert ahmad_mamdouh\"\u003eahmad_mamdouh\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://pastebin.com/KvP4K7pn\"\u003ehttp://pastebin.com/KvP4K7pn\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eH — Move to Front\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/islam-al-aarag\" title\u003d\"Candidate Master islam-al-aarag\"\u003eislam-al-aarag\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe problem can easily be implemented in a naive way where you just move things around but this will time out. The queries that are most expensive are: knowing the current position of the element, moving it to front and increasing positions of all those before it. The current position of elements can easily kept in a map. Now we can use a well known trick for moving elements around. We initialize a segment tree with num leaves 2n. Initally we populate the last n elements of the tree and keep the current positions of elements in a map and say they now fill the rage (start, end). \u003c/p\u003e\u003cp\u003eWhen we want to process a certain element from the list, we get its position from the map (pos), move to start — 1 and run a range increment over (start, pos). The idea here is to keep its old place empty since it doesn\u0027t affect the computation at all. \u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://ideone.com/SSRAIC\"\u003ehttp://ideone.com/SSRAIC\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eI — TV Show\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/islam-al-aarag\" title\u003d\"Candidate Master islam-al-aarag\"\u003eislam-al-aarag\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThere are two ways to solve this problem. The obvious is to model it as a 2SAT where each row is a variable and we have the following expressions added to the whole:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eX || Y: if both X and Y have the same ith symbol as the ith row\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e!X || !Y: if both X and Y share any common symbol in the same column.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eYou then simply run the 2SAT algorithm to find an assignment.\u003c/p\u003e\u003cp\u003eThe other solution is to relaize that the relation here is not just ORing but it\u0027s XORing. Meaning that for 2 variables having the same icon in the ith column as the ith row exactly one of them has to be true. What you can do is simply BFS starting with each possibilty. You stop your BFS in one of 2 cases:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eYou find a contradiction: Some row has no option so this trial was wrong and you  you have to pick the other variable.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eYour component is exhausted and there are no more obligated move: your choice was  right and you can proceed.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eBelow is the second algorithm implemented.\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://ideone.com/NBZNkc\"\u003ehttp://ideone.com/NBZNkc\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eJ — Triatrip\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/ahmad_mamdouh\" title\u003d\"Expert ahmad_mamdouh\"\u003eahmad_mamdouh\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://pastebin.com/sZR9NZA6\"\u003ehttp://pastebin.com/sZR9NZA6\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eK — Chip Reconstruction\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/islam-al-aarag\" title\u003d\"Candidate Master islam-al-aarag\"\u003eislam-al-aarag\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWhen you look at the problem, you relize that the first row that has non zero quantizer cells (inner or borders) must have quantizers start at it since no earlier row can satisfy it. You can safely start assinging quantizers at this row until satisifed. \u003c/p\u003e\u003cp\u003eNow the question is which columns to use as the start. \u003c/p\u003e\u003cp\u003eYou may think it\u0027s safe to use any column but actually columns with more needed quantizers are more liable to be stuck later with no option. So you can greedily assign them in columns with higher number needed left. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/neHHNP\"\u003ehttp://ideone.com/neHHNP\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eL — IQ Test\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/amrSamir\" title\u003d\"Candidate Master amrSamir\"\u003eamrSamir\u003c/a\u003e\u003c/p\u003e\u003cp\u003e10,000 total for all testcases suggest an optimized O(N^2) algorithm might pass. (100 million iterations). The solution is therefore a simple Dynamic programming (using building table) (NOTE: we cannot allocate O(N^2) memory though.) \u003c/p\u003e\u003cp\u003eHow to model this problem for DP? Consider the following values: abcdefg It makes sense to sort the values in ascending order. There is no point of testing a slower employee before a faster employee (they can work in parallel!). Now lets assume we will split the first 3 employees to a group: (abc)defg Each of the employees in the group abc will take time c, and each of the remaining employees defg will start after time c. So we can think as if we added 7*c to the total time, and we have the sub-problem defg to solve. \u003c/p\u003e\u003cp\u003eThis leads to the following DP solution: DP(i) \u003d MAX( j*(n-i) + DP(j+1) ) For all j \u0026gt;\u003d i \u003c/p\u003e\u003cp\u003eWe also need the groups themselves, which can be easily obtained by keeping track of the parent. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/2MqZga\"\u003ehttp://ideone.com/2MqZga\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eM — Kingdom Division 2\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSolution by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/amrSamir\" title\u003d\"Candidate Master amrSamir\"\u003eamrSamir\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe simplest solution is to try all possible N^2 pairs of vertices, and see if the points are on different sides. We can check that easily without floating point operations using cross product. \u003c/p\u003e\u003cp\u003eBut N^2 pairs are too much. Instead let us consider a single vertex V, how many such edges does it contribute? We can figure this number by finding the first vertex/last vertex in the range between the cities. This can be obtained by binary search. It\u0027s OK to overcount, we can simply divide by 2 in the end. \u003c/p\u003e\u003cp\u003eImplementation detail: Here we are showing the use of anonymous functions to avoid rewriting binary search code again. The syntax is as follows: \u003c/p\u003e\u003cp\u003e\u003ccode\u003e[i](int x) { return ...; }\u003c/code\u003e\u003c/p\u003e\u003cp\u003eThis means: \u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eCapture variable i from the surroundings (note that we don\u0027t have to capture n because it is global.)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eTake as input an integer x.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eCode of the method. \u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eAnd this is passed as a parameter to the method as follows:\u003c/p\u003e\u003cp\u003e\u003ccode\u003efunction\u0026lt;bool(int)\u0026gt; f\u003c/code\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eReturn type: bool\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eOne argument: int This keyword requires \u003ccode\u003e#include \u0026lt;functional\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eCode: \u003ca href\u003d\"http://ideone.com/p0iSwV\"\u003ehttp://ideone.com/p0iSwV\u003c/a\u003e\u003c/p\u003e\u003cp\u003eEnjoy :)\u003c/p\u003e\u003c/div\u003e","tags":[]}}