{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1481110719,"rating":0,"authorHandle":"Slamur","modificationTimeSeconds":1507466093,"id":48889,"title":"\u003cp\u003eБазовые структуры данных. Java. Коллекции. Список\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eПосле знакомства с Generic-классами в Java наконец можно рассмотреть структуры данных, реализованные с их использованием. В данной лекции я разберу понятие \u003cem\u003e\u003cstrong\u003eколлекции\u003c/strong\u003e\u003c/em\u003e в Java, а также расскажу про работу со списками. \u003cbr /\u003e\u003c/p\u003e\u003ch3\u003eКоллекции\u003c/h3\u003e\u003cp\u003eВсе структуры данных, имеющие только один тип-параметр (словарь имеет два), объединены общим интерфейсом Collection.\u003c/p\u003e\u003cp\u003eВот примерный список функций, имеющихся у любой коллекции:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\t// Все коллекции лежат в пакете java.util\n\timport java.util.*;\n\u003c/code\u003e\u003c/pre\u003e \u003cpre\u003e\u003ccode\u003e\tinterface Collection\u0026lt;T\u0026gt; extends Iterable\u0026lt;T\u0026gt; {\n\t\t\n\t\tint size(); // размер\n\t\t\n\t\tboolean contains(T value); // проверить, есть ли значение в коллекции\n\t\t\n\t\t// Добавить и удалить элемент\n\t\t// Возвращают true, если действие изменило коллекцию\n\t\tboolean add(T value); \n\t\tboolean remove(T value); \n\t\t\n\t\t// все коллекции поддерживают итерацию по элементам\n\t\t// с помощью цикла for (T value : collection)\n\t\tIterator\u0026lt;T\u0026gt; iterator();\n\t\t\n\t\t// Вернуть массив, соответствующий коллекции\n\t\t\n\t\t/*\n\t\t\tВ силу особенностей реализации Generic в Java\n\t\t\tсама коллекция не может создать массив заданного типа-параметра (нужен явный тип).\n\t\t\t\n\t\t\tПоэтому для корректного выполнения функции \n\t\t\tнеобходимо извне передать массив нужного типа\n\t\t\t!!!любой!!! длины (я обычно передаю пустой массив).\n\t\t\t\n\t\t\tList\u0026lt;Integer\u0026gt; list \u003d createList\u0026lt;Integer\u0026gt;(1, 2, 5); // такой функции нет\n\t\t\tInteger[] array \u003d list.toArray(new Integer[0]);\n\t\t*/\n\t\tT[] toArray(T[] array);\n\t\t\n\t\t// очистить коллекцию\n\t\tvoid clear();\n\t}\t\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e1) Список\u003c/h4\u003e\u003cp\u003eГлавным описанием для всех списков в Java является интерфейс List.\u003c/p\u003e\u003cp\u003eПримерный его вид (только основные функции) вы могли увидеть в лекции про Generic:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\t// T - это псевдоним типа хранимых элементов\n\tinterface List\u0026lt;T\u0026gt; extends Collection\u0026lt;T\u0026gt; { \n\t\n\t\tint size(); // размер списка - O(1)\n\t\n\t\tvoid set(int index, T value); // установить значение по индексу - O(1)\n\t\tT get(int index); // выдать значение по индексу - O(1)\n\t\t\n\t\tvoid add(int index, T value); // вставить значение в позицию - O(N)\n\t\tvoid add(T value); // вставить в конец списка - O(1) в среднем\n\t\t\n\t\tvoid addAll(Collection\u0026lt;T\u0026gt; collection); // добавить все элементы коллекции в список - O(размер коллекции)\n\t\t\n\t\t// Обе операции за O(N)\n\t\tvoid remove(int index); // удалить по индексу\n\t\tvoid remove(T value); // удалить по значению\n\t\t\n\t\tboolean contains(T value); // проверяет наличие значения в списке - O(N)\n\t\t\n\t\t// индекс первого и последнего вхождения в список - O(n)\n\t\tint indexOf(T value);\n\t\tint lastIndexOf(T value);\n\t\t\n\t\tT[] toArray(T[] array); // вернуть массив значений\n\t\t\n\t\tvoid clear(); // очистить список\n\t}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eОсновными двумя классами списка в Java являются:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eLinkedList (двусвязный список)\u003c/li\u003e   \u003cli\u003eArrayList (список на массиве)\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eНа практике LinkedList необходим в очень ограниченном наборе задач, поэтому почти всегда вам будет нужен ArrayList.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\timport java.util.*;\n\n\t// создать пустой список\n\tList\u0026lt;Integer\u0026gt; list \u003d new ArrayList\u0026lt;Integer\u0026gt;();\n\t\n\t// создать список с заданным размером внутреннего массива (только для ArrayList)\n\t// Важно! Размер списка [size()] будет равен 0!\n\tlist \u003d new ArrayList\u0026lt;Integer\u0026gt;(10); \n\t\n\t// создать список на основе другой коллекции (необязательно списка)\n\tList\u0026lt;Integer\u0026gt; list2 \u003d new ArrayList\u0026lt;Integer\u0026gt;(list); \n\t\n\tint[] a \u003d { 1, 2, 5 };\n\t\n\t// А вот массив коллекцией не является\n\t// List\u0026lt;Integer\u0026gt; list3 \u003d new ArrayList\u0026lt;Integer\u0026gt;(a); - ошибка компиляции\n\t\n\tfor (int value : a) {\n\t\tlist.add(value); // добавить все элементы массива в список\n\t}\n\t\n\tint x \u003d list.size(); // x \u003d\u003d 3\n\t\n\tfor (int i \u003d 0; i \u0026lt; a.length; i +\u003d 2) {\n\t\tlist2.add(a[i]); // добавить все элементы массива, стоящие на четном месте\n\t}\n\t\n\tx \u003d list2.size(); // x \u003d\u003d 2\n\t\n\tint k \u003d list.indexOf(5); // k \u003d 2\n\tk \u003d list2.indexOf(2); // k \u003d -1 - нет элемента такого\n\t\n\tfor (int value : list) {\n\t\tprint(value); // выведет 1, 2, 5 - итерация в порядке индексов\n\t\t\n\t\t// ВАЖНО! Нельзя изменять список в процессе итерации по нему\n\t\t// list.add(value);\n\t\t// list.remove(value); \n\t}\n\t\n\tlist.remove(2); // удалит не элемент 2, а по индексу 2 - так как есть метод remove(int index);\n\tlist.remove((Integer)2); // удалит значение 2\n\t\n\tlist.addAll(list2); // будет 1, 1, 5 - добавляет в конец\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eТакже из-за сходства с массивом для списка сделаны специальные функции в классе Collections:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\tList\u0026lt;String\u0026gt; list \u003d new List\u0026lt;String\u0026gt;();\n\t\n\tlist.add(\u0026quot;aba\u0026quot;);\n\tlist.add(\u0026quot;cab\u0026quot;);\n\tlist.add(\u0026quot;aab\u0026quot;);\n\tlist.add(\u0026quot;bac\u0026quot;);\n\t\n\t// изменяет порядок на противоположный\n\tCollections.reverse(list); // list \u003d (bac, aab, cab, aba)\n\t\n\t// сортирует список по возрастанию \n\tCollections.sort(list); // list \u003d (aab, aba, bac, cab)\n\t\n\t// ищет в сортированном списке за O(logN)\n\tint index \u003d Collections.binarySearch(list, \u0026quot;bac\u0026quot;); // index \u003d 2\n\tindex \u003d Collections.binarySearch(list, \u0026quot;abc\u0026quot;); // index \u003d -3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["самара","структруры данных","коллекции","java","список"]}}