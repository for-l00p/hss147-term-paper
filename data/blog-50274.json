{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1486329260,"rating":-2,"authorHandle":"KauwaBiryani","modificationTimeSeconds":1486329312,"id":50274,"title":"\u003cp\u003eChanging 2D DP to 1D DP gives time complexity optimization too ? \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI was recently solving a problem (ongoing contest. Will post the link after the contest ends) where I came up with a DP solution where dp[i][j] only depended on dp[][j-1]. Clearly one of the techniques to handle this type of problems is to use 1D array to compute dp[i] in an iterative manner for space optimization.\u003c/p\u003e\u003cp\u003eHowever, in the problem I was solving, even using a 2D array for dp[i][j] would not exceed memory limits. So I solved the problem using a 2D array and the verdict was Time Limit Exceeded.\u003c/p\u003e\u003cp\u003eBut when I simply changed the 2D array to a 1D array and submitted again, the verdict was Accepted.\u003c/p\u003e\u003cp\u003eWhy does changing a 2D array to a 1D array provide time complexity optimization too ?\u003c/p\u003e\u003c/div\u003e","tags":["dynamic programming","time complexity"]}}