{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1469945653,"rating":-12,"authorHandle":"calmhandtitan","modificationTimeSeconds":1469945653,"id":46351,"title":"\u003cp\u003eBinary search trees\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eGiven two binary search trees with identical structure, same node value but just one node with different values, how can we determine this node (by determining the node I mean the path from root to this node).\u003c/p\u003e\u003cp\u003eAn obvious solution is to do traversal for both the trees and keep track of the path. But this would take O(n).\u003c/p\u003e\u003cp\u003eMy question is can we do better than O(n) for this problem?\u003c/p\u003e\u003c/div\u003e","tags":["binary search tree"]}}