{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1499189423,"rating":-20,"authorHandle":"vamaddur","modificationTimeSeconds":1499189423,"id":53110,"title":"\u003cp\u003eUSACO 2012 Gold December Contest: \u0026quot;Running Away From the Barn\u0026quot; Solution Almost Identical to the Judge\u0027s Fails\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eProblem: \u003ca href\u003d\"http://www.usaco.org/index.php?page\u003dviewproblem2\u0026amp;cpid\u003d213\"\u003ehttp://www.usaco.org/index.php?page\u003dviewproblem2\u0026amp;cpid\u003d213\u003c/a\u003e\u003c/p\u003e\u003cp\u003eMy code below is my attempt to solve this problem, which keeps failing cases 7 through 9. I do not see a significant difference between my logic and the logic of the judge solution (the last one in the editorial here \u003ca href\u003d\"http://www.usaco.org/current/data/sol_runaway.html\"\u003eYour text to link here...\u003c/a\u003e). Can someone explain why my solution keeps producing a WA? I even resorted to changing my code to 0 based indexing after 3 hours of trying to perfectly match the judge solution, with no change in output. I sincerely apologize for posting a wall of code, but I have not found another way to resolve the issue after privately asking other users to look over it for me.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;vector\u0026gt;\n\nusing namespace std;\n\nint id \u003d 1;\n\nstruct Node{\n    Node *parent;\n    vector\u0026lt;Node*\u0026gt; children;\n    long long depth;\n    int last, label;\n    Node(){ parent \u003d NULL; depth \u003d 0ll; last \u003d -1; }\n    void preorder(){\n        label \u003d id++;\n        for(int i \u003d 0; i \u0026lt; children.size(); i++) children[i]-\u0026gt;preorder();\n        if(children.size() \u003d\u003d 0) last \u003d label;\n        else last \u003d children.back()-\u0026gt;last;\n    }\n};\n\nstruct Event{\n    int a, b, index;\n    long long len;\n    bool operator\u0026lt;(const Event \u0026amp;other) const{\n        if(len !\u003d other.len) return len \u0026lt; other.len;\n        else return a \u0026lt; other.a;\n    }\n};\n\nint N;\nNode tree [400001];\nlong long L, fenwick [400001], ret [400001];\nvector\u0026lt;Event\u0026gt; events;\n\nvoid add(int pos, long long x){\n    while(pos \u0026lt; 400001){\n        fenwick[pos] +\u003d x;\n        pos +\u003d (pos\u0026amp;-pos);\n    }\n}\n\nlong long query(int pos){\n    long long sum \u003d 0;\n    while(pos \u0026gt; 0){\n        sum +\u003d fenwick[pos];\n        pos -\u003d (pos\u0026amp;-pos);\n    }\n    return sum;\n}\n\nint main(){\n    freopen(\u0026quot;runaway.in\u0026quot;, \u0026quot;r\u0026quot;, stdin); freopen(\u0026quot;runaway.out\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n    scanf(\u0026quot;%d %d\u0026quot;, \u0026amp;N, \u0026amp;L);\n    for(int i \u003d 2; i \u0026lt;\u003d N; i++){\n        int x; long long y; scanf(\u0026quot;%d %lld\u0026quot;, \u0026amp;x, \u0026amp;y);\n        Node *par \u003d tree+x;\n        tree[i].parent \u003d par;\n        tree[i].depth \u003d (par-\u0026gt;depth)+y;\n        par-\u0026gt;children.push_back(tree+i);\n    }\n    tree[1].preorder();\n    for(int i \u003d 1; i \u0026lt;\u003d N; i++){\n        Event c;\n        c.a \u003d -1; c.b \u003d -1;\n        c.len \u003d tree[i].depth; c.index \u003d tree[i].label;\n        Event d;\n        d.a \u003d tree[i].label; d.b \u003d tree[i].last;\n        d.len \u003d tree[i].depth+L; d.index \u003d i;\n        events.push_back(c); events.push_back(d);\n    }\n    sort(events.begin(), events.end());\n    for(int i \u003d 0; i \u0026lt; events.size(); i++){\n        Event e \u003d events[i];\n        if(e.a \u003d\u003d -1) add(e.index, 1ll);\n        else ret[e.index] \u003d query(e.b)-query(e.a-1);\n    }\n    for(int i \u003d 1; i \u0026lt;\u003d N; i++) cout \u0026lt;\u0026lt; ret[i] \u0026lt;\u0026lt; \u0027\\n\u0027;\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePlease help, and thanks in advance!\u003c/p\u003e\u003c/div\u003e","tags":["usaco","bit/fenwick tree"]}}