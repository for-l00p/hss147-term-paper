{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1423631498,"rating":-1,"authorHandle":"saba_tavdgiridze","modificationTimeSeconds":1423631498,"id":16324,"title":"\u003cp\u003eThe DSW algorithm\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eDSW algorithm is used to balance binary tree.There are two phases:\u003cbr /\u003e1)Create backbone(linked list-like tree);\u003cbr /\u003e2)transform backbone into a balanced tree;\u003cbr /\u003eThere are Pseudocodes for both phase :\u003cbr /\u003e1) \u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecreateBeckbone(root,n)\n   tmp \u003d root;\n   while( tmp!\u003d0 )\n      if tmp has a left child \n          rotate this child about tmp;\n          set tmp to the child that just became parent;\n      else set tmp to its right child;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e2)\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecreatePerfectTree(n)\n    m\u003d2^( floor(lg(n+1)))-1;\n    make n-m rotations starting from the top of backbone;\n    while (m \u0026gt; 1)\n       m\u003d m/2;\n       make m rotations starting from the top of backbone;\n   \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI understood first phase,but I can\u0027t figure how second algorithm can guarantee perfectly balanced tree.If you know this algorithm please help.\u003c/p\u003e\u003c/div\u003e","tags":["binary tree","advanced data structure"]}}