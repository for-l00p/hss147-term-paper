{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1471706684,"rating":-2,"authorHandle":"zloyplace35","modificationTimeSeconds":1471764451,"id":46662,"title":"\u003cp\u003eCodeforces Round #368 (Div.2) разбор\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThanks all participants. I hope, you liked problems.\u003c/p\u003e\u003cp\u003eA — Brain\u0027s photos \u003c/p\u003e\u003cp\u003eWe need to do exactly what is written in the task: to consider all of the characters, and, if there is at least one of the set \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003eC\u003c/i\u003e, \u003ci\u003eM\u003c/i\u003e, \u003ci\u003eY\u003c/i\u003e}\u003c/span\u003e print \u0026quot;#Color\u0026quot; else — \u0026quot;#Black\u0026amp;White\u0026quot;\u003c/p\u003e\u003cp\u003eB — Bakery \u003c/p\u003e\u003cp\u003eNote that it makes no sense to choose the city for bakeries and the city with the warehouse so that had more than one way between them, as every road increases the distance over which you have to pay.\u003c/p\u003e\u003cp\u003eSo, the problem reduces to the following: select two neighboring cities so that one is a warehouse, and in the other \u0026amp; mdash; no. For doing this, simply iterate through all the city with the warehouse, among the neighbors of each town without looking for a warehouse and update the answer. If there is such a pair of cities, print -1.\u003c/p\u003e\u003cp\u003eC — Pythagorean triples \u003c/p\u003e\u003cp\u003eD — Persistence bookcase\u003c/p\u003e\u003cp\u003eSolution №1:\u003c/p\u003e\u003cp\u003eNote that the data is delivered all at once (offline). Then we can build a tree of versions, then run out of the DFS root and honestly handle each request in the transition from the top to the top.\u003c/p\u003e\u003cp\u003eSolution №2:\u003c/p\u003e\u003cp\u003eNote that Alina uses operations that relate to the columns. We can make an array of versions of the shelves, and each version of the cabinet to provide an array of indices and the corresponding shelves to store it explicitly. Then, for the operation, such as changing wardrobe, shelves, a new version which has been changed, this version of the index is recorded on the same shelf position. This approach eliminates the decision on the use of extra memory for storing unnecessary information.\u003c/p\u003e\u003cp\u003eE — Garlands\u003c/p\u003e\u003cp\u003eLet us handle each request as follows:\u003c/p\u003e\u003cp\u003eLet\u0027s go for a \u0026quot;frame\u0026quot; request and remember lamp garlands, which lies on the boundary. Then, in order to find concrete garland, what part of it lies within the query, sum all of its segments, the ends of it are lamps that lie on the \u0026quot;frame\u0026quot;.\u003c/p\u003e\u003cp\u003eAlso, do not forget the garland wich lies entirely within the request. Each garland at the beginning we find the extreme points, and to check whether it lies entirely within the query, check whether the lie inside its extreme points.\u003c/p\u003e\u003c/div\u003e","tags":[]}}