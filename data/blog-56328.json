{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1513188933,"rating":-25,"authorHandle":"BinaryBoy1","modificationTimeSeconds":1513188933,"id":56328,"title":"\u003cp\u003eDijkstra (priority queue)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;vector\u0026gt;\n#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;set\u0026gt;\n#include \u0026lt;cmath\u0026gt;\n#include \u0026lt;map\u0026gt;\n#include \u0026lt;queue\u0026gt;\nusing namespace std;\nconst int MAXN \u003d 1e5 + 10;\nbool flag [ MAXN ];\nlong long int par [ MAXN ] , alessia[ MAXN ];\nvector \u0026lt; pair \u0026lt; int , int \u0026gt; \u0026gt; v[ MAXN ] ;\npriority_queue \u0026lt;  pair \u0026lt;long long int , long long int \u0026gt; \u0026gt; q;\nint n , m;\nvoid Dijkstra (int st1 , int end1)\n{\n\tq.push(make_pair(0 , st1));\n\tfor(int i \u003d 0 ; i \u0026lt; MAXN ; i++)\n\t\talessia [ i ] \u003d -1;\n\twhile(true)\n\t{\n\t\tif(q.empty())\n\t\t\tbreak;\n\t    pair \u0026lt; int , int \u0026gt; p1;\n\t\tp1 \u003d q.top();\n\t\tq.pop();\n\t\tlong long int minpath \u003d -(p1.first) , nod \u003d p1.second;\n\t\tflag [ nod ] \u003d  true;\n\t\tif(nod \u003d\u003d end1)\n\t\t{\n\t\t\tcout \u0026lt;\u0026lt; minpath \u0026lt;\u0026lt; endl;\n\t\t\treturn;\n\t\t}\t\n\t\tfor(int j \u003d 0 ; j \u0026lt; v [ nod ].size() ; j++)\n\t\t{\n\t\t\tif(flag [ v [ nod ][ j ].first ] \u003d\u003d false \u0026amp;\u0026amp; (minpath + v [ nod ][ j ].second \u0026lt; alessia [ v [ nod ][ j ].first ]||alessia [ v [ nod ][ j ].first ] \u003d\u003d -1))\n\t\t\t{\n\t\t\t\tq.push(make_pair(-(minpath + v [ nod ][ j ].second ), v [ nod ][ j ].first));\n\t\t\t\talessia [ v [ nod ][ j ].first ] \u003d (minpath + v [ nod ][ j ].second );\n\t\t\t\tpar [ v [ nod ][ j ].first ] \u003d nod;\n\t\t\t}\n\t\t}\n\t}\n\tcout \u0026lt;\u0026lt; -1;\n\texit(0);\n}\nvoid getpar(int a)\n{\n\tif(par [ a ] !\u003d 0)\n\t\tgetpar(par [ a ]);\n\tcout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0027 \u0027;\n}\nint main() {\n\tios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0);\n\tcin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m;\n\tfor(int i \u003d 0 ; i \u0026lt; m ; i++)\n\t{\n\t\tint a , b , c ;\n\t\tcin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b \u0026gt;\u0026gt; c;\n\t\tv [ a ].push_back(make_pair(b , c));\n\t\tv [ b ].push_back(make_pair(a , c));\n\t}\n\t\n\tDijkstra (1, n);\n\tgetpar(n);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["dijkstra","graph","algorithms","priority queue"]}}