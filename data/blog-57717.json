{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1518436047,"rating":64,"authorHandle":"GlebsHP","modificationTimeSeconds":1518437187,"id":57717,"title":"\u003cp\u003eРазбор задач разминочного раунда Яндекс.Алгоритма 2018\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eA. Time Through the Glass\u003c/h2\u003e\u003cp\u003eConsider the movement of \u0026quot;real\u0026quot; and \u0026quot;reflected\u0026quot; hands. If \u0026quot;real\u0026quot; hands rotates for some angle, \u0026quot;reflected\u0026quot; hand passes exactly the same angle in other direction. Thus, the sum of angles of two hands is always equal 360 degrees. For each hand we will find its resulting position independently. For hour hand it is 12 minus the current position, while for minute hand it is 60 minus current position. In both cases we should not forget to replace 12 or 60 with 0.\u003c/p\u003e\u003ch2\u003eB. Palindromic Feature\u003c/h2\u003e\u003cp\u003eConsider some substring of the given string that is a palindrome. We can remove its first character and its last character and the string will remain a palindrome. Continue this process till the string length becomes two or three (depending on parity).\u003c/p\u003e\u003cp\u003eThe number of substrings of length two or three is linear, same as their total length. Thus, we can apply naive algorithm to select optimum palindrome. If there is no palinromic substring of length two or three, print \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003ch2\u003eC. Divide Them All\u003c/h2\u003e\u003cp\u003eTo solve this problem we will use a simple geometry fact that a line split a circle in two parts of equal area if and only if this line passes through the circle center. Similarly, a line splits a rectangle in two parts of equal area if and only if it passes through the intersection point of its diagonals. In both cases, sufficiency follows from point symmetry and necessity can be shown by considering a line that passes through the center and is parallel to a given one.\u003c/p\u003e\u003cp\u003eNow we only need to check whether there exists a line that contains all the centers. For the sake of simplicity we will work with doubled coordinates to keep them integer. This allows us to get the center of the rectangle by computing the sum of coordinates of two opposite vertices.\u003c/p\u003e\u003cp\u003eIf there are no more than two distinct points among the set of all center, the answer is definitely positive. Otherwise, consider any pair of distinct points and check that each center belongs to the line they define. To check whether three points \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≠ \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e) belong to one line we can compute the cross product of vectors \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. Overall complexity of this solution is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch2\u003eD. Interview Task\u003c/h2\u003e\u003cp\u003eWe would like to start with some lemmas.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLemma 1.\u003c/strong\u003e Any two neighboring integers are co-prime at any step.\u003c/p\u003e\u003cp\u003eUse math induction. Base case is trivial as \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e are co-prime. Consider the statement is correct for first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e steps. Then, any integer produced during step \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e is a sum of two co-prime integers. However, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e) \u003d \u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e, thus, any two neighbors are still co-prime.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLemma 2.\u003c/strong\u003e Each ordered pair of integers \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e appears as neighbors exactly once (and at one step only).\u003c/p\u003e\u003cp\u003eProof by contradiction. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e be the first step such that some ordered pair appeared for the second time. Denote this pair as \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is the step of another appearance o this pair. Without loss of generality let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u0026gt; \u003ci\u003eq\u003c/i\u003e\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e was obtained as a sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e - \u003ci\u003eq\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e, thus during the steps \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e there was also a repetition of some pair, that produces a contradiction.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLemma 3.\u003c/strong\u003e Any ordered pair of co-prime integers will occur at some step. \u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e be neighbors at some step. Then, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u0026gt; \u003ci\u003eq\u003c/i\u003e\u003c/span\u003e it was obtained as a sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e - \u003ci\u003eq\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e, so they were neighbors on the previous step. Two steps behind we had either \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e - 2\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e, or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e - \u003ci\u003eq\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003eq\u003c/i\u003e - \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e (depending on which is greater, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e - \u003ci\u003eq\u003c/i\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e) and so one. The process is similar to Euclid algorithm and continues while we don\u0027t have \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Finally, pairs \u003cspan class\u003d\"tex-span\"\u003e(1, \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, 1)\u003c/span\u003e always appear at step x$. Moving along the actions in backward direction we conclude that any of the intermediate pairs should appear during the process, thus, pair \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e also appears.\u003c/p\u003e\u003cp\u003eNotice, that we are only interested in the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e steps, as any integer, produced on step \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is strictly greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Now, as we know that any pair of co-prime integers occurs exactly once we would like to compute the number of pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e) \u003d 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e) \u003d 1\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e, \u003ci\u003ep\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e) \u003d \u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e) \u003d 1\u003c/span\u003e. It means we only have to compute Euler function of integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eCompute Euler function is a well-studied problem. This know this is a multiplicative function, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e·\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sup\u003e·...·\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/sup\u003e\u003c/span\u003e, the number of co-prime integers is \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e - \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - 1\u003c/sup\u003e)·(\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sup\u003e - \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - 1\u003c/sup\u003e)·... (\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/sup\u003e - \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e - 1\u003c/sup\u003e)\u003c/span\u003e. Factorization of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e can be done in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/32/91/32913ddf691f31b4d68f1a13d186d75779229920.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time.\u003c/p\u003e\u003ch2\u003eE. Backup\u003c/h2\u003e\u003cp\u003eIn this problem we are given a rooted tree. At one step, one node is removed. If the node is being removed and its immediate ancestor is still present, the value in this ancestor is increased by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e (initially all values are equal to \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e). If the value of some node is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, it should be removed at the next step. The goal is to maximize the number of step when root is removed.\u003c/p\u003e\u003cp\u003eNotice, that if the root has only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e descendant we can remove the whole tree before touching the node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Otherwise, descendants should be split in three sets: totally removed subtrees, subtrees with their root remaining, and one subtree, whose root is removed at the end causing the node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e to be removed as well. Run depth-first search to compute the following value of dynamic programming:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e is the number of nodes we can remove in subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e if we are allowed to remove \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e at any point. One can show that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e equals the total number of nodes in the subtree.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e is the number of nodes we can remove in subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e if we are not allowed to touch node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. If there are less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e descendants, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e) - 1\u003c/span\u003e. Otherwise, we should pick \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 2\u003c/span\u003e descendant to use value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e, while for other we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e. This \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 2\u003c/span\u003e descendants are selected by maximum value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e) - \u003ci\u003eb\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e equal to the number of nodes we can remove if we are allowed to remove node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e but this should be done at the very end. Value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e is the final answer. We have to select some \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 2\u003c/span\u003e descendants to use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e, one to use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e and for others we take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e. Try every descendant as a candidate for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e and for other use greedy algorithm to pick best \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e) - \u003ci\u003eb\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e. Precompute the sorted array of all descendants and compute the sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 2\u003c/span\u003e best. If descendant \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to be used with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is among these \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 2\u003c/span\u003e use the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e (there should be at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e descendants, otherwise we destroy the whole subtree).\u003c/p\u003e\u003cp\u003eThe overall complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch2\u003eF. Lying Processors\u003c/h2\u003e\u003cp\u003eWe are going to use the fact that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 7\u003c/span\u003e and compute profile dynamic programming. If we already filled first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e columns of the table and everything is correct for first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e columns, we only need to know the state of last to columns in order to be able to continue.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e1, \u003ci\u003em\u003c/i\u003e2)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e varies from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e2\u003c/span\u003e are bitmasks in range from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e mean the minimum number of processors required to fill first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e columns in order to make first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e columns correct and last two columns be filled as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e2\u003c/span\u003e respectively. The number of different states is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e·2\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e. Finally, to compute the relaxations we try all possible masks \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e3\u003c/span\u003e for the new state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003em\u003c/i\u003e2, \u003ci\u003em\u003c/i\u003e3)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eApplying bit operations and some precomputations we obtain \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e·2\u003csup class\u003d\"upper-index\"\u003e3\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e running time. We can speed it up a lot by precomputing all valid \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e3\u003c/span\u003e for a pair of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003em\u003c/i\u003e1, \u003ci\u003em\u003c/i\u003e2)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eExercise: come up with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enm\u003c/i\u003e2\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e solution.\u003c/p\u003e\u003c/div\u003e","tags":[]}}