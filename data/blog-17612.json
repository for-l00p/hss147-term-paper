{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1430152673,"rating":312,"authorHandle":"Endagorion","modificationTimeSeconds":1430567549,"id":17612,"title":"\u003cp\u003eCodeforces Round #300 Editorial (+challenges)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eAs usual, a challenge comes with every problem. I tried not to repeat the mistakes of my previous editorials and made sure that all challenges have a solution \u003d) (except for the \u003cem\u003eitalics\u003c/em\u003e parts that are open questions, at least for me). Go ahead and discuss them in the comments! General questions about problems and clarification requests are welcomed too.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD\u003c/strong\u003e: I added codes of my solutions for all the problems. I didn\u0027t try to make them readable, but I believe most part of them should be clear. Feel free to ask questions.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/538/problem/A\" title\u003d\"Codeforces Round 300\"\u003e538A - Cutting Banner\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet me first clarify the statement (I really wish I didn\u0027t have to do that but it seems many participants had trouble with the correct understanding). You had to erase exactly one substring from the given string so that the rest part would form the word \u003ccode\u003eCODEFORCES\u003c/code\u003e. The (somewhat vague) wording \u003ccode\u003esome substring\u003c/code\u003e in the English translation may be the case many people thought that many substrings can be erased; still, it is beyond my understanding how to interpret that as \u0027more than one substring\u0027. Anyway, I\u0027m sorry for the inconvenience.\u003c/p\u003e\u003cp\u003eRight, back to the problem. The most straightforward approach is to try over all substrings (i.e. all starting and ending positions) to erase them and check if the rest is the wanted word. When doing this, you have to be careful not to forget any corner cases, such as: erase few first letters, erase few last letters, erase a single letter, and so on. A popular question was if an empty substring may be erased or not. While it is not clarified explicitly in the statement, the question is irrelevant to the solution, for it is guaranteed in the statement that the initial string is not \u003ccode\u003eCODEFORCES\u003c/code\u003e, so erasing nothing will not make us happy. From the technical point of view, you could erase a substring from the string using standard functions like \u003ccode\u003esubstr\u003c/code\u003e in C++ or similar, or do some bare-hands work and perform conditional iterating over all symbols. Depending on the implementation, this would be either \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e solution; both of these fit nicely.\u003c/p\u003e\u003cp\u003eOne way of solving this in linear time is to compute the longest common prefix and suffix for the given string and the string \u003ccode\u003eCODEFORCES\u003c/code\u003e. If their total length is at least 10 (the length of \u003ccode\u003eCODEFORCES\u003c/code\u003e), it is possible to leave only some parts of the common prefix and suffix, thus the rest part (being a substring, of course) may be removed for good. If the total length is less than 10, no such way exists. This is clearly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e solution (rather \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e for reading the input, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003et\u003c/i\u003e|)\u003c/span\u003e for comparisons where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e is \u003ccode\u003eCODEFORCES\u003c/code\u003e in our case).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample solution\u003c/strong\u003e: \u003ca href\u003d\"/contest/538/submission/10973831\" title\u003d\"Submission 10973831 by Endagorion\"\u003e10973831\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge (easy)\u003c/strong\u003e. A somewhat traditional question: how many (modulo some prime number) large Latin letter strings of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e have the property that a (non-empty) substring may be cut out to leave a given string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e? Can you solve it in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + |\u003ci\u003et\u003c/i\u003e|\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e time? In \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + |\u003ci\u003et\u003c/i\u003e|)\u003c/span\u003e time? Maybe even faster? \u003d)\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/538/problem/B\" title\u003d\"Codeforces Round 300\"\u003e538B - Quasi Binary\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e. We may note that there are only \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e + 1 \u003d 65\u003c/span\u003e quasi-binary numbers not exceeding \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e, so we could find them all and implement a DP solution that counts the optimal representation for all numbers up to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, or even a brute-force recursive solution (which is not guaranteed to pass, but has a good odds).\u003c/p\u003e\u003cp\u003eAre there more effective solutions? Sure enough. First of all, one can notice that the number of summands in a representation can not be less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e — the largest digit in decimal representation of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. That is true because upon adding a quasi-binary number to any number the largest digit may not increase by more than 1 (easy enough to prove using the standard algorithm for adding numbers). On the other hand, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e quasi-binary numbers are always enough. To see that, construct a number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e as follows: for every digit of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e that is not 0, place 1 in the corresponding digit of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e, and for all the other digits place 0. Clearly, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e is quasi-binary. If we subtract \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, all non-zero digits will decrease by 1 (clearly, no carrying will take place), thus the largest digit of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e\u003c/span\u003e will be equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e - 1\u003c/span\u003e. Proceeding this way, we end up with the representation of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e as a sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e quasi-binary numbers. This solution is good for every numeric base, and works in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3d/f6/3df6f33a0f0ee2c8c591ad877d6ea4ca36ce65ba.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e is the base.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample solution\u003c/strong\u003e: \u003ca href\u003d\"/contest/538/submission/10973842\" title\u003d\"Submission 10973842 by Endagorion\"\u003e10973842\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge (easy)\u003c/strong\u003e. Let us call a number \u003cem\u003epseudo-binary\u003c/em\u003e if its decimal representation contains at most two different digits (e.g., 1, 555, 23, 9099 are pseudo-binary, while 103, 908 and 12345 are not). Represent an integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e as a sum of pseudo-binary numbers; minimize the number of summands. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e18\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/538/problem/C\" title\u003d\"Codeforces Round 300\"\u003e538C - Tourist\u0027s Notes\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe want to make the maximum height as large as possible. Consider the part of the chain that was travelled between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e; we can arrange it in any valid way independently of any other parts of the chain, thus we consider all these parts separately. There also parts before \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, but it is fairly easy to analyze them: make them monotonously decreasing (respectively, increasing), as this maximizes the top point.\u003c/p\u003e\u003cp\u003eWithout the loss of generality consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e \u003d \u003ci\u003et\u003c/i\u003e\u003c/span\u003e (they may be increased of decreased simultaneously without changing the answer), and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/sub\u003e \u003d \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Clearly, in consistent data \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ea\u003c/i\u003e - \u003ci\u003eb\u003c/i\u003e| ≤ \u003ci\u003et\u003c/i\u003e\u003c/span\u003e, so if this condition fails for a single pair of adjacent entries, we conclude the data is flawed.\u003c/p\u003e\u003cp\u003eIf the condition holds, it is fairly easy to construct a valid way to move between the days under the \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e| ≤ 1\u003c/span\u003e condition: increase or decrease the height while it differs from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, than stay on the same height. That does not make the optimal way, but at least we are sure that the data is not inconsistent.\u003c/p\u003e\u003cp\u003eHow to construct the optimal arrangement? From the adjacent difference inequality if follows that for any \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e between \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e the inequalities \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003ea\u003c/i\u003e + \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003eb\u003c/i\u003e + (\u003ci\u003et\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e hold. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emin\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e + \u003ci\u003ei\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e + (\u003ci\u003et\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e))\u003c/span\u003e on the [0; \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e] segment; clearly, every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e accomodates the largest possible value, therefore the value of maximum is also the largest possible. It suffices to show that these \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e satisfy the difference condition. Basically, two cases should be considered: if for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e + \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e + \u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e, or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eb\u003c/i\u003e + (\u003ci\u003et\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e \u003d \u003ci\u003eb\u003c/i\u003e + (\u003ci\u003et\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e - 1)\u003c/span\u003e, the statement is obvious. Else, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e + \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e but \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e + (\u003ci\u003et\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e) \u003d \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e + 1\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e \u003d \u003ci\u003eb\u003c/i\u003e - (\u003ci\u003et\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e - 1)\u003c/span\u003e but \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e + (\u003ci\u003ei\u003c/i\u003e + 1) \u003d \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1\u003c/span\u003e. Thus, \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e| \u0026lt; 1\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTo find the maximum value of maximum height (I really struggle not to use \u0027maximum maximum\u0027) we may either use ternary search on the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e function, or find the point where lines \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e + (\u003ci\u003et\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e intersect and try integer points besides the intersection. If we use this approach analytically, we arrive at the formula \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003et\u003c/i\u003e + \u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e) / 2\u003c/span\u003e (try to prove that yourself!).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample solution\u003c/strong\u003e: \u003ca href\u003d\"/contest/538/submission/10973854\" title\u003d\"Submission 10973854 by Endagorion\"\u003e10973854\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge (medium)\u003c/strong\u003e. Given the same data (that is, a subsequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e for a sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e), determine how many (modulo a prime number) integer sequences of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e with the property \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e| ≤ 1\u003c/span\u003e agree with the subsequence and have global maximum equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e\u003c/span\u003e? Can you solve the problem in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e time? In \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time? \u003cem\u003eMaybe even faster?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/538/problem/D\" title\u003d\"Codeforces Round 300\"\u003e538D - Weird Chess\u003c/a\u003e\u003c/p\u003e\u003cp\u003eInstead of trying to find out where the piece may go, let\u0027s try to find out where it can \u003cem\u003enot\u003c/em\u003e go. Initially mark all the moves as possible; if there is a field (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e) containing a piece, and a field (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e) not containing a piece and not being attacked, clearly a move (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e) is not possible. Let us iterate over all pieces and over all non-attacked fields and mark the corresponding moves as impossible.\u003c/p\u003e\u003cp\u003eSuppose we let our piece make all the rest moves (that are not yet marked as impossible), and recreate the position with all the pieces in the same places. If a field was not attacked in the initial position, it will not be attacked in the newly-crafted position: indeed, we have carefully removed all the moves that could take a piece to this field. Thus, the only possible problem with the new position is that some field that was attacked before is not attacked now. But our set of moves is maximal in the sense that adding any other move to it will cause the position to be incorrect. Thus, if the new position doesn\u0027t coincide with the initial position, the reconstruction is impossible. Else, we have already obtained a correct set of moves. This solution has complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e)\u003c/span\u003e for iterating over all pieces and non-attacked fields. No optimizations were needed to make solution this pass.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample solution\u003c/strong\u003e: \u003ca href\u003d\"/contest/538/submission/10973859\" title\u003d\"Submission 10973859 by Endagorion\"\u003e10973859\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge (medium)\u003c/strong\u003e. Solve the same problem in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/72/30/7230f4eaf59a69a03c16cd0bc0dada6b3daaf9c0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/538/problem/E\" title\u003d\"Codeforces Round 300\"\u003e538E - Demiurges Play Again\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWith such large constraints our only hope is the subtree dynamic programming. Let us analyze the situation and how the subtrees are involved.\u003c/p\u003e\u003cp\u003eDenote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e the number of leaves in the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. Suppose that a non-leaf vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e has children \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, and the numbers to arrange in the leaves are 1, \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e. We are not yet sure how to arrange the numbers but we assume for now that we know everything we need about the children\u0027s subtrees.\u003c/p\u003e\u003cp\u003eOkay, what is the maximal number we can achieve if the maximizing player moves first? Clearly, he will choose the subtree optimally for himself, and we are eager to help him. Thus, it makes sense to put all the maximal numbers in a single subtree; indeed, if any of the maximal numbers is not in the subtree where the first player will go, we swap it with some of the not-so-maximal numbers and make the situation even better. If we place \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e maximal numbers (that is, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e) - \u003ci\u003ew\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e) + 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e) in the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, we must also arrange them optimally; this task is basically the same as arranging the numbers from 1 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e in the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, but now the minimizing player goes first. Introduce the notation \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3a/8d/3a8dd1382c74403c759e49c8f2385462f8e2ae40.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for the maximal possible result if the maximizing/minimizing (depending on the lower index) player starts. From the previous discussion we obtain \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3b/62/3b6217ac92d180449dd2c68ec8f73dd2bb2a03d3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Thus, if we know \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/53/a1/53a1bb2be1693dcd8be724caa65118a4066bc2e2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for all children, the value of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ec/52/ec52d614e87df2693f0eb247b83fbe67c2b1b3b5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e can be determined.\u003c/p\u003e\u003cp\u003eHow does the situation change when the minimizing player goes first? Suppose that for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e we assign numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1, 1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1, \u003ci\u003ew\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/sub\u003e\u003c/span\u003e to the leaves of the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in some order; the numbers in the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e will be arranged so that the result is maximal when the maximizing player starts in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Suppose that numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e are sorted by increasing of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e for every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e; the minimizing player will then choose the subtree \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in such a way that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8e/1d/8e1de9046ffefbc640d39b2924c523e20c8f030b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is minimal. For every arrangement, the minimizing player can guarantee himself the result of at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/08/19/081922288c6e4dffc985e081d04d3f32c6336e39.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Indeed, if all the numbers \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8e/1d/8e1de9046ffefbc640d39b2924c523e20c8f030b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e are greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, all the numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/75/68/75682fa4d05b4edde8fbe4595382bfb36996fe30.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e should also be greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e; but there are \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6e/74/6e74f0062ac86a68566cc12993cd1e078b9ed8d5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e that should be greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, while there are only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e) - \u003ci\u003er\u003c/i\u003e\u003c/span\u003e possible numbers from 1 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e to place; a contradiction (pigeonhole principle). On the other hand, the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e is easily reachable: place all the numbers less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/22/d6/22d6c92b0f413372452fabbb5b935590018e7a14.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e as, say, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1, \u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e)\u003c/sub\u003e\u003c/span\u003e; the first player will have to move to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e to achieve \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e. Thus, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fe/94/fe94a95cd30a1617ff3f704d42502b673ae7362a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eThe previous, rather formal argument can be intuitively restated as follows: suppose we put the numbers from 1 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e in that order to different subtrees of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. Once a subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e contains \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e numbers, the minimizing player can go to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and grab the current result. It follows that we may safely put \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003eu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e) - 1\u003c/span\u003e numbers to the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, and the next number (exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e) will be grabbed regardless of what we do (if we do not fail and let the minimizing player grab a smaller number).\u003c/p\u003e\u003cp\u003eThat DP scheme makes for an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e solution, as processing the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e children of each node is done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e (provided their results are already there). As an easy exercise, think about how the optimal arrangement of number in the leaves can be constructed; try to make implementation as simple as possible.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample solution\u003c/strong\u003e: \u003ca href\u003d\"/contest/538/submission/10973864\" title\u003d\"Submission 10973864 by Endagorion\"\u003e10973864\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge (medium)\u003c/strong\u003e. Suppose that we are given numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, and we want to construct a tree with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e leaves such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003eroot\u003c/i\u003e) \u003d \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003eroot\u003c/i\u003e) \u003d \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. For which numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is this possible? (I\u0027m sure you will like the answer for this one. \u003d)) Can you propose an algorithm that constructs such a tree?\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/538/problem/F\" title\u003d\"Codeforces Round 300\"\u003e538F - A Heap of Heaps\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eThe first approach\u003c/strong\u003e. For a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e and an element \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, how do we count the number of children of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e that violate the property? This is basically a range query \u0027how many numbers in the range are greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e\u0027 (because, evidently, children of any element occupy a subsegment of the array); the answers for every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e are exactly the sums of results for queries at all non-leaf vertices. Online data structures for this query type are rather involved; however, we may process the queries offline by decreasing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, with a structure that is able to support an array, change its elements and take sum over a range (e.g., Fenwick tree or segment tree). This can be done as follows: for every element of the initial array store 1 in the same place of the structure array if the element has already been processed, and 0 otherwise. Now, if we sum over the range for the element \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, only processed elements will have impact on the sum, and the result of the query will be exactly the number of elements greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. After all the queries for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, we put 1 in the corresponding element so that queries for smaller elements would take it into account. That makes for an \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/33/f7/33f732c68ccf85d0a1587d3267590a3b9a72010b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution. Estimate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e: notice that for a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e there are only \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/36/55/3655ae5be52e62d3d6d3b0d3888da4e84e99cd16.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e non-leaf vertices, thus the total number of queries will be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d2/ba/d2bae36798fdebe0f5c085032fdb42bc9dff79fa.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (harmonic sum estimation). To sum up, this solution works in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/68/0d/680df37526a87f1608d2113d52c2c681c0eccc1f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample solution (first approach)\u003c/strong\u003e: \u003ca href\u003d\"/contest/538/submission/10973867\" title\u003d\"Submission 10973867 by Endagorion\"\u003e10973867\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eThe second approach\u003c/strong\u003e. Let us index the elements of the array starting from 0. It is easy to check that for a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e the parent of the element \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the element \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/eb/1f/eb1fc0358eb3da3084396908fc4100ce3c972280.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. One can show that there are only \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a7/3e/a73e0f4f83b09236283bfc318f5168f0f65e0ddf.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e different elements that can be the parent of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for some \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Indeed, if \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/66/88/66883949b620ac3ec5e8d68c750f206fee749bd8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, the index of the parent is less that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/1b/901b8365b109c9cf1d043027c9331cc453f7b87f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and all \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/05/30/0530c8e590e2738230c10ff06319597a5b603b0a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e produce no more than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/1b/901b8365b109c9cf1d043027c9331cc453f7b87f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e different parents too. Moreover, each possible parent corresponds to a range of values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. To show that, solve the equality \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/be/dc/bedc89b0adcb101a0f76c4f5c6eb9a4f6a850c24.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Transform: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1b/a5/1ba5ce33c44c4be154ea0179d85336c01e06d401.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epk\u003c/i\u003e ≤ \u003ci\u003ev\u003c/i\u003e - 1 \u0026lt; (\u003ci\u003ep\u003c/i\u003e + 1)\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ae/58/ae5846ae4dab62cdb83fe8e2484705cd4f8289b9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bb/a7/bba7780ade9adf76445d9f8548e1d925652a33e5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. For every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e in the range above the property is either violated or not (that depends only on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e); if it\u0027s violated we should add 1 to all the answers for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e\u0027s in the range. That can be done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e offline using delta-encoding (storing differences between adjacent elements in the process and prefix-summing them in the end). There will be only \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f1/ab/f1ab78795841cf741db473c1781f3010d0fa5ccc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e queries to the delta array (as this is the number of different child-parent pairs for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e). This makes for a simple \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f1/ab/f1ab78795841cf741db473c1781f3010d0fa5ccc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution which barely uses any heavy algorithmic knowledge at all.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample solution (second approach)\u003c/strong\u003e: \u003ca href\u003d\"/contest/538/submission/10973868\" title\u003d\"Submission 10973868 by Endagorion\"\u003e10973868\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge 1 (medium)\u003c/strong\u003e. Denote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e the minimal number of elements that should be changed (each to a value of your choice) so that the array becomes a valid \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-ary heap. Can you find a single \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (for a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e) in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time? Can you find all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (for \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ek\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e) at once in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e time? \u003cem\u003eCan you do better than these estimates?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge 2 (hard)\u003c/strong\u003e. Solve the problem from Challenge 1 if an arbitrary rooted tree with numbers in vertices is given (that is, change the minimal number of elements so that no element is greater than its parent). Can you do it in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e? In \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ca/4c/ca4c38da7d143fc87534d50aa6d551dd861caae9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e? In \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e? (I\u0027m pretty certain my approach should work, but I would be glad if anyone could check me on this one. That being said, I\u0027m eagerly waiting for your comments.) \u003cem\u003eNot likely, but maybe you could do even better?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/538/problem/G\" title\u003d\"Codeforces Round 300\"\u003e538G - Berserk Robot \u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst of all, we\u0027ll simplify the problem a bit. Note that after every command the values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e are altered by \u003cspan class\u003d\"tex-span\"\u003e ± 1\u003c/span\u003e independently. Suppose we have a one-dimensional problem: given a sequence of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e\u0027s and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e\u0027s, provide a looped program of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e with commands \u003cspan class\u003d\"tex-span\"\u003e ± 1\u003c/span\u003e which agrees with the data. If we are able to solve this problem for numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e separately, we can combine the answers to obtain a correct program for the original problem; if one of the subproblems fails, no answer exists. (Most — if not all — participants who solved this problem during the contest did not use this trick and went straight ahead to the two-dimensional problem. While the idea is basically the same, I\u0027m not going into details for their approach, but you can view the submitted codes of contestants for more info on this one.)\u003c/p\u003e\u003cp\u003eOk, now to solve the one-dimensional problem. Let us change the command set from \u003cspan class\u003d\"tex-span\"\u003e ± 1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e + 0 /  + 1\u003c/span\u003e: set \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/91/0c/910ca5cafc4b309226e95f0aa222ad250f0b2382.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. If the division fails to produce an integer for some entry, we must conclude that the data is inconsistent (because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e should have the same parity). Now it is clear to see that the operation \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e becomes operation \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, and the operation \u003cspan class\u003d\"tex-span\"\u003e + 1\u003c/span\u003e stays as it is.\u003c/p\u003e\u003cp\u003eA program now is a string of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e that consists of 0\u0027s and 1\u0027s. Denote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e the number of 1\u0027s among the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e commands, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u003d \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for simplicity. Evidently, an equation \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f7/7c/f77c7c0257adb1a3c0bbf3181e6198feb04b16b8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e holds, because the full cycle is executed \u003cspan class\u003d\"tex-span\"\u003e⌊ \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e / \u003ci\u003el\u003c/i\u003e⌋\u003c/span\u003e times, and after that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1c/12/1c12a0aae62a467ed2fdc20d9d994ea5d8ab6355.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e more first commands. From this, we deduce \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ff/1b/ff1b19f2766ad563bcdb7c16736d964a4006b972.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eSuppose that we know what \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e is equal to. Using this, we can compute all \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/36/64/3664d3b3a98e2f116f835ea35d13284c64a26914.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e; they are \u003cem\u003efixed\u003c/em\u003e from now on. One more important fixed value is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003es\u003c/i\u003e\u003c/span\u003e. In any correct program \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e ≤ \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1\u003c/span\u003e, but not all values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e are known to us. When is it possible to fill out the rest of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to match a correct program? If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e are adjacent entries that are fixed (that is, every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e under \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003ec\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is not fixed), the inequality \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003eb\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e must hold (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e may coincide if for different \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e several values of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1c/12/1c12a0aae62a467ed2fdc20d9d994ea5d8ab6355.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e coincide). Furthermore, if the inequality holds for every pair of adjacent fixed entries, a correct program can be restored easily: move over the fixed values, and place \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e 1\u0027s between positions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e in any possible way, fill with 0\u0027s all the other positions in between.\u003c/p\u003e\u003cp\u003eThe trouble is that we don\u0027t know \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e in advance. However, we know the positions and the order in which fixed values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e come! Sort them by non-decreasing of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. All fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can be expressed as linear functions of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e; if we substitute these expressions in the \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003eb\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, from each pair of adjacent fixed values we obtain an inequality of general form \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ep\u003c/i\u003e·\u003ci\u003es\u003c/i\u003e + \u003ci\u003eq\u003c/i\u003e ≤ \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e are known values. If the obtained system of inequalities has a solution, we can get ourselves a valid \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and restore the program as discussed above.\u003c/p\u003e\u003cp\u003eIt suffices to notice that every inequality of the system has a set of solutions of general form \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e ≤ \u003ci\u003es\u003c/i\u003e ≤ \u003ci\u003er\u003c/i\u003e\u003c/span\u003e (if the set is not empty), where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e should be calculated carefully depending on the sign of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e. All the intervals should be intersected, and the resulting interval provides a range of valid values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eOverall, the solution works in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a6/79/a679d35ba265d33f391ec6072f49e33125e9a658.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, or even in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003el\u003c/i\u003e)\u003c/span\u003e if we use bucketing instead of sorting. Note that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e summand in the complexity is only there for the actual program reconstruction; if we were only to check the existence of a program, an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e solution would be possible.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample solution\u003c/strong\u003e: \u003ca href\u003d\"/contest/538/submission/10973870\" title\u003d\"Submission 10973870 by Endagorion\"\u003e10973870\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge (kinda hard)\u003c/strong\u003e. Under the same statement, how many (modulo a prime number) different programs agree with the given data? Assume that all elementary modulo operations (including division) take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e time. Can you solve this problem in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enl\u003c/i\u003e)\u003c/span\u003e? In \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003el\u003c/i\u003e)\u003c/span\u003e? \u003cem\u003eMaybe even better (in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/00/1d/001d01aa28f7ce6920ed41fc04f3599cd520aea0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, for example?)\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/538/problem/H\" title\u003d\"Codeforces Round 300\"\u003e538H - Summer Dichotomy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe problem has several possible approaches.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eThe first approach\u003c/strong\u003e. More popular one. Forget about \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e for a moment; we have to separate teachers into two groups so that no conflicting teachers are in the same group, and the number of students in each group can be chosen to satisfy all the teachers.\u003c/p\u003e\u003cp\u003eConsider a connected component via the edges which correspong to conflicting pairs. If the component is not bipartite, there is clearly no valid distribution. Else, the teachers in the component can be separated into two sets such that each set should be in the same group, and the groups for the sets should be different. The teachers in the same set will always go together in the same group, so we may as well make them into a single teacher whose interval is the intersection of all the intervals for the teachers we just compressed. Now, the graph is the set of disjoint edges (for simplicity, if a teacher does not conflict with anyone, connect him with a \u0027fake\u0027 teacher whose interval is \u003cspan class\u003d\"tex-span\"\u003e[0;∞]\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eConsider all possible distributions of students; they are given by a pair \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e. Provided this distribution, in what cases a pair of conflicting teachers can be arranged correctly? If the teachers\u0027 segments are \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e]\u003c/span\u003e, either \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e ≤ \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e ≤ \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e ≤ \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e ≤ \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e must hold. Consider a coordinate plane, where a point \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e corresponds to a possible distribution of students. For a pair of conflicting teachers the valid configurations lie in the union of two rectangles which are given by the inequalities above. Valid configurations that satisfy all pairs of teachers lie exactly in the intersection of all these figures. Thus, the problem transformed to a (kinda) geometrical one.\u003c/p\u003e\u003cp\u003eA classical approach to this kind of problems is to perform line-sweeping. Note that any \u0027union of two rectangles\u0027 figure (we\u0027ll shorten it to UOTR) is symmetrical with respect to the diagonal line \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. It follows that for any \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e the intersection of the vertical line given by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e with any UOTR is a subsegment of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e\u0027s. When \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e sweeps from left to right, for any UOTR there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e events when a subsegment changes. Sort the events altogether and perform the sweeping while updating the sets of subsegments\u0027 left and right ends and the subsegments intersection (which is easy to find, given the sets). Once the intersection becomes non-empty, we obtain a pair \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e that satisfies all the pairs of teachers; to restore the distribution is now fairly easy (don\u0027t forget that every teacher may actually be a compressed set of teachers!).\u003c/p\u003e\u003cp\u003eDidn\u0027t we forget something? Right, there are bounds \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e to consider! Consider an adjacent set of events which occurs when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e respectively. The intersection of subsegments for UOTRs obtained after the first event will stay the same while \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e ≤ \u003ci\u003ex\u003c/i\u003e \u0026lt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e. Suppose the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e\u0027s subsegmen intersection is equal to \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e;\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e. If we stay within \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e ≤ \u003ci\u003ex\u003c/i\u003e \u0026lt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, for a satisfying pair of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e the minimal value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003el\u003c/i\u003e\u003c/span\u003e, and the maximal value is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + \u003ci\u003er\u003c/i\u003e - 1\u003c/span\u003e. If this range does not intersect with \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003et\u003c/i\u003e;\u003ci\u003eT\u003c/i\u003e]\u003c/span\u003e, no answer is produced this turn. In the other case, choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e while satisfying all boundaries upon \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e (consider all cases the rectangle can intersect with a 45-angle diagonal strip). Thus, the requirement of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e does not make our life much harder.\u003c/p\u003e\u003cp\u003eThis solution can be implemented in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/df/44/df44cb6f3d798904ae907b1fdd6fab9850fadee8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e using an efficient data structure like \u003ccode\u003estd::set\u003c/code\u003e or any self-balancing BST for sets of subsegments\u0027 ends. The very same solution can be implemented in the flavour of \u003cem\u003erectangles union problem\u003c/em\u003e canonical solution: represent a query \u0027add 1 to all the points inside UORT\u0027 with queries \u0027add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to all the points inside a rectangle\u0027, and find a point with the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample solution (first approach)\u003c/strong\u003e: \u003ca href\u003d\"/contest/538/submission/10973887\" title\u003d\"Submission 10973887 by Endagorion\"\u003e10973887\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eThe second approach\u003c/strong\u003e. Less popular, and probably much more surprising.\u003c/p\u003e\u003cp\u003eImagine that the values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e are small. Introduce the set of boolean variables \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e which correspond to the event \u0027\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e does not exceed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e\u0027 (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is either 1 or 2, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e ranges from 0 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e). There are fairly obvious implication relations between them: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6a/12/6a12fe4192fba79363bd1da9cbc927646fbd791f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. As \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e ≤ \u003ci\u003eT\u003c/i\u003e\u003c/span\u003e, we must also introduce implications \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/95/62/956247b2060291974baf66e2f002251348f8252d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (here \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u0027\u003c/span\u003e is 1 or 2 not equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e) because if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e ≥ \u003ci\u003et\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e must be at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e - \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9b/22/9b225f2d8730c8ccdc02213e97c6e6a6c39ca534.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for a similar reason. In this, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u0026lt; 0\u003c/span\u003e clearly must be considered automatically false, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e ≥ \u003ci\u003eT\u003c/i\u003e\u003c/span\u003e must be considered automatically true (to avoid boundary fails).\u003c/p\u003e\u003cp\u003eThe last thing to consider is the teachers. For every teacher introduce a binary variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e which corresponds to the event \u0027teacher \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e tutors the first group\u0027. The implications \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f9/e0/f9e03f5a77cca1739c9af96e2646bd92b97e0b87.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6f/e5/6fe5b6fccc7f3b1dde4ec478d010bdae3b6b2865.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e are pretty much self-explanating. A conflicting pair of teachers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is resolved in a straightforward way: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1b/8a/1b8aa96111513afa9af12955d4d0c22a168bd484.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/69/a2/69a248f23239a6f6113af3890d44a3844287fbfa.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eIf a set of values for all the boolean variables described satisfies all the restrictions, a valid distribution can be restored explicitly: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e are maximal so that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1, \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2, \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e hold, and the teachers are distributed unequivocally by values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. It suffices to notice that the boolean system is a 2-SAT instance, and can be solved in linear time. If we count carefully, we obtain that the whole solution has linear complexity as well: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e + \u003ci\u003eT\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eDidn\u0027t we forget something? Right! The value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e may be too much to handle \u003cspan class\u003d\"tex-span\"\u003eΩ(\u003ci\u003eT\u003c/i\u003e)\u003c/span\u003e variables explicitly. To avoid that, one may notice that the set of possible values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e may be reduced to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e - \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. We can prove that by starting from any valid values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e and trying to make them as small as possible; the listed values are the ones we may end up with. Thus, we can only use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e variables instead of \u003cspan class\u003d\"tex-span\"\u003eΩ(\u003ci\u003eT\u003c/i\u003e)\u003c/span\u003e. The implications can be built similarily, but using lower/upper bound on the list of possible values instead of exact values (much care is advised!). Finally, this solution can be made to work in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/df/44/df44cb6f3d798904ae907b1fdd6fab9850fadee8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, with the logarithmic factor from all the sorting and lower/upperbounding.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample solution (second approach)\u003c/strong\u003e: \u003ca href\u003d\"/contest/538/submission/10973881\" title\u003d\"Submission 10973881 by Endagorion\"\u003e10973881\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge (easy, for a change)\u003c/strong\u003e Don\u0027t you think it\u0027s wrong that a group may be without a teacher altogether? Come up with an algorithm that finds a distribution that places at least one teacher in each group. The complexity should not become worse. \u003cem\u003eHow about at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e teachers in each group?\u003c/em\u003e\u003c/p\u003e\u003cp\u003eWhew, wasn\u0027t it a long run! I tried to be verbose and elaborate where it was possible, hope it was worth the wait. Let me know what you think of this write-up!\u003c/p\u003e\u003c/div\u003e","tags":["round #300","editorial"]}}