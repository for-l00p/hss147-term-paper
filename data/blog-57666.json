{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1518258343,"rating":0,"authorHandle":"Ahmad_Elsagheer","modificationTimeSeconds":1518258488,"id":57666,"title":"\u003cp\u003eFew notes regarding \u0026quot;Problem C. File Counter\u0026quot;\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e------ Start Spoiler ------\u003c/p\u003e\u003cp\u003eIt can be done using either fat nodes or path copying. In both cases, you will be the \u003cstrong\u003etree structure\u003c/strong\u003e for the project folder where each node will represent a node in the tree and points to the nodes of the subfolders.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eTo use fat nodes, you will simply save for every node its history and for query, you will get the most recent and relevant history record. By \u0026quot;relevant\u0026quot; I mean the history record of the most recent version that is an ancestor to the current version in the version tree. You can check Ghazy\u0027s 1st accepted submission for implementation. It\u0027s interesting and solved the problem we faced when implementing the fully-persistent array.\u003c/li\u003e   \u003cli\u003eTo use path copying, you will do something very similar to PersistentLinkedList. Instead of cloning a node by copying value and one link then updating this value and this link, you will clone multiple links which are the links to all subfolders then update the value and only one link. Also, we follow a deterministic path the target node with (i, idx). To find the folder, you can make a full search (DFS search will work). Since folder names are unique, there will be always one path from the current version root to the required node. You need to update this path (cloning all nodes on it in the way I have just described).\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e------ End Spoiler ------\u003c/p\u003e\u003cp\u003eYou must do it with \u003cstrong\u003epath copying\u003c/strong\u003e. However, I do encourage you to do both as that will be enough to grasp the concept of persistence with the two methods we discussed.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ePlease wrap your data structure in a class, so the internal structure is invisible to the main method.\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}