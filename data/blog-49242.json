{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1482420981,"rating":0,"authorHandle":"elena","modificationTimeSeconds":1482420981,"id":49242,"title":"\u003cp\u003eПрограмма экзамена\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eПрограмма экзамена \u003cbr /\u003e\u003c/p\u003e \u003col\u003e   \u003cli\u003eКлассификация программных объектов (по времени жизни). Динамические программные объекты. Примитивные типы и типы-оболочки (автоупаковка и автораспаковка).\u003c/li\u003e   \u003cli\u003eСравнительный анализ концепций структурного и объектно-ориентированного программирования.\u003c/li\u003e   \u003cli\u003eСтруктура программы в Java. Виды приложений и различия в составе их кода. Пакеты. Назначение, принципы формирования. Импорт. Статический импорт.\u003c/li\u003e   \u003cli\u003eПонятия класса и объекта. Структура описания класса, его состав. Методы класса. Статические поля. Доступ к членам класса.\u003c/li\u003e   \u003cli\u003eОбъекты. Инкапсуляция. Директивы / модификаторы видимости. Наследование. Обращение к полям и методам суперкласса. Совместимость и преобразование типов. Оператор instanceof.\u003c/li\u003e   \u003cli\u003eОбъекты. Полиморфизм. Виртуальные методы. Представление объектов в памяти. Таблицы методов, замещение методов.\u003c/li\u003e   \u003cli\u003eОбъекты: перегружаемые методы. Запрет на переопределение метода. Перегрузка метода с аргументом переменной длины.\u003c/li\u003e   \u003cli\u003eОбъекты: конструкторы. Конструктор по умолчанию. Статическая инициализация полей. Разрушение объектов. Сборка мусора.\u003c/li\u003e   \u003cli\u003eПонятие интерфейса. Структура описания интерфейса, его состав. Реализация интерфейсов. Композиция.\u003c/li\u003e   \u003cli\u003eВложенные (статические) и внутренние (нестатические) классы: описание, наследование. Вложенные интерфейсы.\u003c/li\u003e   \u003cli\u003eКласс Object (Java). Основные поля и методы.\u003c/li\u003e   \u003cli\u003eПонятие исключительной ситуации (ИС). Классификация ИС. Примеры. Обработка исключительных ситуаций (ИС). Оператор try – catch – finally\u003c/li\u003e   \u003cli\u003eВозбуждение исключительных ситуаций. Создание собственных исключительных ситуаций. «Пропускание» исключений. Предложение throws. Переопределение методов при наличии throws.\u003c/li\u003e   \u003cli\u003eПотоки. Класс Thread. Примеры использования\u003c/li\u003e   \u003cli\u003eПотоки. Использование интерфейса Runnable для организации потоков.\u003c/li\u003e   \u003cli\u003eСинхронизация потоков. Основные средства для работы с потоками.\u003c/li\u003e   \u003cli\u003eНастраиваемые типы (generic). Использование настраиваемых типов. Применение ограничений.\u003c/li\u003e   \u003cli\u003eКлассы-коллекции. Использование и настройка коллекций. Перебор элементов коллекции.\u003c/li\u003e   \u003cli\u003eОрганизация ввода / вывода. Работа с файлами. Форматированный ввод / вывод. Классы Scanner и Formatter, их взаимодействие с классами потокового ввода / вывода.\u003c/li\u003e   \u003cli\u003eЛямбда-выражения и их использование. Функциональные интерфейсы.\u003c/li\u003e   \u003cli\u003eКонцепция потоковых (stream) вычислений. Stream API.\u003c/li\u003e   \u003cli\u003eТипичные операции в классах Stream API.\u003c/li\u003e   \u003cli\u003eМодель событий в Java. Компоненты Swing.\u003c/li\u003e   \u003cli\u003eКонцепция организации интерфейса в Java FX.\u003c/li\u003e   \u003cli\u003eТипичные задачи, решаемые Java FX компонентами\u003c/li\u003e   \u003cli\u003eДинамические структуры данных. Списки (одно- и двунаправленные). Основные операции над списками.\u003c/li\u003e   \u003cli\u003eДинамические структуры данных. Очереди, стеки, деки. Основные операции при работе с ними.\u003c/li\u003e   \u003cli\u003eРекурсия. Выполнение рекурсивных вызовов при спуске и при возврате.\u003c/li\u003e   \u003cli\u003eДинамические структуры данных. Деревья. Бинарные деревья. Обход дерева.\u003c/li\u003e   \u003cli\u003eДинамические структуры данных. Вставка в дерево и удаление элементов из дерева.\u003c/li\u003e   \u003cli\u003eЗадача сортировки. Простые методы сортировки и их анализ.\u003c/li\u003e   \u003cli\u003eУсовершенствованные методы сортировки: сортировка Шелла, пирамидальная сортировка, быстрая сортировка.\u003c/li\u003e   \u003cli\u003eУсовершенствованные методы сортировки: сортировка слияниями и поразрядная сортировка.\u003c/li\u003e   \u003cli\u003eЗадача поиска. Последовательный поиск. Бинарный поиск. Связь сортировки и поиска\u003c/li\u003e   \u003cli\u003eРазреженные таблицы. Дерево отрезков. Класс задач, решаемый с помощью этих структур данных.\u003c/li\u003e   \u003cli\u003eОсновные алгоритмы на графах. Поиск в глубину.\u003c/li\u003e   \u003cli\u003eОсновные алгоритмы на графах. Поиск в ширину.\u003c/li\u003e   \u003cli\u003eОсновные алгоритмы на графах. Поиск кратчайших путей в графах с ребрами неотрицательного веса (алгоритм Дейкстры).\u003c/li\u003e   \u003cli\u003eОсновные алгоритмы на графах. Поиск кратчайших путей в графах без циклов отрицательной стоимости (алгоритм Флойда).\u003c/li\u003e   \u003cli\u003eОсновные алгоритмы на графах. Минимальное остовное дерево (алгоритмы Прима и Крускала).\u003c/li\u003e   \u003cli\u003eДинамическое программирование как одна из альтернатив рекурсии. Анализ применимости.\u003c/li\u003e   \u003cli\u003e«Жадные» алгоритмы. Анализ применимости.\u003c/li\u003e \u003c/ol\u003e\u003c/div\u003e","tags":["экзамен"]}}