{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1430421661,"rating":103,"authorHandle":"dalex","modificationTimeSeconds":1430424676,"id":17643,"title":"\u003cp\u003eРазбор задач Codeforces Round #301 (Div. 2)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/540/problem/A\" title\u003d\"Codeforces Round 301 (Div. 2)\"\u003e540A - Combination Lock\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFor every symbol we should determine how to rotate the disk. This can be done either by formula: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003eabs\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]), 10 - \u003ci\u003eabs\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]))\u003c/span\u003e or even by the two \u003ccode\u003efor\u003c/code\u003e cycles: in both directions.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/540/problem/B\" title\u003d\"Codeforces Round 301 (Div. 2)\"\u003e540B - School Marks\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst count the number of marks that are less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. If there are more than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fa/c4/fac4fc4bd8ab1b29b177bf8866dfe44561a7eb1b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e such marks, we can\u0027t satisfy the second condition (about the median), and the answer is -1. Otherwise we can get exactly such number of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e marks so that the total number of marks greater than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e is at least \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cb/41/cb416d694bf72938d2862805f66205a98474e96a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (maybe it\u0027s already satisfied). This is the required action for satisfying the second condition.\u003c/p\u003e\u003cp\u003eNow, in order not to break the first condition, get the remaining marks as lower as possible — all ones — and check the sum of the marks. If it is greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, the answer is -1, otherwise the correct answer is found.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/540/problem/C\" title\u003d\"Codeforces Round 301 (Div. 2)\"\u003e540C - Ice Cave\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThere are three cases here, though some of them can be merged.\u003c/p\u003e \u003col\u003e   \u003cli\u003eIf the start and finish cells are equal, let\u0027s count the intact neighbours of this cell. If there is one, move there and instantly move back — the answer is YES. Otherwise it\u0027s NO.\u003c/li\u003e   \u003cli\u003eIf the start and finish cells are neighbours, the solution depends on the type of the destination cell. If it\u0027s cracked, the answer is YES — we can just move there and fall down. Otherwise it must have at least one intact neighbour to get the positive answer — we can move to the finish cell, then to this intact neighbour, and then return to the finish cell.\u003c/li\u003e   \u003cli\u003eIn the general case, check if the path from the start cell to the finish cell exists. If it doesn\u0027t, the answer is NO. Otherwise check the type of the destination cell. If it\u0027s cracked, it must have at least one intact neighbour, and if it\u0027s intact, it must have two intact neighbours.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003e\u003ca href\u003d\"/contest/540/problem/D\" title\u003d\"Codeforces Round 301 (Div. 2)\"\u003e540D - Bad Luck Island\u003c/a\u003e (my code: \u003ca href\u003d\"http://pastebin.com/3s6dRK3A\"\u003ehttp://pastebin.com/3s6dRK3A\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eLet\u0027s count the values dp[r][s][p] — the probability of the situation when r rocks, s scissors and p papers are alive. The initial probability is 1, and in order to calculate the others we should perform the transitions.\u003c/p\u003e\u003cp\u003eImagine we have r rocks, s scissors and p papers. Let\u0027s find the probability of the rock killing scissors (the other probabilities are calculated in the same way). The total number of the possible pairs where one species kills the other one is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ers\u003c/i\u003e + \u003ci\u003erp\u003c/i\u003e + \u003ci\u003esp\u003c/i\u003e\u003c/span\u003e, and the number of possible pairs (rock, scissors) is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ers\u003c/i\u003e\u003c/span\u003e. As all meetings are equiprobable, the probability we want to find is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/08/29/0829a363b348a282385e41f69bcf7caa6a7bfaad.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. This is the probability with which we go the the state dp[r][s — 1][p], with the number of scissors less by one.\u003c/p\u003e\u003cp\u003eIn the end, for example, to get the probability of the event that the rocks are alive, we should sum all values dp[i][0][0] for i from 1 to r (the same goes to the other species).\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/540/problem/E\" title\u003d\"Codeforces Round 301 (Div. 2)\"\u003e540E - Infinite Inversions\u003c/a\u003e (my code: \u003ca href\u003d\"http://pastebin.com/QFEMRbNP\"\u003ehttp://pastebin.com/QFEMRbNP\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eAt first find the position of each element which is used in swap (using map). Now let\u0027s find the answer. It consists of the two parts. First part is the number of inversions formed by only whose elements which took part in the swaps. They can be counted by one of the standard ways: mergesort or Fenwick tree. The second part is the number of inversions formed by pairs of elements where one element has been swapped even once, and the other element stayed at his position. Let\u0027s consider the following test:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e2\n2 6\n4 8\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe global sequence will look as follows: [1 6 3 8 5 2 7 4 9 ...], and here is the array of swapped elements: [6 8 2 4].\u003c/p\u003e\u003cp\u003eLet\u0027s understand with which numbers the number 8 forms the inversions. The only elements that could do that are the elements between the initial position of the number 8 (where the number 4 is now) and its current position: [5 2 7]. There are two numbers on this segment which didn\u0027t take part in swaps: 5 and 7. The number 2 should not be counted as it took part in the swaps and we have already counted it in the first part of the solution.\u003c/p\u003e\u003cp\u003eSo we should take the count of numbers between 8\u0027s indices in the global sequence (\u003cspan class\u003d\"tex-span\"\u003e8 - 4 - 1 \u003d 3\u003c/span\u003e) and subtract the count of numbers between its indices in the swaps array (\u003cspan class\u003d\"tex-span\"\u003e4 - 2 - 1 \u003d 1\u003c/span\u003e). We\u0027ll get the number of inversions formed by the element 8 and the elements which haven\u0027t moved at all, it\u0027s 2. Counting this value for all elements which have been swapped at least once, we get the second part of the answer. All operations in the second part of the solution can be performed using sorts and binary searches.\u003c/p\u003e\u003c/div\u003e","tags":["round 301","301","div 2","editorial"]}}