{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1427747487,"rating":0,"authorHandle":"tejas.pandey","modificationTimeSeconds":1427747487,"id":17212,"title":"\u003cp\u003eTrie Topcoder Tutorial Doubt\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eToday I was learning Trie from topcoder tutorial \u003ca href\u003d\"https://www.topcoder.com/community/data-science/data-science-tutorials/using-tries/\"\u003eTopcoder Trie Tutorial\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eI am having confusion in \u003cstrong\u003ecountPrefixes function\u003c/strong\u003e in topcoder tutorial , i am not able to understand last line of this function.\u003cbr /\u003e \u003cstrong\u003ereturn countWords(edges[k], prefix)\u003c/strong\u003e \u003cbr /\u003e If someone can explain use of above line. \u003cbr /\u003e So i modified countPrefixes function and have written this code for trie following topcoder tutorial . Not sure it is correct way of implementing or not.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair\u0026lt;int,int\u0026gt; ii;\ntypedef vector\u0026lt;int\u0026gt; vi;\ntypedef vector\u0026lt;ii\u0026gt; vii;\n\nconst int  MOD\u003d1000000007;\nconst int  INF\u003d int(1e9),ALPHA\u003d26;\nstring s;\nint n;\nstruct Trie {\n    int words,prefixes;\n    Trie *edges[ALPHA];\n    Trie() {\n        words\u003d0;\n        prefixes\u003d0;\n        for(int i\u003d0;i\u0026lt;ALPHA;i++) {\n            edges[i]\u003dNULL;\n        }\n    }\n};\nTrie root;\n\nvoid addword(Trie *vertex,int cur) {\n    if(cur\u003d\u003dn) {\n        vertex-\u0026gt;words\u003dvertex-\u0026gt;words+1;\n    } else {\n        vertex-\u0026gt;prefixes\u003dvertex-\u0026gt;prefixes+1;\n        if(vertex-\u0026gt;edges[s[cur]-\u0027a\u0027]\u003d\u003dNULL) {\n            vertex-\u0026gt;edges[s[cur]-\u0027a\u0027]\u003dnew Trie;\n        }\n        \n        addword(vertex-\u0026gt;edges[s[cur]-\u0027a\u0027],cur+1);\n    }\n}\nint countWords(Trie *vertex , int cur) {\n    if(cur\u003d\u003dn) {\n        return vertex-\u0026gt;words;\n    } else if(vertex-\u0026gt;edges[s[cur]-\u0027a\u0027]\u003d\u003dNULL) {\n        return 0;\n    } else {\n        return countWords(vertex-\u0026gt;edges[s[cur]-\u0027a\u0027],cur+1);\n    }\n}\nint countPrefixes(Trie *vertex , int cur) {\n    if(cur\u003d\u003dn) {\n        return vertex-\u0026gt;prefixes+vertex-\u0026gt;words ;\n    } else if(vertex-\u0026gt;edges[s[cur]-\u0027a\u0027]\u003d\u003dNULL) {\n        return 0;\n    } else {\n        return countPrefixes(vertex-\u0026gt;edges[s[cur]-\u0027a\u0027],cur+1);\n    }\n}\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\n    int q;\n    cin\u0026gt;\u0026gt;q;\n\n    while(q--) {\n        cin\u0026gt;\u0026gt;s;\n        n\u003ds.size();\n        addword(\u0026amp;root,0);\n    }\n    cin\u0026gt;\u0026gt;q;\n    while(q--) {\n        cin\u0026gt;\u0026gt;s;\n        n\u003ds.size();\n        cout\u0026lt;\u0026lt;countWords(\u0026amp;root,0)\u0026lt;\u0026lt;\u0026quot; \u0026quot;\u0026lt;\u0026lt;countPrefixes(\u0026amp;root,0)\u0026lt;\u0026lt;endl;\n    }\n    \n\n\treturn 0;\n\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["trie","help","implementation","c++"]}}