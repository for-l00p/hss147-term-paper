{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1502643949,"rating":0,"authorHandle":"Light","modificationTimeSeconds":1502644177,"id":53831,"title":"\u003cp\u003eWeek 4 Discussion\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eANNOUNCEMENT:\u003c/strong\u003e Don\u0027t forget that there\u0027s no class for the next Saturday. So our next class will be on 26/8/2017.\u003c/p\u003e\u003cp\u003eAlso, I\u0027ve added a new contest with 15 problems in it, be sure to try them all out.\u003c/p\u003e \u003chr /\u003e\u003cp\u003eYesterday, first problem we talked about was: \u003ca href\u003d\"http://www.spoj.com/problems/CSUMQ/\"\u003ehttp://www.spoj.com/problems/CSUMQ/\u003c/a\u003e\u003c/p\u003e\u003cp\u003eOur first observation that the time limit was very high (7s), so we could implement the Brute Force solution â€” simply, for each query loop from left to right and add the numbers.\u003c/p\u003e\u003cp\u003eBut then, we discussed the case if the time limit was only (1s) then our solution had 1e9 complexity and wouldn\u0027t pass.\u003c/p\u003e\u003cp\u003eSo we talked about Prefix Sum (also known as Cumulative Sum). In which we have an array that contains for each index \u003cem\u003ei\u003c/em\u003e, the summation of elements from the beginning of the array till index \u003cem\u003ei\u003c/em\u003e (sum from index 0 till index \u003cem\u003ei\u003c/em\u003e).\u003c/p\u003e\u003cp\u003eExample:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ev [1, 3, 2, 5]\ns [1, 4, 6, 11]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo now, if we want the summation of elements from L to R, then we can find it simply by taking the summation of elements from 0 till R, and removing the summation of all elements that are before L. Meaning: \u003ccode\u003esummation(L,R) \u003d s[R] - S[L-1]\u003c/code\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eWe have to be careful in case L was 0, because we shouldn\u0027t access index -1 in the array s -\u003c/li\u003e \u003c/ul\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\nconst int N \u003d 100000 + 10;\nint n,q,v[N];\n \nlong long sum[N];\n \nint main(){\n\tcin\u0026gt;\u0026gt;n;\n\tfor(int i\u003d0; i\u0026lt;n; ++i)\n\t\tscanf(\u0026quot;%d\u0026quot;,\u0026amp;v[i]);\n\tsum[0]\u003dv[0];\n\tfor(int i\u003d1; i\u0026lt;n; ++i)\n\t\tsum[i]\u003dv[i]+sum[i-1];\n \n\tcin\u0026gt;\u0026gt;q;\n\tfor(int l,r,i\u003d0; i\u0026lt;q; ++i){\n\t\tscanf(\u0026quot;%d %d\u0026quot;,\u0026amp;l,\u0026amp;r);\n\t\tlong long ans\u003d0;\n\t\tif(l\u0026gt;0)\n\t\t\tans\u003dsum[r]-sum[l-1];\n\t\telse\n\t\t\tans\u003dsum[r];\n\t\tprintf(\u0026quot;%lld\\n\u0026quot;, ans);\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eNext problem we discussed was Books (you can find it in the Week 4 contest I added). Where we wanted to find the biggest sub-array such that the summation of elements in it are less than or equal to \u003cem\u003et\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eWe discussed three solutions for this problem:\u003c/p\u003e\u003cp\u003e1+2) We discovered that we could use Binary Search to find the answer, using the idea that if we have enough time to read \u003cem\u003eX\u003c/em\u003e books then obviously we can read less than \u003cem\u003eX\u003c/em\u003e books, and if we can\u0027t read \u003cem\u003eY\u003c/em\u003e books then also obviously we can\u0027t read more than \u003cem\u003eY\u003c/em\u003e books. Only thing left, is how to check if I can read exactly \u003cem\u003eX\u003c/em\u003e books or not (trying to sum each \u003cem\u003eX\u003c/em\u003e books together is N^2 and will give us TLE). We found two ways to do so which lead us to two different solutions:\u003c/p\u003e\u003cp\u003eA- We can begin by summing the first \u003cem\u003eX\u003c/em\u003e books, and then moving to the right by only removing from the sum the first book I have and adding to the sum the next book I go to (Two Pointers solution).\u003c/p\u003e\u003cp\u003eEx:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ev [1, 3, 2, 5, 1]\nN\u003d5, X\u003d3;\nv [(1, 3, 2), 5, 1]\nHere, S\u003d6.\nMoving right:\nS-\u003d1;\nS+\u003d5;\nv [ 1, (3, 2, 5), 1] \nS now is equal to 10\nMoving right:\nS-\u003d3;\nS+\u003d1;\nv [ 1, 3, (2, 5, 1)]\nS now is equal to 8\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo this way, we can find the summation of every sub-array of size \u003cem\u003eX\u003c/em\u003e using only a single loop. The complexity is O(logn) for the Binary Search and for each check it\u0027s O(n), which gives the total complexity of O(nlogn).\u003c/p\u003e\u003cp\u003eB- Another way to find the summation of every sub-array of size \u003cem\u003eX\u003c/em\u003e is to use the Prefix Sum technique, in which we can find the summations easily after preparing the array (same as the first problem). Complexity here is also O(nlogn)\u003c/p\u003e\u003cp\u003e3) The third and last way we discussed to solve the problem was trying to find for each index \u003cem\u003ei\u003c/em\u003e, if I start my sub-array in this index, what\u0027s the maximum elements to the right I can take such that the summation of this sub-array is less than or equal to \u003cem\u003et\u003c/em\u003e. Once we find that, the maximum size of all the sub-arrays (starting at each index) is our answer. Then we found that we could do that using Binary Search + Prefix Sum as follows: First we do a Binary Search to find the rightmost element of our array, then check if the summation from index \u003cem\u003ei\u003c/em\u003e till that element is less than or equal to \u003cem\u003et\u003c/em\u003e, if it is then we should try indices bigger than the current one, and if it doesn\u0027t then we should try indices less than the current one (basic Binary Search logic).\u003c/p\u003e\u003cp\u003eWe only wrote the code for the last solution, and I strongly recommend you to write the first two yourselves to strengthen your implementation skills.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\nconst int N \u003d 100000 + 10;\nint n,t,v[N],sum[N];\n\nint main(){\n\tcin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;t;\n\tfor(int i\u003d1; i\u0026lt;\u003dn; ++i)\n\t\tscanf(\u0026quot;%d\u0026quot;,\u0026amp;v[i]);\n\tfor(int i\u003d1; i\u0026lt;\u003dn; ++i)\n\t\tsum[i]\u003dsum[i-1]+v[i];\n\tint mx\u003d0;\n\tfor(int i\u003d1; i\u0026lt;\u003dn; ++i){\n\t\tint lo\u003di, hi\u003dn, md, bst\u003d0;\n\t\twhile(lo\u0026lt;\u003dhi){\n\t\t\tmd\u003d(lo+hi)/2;\n\t\t\tint s\u003dsum[md]-sum[i-1];\n\t\t\tif(s\u0026lt;\u003dt){\n\t\t\t\tbst\u003dmd-i+1;\n\t\t\t\tlo\u003dmd+1;\n\t\t\t}else\n\t\t\t\thi\u003dmd-1;\n\t\t}\n\t\tif(bst\u0026gt;mx)\n\t\t\tmx\u003dbst;\n\t}\n\tcout\u0026lt;\u0026lt;mx\u0026lt;\u0026lt;endl;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThen we discussed the problem Cut Ribbon (also added in the contest), which I will leave it for you to try it out and we might discuss the solution in our next class. \u003c/p\u003e\u003cp\u003eThen at last we discussed the definition of Recursion, you can read more about it here: \u003ca href\u003d\"https://www.topcoder.com/community/data-science/data-science-tutorials/an-introduction-to-recursion-part-1/\"\u003ehttps://www.topcoder.com/community/data-science/data-science-tutorials/an-introduction-to-recursion-part-1/\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAnd here are a few codes that you can try to find the output of it yourself before running the code. I also advise you to play around Recursion a bit till you fully understand it.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nvoid f3(){\n\tcout\u0026lt;\u0026lt;\u0026quot;f3 in\\n\u0026quot;;\n\tcout\u0026lt;\u0026lt;\u0026quot;f3 out\\n\u0026quot;;\n}\nvoid f2(){\n\tcout\u0026lt;\u0026lt;\u0026quot;f2 in\\n\u0026quot;;\n\tf3();\n\tcout\u0026lt;\u0026lt;\u0026quot;f2 out\\n\u0026quot;;\n}\nvoid f1(){\n\tcout\u0026lt;\u0026lt;\u0026quot;f1 in\\n\u0026quot;;\n\tf2();\n\tf3();\n\tcout\u0026lt;\u0026lt;\u0026quot;f1 out\\n\u0026quot;;\n}\nint main(){\n\tf1();\t\n\t\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nvoid rec(int x){\n\tif(x\u003d\u003d0)\n\t\treturn;\n\tcout\u0026lt;\u0026lt;\u0026quot;I\u0027m \u0026quot;\u0026lt;\u0026lt;x\u0026lt;\u0026lt;endl;\n\trec(x-1);\n\tcout\u0026lt;\u0026lt;\u0026quot;Hi \u0026quot;\u0026lt;\u0026lt;x-1\u0026lt;\u0026lt;endl;\n}\nint main(){\n\trec(6);\t\n\t\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\nint fib(int x){\n\tif(x\u003d\u003d0)\n\t\treturn 0;\n\tif(x\u003d\u003d1)\n\t\treturn 1;\n\treturn fib(x-1)+fib(x-2);\n}\nint main(){\n\tfor(int i\u003d0; i\u0026lt;15; ++i)\n\t\tcout\u0026lt;\u0026lt;fib(i)\u0026lt;\u0026lt;\u0026quot; \u0026quot;;\t\n\t\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eGood luck! Train hard and if you have any problems you can always message me :D\u003c/p\u003e\u003c/div\u003e","tags":[]}}