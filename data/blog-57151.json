{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1516046095,"rating":0,"authorHandle":"nikizakr","modificationTimeSeconds":1516046569,"id":57151,"title":"\u003cp\u003eHelp In Complexity \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003ethe build function in segment tree : \u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid build(int id \u003d 1,int l \u003d 0,int r \u003d n){\n\tif(r - l \u0026lt; 2){\t//\tl + 1 \u003d\u003d r\n\t\ts[id] \u003d a[l];\n\t\treturn ;\n\t}\n\tint mid \u003d (l+r)/2;\n\tbuild(id * 2, l, mid);\n\tbuild(id * 2 + 1, mid, r);\n\ts[id] \u003d s[id * 2] + s[id * 2 + 1];\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003edivide and conquer algorithm to find maximum element in array : \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint Max(int s \u003d 1 , int e \u003d n){\n      if(s \u003d\u003d e) return arr[s] ; \n      int choice1 \u003d arr[s] , choice2 \u003d arr[e] ; \n      choice1 \u003d max( choice1 , Max( s , (s + e)/2 ) ; \n      choice2 \u003d max( choice2 , Max( (s + e)/2 + 1 , e )   ;\n     return max(choice1 , choice2)  ; \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewhy the complexity of the first function is O( n * log(n) ) And the second is O(n) thanks for your help :D \u003c/p\u003e\u003c/div\u003e","tags":[]}}