{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1439997507,"rating":69,"authorHandle":"Enchom","modificationTimeSeconds":1439997507,"id":19862,"title":"\u003cp\u003eFFT and NTT\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello everybody,\u003c/p\u003e\u003cp\u003eIt often happens that I have to multiply polynomials quickly and of course \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fast_Fourier_transform\"\u003eFFT\u003c/a\u003e is the fastest way to do so. However, I\u0027ve heard that FFT can have precision errors. I\u0027m not very familiar with the mathematical theory behind it, so I was wondering how can I know whether precision errors will occur and what to do to avoid them. I\u0027ve also heard about NTT (Number Theoretic Transform) which is similar to FFT but it works with integers only (using modular arithmetics?) but I don\u0027t know much about it.\u003c/p\u003e\u003cp\u003eSo my questions are :\u003c/p\u003e\u003cp\u003e1) How can I know whether regular FFT using complex numbers would give precise errors, what does it depend on?\u003c/p\u003e\u003cp\u003e2) Is there somewhere I can read about NTT and how it works. I don\u0027t have strong mathematical background so something more competitive-programming oriented would be perfect. Additionally, is NTT always precise?\u003c/p\u003e\u003cp\u003e3) Could someone provide quick and simple implementations of FFT/Karatsuba/NTT of simple polynomial multiplication? I\u0027ve written FFT and Karatsuba before, but my implementations were so bad that they were often outperformed by well-written quadratic solutions.\u003c/p\u003e\u003cp\u003eI do know that these questions were probably asked before so I apologize beforehand. I tried to google but most things I found were math-oriented.\u003c/p\u003e\u003cp\u003eThanks in advance :)\u003c/p\u003e\u003c/div\u003e","tags":[]}}