{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1490822817,"rating":5,"authorHandle":"bssanches","modificationTimeSeconds":1490822817,"id":51317,"title":"\u003cp\u003eAula 3\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eOlás, segue um resumo da aula\u003c/p\u003e\u003ch4\u003eFor aninhado\u003c/h4\u003e\u003cp\u003e\u003ccode\u003efor\u003c/code\u003e são comandos que podem ser aninhados (Postos um dentro do outro), assim como os \u003ccode\u003eif\u003c/code\u003e. Um exemplo de como fazer isso:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (int i \u003d 0; i \u0026lt; 10; i++) //Esse for vai executar 10 vezes\n{\n    for (int j \u003d 0; j \u0026lt; 5; j++) //Esse for vai executar 5 vezes pra cada iteração do for de cima\n    {\n        printf(\u0026quot;%d %d\\n\u0026quot;, i, j); //Esse printf vai ser executado 50 vezes\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003eContar operações\u003c/h4\u003e\u003cp\u003ePara contar operações só iremos considerar os \u003ccode\u003efor\u003c/code\u003e. Para calcular as operações precisamos considerar quantas vezes o que está dentro do \u003ccode\u003efor\u003c/code\u003e será executado. Por exemplo:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (int i \u003d 0; i \u0026lt; 100; i++) //Esse for vai executar 100 vezes\n{\n     //codigo que n seja outro for e será executado 100 vezes, por tanto 100 operações\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOutro exemplo:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (int i \u003d 0; i \u0026lt; 100; i++) //Esse for vai executar 100 vezes\n{\n    for (int j \u003d 0; j \u0026lt; 5; j++) //Esse for vai executar 5 vezes\n    {\n        //codigo que n seja outro for e será executado 500 vezes, por tanto 500 operações\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e10^8 operações demoram 1s para serem executados! Calcule quantas operações seu código executa antes de submeter para não receber o veredito \u0026quot;Timelimit exceeded\u0026quot;\u003c/p\u003e\u003ch4\u003eMatrizes\u003c/h4\u003e\u003cp\u003eUma matriz pode ser vista como um conjunto de vetores, da mesma forma que vetores podem ser vistos com um conjunto de variaveis.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/6e/bc/6ebc37f1555b5c83ae343f105d04c921633c5161.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eO primeiro indice de uma matriz representa a linha, enquanto o segundo representa a coluna, por exemplo:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr /\u003eint mat[100][5]; //declara uma matriz de 100 linhas e 5 colunas\n\nfor (int i \u003d 0; i \u0026lt; 100; i++)\n{\n    for (int j \u003d 0; j \u0026lt; 5; j++)\n    {\n         scanf(\u0026quot;%d\u0026quot;, \u0026amp;mat[i][j]); //le o elemento na linha i coluna j\n    }\n}\n\n\nfor (int i \u003d 0; i \u0026lt; 100; i++)\n{\n    for (int j \u003d 0; j \u0026lt; 5; j++)\n    {\n         printf(\u0026quot;%d\\n\u0026quot;, mat[i][j]); //imprime o elemento na linha i e coluna j\n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eVale lembrar que \u003ccode\u003ei++\u003c/code\u003e é a mesma coisa que \u003ccode\u003ei \u003d i + 1\u003c/code\u003e, assim como \u003ccode\u003ei--\u003c/code\u003e é a mesma coisa que \u003ccode\u003ei \u003d i - 1\u003c/code\u003e\u003c/p\u003e\u003cp\u003eO tamanho de uma matriz é dado pela multiplicação de suas dimensões, por tanto a matriz acima tem 500 de tamanho, ou seja equivale a um vetor de 500 posições (Tentem manter suas matrizes/vetores com no máximo 10^6 de tamanho)\u003c/p\u003e\u003ch4\u003eStruct\u003c/h4\u003e\u003cp\u003eUma \u003ccode\u003estruct\u003c/code\u003e é uma variavel customizada, no sentido de que podemos colocar o que quisermos dentro dela. Por exemplo\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estruct exemplo{\n     int idade;\n     char nome[100];\n};\n\nint main()\n{\n    exemplo ex;\n    ex.idade \u003d 100;\n    ex.nome[0] \u003d \u0027a\u0027;\n    ex.nome[1] \u003d \u0027b\u0027;\n    ex.nome[2] \u003d \u0027a\u0027;\n    ex.nome[3] \u003d \u0027\\0\u0027;\n    printf(\u0026quot;nome \u003d %s\\nidade \u003d %d\\n\u0026quot;,ex.nome, ex.idade);\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eO uso de structs irá ser mais util mais pra frente!\u003c/p\u003e\u003cp\u003eLembrente: Sempre inicializem suas variaveis! Variaveis declaradas dentro da \u003ccode\u003emain\u003c/code\u003e possuem valores aleatórios (Depende do que estava executando na posição de memória em que seu programa está agora), variaveis declaradas fora da main inicializam automaticamente com 0!\u003c/p\u003e\u003cp\u003eAbraços!\u003c/p\u003e\u003c/div\u003e","tags":[]}}