{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1440554039,"rating":0,"authorHandle":"pimenta","modificationTimeSeconds":1446529955,"id":19979,"title":"\u003cp\u003eImprove minimum spanning tree with new edge, with better running time than O(|V|)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThe problem gives a MST \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e and a series of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e queries, each one with a new edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e \u003d {\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e}\u003c/span\u003e such that no edge between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e exists in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e. For every query, we have to improve \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e and print the new weight of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe best I can do is run a DFS (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003eV\u003c/i\u003e|)\u003c/span\u003e) to find the current path \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, and find the heaviest edge \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a0/93/a0935d3c0d2875c6e0308313e7e91dca66efc1e0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e. If \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/70/73/707314668ff81138f39fa3cc4d69621fb5d9b9b3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we improve \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e removing \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a0/93/a0935d3c0d2875c6e0308313e7e91dca66efc1e0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and inserting \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e. The overall running time for a test case is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eQ\u003c/i\u003e|\u003ci\u003eV\u003c/i\u003e|)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eDoes anybody know an asymptotically faster algorithm for this problem?\u003c/p\u003e\u003cp\u003eThanks in advance!\u003c/p\u003e\u003c/div\u003e","tags":["graphs","tree","minimum spanning tree"]}}