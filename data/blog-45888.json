{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1467684305,"rating":27,"authorHandle":"dcordb","modificationTimeSeconds":1467996971,"id":45888,"title":"\u003cp\u003eCOJ Round Contest #8 + Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello everyone.\u003c/p\u003e\u003cp\u003eI would like to invite you to participate in the 8th COJ (Caribbean Online Judge) Round, this will be a contest with 5 problems, and three hours of duration. The problems will have Div2-like complexity and will be in English and Spanish. The contest will have ACM-ICPC format.\u003c/p\u003e\u003cp\u003eYou can find out more about it clicking \u003ca href\u003d\"http://coj.uci.cu/contest/contestview.xhtml?cid\u003d1522\"\u003ehere\u003c/a\u003e. You can also check out the previous rounds \u003ca href\u003d\"http://coj.uci.cu/contest/past.xhtml\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD1:\u003c/strong\u003e Time of the contest has changed because of overlapping with Euro Semifinals :). The contest will start at \u003ca href\u003d\"http://timeanddate.com/worldclock/fixedtime.html?day\u003d7\u0026amp;month\u003d7\u0026amp;year\u003d2016\u0026amp;hour\u003d9\u0026amp;min\u003d30\u0026amp;sec\u003d0\u0026amp;p1\u003d99\"\u003ethis time\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD2:\u003c/strong\u003e The contest is about to start, \u003ca href\u003d\"http://coj.uci.cu/contest/contestview.xhtml?cid\u003d1522\"\u003eget in now!!\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD3:\u003c/strong\u003e The contest is over. Hope you liked the problems.\u003c/p\u003e\u003ch2\u003eHints:\u003c/h2\u003e\u003ch4\u003eProblem A:\u003c/h4\u003e\u003cp\u003eThe last player to play wins. Note that this last player can always get what the previous player got in the previous turn plus another positive number. Watch out with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e case.\u003c/p\u003e\u003cp\u003eComplexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7e/81/7e81579a315624c5848da11ea399bc66c3bb1f2c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch4\u003eProblem B:\u003c/h4\u003e\u003cp\u003eYou can start from the right: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, decreasing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e while \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≥ \u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e and append to a vector the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Then you can append the rest of the numbers (in increasing order) to the vector.\u003c/p\u003e\u003cp\u003eComplexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d1/49/d149e37848c7f7e231f2f79fcfe74bfa4ddab02a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch4\u003eProblem C:\u003c/h4\u003e\u003cp\u003eNote that the graph is a tree with a cycle. The probability to disconnect the graph in one step is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5d/3a/5d3af15cadd680d3f28b0c79def4d1c7416fa523.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and in two steps is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7b/72/7b72c635f60cf454802139419efdcd39468e56ca.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. So the expected value is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/48/73/48736869149522c06de287da777ebbf1fc1856ea.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Here \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e is the length of the cycle. You can do a dfs to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eComplexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d1/49/d149e37848c7f7e231f2f79fcfe74bfa4ddab02a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch4\u003eProblem D:\u003c/h4\u003e\u003cp\u003eA number is hyperdrome if it has at most \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e digit with odd frequence. So build a graph where each node is a bitmask representing the parity of the digits\u0027s frequence of a number. Add edges between node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e (0 ≤ \u003ci\u003ex\u003c/i\u003e \u0026lt; 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e and nodes \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/31/e9/31e975cc1dab3e0c3bdc7058d91eb99151268ab9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eAlso add a node \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e that represents the empty set, and add and edge to itself, and to \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e1\u003c/sup\u003e, 2\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e, ..., 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e - 1\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen you can exponentiate this graph to obtain the answer.\u003c/p\u003e\u003cp\u003eThe answer will be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4a/ad/4aad01f03f8c19d0ffa1346c26c3e3f27999a030.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is the adjacency matrix of the graph.\u003c/p\u003e\u003cp\u003eComplexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/71/48/7148b54ff8279ee056dad3e2d8e7bb9b3098c0d6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch4\u003eProblem E:\u003c/h4\u003e\u003cp\u003eSegment Tree. In each node save the lcp of the range, and a string that is in the range. Then to combine two nodes you can do:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elcp\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e] \u003d \u003ci\u003emin\u003c/i\u003e (\u003ci\u003elcp\u003c/i\u003e[2 * \u003ci\u003ex\u003c/i\u003e], \u003ci\u003elcp\u003c/i\u003e[2 * \u003ci\u003ex\u003c/i\u003e + 1], \u003ci\u003eGetLCP\u003c/i\u003e(\u003ci\u003estr\u003c/i\u003e[2 * \u003ci\u003ex\u003c/i\u003e], \u003ci\u003estr\u003c/i\u003e[2 * \u003ci\u003ex\u003c/i\u003e + 1]))\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003estr\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e] \u003d \u003ci\u003estr\u003c/i\u003e[2 * \u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e\u003c/p\u003e\u003cp\u003eWhere \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is a node in the segment tree and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eGetLCP\u003c/i\u003e\u003c/span\u003e is a function that calculates the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eLCP\u003c/i\u003e\u003c/span\u003e for two strings. Also you should add lazy propagation to this.\u003c/p\u003e\u003cp\u003eComplexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f9/14/f914a3676710cfa6eeb554a424f7651d194b5141.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003c/div\u003e","tags":["coj","round","caribbean","contest"]}}