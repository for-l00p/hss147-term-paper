{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1434080353,"rating":48,"authorHandle":"Endagorion","modificationTimeSeconds":1434080353,"id":18487,"title":"\u003cp\u003eTopcoder SRM #661 Anti-insomnia Member Editorial\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThere\u0027s always a problem to fall asleep after a late night (early morning) match, also drinking coffee during competition doesn\u0027t exactly help with that. So, here comes a rough write-up of div1 problems.\u003c/p\u003e\u003ch4\u003e250 — MissingLCM\u003c/h4\u003e\u003cp\u003eAs one can verify easily using prime factorization theorem, the LCM of a set of numbers is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bf/0a/bf0a27a5f971c76d6f1395a438338ecc4accfbf4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003eα\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the maximal power of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e which divides some element of the set. Let us find largest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sup\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e for every prime \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e; there should be a number in \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003en\u003c/i\u003e + 1;\u003ci\u003em\u003c/i\u003e]\u003c/span\u003e that divides \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e as well. Thus, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e3/a6/e3a68b53647342ab23fb6fe84e8781db58a82ad6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e; there is a case when the new number divides some greater power of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, but we\u0027re fine with that. Find the greatest lower constraint for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Use the Eratosphene\u0027s sieve to find all the primes. An \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e solution is possible.\u003c/p\u003e\u003ch4\u003e450 — ColorfulLineGraphs\u003c/h4\u003e\u003cp\u003eConsider vertices from left to right. How many ways there are to place a new vertex along with an outcoming edge (if any)? There are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e ways to place the vertex without an edge; if we choose the incoming vertex for the new edge, this excludes one color among possible options. Thus, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e vertices were already placed, there are exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e - 1)\u003c/span\u003e ways to place a new vertex, possibly with an edge. The answer is simply the product \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e·(\u003ci\u003ek\u003c/i\u003e + (\u003ci\u003ek\u003c/i\u003e - 1))·(\u003ci\u003ek\u003c/i\u003e + 2(\u003ci\u003ek\u003c/i\u003e - 1))·...\u003c/span\u003e. It suffices to notices that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e is rather small, and the product elements are looped modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e, thus it is easy to find out how many times an element contributes to the product. Take care not to overflow int64. An \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1a/69/1a696fd60a22dbfe0f55f290f83beab3613b10c3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution is possible.\u003c/p\u003e\u003ch4\u003e1000 — BridgeBuilding\u003c/h4\u003e\u003cp\u003eConnecting two vertices with a zero-weight edge is effectively the same as merging the vertices into one; we will further go with this interpretation.\u003c/p\u003e\u003cp\u003eCall the parts of the graph between the merged vertices the \u003cem\u003ehavens\u003c/em\u003e (or whatever); a haven can be a loop or a pair of paths joined together. A loop haven can be represented by a pair of numbers \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e — the numbers of merged points in the original enumeration. Denote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e) the largest distance from a vertex of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e-haven to the merged vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e), \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e the largest distance between any two vertices of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e-haven, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e the distance between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e (after merging each of them). All these numbers can be computed in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e for all pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e (use two pointers to compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eSuppose we have chosen pairs of vertices to merge; which pair of vertices can be farthest apart now? The farthest pair of vertices \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e can lie in the same haven, or in different havens. In the first case all pairs of vertices will be considered explicitly; in the second case the distance is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e + \u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + ... + \u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e is the distance from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e to the closest merged vertex, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e are distances between consecutive merged vertices inside a single haven, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e is the distance from the last merged vertex to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eBinary search the diameter \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e with the following meaning: suppose we merged \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e pairs of vertices with last pair to merge having index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, we also took care that in the processed part no pair of vertices is at distance larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e; than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the largest value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e + \u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + ... + \u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e such that the last merged vertex of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the merged vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Initialize \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, 1\u003c/sub\u003e\u003c/span\u003e with the two-paths havens, after that consider all possible options for the next vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e; consider pairs of points in the current haven using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and all the rest using the DP value. Finally, to find the answer use such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e that the last two-paths haven does not have its vertices too far apart, and also \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003etail\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etail\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the largest distance from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to any of the ends. That makes for an \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c3/d4/c3d45760fb77660f9decc24f2337ca8908f7e91b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution, also probably a highly optimized \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e)\u003c/span\u003e might pass.\u003c/p\u003e\u003c/div\u003e","tags":["topcoder","srm","661","editorial","i want to sleep"]}}