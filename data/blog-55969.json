{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1511449333,"rating":0,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1511449333,"id":55969,"title":"\u003cp\u003eNotes on Codeforces Beta Round #95, A, B, C, D, E, F (two pointers)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/131/problem/A\" title\u003d\"Codeforces Beta Round 95 (Div. 2)\"\u003e131A - cAPS lOCK\u003c/a\u003e\u003c/p\u003e\u003cp\u003eModify the letters as the problem requires.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/131/problem/B\" title\u003d\"Codeforces Beta Round 95 (Div. 2)\"\u003e131B - Opposites Attract\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e to denote the number of a non-negative integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e while using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e to denote the number of a negative integer \u003cspan class\u003d\"tex-span\"\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u0026gt; 0\u003c/span\u003e). For any positive integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e], \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e])\u003c/span\u003e choice, while for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 0\u003c/span\u003e, we have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/85/8a/858a94de73b106081ef482772d757583d99d6996.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e choice. Thus, the final answer should be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/27/be/27bec1d3a477f71e01e6c3ef190a871cad6c8b03.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/131/problem/C\" title\u003d\"Codeforces Beta Round 95 (Div. 2)\"\u003e131C - The World is a Theatre\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe enumerate all the feasible combination of boys and girls, and only consider those that satisfy the requirements. Then, the main issue is to calculate \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e8/59/e8594422439ff986a73d6606172f382d0c0fe931.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Although \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is not larger than \u003cspan class\u003d\"tex-span\"\u003e30\u003c/span\u003e, it is still difficult (or infeasible) to compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e!\u003c/span\u003e. Thus, we modify the formula as \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7e/37/7e37348c7035e194aff24564d59ac2d0bf388991.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, which could handle all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 30\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/131/problem/D\" title\u003d\"Codeforces Beta Round 95 (Div. 2)\"\u003e131D - Subway\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe solution is first DFS, and then BFS.\u003c/p\u003e\u003cp\u003eAt first, we implement DFS to find the unique cycle and all the nodes on the cycle. Then, we implement BFS with all of these nodes as the starting state, and update the distance of each node. One can find plenty of materials about how to find the cycle based on DFS.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/131/problem/E\" title\u003d\"Codeforces Beta Round 95 (Div. 2)\"\u003e131E - Yet Another Task with Queens\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThere exists a solution with complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e)\u003c/span\u003e. We first enumerate all the queens, and update three values for each row. The first value is the total number of queens in the current row; the second value is the position of the leftmost queen; the third value is the position of the rightmost queen. Then, we enumerate all the queens again. For any queen in the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th row, if the total number of queens in this row is less than or equal to \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, then no queen could threaten it; otherwise, there will be exactly one or two queens that could threaten it, depending on whether it is the leftmost one or the rightmost one, which can be checked with complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e since we have stored the positions of the leftmost and rightmost queens.\u003c/p\u003e\u003cp\u003eSimilarly, for each column, we update three values as well. The first value is the total number of queens in the current column; the second value is the position of the top queen; the third value is the position of the bottom queen. The following operations are almost the same as done when we deal with rows.\u003c/p\u003e\u003cp\u003eFinally, we deal with the diagonals of \u003cspan class\u003d\"tex-span\"\u003e + 45\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e - 45\u003c/span\u003e degrees, respectively, and the answer is thus obtained.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/131/problem/F\" title\u003d\"Codeforces Beta Round 95 (Div. 2)\"\u003e131F - Present to Mom\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe idea is that we use exhaustive enumeration to deal with one dimension while using “two pointers” to deal with the other dimension, which gives a solution of complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eWe use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e to denote the total number of stars from column 1 to column \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, for the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th row. Then, we enumerate all the feasible two boundaries of columns. For each combination, we adopt two pointers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e2\u003c/span\u003e, both starting from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, and move \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e2\u003c/span\u003e downwards while letting \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e1\u003c/span\u003e chase after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e2\u003c/span\u003e. This behaves like a sliding window, and we modify its position and size so that it contains \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e stars, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e is the minimum integer that is not less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. During this process, we update the answer.\u003c/p\u003e\u003c/div\u003e","tags":[]}}