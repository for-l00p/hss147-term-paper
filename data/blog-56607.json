{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1514182126,"rating":4,"authorHandle":"vamaddur","modificationTimeSeconds":1514182137,"id":56607,"title":"\u003cp\u003eUSACO 2014 Gold US Open Fair Photography: How to Achieve Suggested Complexity in Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"http://www.usaco.org/index.php?page\u003dviewproblem2\u0026amp;cpid\u003d436\"\u003eProblem Link\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://www.usaco.org/current/data/sol_fairphoto_gold.html\"\u003eEditorial Link\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u0026quot;An alternative is to consider all O(2^B) valid values for A in an outer loop. If one indexes not by the full signature but by a 64-bit hash of it, then the runtime becomes O(2^BN), but in the unlikely event of two different signatures hashing to the same 64-bit value, the answer may be incorrect or must be verified. Many who wrote exponential solutions in B received time outs; on occasion a low constraint is a red herring and hides an easily implemented more efficient solution.\u0026quot;\u003c/p\u003e\u003cp\u003eI tried this approach in my solution \u003ca href\u003d\"https://hastebin.com/akadepifer.cpp\"\u003ehere\u003c/a\u003e, but I get TLE with a complexity that has an added factor of B * log N (due to the map and hash computation). How can I prune my current solution down to the intended complexity?\u003c/p\u003e\u003cp\u003ePlease help, and thanks in advance!\u003c/p\u003e\u003c/div\u003e","tags":["hash","usaco"]}}