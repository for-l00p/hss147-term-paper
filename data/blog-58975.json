{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1523977630,"rating":0,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1523977630,"id":58975,"title":"\u003cp\u003eNotes on Codeforces Beta Round #131, Div2-A, B, C, D, E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/214/problem/A\" title\u003d\"Codeforces Round 131 (Div. 2)\"\u003e214A - System of Equations\u003c/a\u003e\u003c/p\u003e\u003cp\u003eEnumerate all the feasible values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/214/problem/B\" title\u003d\"Codeforces Round 131 (Div. 2)\"\u003e214B - Hometask\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe target integers must satisfy the following two conditions: the last digit is zero, and the sum of digits must be a multiple of three.\u003c/p\u003e\u003cp\u003eTherefore, there must exist at least one digit \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. Then, we calculate the sum of all the integers and the remainder after divided by three. If the sum is a multiple of three (remainder is zero), then all the digits should be output in a decreasing order. If the remainder is one, then we try to eliminate one single minimum digit that has the same remainder, i.e., \u003cspan class\u003d\"tex-span\"\u003e1, 4, 7\u003c/span\u003e, if there is no \u003cspan class\u003d\"tex-span\"\u003e1, 4, 7\u003c/span\u003e, then we try to eliminate two minimum digit that also has remainder two, i.e., \u003cspan class\u003d\"tex-span\"\u003e2, 5, 8\u003c/span\u003e. Note that at least one of the above two cases holds, since otherwise we can not have “the remainder of the sum is one after divided by three”. We deal with the case where the remainder is two in a similar manner.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/214/problem/C\" title\u003d\"Codeforces Round 131 (Div. 2)\"\u003e214C - Game\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe main idea is a greedy algorithm. We can divide the “optimal answer” into three cases according to which computer we select to first start with. Thus, we try to start with each of the three computers and the optimal answer must be included.\u003c/p\u003e\u003cp\u003eFor each trial, the following work resembles the topological sorting. We keep completing jobs at the current computer until no jobs are remained, and then move to the next computer in the order of \u003cspan class\u003d\"tex-span\"\u003e1 → 2 → 3 → 1 → 2...\u003c/span\u003e as the first choice, and if this is infeasible, we move like \u003cspan class\u003d\"tex-span\"\u003e3 → 2 → 1 → 3 → 2...\u003c/span\u003e. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/214/problem/D\" title\u003d\"Codeforces Round 131 (Div. 2)\"\u003e214D - Numbers\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI learned from the tutorials, and the main idea is to use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003elen\u003c/i\u003e][\u003ci\u003ed\u003c/i\u003e]\u003c/span\u003e to denote the number of ways that we can build an integer with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e\u003c/span\u003e and digits \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e, \u003ci\u003ed\u003c/i\u003e + 1, ..., 9\u003c/span\u003e. One can check the recursive formula shown there, which is quite clear and intuitive.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/214/problem/E\" title\u003d\"Codeforces Round 131 (Div. 2)\"\u003e214E - Relay Race\u003c/a\u003e\u003c/p\u003e\u003cp\u003eNotice that the original problem is equivalent to the following descriptions: we start from the left upper cell and select two paths to move to the right bottom cell, while achieving the maximum points. In other words, we can imagine that there are two players starting at the left upper cell and moving to the right bottom cell at the same time.\u003c/p\u003e\u003cp\u003eIf we denote the current positions of player 1 and player 2 as \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e, then after one step, player 1 will be either \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + 1, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + 1)\u003c/span\u003e. Note that no matter which case occurs, the sum is always \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + 1\u003c/span\u003e, and for player 2, we have similar observations. Therefore, we can use dp idea and denote the state by using a tuple \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ed\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e, i.e., we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ed\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e][\u003ci\u003ey\u003c/i\u003e]\u003c/span\u003e to denote the maximum points that we can obtain, under the state that both two players are at the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e-th second diagonal, while player 1 is at the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e-th cell and player 2 is at the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e-th cell of the current second diagonal, respectively. The recursive formula is straightfoward, but be careful that it is slightly different between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e \u0026gt; \u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}