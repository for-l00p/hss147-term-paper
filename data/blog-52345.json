{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1496457094,"rating":5,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1496457094,"id":52345,"title":"\u003cp\u003eNotes on Codeforces Beta Round #49, A, B(Trick to avoid using floor and ceil functions), C, D\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eA. Autocomplete\u003c/p\u003e\u003cp\u003eWe can enumerate all the given strings, and for each one that has the required beginning, we select the lexicographically minimal one as the answer.\u003c/p\u003e\u003cp\u003eB. Blog Photo\u003c/p\u003e\u003cp\u003eThe problem requires that at least one of the sides should have a length of form 2^n. Thus, we can first let the length of height have a form of 2^n,2^(n-1),...,2^0, where 2^n should be no larger than h. For each height\u003d2^i, we calculate the largest length of width so that it will not exceed the given w and meanwhile the area can achieve the maximum value. Next, we let the length of width have a form of 2^n,2^(n-1),...,2^0, and calculate the height in a similar manner.\u003c/p\u003e\u003cp\u003eAs an example, we investigate how to calculate the width, denoted as W, given that the current length of height is H\u003d2^i. Due to the constraints, we have 0.8\u0026lt;\u003dH/W\u0026lt;\u003d1.25, which means that H/1.25\u0026lt;\u003dW\u0026lt;\u003dH/0.8. As both the height and width are integers, one might use ceil(H/1.25)\u0026lt;\u003dW\u0026lt;\u003dfloor(H/0.8) to obtain the values that W can take. However, this may lead to some unexpected precision problem. In fact, we can completely avoid this problem by using the \u0026quot;integer division\u0026quot; and \u0026quot;integer module\u0026quot; operations.\u003c/p\u003e\u003cp\u003eWe can solve a more general problem, which gives two decimal numbers a and b (like 0.64, 0.2347, etc.) and an already known integer X, and we are asked to find out the exact range of values that another integer Y can take with the constraints that a*X\u0026lt;\u003dY\u0026lt;\u003db*X. We first transform a and b into a fractional form, i.e., a\u003dp/q, b\u003ds/t. Note that this is always possible. For instance, we can transform 0.2347 into 2347/10000, and the fractional form does not have to be irreducible. Then, we also transform the original constraints into \u003c/p\u003e\u003cp\u003ep*X/q\u0026lt;\u003dY\u0026lt;\u003ds*X/t\u003c/p\u003e\u003cp\u003eTherefore, floor(b*X)\u003ds*X/t, where the \u0027/\u0027 in s*X/t is an \u0026quot;integer division\u0026quot; operation. For p*X/q, if (p*X)%q\u003d\u003d0, we can directly use p*X/q as the lower bound, where \u0027/\u0027 in p*X/q is an \u0026quot;integer division\u0026quot; operation, too; otherwise, ceil(a*X)\u003dp*X/q+1, where \u0027/\u0027 in p*X/q is still an \u0026quot;integer division\u0026quot; operation. \u003cstrong\u003eIn summary, the upper bound is s*X/t while the lower bound is ((p*X)%q\u003d\u003d0?p*X/q:p*X/q+1).\u003c/strong\u003e \u003c/p\u003e\u003cp\u003eNow, we go back to the original problem. As we still have another constraint 1\u0026lt;\u003dW\u0026lt;\u003dw, if ceil(H/1.25)\u0026gt;w, it means that we cannot obtain a reasonable value for the width; otherwise, the maximal value of width is just min(w,floor(H/0.8)). After we obtain the width, we first compare the area and then the height, and select the answer carefully as the problem requires.\u003c/p\u003e\u003cp\u003eC. Little Frog\u003c/p\u003e\u003cp\u003eFor the given n integers 1,2,3,...,n, we can immediately find out that the absolute difference between any two integers is at least 1 while at most n-1. The problem asks to arrange the n integers in an appropriate order Q so that the absolute difference between any two neighboring integers should not be the same. Note that we will have n-1 absolute differences, and if they are all different from each other, they have to be exactly S\u003d{1,2,3,,,n-1}.\u003c/p\u003e\u003cp\u003eNote that the absolute difference can be at most n-1, which is achieved if and only if 1 is next to n or n is next to 1. Therefore, we can first set Q\u003d(1,n) and S is reduced to S\u003d{1,2,3,,,n-2}. Similarly, one can check that to obtain the absolute difference n-2, we have to put 2 next to n, which gives Q\u003d(1,n,2) and S is reduced to S\u003d{1,2,3,,,n-3}. Again, we deal with the absolute difference n-3, and one can find that Q\u003d(1,n,2,n-1) and S is reduced to S\u003d{1,2,3,,,n-4}. In summary, we deal with S in a decreasing order, and when S is reduced to empty set, we will have obtained the required sequence Q.\u003c/p\u003e\u003cp\u003eD. Physical Education\u003c/p\u003e\u003cp\u003eThis is like Selection Sort. We start from the first value of a and check whether it is the same as the first value of b. If they are the same, we move to the second one; otherwise, we enumerate array b from the second value and find out the one at some position j that is the same as the first value of array a. Then, we swap the value at position j with the second one. The swap is implemented like Bubble Sort, and the process should be recorded as part of the final answer. Similarly, we deal with the other values one by one, and will finally obtain the required answer.\u003c/p\u003e\u003c/div\u003e","tags":[]}}