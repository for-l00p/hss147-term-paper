{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1409944542,"rating":35,"authorHandle":"hexor","modificationTimeSeconds":1409944768,"id":13697,"title":"\u003cp\u003eMy Remainder Theorem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI found a new theorem and I called it \u0026quot;My Remainder Theorem\u0026quot;. My theorem finds similar thing with \u0026quot;Chinese Remainder Theorem\u0026quot;. Maybe it has been founded before. If you heard this theorem before, please tell me.\u003c/p\u003e\u003cp\u003eProblem :\u003c/p\u003e\u003cp\u003eWe have N equation.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ex \u003d equation_1.a ( mod equation_1.b )\nx \u003d equation_2.a ( mod equation_2.b )\n.\n.\n.\nx \u003d equation_n.a ( mod equation_n.b )\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e(1\u0026lt;\u003di\u0026lt;\u003dn) equation_i.b can be not a prime number. ( difference between my M.R.T. and C.R.T. )\u003c/p\u003e\u003cp\u003eWe use a function which can do merge two equation and create a new equation. ( Let\u0027s call this function \u0026quot;merge\u0026quot; )\u003c/p\u003e\u003cp\u003eFor example we have 3 equations. We\u0027ll solve this problem.\u003c/p\u003e\u003cp\u003eans1 \u003d merge( equation_1,equation_2 ); ans2 \u003d merge( a,equation_3 );\u003c/p\u003e\u003cp\u003eOur answer is ans2.a.\u003c/p\u003e\u003cp\u003eLet\u0027s look at to \u0026quot;merge\u0026quot; function.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eWe assume equation_1.b \u0026gt; equation_2.b\u003c/li\u003e   \u003cli\u003elcm -\u0026gt; least common multiplier\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003emerge( equation_1,equation_2 ){\n\tLCM \u003d lcm(equation_1.b,equation_2.b)\n\tKKK \u003d LCM/equation_1.b\n\tfor i\u003d0 to KKK-1\n\t\tif( ( i*equation_1.b + equation_1.a ) mod equation_2.b \u003d\u003d equation_2.a )\n\t\t\treturn answer \u003d make_equation( LCM , i*equation_1.b+equation_1.a )\t//\tx \u003d i*equation_1.b+equation_1.a(mod LCM)\n\treturn \u0026quot;NO SOLUTION\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e \u003cul\u003e   \u003cli\u003eIf there is any solution for equation_1 and equation_2, also there is a solution for i\u0026lt;\u003dKKK-1.\u003c/li\u003e   \u003cli\u003eWe try all possible i values and we get a x value for equation_1. Then we check if x equals to equation_2.b+equation_2.a .\u003c/li\u003e   \u003cli\u003eIf this condition is true, we find a x value. // x \u003d i*equation_1.b+equation_1.a(mod LCM)\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIf there is no x value, that means solution doesn\u0027t exist.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThis algorithm\u0027s complexity is O( max( equation_i.b )*n )\u003c/p\u003e\u003c/div\u003e","tags":[]}}