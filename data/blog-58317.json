{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1520807204,"rating":0,"authorHandle":"Reckt","modificationTimeSeconds":1520837732,"id":58317,"title":"\u003cp\u003eLAU practice contest editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eAyash and coins\u003c/strong\u003e\u003c/p\u003e\u003cp\u003ethe solution is Ceil( log3(n) ), many participants thought the solution is Ceil( log2(n) ) since your instinct will make you believe that dividing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e to 2 piles is optimal. But since there are 3 different outputs for the scale (left hand side — right hand side — equal) it\u0027s always better to divide \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e for 3 piles\u003c/p\u003e\u003cp\u003esol: \u003ca href\u003d\"https://pastebin.com/n6dwUVgp\"\u003ehttps://pastebin.com/n6dwUVgp\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLeila and free food\u003c/strong\u003e\u003c/p\u003e\u003cp\u003ethis problem is a standard DP problem (weighted intervals scheduling), first of all we have to sort the intervals (by start time or by end time it depends on the implementation), I will consider the case where we sort them by their start time, then we have to calculate for every event whether if we chose it, what would be the very next event that we can go to, we can do that by storing the start time for every event in an arraylist(vector) and for every event we get the lower_bound of its end time (we binary search on the smallest start time that is bigger than the event\u0027s end time). now the problem has become really simple. for every event we calculate whether it\u0027s better to take it or to leave it (check the code for a better understanding). Btw, there are some other approaches for this problem but this one is the easiest.\u003c/p\u003e\u003cp\u003esol: \u003ca href\u003d\"https://pastebin.com/h59TW6Vn\"\u003ehttps://pastebin.com/h59TW6Vn\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eOmar and sticks\u003c/strong\u003e\u003c/p\u003e\u003cp\u003ein this problem, the main observation to the solution is if the range is bigger than 45 then the answer is definitely yes, otherwise, we have to check by sorting the range and checking every 3 consecutive sticks.\u003c/p\u003e\u003cp\u003ethe observation follows elegantly from the pigeon-hole principle (hey Discrete I people :p), let us ask how many elements can I have in a set so that no 3 elements can form a triangle, if we sort the set of elements, then every 3 consecutive elements a,b,c respectively must satisfy the following \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e ≤ \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, so let us try to fill the set in a way that we can have as many numbers as possible, 1 1 2 3 5 8 13 21 ..... FIBONACCI! and we will hit \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e after 45 elements.\u003c/p\u003e\u003cp\u003esol : \u003ca href\u003d\"https://pastebin.com/TSth3T8F\"\u003ehttps://pastebin.com/TSth3T8F\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eCP11 problem\u003c/strong\u003e\u003c/p\u003e\u003cp\u003ewe can easily notice the pattern and make a formula accordingly, if n is even then it is \u003cspan class\u003d\"tex-span\"\u003e - \u003ci\u003ek\u003c/i\u003e / 2\u003c/span\u003e otherwise it is \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ek\u003c/i\u003e + 1) / 2\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eRestaurant\u003c/strong\u003e\u003c/p\u003e\u003cp\u003ethe constraints in this problem are too large to iterate from the start till the end time therefore we have to think about a different solution. We have to find the maximum number of people in the restaurant at any given moment, but iterating over all the times will give Time Limit Exceeded since the times can get up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e. Sorting all the start times and end times and iterating just over them will be enough, while iterating through the start and end times, if the current time that we are handling is a start time then we add the number of people to a global variable otherwise we subtract it, and we maximize on the answer in every iteration.\u003c/p\u003e\u003cp\u003eNote: make sure to handle the end times before the start times.\u003c/p\u003e\u003cp\u003esol : \u003ca href\u003d\"https://pastebin.com/9bjPY02Z\"\u003ehttps://pastebin.com/9bjPY02Z\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eThe unbearable weight of existence\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThis problem is one of the easiest, nevertheless only one person solved it. we just have to calculate every number in the form \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e and put it in a sorted list. we can loop until \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e and push the powers of all the elements that are less than \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e12\u003c/sup\u003e\u003c/span\u003e, notice that \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e12\u003c/sup\u003e ≤ 2\u003csup class\u003d\"upper-index\"\u003e60\u003c/sup\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e12\u003c/sup\u003e ≤ 3\u003csup class\u003d\"upper-index\"\u003e30\u003c/sup\u003e\u003c/span\u003e .... so this solution fits within the time limit.\u003c/p\u003e\u003cp\u003eNote: make sure not to overflow while calculating the powers and not to count any element more than once.\u003c/p\u003e\u003cp\u003esol : \u003ca href\u003d\"https://pastebin.com/SAcafmU4\"\u003ehttps://pastebin.com/SAcafmU4\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLost in the city\u003c/strong\u003e\u003c/p\u003e\u003cp\u003ewe only have to check if the tow positions are on the same side for every line or not, if they are not on the same side then we definitely have to cross the line. How to check that? we can simply substitute the coordinates of every position in the equation of every line and if they have the same sign that means they are on the same side otherwise they are not.\u003c/p\u003e\u003cp\u003esol : \u003ca href\u003d\"https://pastebin.com/SS8b1Nm6\"\u003ehttps://pastebin.com/SS8b1Nm6\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eElephant\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThis was the easiest problem in the contest. It\u0027s obvious that the elephant must always choose to jump 5 steps while it can otherwise it will jump the rest of the steps so the answer is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e0/7b/e07b821c85c968129a95b26c4ac283227bafaf17.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e or in other words \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e + 4) / 5\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}