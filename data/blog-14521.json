{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1414763024,"rating":0,"authorHandle":"LouisCK","modificationTimeSeconds":1414763024,"id":14521,"title":"\u003cp\u003eBest way to implement a Trie in java for programming contests?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI am trying to solve \u003ca href\u003d\"http://www.spoj.com/problems/PHONELST/\"\u003ethis\u003c/a\u003e problem on SPOJ using a Trie. However, my code does not pass the time limit. This seems to be a reasonable approach for the given limits as other people seem to have used the same approach and passed the tests. I think that my Trie implementation in Java might be too slow. Could someone help me out by checking it and suggesting improvements or providing their own implementation? (in Java)\u003c/p\u003e\u003cp\u003eHere is my approach: There are two classes, one is \u003ccode\u003eNode\u003c/code\u003e and the other is \u003ccode\u003eTrie.\u003c/code\u003e\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003eNode\u003c/code\u003e class has two elements, \u003ccode\u003eNode[] arr\u003c/code\u003e and a boolean \u003ccode\u003eisLeaf\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eIn this problem, we need to check if any number is a prefix of another so while inserting numbers, I simply check if I am passing any node that is a leaf or if after inserting a word, the chain ends and there is no further branching from this \u003ccode\u003eNode\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eHere is my code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eprivate static class Node\n    {\n        public boolean isLeaf;\n        public Node[] arr;\n        public Node()\n        {\n            isLeaf \u003d false;\n            arr \u003d new Node[10];\n        }\n     \n    }\n    \n    private static class Trie\n    {\n        public Node head;\n        \n        public Trie(String number)\n        {\n            head \u003d new Node();\n            insert(head, number, 0);\n        }\n       \n        public boolean insert(String number)\n        {\n            return insert(head, number, 0);\n        \n        }\n        \n        private boolean insert(Node curr_node, String number, int curr)\n        {\n            int displacement \u003d (int) number.charAt(curr) - 48;\n         \n            if(curr \u003d\u003d number.length() - 1)\n            {\n                if(curr_node.arr[displacement] \u003d\u003d null)\n                {\n                    curr_node.arr[displacement] \u003d new Node();\n                    curr_node.arr[displacement].isLeaf \u003d true;\n                    return true;\n                \n                }\n                \n                else return false;\n            }\n            \n            else\n            {\n                if(curr_node.arr[displacement] \u003d\u003d null)\n                {\n                    curr_node.arr[displacement] \u003d new Node();\n                    return insert(curr_node.arr[displacement], number, curr + 1);\n                \n                }\n                \n                else\n                {\n                    if(curr_node.arr[displacement].isLeaf) return false;\n                    else return insert(curr_node.arr[displacement], number, curr + 1);\n                 }\n            \n            \n            \n            }\n            \n          \n            \n        }\n    \n    \n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["trie","java"]}}