{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1499180711,"rating":0,"authorHandle":"color_me_red","modificationTimeSeconds":1499180711,"id":53103,"title":"\u003cp\u003eSpOJ â€” BFLAG\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThere is this code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eFunction Find(integer n,function func) If n\u003d1\n       For i \u003d 1 to a do func()\n   Elseif n\u003d2\n       For i \u003d 1 to b do func()\n   Else Find(n-1,Find(n-2,func))\n\nFunction Main\n   Find(n,funny)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWith given values of \u003ccode\u003en, a, b\u003c/code\u003e and a modulus \u003ccode\u003ep\u003c/code\u003e, the question asks to output the number of times \u003ccode\u003efunc()\u003c/code\u003e will be called. \u003ccode\u003en\u003c/code\u003e can be upto 10^9. The direct recurrence would be \u003ccode\u003ef[n] \u003d f[n-2]*(f[n-1] + 1)\u003c/code\u003e with base cases for 1, 2 I think. But since this isn\u0027t a linear recurrence how can I use matrix exponentiation to solve the problem? Thanks for any help!\u003c/p\u003e\u003c/div\u003e","tags":["spoj","#matrix exponentialtion"]}}