{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1473024328,"rating":0,"authorHandle":"1am","modificationTimeSeconds":1473024328,"id":46948,"title":"\u003cp\u003eDay 6 (9/3)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003e2D Cumulative Sum\u003c/h1\u003e\u003cp\u003eFirst we talked about question land lot from day 5. To solve it you need to know 2D cumulative sum.\u003c/p\u003e\u003cp\u003eThe code is explained from slides 60 to 62 on day 1 powerpoint. \u003ca href\u003d\"https://drive.google.com/drive/folders/0B54r2jukjz9wZ2JOcDJiWWdfZnc\"\u003ehttps://drive.google.com/drive/folders/0B54r2jukjz9wZ2JOcDJiWWdfZnc\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eSet\u003c/h1\u003e\u003cp\u003e\u003ca href\u003d\"http://uva.onlinejudge.org/index.php?option\u003dcom_onlinejudge\u0026amp;Itemid\u003d8\u0026amp;category\u003d24\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d1756\"\u003ehttp://uva.onlinejudge.org/index.php?option\u003dcom_onlinejudge\u0026amp;Itemid\u003d8\u0026amp;category\u003d24\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d1756\u003c/a\u003e\u003c/p\u003e\u003cp\u003eHere is the code: \u003ca href\u003d\"http://ideone.com/rWuBOy\"\u003ehttp://ideone.com/rWuBOy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe solved this problem using set data structure. Sets have the following features:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003ealways ordered from smallest to largest (either alphabetically or numerically; depending on data type)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003econtain only unique elements, no repetitions\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003einclude a built in member function for lowerbound accessed by set_name.lower_bound (element) \u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eare accessed through an iterator, to get the element that the iterator is pointing at, you must do *(iterator_name)\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eFor more information on its member functions and syntax, take a look at here: \u003ca href\u003d\"http://www.cplusplus.com/reference/set/set/\"\u003ehttp://www.cplusplus.com/reference/set/set/\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAlso take a look at slides 23 24 from day 1 from the above google drive for some example code.\u003c/p\u003e\u003cp\u003eWe solved problem 1D Cafeteria (B) from day 6, here is its code: \u003ca href\u003d\"http://ideone.com/0AtPiq\"\u003ehttp://ideone.com/0AtPiq\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eMap\u003c/h1\u003e\u003cp\u003eTake a look at slides 25 from day 1 from the above google drive for some example code. We said that the map data structure is quite similar to the set data structure, other than the fact that maps help us to connect a key with a value. For example, the key could be name of grocery item, and the value could be its price. Here is some code that shows some features of it. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/8Z4iSL\"\u003ehttp://ideone.com/8Z4iSL\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLike sets, it also has the same features listed above, search and erase are in log (n) complexity, where n is the number of elements in the map. They are ordered based on first element from smallest to largest also, and then if equal, based on second.\u003c/p\u003e\u003cp\u003eGood luck!\u003c/p\u003e\u003cp\u003eemail me at \u003ca href\u003d\"mailto:reem_obaid_10@hotmail.com\"\u003ereem_obaid_10@hotmail.com\u003c/a\u003e for questions, or send me a message through codeforces\u003c/p\u003e\u003c/div\u003e","tags":[]}}