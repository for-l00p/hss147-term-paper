{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1436786808,"rating":62,"authorHandle":"adamant","modificationTimeSeconds":1436820668,"id":19193,"title":"\u003cp\u003eA bit more about palindromes\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi everyone!\u003c/p\u003e\u003cp\u003eToday I want to talk about one quite famous and interesting problem.\u003c/p\u003e\u003cp\u003eSo, here it is: given string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e. Split it in the minimum possible amount of palindromic strings. Rather unpretentious, isn\u0027t it? You can find this problem \u003ca href\u003d\"http://www.spoj.com/problems/IITKWPCE/\"\u003ehere\u003c/a\u003e or \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1635\"\u003ehere\u003c/a\u003e. But whenever you see it, in the best case intended solution would be a quadratic (or even cubic). Here will be described a solution to this problem in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e online (ie, answer will be received for each prefix). \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eGenerally speaking, this solution is relatively new and it is not unique (here is the \u003ca href\u003d\"http://arxiv.org/abs/1403.2431\"\u003eother\u003c/a\u003e one quite new though). You can see original \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/MikhailRubinchik\" title\u003d\"Master MikhailRubinchik\"\u003eMikhailRubinchik\u003c/a\u003e\u0027s \u003ca href\u003d\"/blog/entry/18695\"\u003eentry\u003c/a\u003e here. In this solution palindromic tree will be used, its description can be found in \u003ca href\u003d\"/blog/entry/13959\"\u003ethis\u003c/a\u003e article. \u003ca href\u003d\"http://ideone.com/YQX9jv\"\u003eThis\u003c/a\u003e implementation will be taken as basic.\u003c/p\u003e\u003cp\u003eLet\u0027s get started :) To begin with, consider the following naive algorithm runs in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e. We will maintain the dp of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e — the minimum number of palindromes, in which you can split the strings prefix, ending at position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. For it will be built palindromic tree and at each step the whole suffix path will be traversed, moving from the vertex to its suffix link.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e    for(v \u003d last; len[v] \u0026gt; 0; v \u003d link[v])\n        ans[i] \u003d min(ans[i], ans[i - len[v]] + 1);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo solve the problem quickly, let\u0027s introduce two new values that will be stored in the tree vertices \u003cem\u003edifference\u003c/em\u003e of vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ediff\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e) \u003d \u003ci\u003elen\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e) - \u003ci\u003elen\u003c/i\u003e(\u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e))\u003c/span\u003e, and \u003cem\u003eserial link\u003c/em\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eslink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e. Serial link will lead from the vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e in the vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e, corresponding to the maximum suffix palindrome of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, which satisfies \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ediff\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e) ≠ \u003ci\u003ediff\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e. It is easy to see that it is possible to maintain when you create a new node as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e    if(diff[v] \u003d\u003d diff[link[v]])\n        slink[v] \u003d slink[link[v]];\n    else\n        slink[v] \u003d link[v];\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cem\u003eApproval 1\u003c/em\u003e: path within serial links to the root contain only \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e vertices. You can see the proof in \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/MikhailRubinchik\" title\u003d\"Master MikhailRubinchik\"\u003eMikhailRubinchik\u003c/a\u003e\u0027s \u003ca href\u003d\"/blog/entry/18695\"\u003eentry\u003c/a\u003e. \u003c/p\u003e\u003cp\u003eKnowing this fact you can use following algorithm: \u003cbr /\u003e Starting from the maximum suffix palindrome (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elast\u003c/i\u003e\u003c/span\u003e), quickly improve answer along all palindromic suffixes till the serial link, and then move on by the serial link and repeat the procedure. It is easy to see that all palindrome suffixes will be considered. Let us learn how to quickly process described set of palindromes (let\u0027s call it a series). For this we need\u003c/p\u003e\u003cp\u003e\u003cem\u003eApproval 2\u003c/em\u003e: Let us consider suffix palindrome \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e) ≠ \u003ci\u003eslink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e in some step of the algorithm. Then, the previous occurrence of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e in a string was in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003ediff\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e, while in this position there is no suffix-palindrome with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e(\u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)) + \u003ci\u003ediff\u003c/i\u003e(\u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e))\u003c/span\u003e, ie, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e was the beginning of the series in that position.\u003c/p\u003e\u003cp\u003e\u003cem\u003eProof:\u003c/em\u003e \u003cem\u003eSince the suffix of palindrome is also a prefix for him, we can specify the occurence of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e in mentioned position as a prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. Let\u0027s show that there is no occurence of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003ediff\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e. Let\u0027s assume there is. Then the intersection of occurences in this position and in the position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003ediff\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e is also a palindrome (since it is itself a border of palindrome) with length greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e) - 2·\u003ci\u003ediff\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e. So, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ediff\u003c/i\u003e(\u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)) \u003ci\u003eneqdiff\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e, it\u0027s a contradiction.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eLet\u0027s show that string with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e ending at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003ediff\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e is not a palindrome. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e \u003d \u003ci\u003eDTD\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/sup\u003e, \u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e) \u003d \u003ci\u003eTD\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/sup\u003e \u003d \u003ci\u003eDT\u003c/i\u003e\u003c/span\u003e. From here you can see that if we append \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ediff\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e characters to the front of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e and got a palindrome, then appended characters are equal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e. But due to the fact that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDT\u003c/i\u003e\u003c/span\u003e is a palindrome, we see that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDDTD\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e is also a palindrome. Therefore, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e is not the beginning of the series, so you will not consider this string on any step of the algorithm.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eBased on the approval 2, let\u0027s use following dp: Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eseries\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e is a series, starting at the vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, then the value of the dp in it equal \u003cbr /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/25/25/25252136eedad8ee8e4116030cfdbdaec2f5d1d5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is the latest (among already used) position in a string, in which vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e corresponded to the longest palindrome in series. You can see that when we are in the position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eseries\u003c/i\u003e_\u003ci\u003eans\u003c/i\u003e(\u003ci\u003elink\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e))\u003c/span\u003e due to approval 2 covers all the values ​​we are interested in, but one in which the length of the suffix is ​​$len(slink(v)) + diff(v)$, ie, considered all palindrome suffixes, except the smallest in the series. It can be considered separately.\u003c/p\u003e\u003cp\u003eFinally we have following algorithm:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e    for(v \u003d last; len[v] \u0026gt; 0; v \u003d slink[v])\n    {\n        series_ans[v] \u003d ans[i - (len[slink[v]] + diff[v])];\n        if(diff[v] \u003d\u003d diff[link[v]])\n            series_ans[v] \u003d min(series_ans[v], series_ans[link[v]]);\n        ans[i] \u003d min(ans[i], series_ans[v] + 1);\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eObviously, it works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ent\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e — is the maximum possible length of \u0026quot;serial path\u0026quot; ie total complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eAn example of a program that prints for each prefix minimal number of palindromes, by which it can be split: \u003ca href\u003d\"http://ideone.com/xE2k6Y\"\u003e#xE2k6Y\u003c/a\u003e\u003c/p\u003e\u003cp\u003eProblems on Online Judge: \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d2058\"\u003e2058\u003c/a\u003e \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d2044\"\u003e2044\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}