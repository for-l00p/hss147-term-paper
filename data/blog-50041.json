{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1485493928,"rating":4,"authorHandle":"viralm","modificationTimeSeconds":1485501751,"id":50041,"title":"\u003cp\u003eOff by one errors / Edge Cases in Binary Search/ 2-Pointer Technique\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eOften when trying to solve a problem involving Binary Search or 2-Pointer Technique, I make off by one errors, and/or fail to handle edge cases. Even if I know that my solution might fail on a particular edge case, to correct it takes a lot of time. I would like to know a method/implementation, such that I can code up the solutions without having to worry about edge cases, etc. For Binary Search, I know of one such method where to avoid infinite loop, we can use the following code: Say we want to find the maximum index in an array which satisfies certain property --\u0026gt;\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile(hi-lo\u0026gt;1)\n{\n    int mid\u003d(lo+hi)/2;\n    int chk\u003dcheck(mid);\n    if(chk\u003d\u003d1) lo\u003dmid;\n    else hi\u003dmid-1;\n}\nint ans;\nif(check(hi)\u003d\u003d1) ans\u003dhi;\nelse ans\u003dlo;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf any better approach is available(for Binary Search), you are welcome to comment. Also, can you give a good implementation for 2 â€” Pointer Technique. \u003c/p\u003e\u003cp\u003eThanks in advance.\u003c/p\u003e\u003c/div\u003e","tags":["binary seach","two-pointers","implementation"]}}