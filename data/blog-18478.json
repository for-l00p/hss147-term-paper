{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1434035610,"rating":47,"authorHandle":"marat.snowbear","modificationTimeSeconds":1434035610,"id":18478,"title":"\u003cp\u003eDistributed Code Jam test script for Windows\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI have written a bat script for Windows to automate a bit testing DCJ solutions on multiple examples, putting it here, might be helpful to somebody. I\u0027ve written it to test C++ solutions but in case you write in other languages you should be able to change it easily. \u003c/p\u003e\u003cp\u003escript itself: \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eecho off\n\nset PYTHONPATH\u003dC:\\Program Files (x86)\\Python27\\\nset DCJ_PATH\u003dc:/Temp/SP/DistributedCodeJam/dcj/dcj.py\n\ncls\nfor %%* in (.) do set TaskName\u003d%%~nx*\necho %TaskName%\n\nfor %%f in (\u0026quot;%TaskName% (*).h\u0026quot;) do (\n\techo ----------------------------\n\techo %%f\n\tcopy /y \u0026quot;%%f\u0026quot; %TaskName%.h \u0026gt; NUL\t\n\tcopy /y \u0026quot;%%f.out\u0026quot; expected.out \u0026gt; NUL\n\tfor /F \u0026quot;delims\u003d\u0026quot; %%i in (expected.out) do echo EXPECTED: %%i\n\n\t\u0026quot;%PYTHONPATH%\\python.exe\u0026quot; \u0026quot;%DCJ_PATH%\u0026quot; test --source\u003dsolution.cpp --nodes\u003d3\n)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere are two path variables on top, don\u0027t forget to set them appropriately. \u003c/p\u003e\u003cp\u003eHere is an output for sandwich problem:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eSandwich\n----------------------------\nsandwich (1).h\nEXPECTED: 14\nSTDOUT 0: 14\nDuration: 15.6001ms (longest running instance: 2)\n----------------------------\nsandwich (2).h\nEXPECTED: 0\nSTDOUT 0: 0\nDuration: 15.6001ms (longest running instance: 1)\n----------------------------\nsandwich (3).h\nEXPECTED: 5\nSTDOUT 0: 5\nDuration: 31.2002ms (longest running instance: 0)\n----------------------------\nsandwich (4).h\nEXPECTED: 50\nSTDOUT 0: 50\nDuration: 15.6001ms (longest running instance: 2)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHow to make it working: \u003c/p\u003e \u003col\u003e   \u003cli\u003eDownload sample libraries from DCJ Dashboard. I download them with Google Chrome to the same folder all at once, so they get names like \u0027sandwich.h\u0027, \u0027sandwich (1).h\u0027, \u0027sandwich (2).h\u0027, etc. The script assumes that all input files have names matching \u0027PROBLEM NAME (TEST_CASE).h\u0027 pattern, to do that I simply download first input file twice so it becomes \u0027sandwich (1).h\u0027.\u003c/li\u003e   \u003cli\u003eCopy all \u0027sandwich (*).h\u0027 files to the same folder where your solution is.\u003c/li\u003e   \u003cli\u003ePut this script to the same folder, change path variables in the script.\u003c/li\u003e   \u003cli\u003eFor each *.h file create an expected output file appending .out extension to it. So expected output for \u0027sandwich (1).h\u0027 should be at \u0027sandwich (1).h.out\u0027.\u003cbr /\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eThat should be it and you should be able to run the script and check all testcases in one run. It is assumed that you already made DCJ tool running on your PC in advance. \u003c/p\u003e\u003c/div\u003e","tags":["dcj","gcj"]}}