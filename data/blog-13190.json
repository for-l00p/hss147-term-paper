{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1406281572,"rating":54,"authorHandle":"MinakoKojima","modificationTimeSeconds":1407939756,"id":13190,"title":"\u003cp\u003eCodeforces Round #259 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003eOverview\u003c/h1\u003e\u003cp\u003eThere are 3 normal tasks accompanied with 2 challenge tasks in div 1 as we usually do. You can check the \u003ca href\u003d\"//codeforces.com/blog/entry/13271\"\u003eStatistics\u003c/a\u003e by By \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/DmitriyH\" title\u003d\"Expert DmitriyH\"\u003eDmitriyH\u003c/a\u003e for detail.\u003c/p\u003e\u003cp\u003eProblem B, C is by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/sevenkplus\" title\u003d\"Grandmaster sevenkplus\"\u003esevenkplus\u003c/a\u003e, problem D is by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/xlk\" title\u003d\"International master xlk\"\u003exlk\u003c/a\u003e and problem A, E is by me. \u003c/p\u003e\u003cp\u003eProblem E is rather complicated then hard, it means if you carefully broke down the problem into smaller ones, it became quite straightforward. During the contest, only \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/kcm1700\" title\u003d\"Grandmaster kcm1700\"\u003ekcm1700\u003c/a\u003e managed to solve it successfully. \u003c/p\u003e\u003cp\u003eProblem D, which decided the round boiled down to the following nice Dynamic Programming subproblem: you are given \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e20\u003c/sup\u003e\u003c/span\u003e numbers. For each position i between 0 and \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e20\u003c/sup\u003e - 1\u003c/span\u003e, and for each distance \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e between 0 and 20, what is the sum of the numbers with such indexes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e differ in exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e bits? The fun part is not how to do it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e times, it is how to do it even once on \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e numbers.\u003c/p\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Petr\" title\u003d\"International Grandmaster Petr\"\u003ePetr\u003c/a\u003e solve A, B, C, D steadily and fast who indisputably, is the winner of the round. The second place came to \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/msg555\" title\u003d\"Grandmaster msg555\"\u003emsg555\u003c/a\u003e, closely followed by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/cgy4ever\" title\u003d\"Grandmaster cgy4ever\"\u003ecgy4ever\u003c/a\u003e. It is worth mentioning that, \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/cgy4ever\" title\u003d\"Grandmaster cgy4ever\"\u003ecgy4ever\u003c/a\u003e solved Problem D in the last few seconds which is quite impressive.\u003c/p\u003e\u003ch1\u003eEditorial\u003c/h1\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/454/A\"\u003eProblem 2A. Little Pony and Crystal Mine\u003c/a\u003e\u003c/h3\u003e\u003ch4\u003eBrief description:\u003c/h4\u003e\u003cp\u003eDraw the grid graph as the problem said. \u003c/p\u003e\u003ch4\u003eAnalysis:\u003c/h4\u003e\u003cp\u003eJust a few basics of your programming language. It\u0027s easy.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/454/B\"\u003eProblem 2B. Little Pony and Sort by Shift\u003c/a\u003e\u003c/h3\u003e\u003ch4\u003eBrief description:\u003c/h4\u003e\u003cp\u003eAsk the minimum unit shift you need to sort a array.\u003c/p\u003e\u003ch4\u003eAnalysis:\u003c/h4\u003e\u003cp\u003eJust a few basics of your programming language. It\u0027s not hard.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/453/A\"\u003eProblem A. Little Pony and Expected Maximum\u003c/a\u003e\u003c/h3\u003e\u003ch4\u003eBrief description:\u003c/h4\u003e\u003cp\u003eCalculate the expected maximum number after tossing a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e faces dice \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e times.\u003c/p\u003e\u003ch4\u003eAnalysis:\u003c/h4\u003e\u003cp\u003eTake \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e \u003d 6, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e \u003d 2 as a instance.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e6 6 6 6 6 6\n5 5 5 5 5 6\n4 4 4 4 5 6\n3 3 3 4 5 6\n2 2 3 4 5 6\n1 2 3 4 5 6\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEnumerate the maximum number, the distribution will be a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e-dimensional super-cube with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e-length-side. Each layer will be a large cube minus a smaller cube. So we have:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2a/ed/2aede49a2c6f455a4cb3af6fe16b61f4da56aa87.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eCalculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e may cause overflow, we could move the divisor into the sum and calculate \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e / \u003ci\u003em\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e instead.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/453/B\"\u003eProblem B. Little Pony and Harmony Chest\u003c/a\u003e\u003c/h3\u003e\u003ch4\u003eBrief description:\u003c/h4\u003e\u003cp\u003eYou are given sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, find a pairwise coprime sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e which minimizes \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fc/c9/fcc9e09f6a0a248242896e567cc1b4053c75509c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch4\u003eAnalysis:\u003c/h4\u003e\u003cp\u003eSince {1, 1 \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e, 1} is a pairwise coprime sequence, the maximum element of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can never greater then \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003emx\u003c/i\u003e - 1\u003c/span\u003e. Here \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003c/span\u003e is the maximum elements in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. So what we need consider is the first a few prime factors. It is not hard to use bitmask-dp to solve this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e    for (int i \u003d 1 ; i \u0026lt;\u003d n ; i ++) {\n    \tfor (int k \u003d 1 ; k \u0026lt; 60 ; k ++) {\n    \t\tint x \u003d (~fact[k]) \u0026amp; ((1 \u0026lt;\u0026lt; 17) - 1);\n    \t\tfor (int s \u003d x ; ; s \u003d (s - 1) \u0026amp; x) {\n                if (dp[i - 1][s] + abs(a[i] - k) \u0026lt; dp[i][s | fact[k]]){\n                    dp[i][s | fact[k]] \u003d dp[i-1][s] + abs(a[i]-k);\n                }\n    \t\tif (s \u003d\u003d 0) break;\n            }\n    \t}\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere \u003ccode\u003edp[i][s]\u003c/code\u003e: means the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e items of the sequence, and the prime factor have already existed. And \u003ccode\u003efact[k]\u003c/code\u003e： means the prime factor set of number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/453/C\"\u003eProblem C. Little Pony and Summer Sun Celebration\u003c/a\u003e\u003c/h3\u003e\u003ch4\u003eBrief description:\u003c/h4\u003e\u003cp\u003eGiven a undirected graph with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e nodes and the parity of the number of times that each place is visited. Construct a consistent path.\u003c/p\u003e\u003ch4\u003eAnalysis:\u003c/h4\u003e\u003cp\u003eThere is no solution if there is more than 1 connected component which have odd node (because we can\u0027t move between two component), otherwise it is always solvable.\u003c/p\u003e\u003cp\u003eThis fact is not obvious, let\u0027s focus on one component. You can select any node to start, denoted it as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e (root). Start from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, you can go to any other odd node then back. Each time you can eliminate one odd node. After that, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e itself is odd, you can simply delete the first or last element in your path (it must be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eThe only spot of the above method is the size of the path can been large as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e. We need a more local observation. Let\u0027s check the following dfs() function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid dfs(int u \u003d r, int p \u003d -1){\n    \n    vis[u] \u003d true;\n    add_to_path(u);\n\n    for_each(v in adj[u]) if (!vis[v]){\n        dfs(v, u);\n        add_to_path(u);\n    }\n\n    if (odd[u] \u0026amp;\u0026amp; p !\u003d -1){\n        add_to_path(p);\n        add_to_path(u);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis \u003ccode\u003edfs()\u003c/code\u003e maintain the following loop invariant: before we leave a node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e, we clear all odd node in the sub-tree rooted at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e as well as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e itself. \u003c/p\u003e\u003cp\u003eThe only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e can break the invariant is the root itself. So after dfs(), we use O(1) time to check weather root is still a odd node, if yes, delete the first or last element of the path (it must be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eAfter that, all the node will been clear, each node can involve at most 4 items in the path. So the size of the path will less than or equal to \u003cspan class\u003d\"tex-span\"\u003e4\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Thus the overall complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/453/D\"\u003eProblem D. Little Pony and Elements of Harmony\u003c/a\u003e\u003c/h3\u003e\u003ch4\u003eBrief description:\u003c/h4\u003e\u003cp\u003eGiven you a vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e and a transformation matrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e. Caculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eeA\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e under modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003eAnalysis:\u003c/h4\u003e\u003cp\u003eLet\u0027s consider the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e \u003d [1 1 \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e 1]. After a period, it will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eke\u003c/i\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is a const. So we know that [1 1, \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e, 1] is an eigenvector and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is the corresponding an eigenvalue.\u003c/p\u003e\u003cp\u003eThe linear transformation has \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e eigenvectors. \u003c/p\u003e\u003cp\u003eThe \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e(0 ≤ \u003ci\u003ei\u003c/i\u003e \u0026lt; 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e-th \u003c/p\u003e\u003cp\u003eeigenvector is [(-1)^f(0, i) (-1)^f(1, i) \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e (-1)^f(2^m-1, i)], where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e) means that the number of ones in the binary notation of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWe notice that the eigenvalue is only related to the number of ones in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, and it is not hard to calc one eigenvalue in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e)\u003c/span\u003e time. To decompose the initial vector to the eigenvectors, we need \u003ca href\u003d\"http://en.wikipedia.org/wiki/Fast_Walsh%E2%80%93Hadamard_transform\"\u003eFast Walsh–Hadamard transform\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAlso check SRM 518 1000 for how to use FWT. \u003ca href\u003d\"http://apps.topcoder.com/wiki/display/tc/SRM+518\"\u003ehttp://apps.topcoder.com/wiki/display/tc/SRM+518\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn the last step, we need divide n. We can mod (p * n) in the precedure and divide n directly.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/453/E\"\u003eProblem E. Little Pony and Lord Tirek\u003c/a\u003e\u003c/h3\u003e\u003ch4\u003eBrief description:\u003c/h4\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e ponies (from 1 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e) in a line, each pony has:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e: the start mana.\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e: the maximum mana.\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e: mana regeneration per unit time.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eAlso, you have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e operations called Absorb Mana \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003ci\u003el\u003c/i\u003e \u003ci\u003er\u003c/i\u003e\u003c/span\u003e. For each operations, at time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, count how many mana from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e. After that, reset each pony\u0027s mana to 0.\u003c/p\u003e\u003ch4\u003eAnalysis:\u003c/h4\u003e\u003ch5\u003eKey Observation\u003c/h5\u003e\u003cp\u003eThe income of a operation, is only relevant with the previous operation. In other words, what we focus on is the difference time between adjacent operations.\u003c/p\u003e\u003ch5\u003eWeaken the problem\u003c/h5\u003e\u003cp\u003eLet us assume \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 1\u003c/span\u003e at the beginning to avoid disrupting when we try to find the main direction of the algorithm. Also it will be much easier if the problem only ask the sum of all query. One of the accepted method is following:\u003c/p\u003e\u003cp\u003eFirstly, for each operation (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e), we split it into a insert event on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e, and a delete event \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e + 1\u003c/span\u003e. Secondly, we use scanning from left to right to accumulate the contributions of each pony.\u003c/p\u003e\u003cp\u003eIn order to do that, you need a balanced tree to maintenance the difference time between adjacent operations, and a second balanced tree to maintenance some kind of prefixes sum according to those \u0026quot;difference\u0026quot;.\u003c/p\u003e\u003cp\u003eThe first balanced tree could been implemented by STL::SET. For each operation, you need only constant insert and delete operations on those balanced tree, thus the overall complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlogn\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch5\u003eGeneral solution\u003c/h5\u003e\u003cp\u003eInstead of scanning, now we use a balanced tree to maintenance the intervals which have same previous operation time and use a functional interval tree to maintenance those ponies. For each operation, we use binary search on the first balanced tree, and query on the second balanced tree. Thus the overall complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlog\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}