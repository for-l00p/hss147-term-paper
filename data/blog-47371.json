{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1474910296,"rating":58,"authorHandle":"Errichto","modificationTimeSeconds":1474976729,"id":47371,"title":"\u003cp\u003eHow to stress test two programs millions times? Help\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eBoth a participant and a contest organizer sometimes wants to stress test their solution with the brute force. Sometimes random tests are quite weak and one needs many thousands (and sometimes millions) of them to become sure about the correctness. The thing is that running a program is quite slow itself, what may hurt if the computation part is fast. On my laptop running a C++ program with empty main() one thousand times takes 1.3s, what doesn\u0027t satisfy me. How to make it faster?\u003c/p\u003e\u003cp\u003eI recently prepared a problem with a binary grid (SRM 699, div1-hard TwoSquares) and I wanted to be very careful about the correctness. I wrote slow solutions in C++ and the intended one in Java. Only then I realized how slow usual stress testing is. If they all were in one language, I would quite easily get everything into one program with classes (structs) and I would just run it once, without any overheads. But since the languages were different, I had to rewrite one solution, what not only requires time, but also is a possible place for a mistake.\u003c/p\u003e\u003cp\u003eDoes running a program on Windows take the similar amount of time? Is it possible to run a program on Ubuntu or Windows faster than in a milisecond? Given two programs in C++, how to automatically merge them into one program and test them (this feature would be awesome in Polygon I think, where stress testing is able to process only thousands of tests too)?\u003c/p\u003e\u003cp\u003eRegarding my last question (automatically merging two programs) some idea is to wrap everything except includes into a struct and creating one global instance of such a struct. It should be automatically zero-ed (all global variables should be 0, as the user intended).\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ecode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nStruct P1 {\n\tint s, t[100000];\n\tint main() {\n\t\tint n;\n\t\tscanf(\u0026quot;%d\u0026quot;, \u0026amp;n);\n\t\tfor(int i \u003d 0; i \u0026lt; n; ++i) {\n\t\t\tscanf(\u0026quot;%d\u0026quot;, \u0026amp;t[i]);\n\t\t\ts +\u003d t[i];\n\t\t}\n\t\tprintf(\u0026quot;%d\\n\u0026quot;, s);\n\t\treturn 0;\n\t}\n} P1_global;\n\nstruct P2 {\n\t// something similar\n} P2_global;\n\nint main() {\n\tfor(int rep \u003d 0; rep \u0026lt; 1000; ++rep) {\n\t\t// generate the test and either print it to the file or put it to some stream\n\t\tauto p1 \u003d P1_global;\n\t\tp1.main();\n\t\tauto p2 \u003d P2_global;\n\t\tp2.main();\n\t\t// compare outputs\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThe good thing is that the memory doesn\u0027t become huge if we process many tests (or does it?). But \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/mnbvmar\" title\u003d\"International Grandmaster mnbvmar\"\u003emnbvmar\u003c/a\u003e noticed that it won\u0027t work for \u003ccode\u003estatic\u003c/code\u003e variables. Any way to make it work? Any other ideas?\u003c/p\u003e\u003c/div\u003e","tags":["stress test","codeforces polygon","polygon","preparing problems","testing"]}}