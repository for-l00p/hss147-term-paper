{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1425319984,"rating":151,"authorHandle":"Endagorion","modificationTimeSeconds":1425379533,"id":16736,"title":"\u003cp\u003eCodeforces Round #295 Editorial (now with bonuses!)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eWe would like to thank the testers of this round\u0027s and Winter Computer Camp olympiad\u0027s problems: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/alger95\" title\u003d\"Master alger95\"\u003ealger95\u003c/a\u003e, \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/thefacetakt\" title\u003d\"Expert thefacetakt\"\u003ethefacetakt\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/adamant\" title\u003d\"Candidate Master adamant\"\u003eadamant\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/dragonic\" title\u003d\"Candidate Master dragonic\"\u003edragonic\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Who179\" title\u003d\"Candidate Master Who179\"\u003eWho179\u003c/a\u003e, \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/ASverdlov\" title\u003d\"Expert ASverdlov\"\u003eASverdlov\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eMake sure to comment if you find any mistakes.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD\u003c/strong\u003e: I\u0027ve just remembered to put up the usual challenges for the problems. So, here they go.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/520/problem/A\" title\u003d\"Codeforces Round 295 (Div. 2)\"\u003e520A - Pangram\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Endagorion\" title\u003d\"International Grandmaster Endagorion\"\u003eEndagorion\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePreparation: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Endagorion\" title\u003d\"International Grandmaster Endagorion\"\u003eEndagorion\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTo check that every letter is present in the string we can just make a boolean array of size 26 and for every letter set the corresponding variable to TRUE. In the end check that there are 26 TRUEs. That is an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e solution. Also don\u0027t forget to change all letters to lowercase (or all to uppercase). \u003c/p\u003e\u003cp\u003eTo make all the letters lowercase, one could use standard functions, like \u003ccode\u003etolower\u003c/code\u003e in Python. Also, it is known that the letters from \u003ccode\u003ea\u003c/code\u003e to \u003ccode\u003ez\u003c/code\u003e have consecutive ASCII numbers, as well as \u003ccode\u003eA\u003c/code\u003e to \u003ccode\u003eZ\u003c/code\u003e; an ASCII number of symbol is \u003ccode\u003eord(c)\u003c/code\u003e in most languages. So, to get the number of a lowercase letter in the alphabet one can use \u003ccode\u003eord(c) - ord(\u0027a\u0027)\u003c/code\u003e in most languages, or simply \u003ccode\u003ec - \u0027a\u0027\u003c/code\u003e in C++ or C (because a \u003ccode\u003echar\u003c/code\u003e in C/C++ can be treated as a number); to check if a letter is lowercase, the inequality \u003ccode\u003eord(\u0027a\u0027) \u0026lt;\u003d ord(c) \u0026amp;\u0026amp; ord(c) \u0026lt;\u003d ord(\u0027z\u0027)\u003c/code\u003e should be checked.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: how many pangrams of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e are there? Strings that differ only in capitalization of some letters are considered distinct. Can you find the answer modulo some prime \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e in linear time?\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/520/problem/B\" title\u003d\"Codeforces Round 295 (Div. 2)\"\u003e520B - Two Buttons\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Endagorion\" title\u003d\"International Grandmaster Endagorion\"\u003eEndagorion\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePreparation: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Endagorion\" title\u003d\"International Grandmaster Endagorion\"\u003eEndagorion\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe simplest solution is simply doing a breadth-first search. Construct a graph with numbers as vertices and edges leading from one number to another if an operation can be made to change one number to the other. We may note that it is never reasonable to make the number larger than \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003em\u003c/i\u003e\u003c/span\u003e, so under provided limitations the graph will contain at most \u003cspan class\u003d\"tex-span\"\u003e2·10\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e\u003c/span\u003e vertices and \u003cspan class\u003d\"tex-span\"\u003e4·10\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e\u003c/span\u003e edges, and the BFS should work real fast.\u003c/p\u003e\u003cp\u003eThere is, however, an even faster solution. The problem can be reversed as follows: we should get the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e starting from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e using the operations \u0026quot;add 1 to the number\u0026quot; and \u0026quot;divide the number by 2 if it is even\u0026quot;.\u003c/p\u003e\u003cp\u003eSuppose that at some point we perform two operations of type 1 and then one operation of type 2; but in this case one operation of type 2 and one operation of type 1 would lead to the same result, and the sequence would contain less operations then before. That reasoning implies that in an optimal answer more than one consecutive operation of type 1 is possible only if no operations of type 2 follow, that is, the only situation where it makes sense is when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is smaller than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e and we just need to make it large enough. Under this constraint, there is the only correct sequence of moves: if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is smaller than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e, we just add 1 until they become equal; else we divide \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e by 2 if it is even, or add 1 and then divide by 2 if it is odd. The length of this sequence can be found in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: suppose we have a generalized problem: we want to get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e starting from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e using two operations \u0026quot;subtract \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e\u0026quot; and \u0026quot;multiply by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e\u0026quot;. Generalize the solution to find the minimal number of moves to get from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e are coprime. Can you do it if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e may have common divisors greater than 1?\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/520/problem/C\" title\u003d\"Codeforces Round 295 (Div. 2)\"\u003e520C - DNA Alignment\u003c/a\u003e/\u003ca href\u003d\"/contest/521/problem/A\" title\u003d\"Codeforces Round 295 (Div. 1)\"\u003e521A - DNA Alignment\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Endagorion\" title\u003d\"International Grandmaster Endagorion\"\u003eEndagorion\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePreparation: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Endagorion\" title\u003d\"International Grandmaster Endagorion\"\u003eEndagorion\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWhat is \u003cspan class\u003d\"tex-span\"\u003eρ(\u003ci\u003es\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e)\u003c/span\u003e equal to? For every character of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and every character of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e there is a unique cyclic shift of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e that superposes these characters (indeed, after 0, \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e shifts the character in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e occupies different positions, and one of them matches the one of the character of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e); therefore, there exist \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e cyclic shifts of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e that superpose these characters (the situation is symmetrical for every position of the character of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e). It follows that the input in \u003cspan class\u003d\"tex-span\"\u003eρ\u003c/span\u003e from a single character \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003c/span\u003e(the number of characters in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e). Therefore, \u003cspan class\u003d\"tex-span\"\u003eρ(\u003ci\u003es\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e)\u003c/span\u003e is maximal when every character of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e occurs the maximal possible number of times in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. Simply count the number of occurences for every type of characters; the answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e is the number of character types that occur in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e most frequently. This is an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e solution.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: we know that \u003cspan class\u003d\"tex-span\"\u003eρ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003es\u003c/i\u003e) \u003d \u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e·\u003ci\u003eC\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003c/span\u003e is the maximal number that any character occurs in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. How many strings \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e with characters from an alphabet of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e) \u003d \u003ci\u003em\u003c/i\u003e\u003c/span\u003e? Can you find an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ekn\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e solution? An \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/09/66/096653ded750cc65e2be61f543e5567b595728e1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution? An \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e5/79/e579b7500fe89be09f2cec114ee712e77fad719c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution? Maybe even better? (Hint: the modulo should be an \u003cem\u003eappropriately chosen\u003c/em\u003e prime number for a fast solution \u003d)).\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/520/problem/D\" title\u003d\"Codeforces Round 295 (Div. 2)\"\u003e520D - Cubes\u003c/a\u003e/\u003ca href\u003d\"/contest/521/problem/B\" title\u003d\"Codeforces Round 295 (Div. 1)\"\u003e521B - Cubes\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/savinov\" title\u003d\"International master savinov\"\u003esavinov\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePreparation: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/savinov\" title\u003d\"International master savinov\"\u003esavinov\u003c/a\u003e, \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/sokian\" title\u003d\"International master sokian\"\u003esokian\u003c/a\u003e, \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/zemen\" title\u003d\"International master zemen\"\u003ezemen\u003c/a\u003e\u003c/p\u003e\u003cp\u003eBasically, the first player should maximize the lexicographical order of numbers, and the second player should minimize it. Thus, at every move the first player should choose the largest available number, and the second should choose the minimal one.\u003c/p\u003e\u003cp\u003eFirst of all, how do we check if the cube can be removed? It is impossible only if there is some cube \u0026quot;supported\u0026quot; by it (i.e., it has coordinates \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e - 1, \u003ci\u003ey\u003c/i\u003e + 1)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e + 1)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e + 1, \u003ci\u003ey\u003c/i\u003e + 1)\u003c/span\u003e) such that our cube is the only one supporting it. This can be checked explicitly. The large coordinates\u0027 limitations do not allow us to store a simply array for that, so we should use an associative array, like a \u003ccode\u003eset\u003c/code\u003e in C++.\u003c/p\u003e\u003cp\u003eNow we should find the maximal/minimal number that can be removed. A simple linear search won\u0027t work fast enough, so we store another data structure containing all numbers available to remove; the structure should allow inserting, erasing and finding global minimum/maximum, so the \u003ccode\u003eset\u003c/code\u003e C++ structure fits again.\u003c/p\u003e\u003cp\u003eWhen we\u0027ve made our move, some cubes may have become available or unavailable to remove. However, there is an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e amount of cubes we have to recheck and possibly insert/erase from our structure: the cubes \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e ± 1, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e ± 2, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e may have become unavailable because some higher cube has become dangerous (that is, there is a single cube supporting it), and some of the cubes \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e - 1, \u003ci\u003ey\u003c/i\u003e - 1)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e - 1)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e + 1, \u003ci\u003ey\u003c/i\u003e - 1)\u003c/span\u003e may have become available because our cube was the only dangerous cube that it has been supporting. Anyway, a simple recheck for these cubes will handle all the cases.\u003c/p\u003e\u003cp\u003eThis solution is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e if using the appropriate data structure.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e (inspired by questions from \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/jk_qq\" title\u003d\"Expert jk_qq\"\u003ejk_qq\u003c/a\u003e and \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/AmrMahmoud\" title\u003d\"Expert AmrMahmoud\"\u003eAmrMahmoud\u003c/a\u003e): suppose that the players put the numbers from right to left, that is, from the least significant digit to the most significant. The first player still wants to maximize the resulting number, and the second wants to minimize it. If the original rules of taking cubes apply, finding the optimal strategy for the players seems intractable. Try to solve this problem in the case where all the cubes are stacked in several independent towers; that is, a cube may only be taken from the top of any tower.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/520/problem/E\" title\u003d\"Codeforces Round 295 (Div. 2)\"\u003e520E - Pluses everywhere\u003c/a\u003e/\u003ca href\u003d\"/contest/521/problem/C\" title\u003d\"Codeforces Round 295 (Div. 1)\"\u003e521C - Pluses everywhere\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Endagorion\" title\u003d\"International Grandmaster Endagorion\"\u003eEndagorion\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePreparation: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/gchebanov\" title\u003d\"Grandmaster gchebanov\"\u003egchebanov\u003c/a\u003e, \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/DPR-pavlin\" title\u003d\"International master DPR-pavlin\"\u003eDPR-pavlin\u003c/a\u003e\u003c/p\u003e\u003cp\u003eConsider some way of placing all the pluses, and a single digit \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (digits in the string are numbered starting from 0 from left to right). This digit gives input of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e·10\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e to the total sum, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e is the distance to the nearest plus from the right, or to the end of string if there are no pluses there. If we sum up these quantities for all digits and all ways of placing the pluses, we will obtain the answer.\u003c/p\u003e\u003cp\u003eFor a given digit \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and some fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e, how many ways are there to place the pluses? First of all, consider the case when the part containing the digit \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is not last, that is, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003el\u003c/i\u003e \u0026lt; \u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e. There are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e gaps to place pluses in total; the constraint about \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and the distance \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e means that after digits \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003el\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e there are no pluses, while after the digit \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003el\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e there should be a plus. That is, the string should look as follows:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/76/0d/760dc7c4a2c90fe57af39a2477a25e87596329b9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eHere a dot means a gap without a plus, and a question mark means that it\u0027s not important whether there is a plus or not. So, out of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e possible gaps there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e + 1\u003c/span\u003e gaps which states are defined, and there is one plus used in these gaps. That means that the other \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e - 1) - (\u003ci\u003el\u003c/i\u003e + 1) \u003d \u003ci\u003en\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e - 2\u003c/span\u003e gaps may contain \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e pluses in any possible way; that is, the number of such placements is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/79/f6/79f6d25b862acd1771253f8c8430f383b40bde31.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. A similar reasoning implies that if the digit \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is in the last part, that is, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003el\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e, the number of placements is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/81/36/8136f78a85b8e129dc4e67f7c3c2e0ce82078a86.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eTo sum up, the total answer is equal to \u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9b/ff/9bff35be4f00882e770e07370d1d529b2427031f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eLet us transform the sum:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/37/27/372741cf14ec856619237ef8650b798fdd3ae0d6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eTo compute these sums, we will need to know all powers of 10 up to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e-th (modulo \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e + 7\u003c/span\u003e), along with the binomial coefficients. To compute the binomials, recall that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/78/5c/785c0052a157bbc7ec2c1694233fd9a222ca6c93.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, so it is enough to know all the numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e!\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e upto \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, along with their modular inverses. Also we should use the prefix sums of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, that is, the array \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/02/4f/024fc6ff8d53b3edcbf62d9b2202ce8fc4502539.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. The rest is simple evaluation of the above sums.\u003c/p\u003e\u003cp\u003eThe total complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4b/a4/4ba48d0264ae640ffa15dcee5a6031e7a4b3c8be.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, because the common algorithms for modular inverses (that is, Ferma\u0027s little theorem exponentiation or solving a diophantine equation using the Euclid\u0027s algorithm) have theoritcal worst-case complexity of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/63/0e/630e8c96a9b6f931de8880d73ae23b4728efacb4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. However, one can utilize a neat trick for finding modular inverses for first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e consecutive numbers in linear time for a total complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e; for the description of the method refer to this \u003ca href\u003d\"http://codeforces.ru/blog/entry/13908#comment-188854\"\u003ecomment\u003c/a\u003e by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Kaban-5\" title\u003d\"Candidate Master Kaban-5\"\u003eKaban-5\u003c/a\u003e (not sure why it has a negative rating, I found this quite insightful; maybe anyone can give a proper source for this method?).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: now we want to find the sum of all expressions that are made by placing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e pluses with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003ek\u003c/i\u003e ≤ \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e; that is, we want to find the sum of the answers for the original problem with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d \u003ci\u003ea\u003c/i\u003e, ..., \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e; here \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e can be any integers with \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003eb\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e. There is an obvious \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e solution: just find the answers for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e separately. Can you find a linear solution?\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/521/problem/D\" title\u003d\"Codeforces Round 295 (Div. 1)\"\u003e521D - Shop\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Endagorion\" title\u003d\"International Grandmaster Endagorion\"\u003eEndagorion\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePreparation: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/gchebanov\" title\u003d\"Grandmaster gchebanov\"\u003egchebanov\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSuppose the only type of upgrades we have is multiplication. It doesn\u0027t even matter for the answer which particular skill we are going to multiply, so we just choose several upgrades with greatest values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow we have additions as well; set multiplications aside for a moment. It is clear that for every skill we should choose several largest additions (maybe none). Let us sort the additions for every skill by non-increasing; now we should choose several first upgrades for each type. Now, for some skill the (non-increasing) sorted row of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e\u0027s is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e...\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, and the initial value of the skill is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. Now, as we have decided to take some prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e\u0027s, we know that if we take the upgrade \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, the value changes from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + ... + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + ... + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. That is, the ratio by which the value (and the whole product of values) is going to be multiplied by is the fraction \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/80/d1/80d1b28f46746a5bb26df3f8bf50374f1b54b4c9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Now, with that ratio determined unambigiously for each addition upgrade, every addition has actually become a multiplication. \u003d) So we have to compute the ratios for all additions (that is, we sort \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e\u0027s for each skill separately and find the fractions), and then sort the multiplications and additions altogether by the ratio they affect the whole product with. Clearly, all multiplications should be used after all the additions are done; that is, to choose which upgrades we use we should do the ratio sorting, but the order of actual using of upgrades is: first do all the additions, then do all the multiplications.\u003c/p\u003e\u003cp\u003eFinally, let\u0027s deal with the assignment upgrades. Clearly, for each skill at most one assignment upgrade should be used, and if it used, it should the assignment upgrade with the largest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e among all assignments for this skill. Also, if the assignment is used, it should be used before all the additions and multiplications for this skill. So, for each skill we should simply determine whether we use the largest assignment for this skill or not. However, if we use the assignment, the ratios for the additions of current skill become invalid as the starting value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is altered.\u003c/p\u003e\u003cp\u003eTo deal with this problem, imagine that we have first chosen some addition upgrades, and now we have to choose whether we use the assignment upgrade or not. If we do, the value of the skill changes from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + ... + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + ... + \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. That is, the assignment here behaves pretty much the same way as the addition of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. The only difference is that once we have chosen to use the assignment, we should put it before all the additions.\u003c/p\u003e\u003cp\u003eThat is, all largest assigments for each skill should be made into additions of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and processed along with all the other additions, which are, as we already know, going to become multiplications in the end. \u003d)\u003c/p\u003e\u003cp\u003eFinally, the problem is reduced to sorting the ratios for all upgrades. Let us estimate the numbers in the fractions. The ratio for a multiplication is an integer up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e; the ratio for an addition is a fraction of general form \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/66/a4/66a432ed60ed6513b29a49d21cb3bd4d9fd541f7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. As \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e can be up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e, the numerator and denominator of such fraction can go up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e11\u003c/sup\u003e\u003c/span\u003e. To compare fractions \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/22/48/22488d5cb457dc2f9b4aad43391b289e7d082922.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/79/0d/790dac5b2fbfd2e79476cfb1b7cba21944d25b29.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e we should compare the products \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ead\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebc\u003c/i\u003e\u003c/span\u003e, which can go up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e22\u003c/sup\u003e\u003c/span\u003e by our estimates. That, unfortunately, overflows built-in integer types in most languages. However, this problem can be solved by subtracting 1 from all ratios (which clearly does not change the order of ratios), so that the additions\u0027 ratios will look like \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d9/d2/d9d269546a6f43cf1d1d08b2514911b01ea3e3e3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Now, the numerator is up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e, the products in the comparison are up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e17\u003c/sup\u003e\u003c/span\u003e, which fits in 64-bit integer type in any language.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: suppose that you have to compare two fractions \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/22/48/22488d5cb457dc2f9b4aad43391b289e7d082922.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/79/0d/790dac5b2fbfd2e79476cfb1b7cba21944d25b29.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e may be up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e18\u003c/sup\u003e\u003c/span\u003e. What way would you use to do that? Can you find a simple solution that does not involve long arithmetics, floating-point number or magic built-in integer types tricks (but may perform a non-constant number of operations)?\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/521/problem/E\" title\u003d\"Codeforces Round 295 (Div. 1)\"\u003e521E - Cycling City\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Endagorion\" title\u003d\"International Grandmaster Endagorion\"\u003eEndagorion\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePreparation: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Endagorion\" title\u003d\"International Grandmaster Endagorion\"\u003eEndagorion\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe have to find two vertices in an undirected graph such that there exist three vertex- and edge-independent paths between them. This could easily be a flow problem if not for the large constraints.\u003c/p\u003e\u003cp\u003eFirst of all, we can notice that all the paths between vertices should lie in the same \u003ca href\u003d\"http://en.wikipedia.org/wiki/Biconnected_component\"\u003ebiconnected component\u003c/a\u003e of the graph. Indeed, for every simple cycle all of its edges should lie in the same biconnected component, and the three-paths system is a union of cycles. Thus, we can find all the biconnected components of the graph and try to solve the problem for each of them independently. The computing of biconnected components can be done in linear time; a neat algorithm for doing this is described in the Wikipedia article by the link above.\u003c/p\u003e\u003cp\u003eNow, we have a biconnected component and the same problem as before. First of all, find any cycle in this component (with a simple DFS); the only case of a biconnected component that does not contain a cycle is a single edge, which is of no interest. Suppose that no vertex of this cycle has an adjacent edge that doesn\u0027t lie in the cycle; this means the cycle is not connected to anything else in the component, so the component is this cycle itself, in which case there is clearly no solution.\u003c/p\u003e\u003cp\u003eOtherwise, find a vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e with an adjacent edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e that doesn\u0027t lie in the cycle (denote it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e). If we can find a path \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e starting with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e that arrives at a cycle vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e (different from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e), then we can find three vertex-distinct paths between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e: one path is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, and two others are halves of the initial cycle. To find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, start a DFS from the edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e that halts when it arrives to vertex of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e (that is different from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e) and recovers all the paths.\u003c/p\u003e\u003cp\u003eWhat if we find that no appropriate path \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e exists? Denote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e the component traversed by the latter DFS. The DFS did not find any path between vertices of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\\ {\u003ci\u003ev\u003c/i\u003e}\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\\ {\u003ci\u003ev\u003c/i\u003e}\u003c/span\u003e, therefore every such path should pass through \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. That means that upon deletion of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, the component \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\\ {\u003ci\u003ev\u003c/i\u003e}\u003c/span\u003e becomes separated from all vertices of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\\ {\u003ci\u003ev\u003c/i\u003e}\u003c/span\u003e, which contradicts with the assumption that the component was biconnected. That reasoning proves that the DFS starting from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e will always find the path \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and find the answer if only a biconnected component was not a cycle nor a single edge.\u003c/p\u003e\u003cp\u003eFinally, we obtain that the only case when the answer is non-existent is when all the biconnected components are single edges or simple cycles, that is, the graph is a union of disconnected \u003ca href\u003d\"http://en.wikipedia.org/wiki/Cactus_graph\"\u003ecactuses\u003c/a\u003e. Otherwise, a couple of DFS are sure to find three vertex-disjoint paths. This yields an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e solution; a few logarithmic factors for simplification here and there are also allowed.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: how many graphs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/span\u003e on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e labeled vertices exist such that there exist two vertices of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/span\u003e connected by three disjoint paths? (Hint: we have already shown that it suffices to count the number of disjoint unions of \u003cem\u003ecacti\u003c/em\u003e.) Find the answer modulo \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e + 7\u003c/span\u003e. Can you come up with any polynomial-time solution? An \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e solution? Maybe even better?\u003c/p\u003e\u003c/div\u003e","tags":[]}}