{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1427737426,"rating":46,"authorHandle":"RussianCodeCup","modificationTimeSeconds":1427737426,"id":17210,"title":"\u003cp\u003eRussian Code Cup 2015 — Qual 1 — Разбор задач\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eВсем привет! \u003c/p\u003e \u003cp\u003eМы рады представить вашему вниманию разбор задач первого квалификационного раунда Russian Code Cup и заодно напомнить, что тем, кто не смог пройти квалификацию с первого раза, стоит принять участие во втором квалификационном раунде, который состоится \u003ca href\u003d\"http://www.timeanddate.com/worldclock/fixedtime.html?msg\u003dRussian+Code+Cup+2015+-+Qual+2\u0026amp;iso\u003d20150425T12\u0026amp;p1\u003d166\u0026amp;ah\u003d2\"\u003e25 апреля в 12-00 по московскому времени\u003c/a\u003e.\u003c/p\u003e \u003ch2\u003eЗадача A. Магические карточки.\u003c/h2\u003e\u003cp\u003e\u003cb\u003eИдея:\u003c/b\u003e Виталий Аксёнов.\u003cbr /\u003e \u003cb\u003eРеализация:\u003c/b\u003e Григорий Шовкопляс.\u003cbr /\u003e \u003cb\u003eРазбор:\u003c/b\u003e Григорий Шовкопляс.\u003cbr /\u003e \u003c/p\u003e\u003cp\u003e  В задаче требуется проверить, верно ли, что Гриша в любом случае выиграет раунд,  независимо от выбранных карточек. \u003c/p\u003e \u003cp\u003e  Рассмотрим случай, когда у Гриши будут выбраны \u003ci\u003el\u003c/i\u003e минимальных карточек,  а у Димы \u003ci\u003el\u003c/i\u003e максимальных. Очевидно, что если в этом случае Гриша выиграет,  то он выиграет в любом другом,  так как если заменить среди выбранных любую карточку на другую из набора данного игрока,  то сумма у Димы не увеличится, а у Гриши не уменьшится.\u003cbr /\u003e\u003c/p\u003e \u003cp\u003e  Таким образом, чтобы решить задачу, нужно просто отсортировать карточки Гриши по возрастанию,  а Димы по убыванию. После чего найти суммы первых \u003ci\u003el\u003c/i\u003e чисел в обоих наборах и сравнить их.  Если сумма Гриши больше, то он выиграет любой раунд, иначе – нет. \u003c/p\u003e \u003ch2\u003eЗадача B. Домашнее задание.\u003c/h2\u003e \u003cb\u003eИдея:\u003c/b\u003e Виталий Аксенов.\u003cbr /\u003e \u003cb\u003eРеализация:\u003c/b\u003e.Дмитрий Филиппов \u003cbr /\u003e \u003cb\u003eРазбор:\u003c/b\u003e Дмитрий Филиппов.\u003cbr /\u003e \u003cp\u003e  В задаче дано три числа \u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, \u003ci\u003ez\u003c/i\u003e, записанных в десятичной системе счисления, надо проверить,  верно ли, что \u003ci\u003ex\u003csub\u003ek\u003c/sub\u003e\u003c/i\u003e · \u003ci\u003ey\u003csub\u003ek\u003c/sub\u003e\u003c/i\u003e \u003d \u003ci\u003ez\u003csub\u003ek\u003c/sub\u003e\u003c/i\u003e  выполнено для бесконечного количества чисел \u003ci\u003ek\u003c/i\u003e (через \u003ci\u003ex\u003csub\u003ek\u003c/sub\u003e\u003c/i\u003e обозначено  значение числа \u003ci\u003ex\u003c/i\u003e, если считать, что оно записано в \u003ci\u003ek\u003c/i\u003e-ичной системе счисления). \u003c/p\u003e \u003cp\u003e Предположим, что таких \u003ci\u003ek\u003c/i\u003e существует бесконечно много. Тогда равенство должно быть выполнено для сколь угодно больших \u003ci\u003ek\u003c/i\u003e. Возьмем такую систему счисления, в которой при перемножении чисел \u003ci\u003ex\u003c/i\u003e и \u003ci\u003ey\u003c/i\u003e не будет переноса ни в одном разряде. Если в каком-либо разряде получилось число, больше либо равное 10, то равенство не будет выполнено для данного \u003ci\u003ek\u003c/i\u003e, а также для всех систем счисления с большим основанием, так как в них переноса тоже не будет. Значит, чтобы равенство было верно для бесконечного количества чисел \u003ci\u003ek\u003c/i\u003e, как минимум, при перемножении без переноса не должно быть разрядов с числами больше 9. Если это выполнено, остается только проверить, что получившееся произведение совпадает с числом \u003ci\u003ez\u003c/i\u003e, и если да, то ответ на задачу — «Infinity», иначе — «Finite». \u003c/p\u003e \u003ch2\u003eЗадача C. Конгресс юных любителей.\u003c/h2\u003e \u003cb\u003eИдея:\u003c/b\u003e Виталий Аксёнов.\u003cbr /\u003e \u003cb\u003eРеализация:\u003c/b\u003e Виталий Аксёнов.\u003cbr /\u003e \u003cb\u003eРазбор:\u003c/b\u003e Виталий Аксёнов.\u003cbr /\u003e \u003cp\u003e Данная задача является задачей динамического программирования. Давайте посчитаем следующий массив: \u003ci\u003ed\u003c/i\u003e[сколько мест с начала рассадили][какое количество из них философы][количество пар философ-математик сидящие вместе][типы людей на двух последних обработанных местах] — количество способов рассадить математиков и философов, опираясь только на их типы и условия задачи. Данный массив пересчитывается последовательно при добавлении нового места. То есть добавляем нового человека, перебираем какое количество философов сидит до него, перебираем его тип, проверяем, что условия про окружение и тип места выполняются (для этого мы и храним типы людей на двух предыдущих местах), возможно у нас появляется пара философ-математик, сидящие на соседних местах. \u003c/p\u003e \u003cp\u003e Пока мы не использовали, что люди из разных стран. Заметим, что если мы зафиксировали назначение типов, нам для подсчёта по странам нужно только знать, что в позициях философ-математик сидят люди не из одной страны. Также нужно отметить, что количество назначений стран зависит только от количества таких пар в назначении типов. Несложно по массиву \u003ci\u003ed\u003c/i\u003e получить массив \u003ci\u003ec\u003c/i\u003e, который по количеству пар возвращает количество соответствующих назначений типов. \u003c/p\u003e \u003cp\u003e Пусть \u003ci\u003ep\u003csub\u003en,k\u003c/sub\u003e\u003c/i\u003e — количество перестановок из \u003ci\u003en\u003c/i\u003e элементов, таких что нет неподвижных точек среди первых \u003ci\u003ek\u003c/i\u003e позиций. Тогда несложно убедиться, что ответ будет равен \u003ci\u003en\u003c/i\u003e! Σ\u003csub\u003e\u003ci\u003ei \u003d \u003c/i\u003e1\u003c/sub\u003e\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e \u003ci\u003ep\u003csub\u003en,i\u003c/sub\u003e · c\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e. \u003c/p\u003e \u003cp\u003e Осталось посчитать \u003ci\u003ep\u003c/i\u003e. Воспользуемся идеей для подсчёта перестановок без неподвижных точек, например описанной на \u003ca href\u003d\"https://ru.wikipedia.org/wiki/%C1%E5%F1%EF%EE%F0%FF%E4%EE%EA_%28%EF%E5%F0%E5%F1%F2%E0%ED%EE%E2%EA%E0%29\"\u003ewikipedia\u003c/a\u003e, и получим реккурентное выражение \u003ci\u003ep\u003csub\u003en,k\u003c/sub\u003e \u003d \u003c/i\u003e(\u003ci\u003en-\u003c/i\u003e1)\u003ci\u003e p\u003c/i\u003e\u003csub\u003en-1,k-1\u003c/sub\u003e\u003ci\u003e + \u003c/i\u003e(\u003ci\u003ek-\u003c/i\u003e1)\u003ci\u003e p\u003c/i\u003e\u003csub\u003en-2,k-2\u003c/sub\u003e, а \u003ci\u003ep\u003c/i\u003e\u003csub\u003en,0\u003c/sub\u003e \u003d \u003ci\u003en\u003c/i\u003e! и \u003ci\u003ep\u003c/i\u003e\u003csub\u003en,1\u003c/sub\u003e \u003d n!\u003ci\u003e — \u003c/i\u003e(\u003ci\u003en — \u003c/i\u003e1)!. \u003c/p\u003e \u003ch2\u003eЗадача D. Расшифровка.\u003c/h2\u003e \u003cb\u003eИдея:\u003c/b\u003e Дмитрий Филлипов.\u003cbr /\u003e \u003cb\u003eРеализация:\u003c/b\u003e Николай Ведерников.\u003cbr /\u003e \u003cb\u003eРазбор:\u003c/b\u003e Николай Ведерников.\u003cbr /\u003e \u003cp\u003e Для начало научимся решать задачу без модификаций. Для этого воспользуемся идеей динамического программирования. В \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] будет храниться количество способов получить префикс длины \u003ci\u003ei\u003c/i\u003e. Тогда переберем следующую исходную цифру \u003ci\u003ex\u003c/i\u003e, если зашифрованная цифра соответствует строке с позиции \u003ci\u003ei\u003c/i\u003e+1, тогда увеличиваем значение \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + \u003ci\u003elen\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)] на \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e], где \u003ci\u003elen\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) — длина зашифрованной цифры \u003ci\u003ex\u003c/i\u003e. \u003c/p\u003e \u003cp\u003e Теперь будем решать задачу с изменениями. Заметим, что при заданных ограничениях на коэффициенты трехчлена, одна цифра может превратиться в число, состоящее не более чем из трех цифр. Тогда для решения данной задачи воспользуемся деревом отрезков. В вершине, которая отвечает за отрезок от \u003ci\u003el\u003c/i\u003e до \u003ci\u003er\u003c/i\u003e, будем хранить 9 значений, количества способов получить подстроку c \u003ci\u003el\u003c/i\u003e + 02 позиции дo \u003ci\u003er\u003c/i\u003e − 02 позиции. Как построить такое дерево? \u003c/p\u003e\u003cul\u003e  \u003cli\u003eЕсли отрезок с \u003ci\u003el\u003c/i\u003e по \u003ci\u003er\u003c/i\u003e небольшой, то посчитаем значения с помощью динамического программирования. \u003c/li\u003e  \u003cli\u003eЕсли отрезок большой, то разобьем его на два и посчитаем соответствующие значения для них рекурсивно.  Теперь осталось научиться считать значение в узле,  если мы знаем значения в детях. Во-первых, когда правый и левый подотрезок соприкасаются, то это значение на их объединении  равно произведению значений на них.  Если же между ними есть расстояние, то есть от правого подотрезка берется значение без одного или двух символов слева, а  от левого подотрезка берем значение без одного или двух символов справа, то ответ будет равен количеству способов получить одно число между ними,  умножить на значение на правом подотрезке, и на значение на левом подотрезке.  \u003c/li\u003e \u003c/ul\u003e Ответ на всем отрезке будет лежать в корне дерева отрезков.  \u003cp\u003e Тогда, когда мы модифицируем одну цифру, мы обновляем значение в листе, а затем обновляем значения поднимаясь вверх. Так как глубина дерева отрезков есть \u003ci\u003eO\u003c/i\u003e(log (\u003ci\u003en\u003c/i\u003e)), где \u003ci\u003en\u003c/i\u003e — длина строки, то итоговое время работы \u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e log (\u003ci\u003en\u003c/i\u003e)),  где \u003ci\u003em\u003c/i\u003e — общее число запросов.\u003cbr /\u003e\u003c/p\u003e \u003ch2\u003eЗадача E. Занимательная криптография.\u003c/h2\u003e \u003cb\u003eИдея:\u003c/b\u003e Виталий Аксёнов.\u003cbr /\u003e \u003cb\u003eРеализация:\u003c/b\u003e Илья Збань.\u003cbr /\u003e \u003cb\u003eРазбор:\u003c/b\u003e Илья Збань.\u003cbr /\u003e \u003cp\u003e  В задаче нужно посчитать число строк, которые имеют данный хеш. \u003c/p\u003e \u003cp\u003eНаивное решение использует идею динамического программирования \u003ci\u003edp\u003csub\u003ei,j\u003c/sub\u003e\u003c/i\u003e — количество строк длины \u003ci\u003ei\u003c/i\u003e, имеющих хеш \u003ci\u003ej\u003c/i\u003e. Переходы можно делать за Σ, и решение получается за \u003ci\u003en\u003c/i\u003e·\u003ci\u003em\u003c/i\u003e·Σ.\u003c/p\u003e \u003cp\u003eЭто решение можно ускорить до \u003ci\u003em\u003c/i\u003e\u003csup\u003e2\u003c/sup\u003e\u003ci\u003e \u003c/i\u003e· \u003ci\u003elog n\u003c/i\u003e, если использовать технику двоичных подъемов: \u003ci\u003edp\u003csub\u003ei,j \u003c/sub\u003e\u003c/i\u003e – число строк длины 2\u003ci\u003e\u003csup\u003ei\u003c/sup\u003e\u003c/i\u003e, имеющих хеш \u003ci\u003ej\u003c/i\u003e. \u003ci\u003edp\u003csub\u003ei,j\u003c/sub\u003e\u003c/i\u003e \u003d Σ(\u003ci\u003ex\u003d0..m-\u003c/i\u003e1) \u003ci\u003edp\u003c/i\u003e\u003csub\u003ei-1,x·p\u003csup\u003e2\u003csup\u003ei-1\u003c/sup\u003e\u003c/sup\u003e % m\u003c/sub\u003e · \u003ci\u003edp\u003c/i\u003e\u003csub\u003ei-1,j-x\u003c/sub\u003e. Используя значения этой динамики, можно посмотреть разложение \u003ci\u003en\u003c/i\u003e по степеням двойки, и получить ответ на задачу.\u003c/p\u003e \u003cp\u003eПоследнее ускорение заключается в том, что в формуле перехода предыдущей динамики можно увидеть не что иное, как произведение двух многочленов. Если использовать для этого быстрое преобразование Фурье, получаем асимптотику \u003ci\u003em · log m · log n. \u003c/i\u003eЭто и будет полным решением. \u003c/p\u003e\u003c/div\u003e","tags":[]}}