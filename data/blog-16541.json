{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1424513784,"rating":6,"authorHandle":"buGMaster","modificationTimeSeconds":1424513820,"id":16541,"title":"\u003cp\u003eProblem with Suffix Array\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi again...\u003cbr /\u003e I studied \u003ca href\u003d\"//codeforces.com/blog/entry/15729\"\u003ethe tutorial\u003c/a\u003e about the Data Structure by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e. I had a problem with Suffix Array (the deterministic version), and I couldn\u0027t get it properly (or maybe it has bugs in it!). So I asked for help via \u003ca href\u003d\"//codeforces.com/blog/entry/15729#comment-211759\"\u003ecomment\u003c/a\u003e, but no one answered (even the author). Then I asked the \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e (the author of tutorial) for double checking and give me more description about it by private message. Because he was busy and don\u0027t have enough time to help, I decided to make a blog for it.\u003c/p\u003e\u003cp\u003eHere\u0027s the the deterministic version of Suffix Array (used in \u003ca href\u003d\"//codeforces.com/blog/entry/15729\"\u003ethe tutorial\u003c/a\u003e):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e/*\nSuffix array O(n lg^2 n)\nLCP table O(n)\n*/\n#include \u0026lt;cstdio\u0026gt;\n#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;cstring\u0026gt;\n\nusing namespace std;\n\n#define REP(i, n) for (int i \u003d 0; i \u0026lt; (int)(n); ++i)\n\nnamespace SuffixArray\n{\n\tconst int MAXN \u003d 1 \u0026lt;\u0026lt; 21;\n\tchar * S;\n\tint N, gap;\n\tint sa[MAXN], pos[MAXN], tmp[MAXN], lcp[MAXN];\n\n\tbool sufCmp(int i, int j)\n\t{\n\t\tif (pos[i] !\u003d pos[j])\n\t\t\treturn pos[i] \u0026lt; pos[j];\n\t\ti +\u003d gap;\n\t\tj +\u003d gap;\n\t\treturn (i \u0026lt; N \u0026amp;\u0026amp; j \u0026lt; N) ? pos[i] \u0026lt; pos[j] : i \u0026gt; j;\n\t}\n\n\tvoid buildSA()\n\t{\n\t\tN \u003d strlen(S);\n\t\tREP(i, N) sa[i] \u003d i, pos[i] \u003d S[i];\n\t\tfor (gap \u003d 1;; gap *\u003d 2)\n\t\t{\n\t\t\tsort(sa, sa + N, sufCmp);\n\t\t\tREP(i, N - 1) tmp[i + 1] \u003d tmp[i] + sufCmp(sa[i], sa[i + 1]);\n\t\t\tREP(i, N) pos[sa[i]] \u003d tmp[i];\n\t\t\tif (tmp[N - 1] \u003d\u003d N - 1) break;\n\t\t}\n\t}\n\n\tvoid buildLCP()\n\t{\n\t\tfor (int i \u003d 0, k \u003d 0; i \u0026lt; N; ++i) if (pos[i] !\u003d N - 1)\n\t\t{\n\t\t\tfor (int j \u003d sa[pos[i] + 1]; S[i + k] \u003d\u003d S[j + k];)\n\t\t\t++k;\n\t\t\tlcp[pos[i]] \u003d k;\n\t\t\tif (k)--k;\n\t\t}\n\t}\n} // end namespace SuffixArray\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI don\u0027t get how the code works. Could you please give me some more clear description about it?\u003cbr /\u003e What does \u0026quot;tmp\u0026quot; store? It seems it contains something like [0,1,...,N-1], doesn\u0027t it?!\u003cbr /\u003e What about \u0026quot;pos\u0026quot;? What\u0027s the initialization of \u0026quot;tmp\u0026quot;?\u003cbr /\u003e Any help would be appreciated...\u003c/p\u003e\u003c/div\u003e","tags":["suffix array","data structure"]}}