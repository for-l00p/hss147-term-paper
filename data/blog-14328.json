{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1413630297,"rating":77,"authorHandle":"dalex","modificationTimeSeconds":1426675378,"id":14328,"title":"\u003cp\u003eEZ Collections, EZ Life (new Java library for contests)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello guys,\u003c/p\u003e\u003cp\u003eI\u0027m going to tell you about one of the negative aspects of Java on programming contests (actually, not only on contests), or, more precisely, how I have tried to resolve it. As you may know, Java has the disadvantage related to its collections library: the constraints of this language make you use object types even when using primitive types should be enough. Compare \u003ccode\u003eArrayList\u0026lt;Integer\u0026gt;\u003c/code\u003e and \u003ccode\u003evector\u0026lt;int\u0026gt;\u003c/code\u003e: Java list stores objects of type Integer, which are created every time when you add an element into the list (it\u0027s called boxing / unboxing), whereas C++ vector just stores ints. This behaviour slows down Java programs, and many people don\u0027t like it.\u003c/p\u003e\u003cp\u003eAll this shit comes from the language design: you can\u0027t simply write a primitive type inside the angular brackets in Java. Some months ago I was thinking about this problem and came to the solution: why not just write my own collections library, with primitive types? Moreover, I haven\u0027t found any library with really all collections in the Internet.\u003c/p\u003e\u003cp\u003eThat\u0027s how my small project EZ Collections (\u003ca href\u003d\"https://github.com/alexeydergunov/ez-collections\"\u003eGithub repository\u003c/a\u003e) was born. Of course, I haven\u0027t written all possible collections for all possible datatypes. Instead of that I have written each collection only once, leaving some hints for Maven plugin to generate everything as needed.\u003c/p\u003e\u003cp\u003eI have to say that this library is designed to use on programming contests or private purposes. It\u0027s thread-unsafe, it has some missing validations, it\u0027s prohibited to modify the collection during the iteration, it doesn\u0027t support serialization and maybe something else. But the problems on the contests can be solved without any troubles.\u003c/p\u003e\u003cp\u003eTo use this library, you need:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eInstall Git and download the repository using \u003ccode\u003egit clone\u003c/code\u003e command (the URL is specified on the main page of the project). Or you can just download it using Download ZIP button.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eDownload Maven (\u003ca href\u003d\"http://maven.apache.org/download.cgi\"\u003elink to the download page\u003c/a\u003e), install and configure it (if you don\u0027t know anything about it — use Google, but, as far as I remember, it\u0027s enough just to set the path to Maven in the system variables).\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eEnter the root directory of the library and execute command \u003ccode\u003emvn clean install\u003c/code\u003e. After that two jar files will appear in your local Maven repository, and also in the target folder. One of these jars contains class files, and the other one — source files. Now you can use them in your Java project.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eBut it\u0027s still unclear how to use it on contests. You need \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Egor\" title\u003d\"Grandmaster Egor\"\u003eEgor\u003c/a\u003e\u0027s plugin \u003ca href\u003d\"https://github.com/EgorKulikov/idea-chelper\"\u003eCHelper\u003c/a\u003e for IntelliJ IDEA. After it had moved to Github, it became possible to merge the pull request that fixes some problems. The last pre-built version (commit 29dc20b), which includes my pull request, can be downloaded \u003ca href\u003d\"https://yadi.sk/d/28lnufuXfKEbp\"\u003efrom here\u003c/a\u003e and installed in IDEA on your own.\u003c/p\u003e\u003cp\u003eAfter plugin update you can include the library into your contest project, specifying the path to the jar file with sources. That\u0027s all!\u003c/p\u003e\u003cp\u003eThis is the example: let\u0027s solve the problem \u003ca href\u003d\"/contest/118/problem/E\" title\u003d\"Codeforces Beta Round 89 (Div. 2)\"\u003e118E - Bertown roads\u003c/a\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003euse \u003ccode\u003eList\u0026lt;Integer\u0026gt;[]\u003c/code\u003e for storing the graph: \u003ca href\u003d\"/contest/118/submission/8293080\" title\u003d\"Submission 8293080 by dalex\"\u003e8293080\u003c/a\u003e — 1060 ms, 39100 KB\u003c/li\u003e   \u003cli\u003euse \u003ccode\u003eEzIntList[]\u003c/code\u003e for storing the graph: \u003ca href\u003d\"/contest/118/submission/8293086\" title\u003d\"Submission 8293086 by dalex\"\u003e8293086\u003c/a\u003e — 654 ms, 12148 KB\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e(this problem has quite large input, the larger it is, the more performance you gain)\u003c/p\u003e\u003cp\u003eOne more example: solve the problem \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1521\"\u003eTimus 1521\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWith the TreeList\u0027s help the solution takes only a few lines:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint n \u003d in.readInt();\nint k \u003d in.readInt();\nEzIntList a \u003d new EzIntTreeList(n);\nfor (int i \u003d 0; i \u0026lt; n; i++) {\n    a.add(i);\n}\nint idx \u003d 0;\nfor (int i \u003d 0; i \u0026lt; n; i++) {\n    idx \u003d (idx + k - 1) % a.size();\n    out.print(a.removeAt(idx) + 1);\n    out.print(\u0027 \u0027);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhat do we get using EZ Collections? For now, the following data structures are implemented:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eArrayList\u003c/li\u003e   \u003cli\u003eArrayDeque (with the possibility to get the element by its index)\u003c/li\u003e   \u003cli\u003eHeap\u003c/li\u003e   \u003cli\u003eSort (guaranteed NlogN implementation)\u003c/li\u003e   \u003cli\u003eHashSet\u003c/li\u003e   \u003cli\u003eHashMap (I\u0027ve used open addressing approach. I\u0027m quite sure that it\u0027s not hackable)\u003c/li\u003e   \u003cli\u003eTreeSet\u003c/li\u003e   \u003cli\u003eTreeMap\u003c/li\u003e   \u003cli\u003eTreeList (the array that can perform add, set, insert and removeAt operations in logN time)\u003c/li\u003e   \u003cli\u003ePair classes\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eAlso I have to mention that there is famous Trove library (its repository can be found \u003ca href\u003d\"https://bitbucket.org/robeden/trove/overview\"\u003ehere\u003c/a\u003e) which has the similar idea, maybe some of you use it at work, but the problem is that only ArrayList, HashSet and HashMap are implemented in Trove. It\u0027s not enough for programming contests.\u003c/p\u003e\u003cp\u003eSome notes and plans:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eNaN, POSITIVE_INFINITY and other similar stuff is not supported. You know who you are, if you use such things.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eAs it\u0027s impossible to return null (because EZ Collections store primitive types), method \u003ccode\u003ereturnedNull()\u003c/code\u003e is added in every class where it\u0027s necessary. You must call it to perform null-check immediately after calling the method which could have returned null in usual Java Collections. For instance, these code fragments are identical:\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003e    TreeSet\u0026lt;Integer\u0026gt; set \u003d new TreeSet\u0026lt;Integer\u0026gt;();\n    Integer lower \u003d set.lower(42);\n    if (lower \u003d\u003d null) {\n        ...\n    }\n\n    EzIntTreeSet set \u003d new EzIntTreeSet();\n    int lower \u003d set.lower(42);\n    if (set.returnedNull()) {\n        // don\u0027t use the lower variable, it\u0027s not guaranteed that it has some certain value\n    }\n\u003c/code\u003e\u003c/pre\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eThe current source generation mechanism is ugly and doesn\u0027t support some cases that I want to support, so I\u0027m planning to rewrite it. But all collections I wanted to implement in the first version already work.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eboolean is considered to be uncomparable type, so Pairs with booleans don\u0027t implement Comparable. It will be fixed after rewriting the source generation.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eNext collections I want to implement are LinkedList (on arrays). But it\u0027s only when I rewrite the source generation.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eThe next planned thing is to implement maps which have primitive key and object value types, or vice versa. It also should speedup programs a bit.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003ePlease write any suggestions and feedbacks using the private messages on Codeforces.\u003c/p\u003e\u003ch4\u003eVersion history:\u003c/h4\u003e \u003cul\u003e   \u003cli\u003eFeb 21, 2015 — version 0.1.0 is released. It contains the identical content comparing to standard Java collections library.\u003c/li\u003e   \u003cli\u003eMar 15, 2015 — version 0.1.1 is released. TreeList was added. Also the possibility to specify custom hash functions for HashSet/HashMap was added.\u003c/li\u003e \u003c/ul\u003e\u003c/div\u003e","tags":["ez collections","library","java","chelper"]}}