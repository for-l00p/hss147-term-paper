{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1518665962,"rating":29,"authorHandle":"AMnu","modificationTimeSeconds":1520895503,"id":57775,"title":"\u003cp\u003eComplexity of Number Theory Problems\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eUnderstanding Number Theory Problems\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSome people regard number theory is little bit difficult. However, it\u0027s actually an easy topic. Most of people only dare to solve kinds of problems that has simple complexity (like O(N), O(NlogN), O(N^2), etc) such as DP, greedy, and bruteforce. Here, we will talk about how to calculate or estimate the complexity of number theory problems.\u003c/p\u003e\u003cp\u003eAs you see in some problemsets, number theory problem usually placed in the hardest problem. For example :\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eproblem 912, placed in E (hardest)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eproblem 915, placed in G (hardest)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eproblem 919, placed in E (second hardest)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eproblem 920, placed in F and G (first and second hardest)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eproblem 922, placed in F (hardest)\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eLet\u0027s start our discussion.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eEstimate the Complexity and Problem Example\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIn most of number theory problems, sometimes calculate one by one is prefer than calculate all in one. Let me explain using some examples.\u003c/p\u003e\u003cp\u003e1, 907F — Power Tower\u003c/p\u003e\u003cp\u003eFor a problem with range query, we usually need to compute that range at once. In that problem, may be somebody thinks that it using prefix or segment tree to calculate the answer faster. But, who thinks that we have to compute them one by one. How it can be, O(N^2) must be TLE? But in fact, it will be faster than you imagine. If we calculate the modulo of it, { (a^b) mod m \u003d a^(b mod phi(m)) mod m }, { (a^b^c) mod m \u003d a^b^(c mod phi(phi(m))) mod m }, and so on. phi(x) is the number of natural number y \u0026lt; x such that gcd(x,y) \u003d 1. It\u0027s known that x \u0026gt; phi(x). So, phi(phi(...phi(x))) will be equal to 1. When that value reaches 1, we know that any number mod 1 is equal to 0. Then, we can directly know that the rest power in modulo is equal to 0 and no need to calculate the rest. But, in this problem, in case when the result is equal to 0, we should return the minimum between the pointed number and 2 instead of 0. Because, any number to the power of 0 is equal to 1 and the actual number isn\u0027t equal to 1. The question is, how many phi needed to reaches 1? For x not greater than a billion, 30 times is enough.-\u0026gt;O(logN) And the total query complexity is O(30N).\u003c/p\u003e\u003cp\u003e2, 920F — SUM and REPLACE\u003c/p\u003e\u003cp\u003eOnce again, some people thinks that we need to replace a range in query at once. How to replace a range of number with the number of its positive divisor at once? Using segment tree lazy propagation? Of course not. Actually, we just need to replace them one by one. Why? Because, for x less than or equal to 2, the number of positive divisor is equal to x itself. So, we need to replace all x greater than 2 only. Then, how many replacement needed to make x reaches to 2 or less? Is it 1000?-\u0026gt;O(sqrtN) Is it 20?-\u0026gt;O(logN) Actually, for x not greater than a million, we need no more than 6 replacements only. O(6N) that\u0027s enough.\u003c/p\u003e\u003cp\u003e3, You may request more number theory problems in comment below.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eCollected Data in Complexity Table\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e1, number of relative prime number less than x will reach 1 in :\u003c/p\u003e \u003cpre\u003e- no more than 10, for x less than 1000\n\n- no more than 20, for x less than 10^6\n\n- no more than 30, for x less than 10^9\u003c/pre\u003e\u003cp\u003e2, number of positive divisor will reach 2 in :\u003c/p\u003e \u003cpre\u003e- no more than 3, for x less than 10\n\n- no more than 5, for x less than 1000\n\n- no more than 6, for x less than 10^6\n\n- no more than 7, for x less than 10^9\u003c/pre\u003e\u003cp\u003e3, number of different prime divisor of x :\u003c/p\u003e \u003cpre\u003e- no more than 4, for x less than 300 \u0026lt; 10^3\n\n- no more than 5, for x less than 3000\n\n- no more than 6, for x less than 30000 \u0026lt; 10^6\n\n- no more than 7, for x less than 6x10^6\n\n- no more than 8, for x less than 10^7\n\n- no more than 9, for x less than 3x10^8 \u0026lt; 10^9\n\n- no more than 10, for x less than 7x10^9\n\n- no more than 15, for x less than 7x10^17 \u0026lt; 10^18\u003c/pre\u003e\u003cp\u003e4, sieve of Erastosthenes complexity with optimation :\u003c/p\u003e \u003cpre\u003e- 1,4x10^3 for 1000\n\n- 2,1x10^6 for 10^6\n\n- 2,2x10^7 for 10^7\n\n- 2,4x10^8 for 10^8\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eI wonder about total positive divisor of x that less than x. What if in problem 920F, the function \u003cem\u003eD(x)\u003c/em\u003e changed into total positive divisor of x that less than x. There will be some cycle.\u003c/p\u003e\u003c/div\u003e","tags":["#number theory","complexity"]}}