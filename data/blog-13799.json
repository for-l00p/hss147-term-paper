{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1410792397,"rating":70,"authorHandle":"pompon","modificationTimeSeconds":1410793917,"id":13799,"title":"\u003cp\u003e464C — Substitutes in Number\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eAdditional explanation of the solution, requested by \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/ehsanoo\" title\u003d\"Specialist ehsanoo\"\u003eehsanoo\u003c/a\u003e. On the contrary to the tutorial, we will apply the queries online (however result itself will be calculated offline anyway; after you understand this part, you can revert the construction to obtain the solution described in the tutorial). We will keep our string in a compressed form of a \u003ca href\u003d\"http://en.wikipedia.org/wiki/Directed_acyclic_graph\"\u003eDAG\u003c/a\u003e. \u003cimg alt\u003d\" \" src\u003d\"/predownloaded/64/12/641262fd5e4294732e3eab049237407ef87e5390\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003eThe DAG on the left represents the string from the first sample test: 123123. Note that the root consists of 6 cells. Each represents a digit of 123123, however their values are not stored there. Each cell points to the leaf corresponding to its content. Note that cells corresponding to the same digit point to the same leaf.\u003c/li\u003e   \u003cli\u003eNow the first query comes: 2-\u0026gt;00, so our string should become 10031003. What we do? We grab our leaf \u00272\u0027 and replace it with a new node (with 2 cells pointing to 0). Everything what was pointing to \u00272\u0027 now points to our new node (i.e. we replaced all occurrences of \u00272\u0027).\u003c/li\u003e   \u003cli\u003eNote that we create a new leaf \u00272\u0027 (marked as red). In general case the replacing string can contain the digit which is being replaced and we don\u0027t want the node to point to itself (i.e. we are not doing a recursive replacement).\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eTo sum up: every node of the DAG represents some substring of the current string. At any point of processing the queries, we keep track of nodes which correspond to the single digits, so that we can replace them with a string from a query. For the replaced digit we create a new node and from now on, any new occurrences of this digit should point to this new node. At any point we can retrieve the current string by traversing the DAG. After processing all the queries we want to retrieve the result. To do that, we can dynamically calculate 2 values for each node:\u003c/p\u003e \u003cul\u003e   \u003cli\u003ethe number it represents mod \u003cspan class\u003d\"tex-span\"\u003e(10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e + 7)\u003c/span\u003e\u003c/li\u003e   \u003cli\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bb/5f/bb5fd062c87c49d415640e36f67f63633e011f72.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e mod \u003cspan class\u003d\"tex-span\"\u003e(10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e + 7)\u003c/span\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eIt is easy to see how to calculate them for the parent, if we already calculated them for the children. \u003c/p\u003e\u003c/div\u003e","tags":["464c"]}}