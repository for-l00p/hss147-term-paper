{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1422359762,"rating":28,"authorHandle":"fcspartakm","modificationTimeSeconds":1422385242,"id":16048,"title":"\u003cp\u003eCodeforces Round #288 (Div.2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/508/A\"\u003e508A — Pasha and Pixels\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTo solve this problem let\u0027s create matrix with type \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebool\u003c/i\u003e\u003c/span\u003e and dimensions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e. Cell \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e of this matrix is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e — if this cell painted in black color.\u003c/p\u003e\u003cp\u003eLet on move number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e Pasha paints pixel in position \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e. Then game ending on this move, if square \u003cspan class\u003d\"tex-span\"\u003e2 × 2\u003c/span\u003e formed from black cells appears, and cell \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e will upper-left, upper-right, bottom-left or bottom-right of this squares. Only this squares we need to check on current move. If we haven\u0027t such squares after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e moves, print \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. Asymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e — number of moves.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/508/B\"\u003e508B — Anton and currency you all know\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eBecause of specified number is odd (that mean that last digit of this number is odd) we need to swap last digit with some even digit. How to maximize number after this swap?\u003c/p\u003e\u003cp\u003eIf number consists only from odd digits print \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eElse, we need to find first even digit, which less than last digit if we will iterate from most significant digit. If we find such digit — swap it with last digit and we have an answer. \u003c/p\u003e\u003cp\u003eElse, we need to find first even digit, which more than last digit if we will iterate from less significant digit. If we find such digit — swap it with last digit and we have an answer.\u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e — count of digits in specified number.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/508/C\"\u003e508C — Anya and Ghosts\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThis problem can be solved with help of greedy algorithm. Let\u0027s iterate on moments when ghosts will appears.\u003c/p\u003e\u003cp\u003eWe need to use use array, in wich we will mark moments of time, in wich we lighted candles (for example, put in corresponding positions \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e). Than for every new ghost will count how many candles lights in time of his visit from our array.\u003c/p\u003e\u003cp\u003eIf ghost appears in moment of time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, iterate on out array from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003et\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e — count of seconds, which candle burns, and count the number of ones. If this count is not less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, continue iterating on ghosts. Else, iterate on our array from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003et\u003c/i\u003e\u003c/span\u003e, and, if in current second candle didn\u0027t lighted — make it, and put in this position in array \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. We need to do such operation, while count of ones in this section of our array will not be equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e. If we can\u0027t do this fore some ghost, we can print \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAnswer to this problem — count of ones in our array. Asymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003emt\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e — count of ghosts, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e — the duration of a candle\u0027s burning.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/508/D\"\u003e508D — Tanya and Password\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eAt first, let\u0027s convert data from input in directed graph. Vertexes in this graph will all strings with length equals to 2 and consisting of uppercase and lowercase letters of the latin alphabet. For all 3-letters strings from input — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u0027s, let\u0027s add edge from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e[0]\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e[1]\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e[1]\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e[2]\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eNow we need to find in this graph Euler path. For this we can use Fleury\u0027s algorithm. It is worth noting, that Euler path consists, if count of vertexes, in wich in-degree and out-degree differs by one, less then 3, and in-degree and out-degree of others vertexes — even. If we can\u0027t find Euler path — print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eNO\u003c/i\u003e\u003c/span\u003e. Asymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e — count of different 3-letters strings from input. It equals to number of edges in graphs.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/508/E\"\u003e508E — Arthur and Brackets\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThis problem can be solved with help of dynamic dynamic programming. Let\u0027s create squre matrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eZ\u003c/i\u003e\u003c/span\u003e with sizes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e — count of open brackets in sequence. Main hint — if open bracket is in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e, and corresponding for her close bracket — in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, than from position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e + 1\u003c/span\u003e to position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e - 1\u003c/span\u003e must stay a regular bracket sequence.\u003c/p\u003e\u003cp\u003eIn array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eZ\u003c/i\u003e\u003c/span\u003e first parametr \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elf\u003c/i\u003e\u003c/span\u003e — number of open bracket, second parametr \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erg\u003c/i\u003e\u003c/span\u003e — number of last open bracket, which can be in a regular bracket sequence, which will exists between open bracket with number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elf\u003c/i\u003e\u003c/span\u003e and corresponding for it close bracket.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eZ\u003c/i\u003e[\u003ci\u003elf\u003c/i\u003e][\u003ci\u003erg\u003c/i\u003e] \u003d \u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e if it is possible to construct such sequence. Otherwise \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eZ\u003c/i\u003e[\u003ci\u003elf\u003c/i\u003e][\u003ci\u003erg\u003c/i\u003e] \u003d \u003ci\u003efalse\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor current \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elf\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erg\u003c/i\u003e\u003c/span\u003e let\u0027s iterate on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e — how many open brackets and corresponding them close brackets in a regular bracket sequence will stay between open bracket number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elf\u003c/i\u003e\u003c/span\u003e and corresponding for it close bracket. If this count falls in the given interval for open bracket \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elf\u003c/i\u003e\u003c/span\u003e, recurcively run dynamic from two segments — \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003elf\u003c/i\u003e + 1, \u003ci\u003elf\u003c/i\u003e + \u003ci\u003ecnt\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003elf\u003c/i\u003e + \u003ci\u003ecnt\u003c/i\u003e + 1, \u003ci\u003erg\u003c/i\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eIf for both segments we can construct regular bracket sequences, appropriate to data-in from input, put in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eZ\u003c/i\u003e[\u003ci\u003elf\u003c/i\u003e][\u003ci\u003erg\u003c/i\u003e]\u003c/span\u003e value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e. To restore answer, we must move from segment \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003elf\u003c/i\u003e, \u003ci\u003erg\u003c/i\u003e)\u003c/span\u003e in segments \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003elf\u003c/i\u003e + 1, \u003ci\u003elf\u003c/i\u003e + \u003ci\u003ecnt\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003elf\u003c/i\u003e + \u003ci\u003ecnt\u003c/i\u003e + 1, \u003ci\u003erg\u003c/i\u003e)\u003c/span\u003e, if for both this segments we can construct regular bracket sequences and recursively restore asnwer. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eZ\u003c/i\u003e[0][\u003ci\u003en\u003c/i\u003e - 1]\u003c/span\u003e equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003efalse\u003c/i\u003e\u003c/span\u003e, print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eIMPOSSIBLE\u003c/i\u003e\u003c/span\u003e. Asymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD\u003c/strong\u003e This problem can be solved with help of griddy algorithm. Asymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. \u003ca href\u003d\"http://codeforces.ru/contest/508/submission/9584839\"\u003eHere\u003c/a\u003e is example of such solution, participant \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/matrix\" title\u003d\"International master matrix\"\u003ematrix\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}