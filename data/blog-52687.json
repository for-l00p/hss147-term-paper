{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1497680339,"rating":0,"authorHandle":"dragonzurfer","modificationTimeSeconds":1497680392,"id":52687,"title":"\u003cp\u003eFarthest node(b) from a node (a) in a tree\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI recently came across a problem called \u003ca href\u003d\"https://www.codechef.com/problems/GERALD\"\u003eGERALD\u003c/a\u003e. The problem requires finding the farthest node. The solution given was to solve it using HLD. But I was thinking if there is some other way of doing it. I came across Centroid Decomposition. So I though of decomposing the tree into the levels(l1,l2,l3....lk) in the new centroid graph. Then sort each level in dfs order. Then for a particular node(a) the farthest node(b) would be the first element in the lowest level of the centroid graph. This level should not contain node(a).\u003c/p\u003e\u003cp\u003eexample graph:\u003c/p\u003e\u003cp\u003eN\u003d10 E\u003d9\u003c/p\u003e\u003cp\u003eEDGE 1:1 2\u003c/p\u003e\u003cp\u003eEDGE 2:1 10\u003c/p\u003e\u003cp\u003eEDGE 3:2 3\u003c/p\u003e\u003cp\u003eEDGE 4:2 4\u003c/p\u003e\u003cp\u003eEDGE 5:4 5\u003c/p\u003e\u003cp\u003eEDGE 6:4 6\u003c/p\u003e\u003cp\u003eEDGE 7:5 7\u003c/p\u003e\u003cp\u003eEDGE 8:7 8\u003c/p\u003e\u003cp\u003eEDGE 9:10 9\u003c/p\u003e\u003cp\u003eCENTROID GRAPH:\u003c/p\u003e\u003cp\u003e,(parent)\u003c/p\u003e\u003cp\u003elevel 0 :2(-1)\u003c/p\u003e\u003cp\u003elevel 1 :10(2) 5(2) 3(2)\u003c/p\u003e\u003cp\u003elevel 2 :9(10) 7(5) 4(5) 1(10)\u003c/p\u003e\u003cp\u003elevel 3 :8(7) 6(4)\u003c/p\u003e\u003c/div\u003e","tags":["#trees","centroid decomposition"]}}