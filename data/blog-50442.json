{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1487156539,"rating":367,"authorHandle":"rng_58","modificationTimeSeconds":1487156539,"id":50442,"title":"\u003cp\u003eTips for writers: What requires a proof?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eIf you are a contestant, you can be relaxed and you can do anything (except for cheating). It\u0027s perfectly fine if you just guess the solution and submit it without knowing why (though personally I don\u0027t find it very beautiful). However, if you are a writer, you need to prove your solution. Here is the list of things you have to prove:\u003c/p\u003e\u003ch4\u003e1. Correctness.\u003c/h4\u003e\u003cp\u003eDoes your solution always return correct answers for all possible valid inputs?\u003c/p\u003e \u003cul\u003e   \u003cli\u003eGOOD: Strict proof.\u003c/li\u003e   \u003cli\u003eBAD: \u003cem\u003eMy intuition tells that this is correct!\u003c/em\u003e\u003c/li\u003e   \u003cli\u003eBAD: \u003cem\u003eI tried really hard to come up with counterexamples, but I couldn\u0027t. It must be correct!\u003c/em\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003e2. Time Complexity.\u003c/h4\u003e\u003cp\u003eDoes your solution always run in time for all possible valid inputs?\u003c/p\u003e \u003cul\u003e   \u003cli\u003eGOOD: It\u0027s \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e and the constraints say \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 1000\u003c/span\u003e. It should work.\u003c/li\u003e   \u003cli\u003eGOOD: For this problem we can prove that the slowest case is xxx. Experimentally, my solution works for the input xxx under the given TL.\u003c/li\u003e   \u003cli\u003eBAD: \u003cem\u003eI tried really hard to generate various testcases, and my solution passed all cases!\u003c/em\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003e3. Randomized Algorithms.\u003c/h4\u003e\u003cp\u003eRandomized algorithms are not hackish ways of solving problems. The writers should prove that for any valid input, the intended solution works correctly with very high probability. Please check \u003ca href\u003d\"https://code.google.com/codejam/contest/1842485/dashboard#s\u003da\u0026amp;a\u003d1\"\u003ehere\u003c/a\u003e for an example of such proof. Another example is Rolling Hash: please check \u003ca href\u003d\"http://rng-58.blogspot.jp/2017/02/hashing-and-probability-of-collision.html\"\u003ehere\u003c/a\u003e. Note that, for example when we compute \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e hashes for strings of lengths \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e, you need four hashes of prime modulo around \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e, not two. (Practically two works but we can\u0027t prove that).\u003c/p\u003e\u003ch4\u003e4. Precision.\u003c/h4\u003e\u003cp\u003eEspecially in geometry problems, we sometimes use epsilons. However writers should be careful about the use of epsilons.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eGOOD: We know \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eb\u003c/i\u003e|\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ed\u003c/i\u003e|\u003c/span\u003e are up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e\u003c/span\u003e. Let\u0027s use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eeps\u003c/i\u003e \u003d 10\u003csup class\u003d\"upper-index\"\u003e - 9\u003c/sup\u003e\u003c/span\u003e for comparing two fractions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e / \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e / \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e.\u003c/li\u003e   \u003cli\u003eBAD: \u003cem\u003eLet\u0027s use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eeps\u003c/i\u003e \u003d 10\u003csup class\u003d\"upper-index\"\u003e - 9\u003c/sup\u003e!\u003c/span\u003e (without reasons)\u003c/em\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eWhen the intended solution uses complicated double operations (like sqrt, trigonometry, log, lots of fractions, etc.) such analysis may be hard. In this case, one possible way is to add constraints like \u0026quot;even if we move a point by up to \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e - 3\u003c/sup\u003e\u003c/span\u003e, the answer doesn\u0027t change\u0026quot;.\u003c/p\u003e\u003c/div\u003e","tags":["writer","author","proof"]}}