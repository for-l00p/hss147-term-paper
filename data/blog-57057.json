{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1515752493,"rating":89,"authorHandle":"gepardo","modificationTimeSeconds":1515753838,"id":57057,"title":"\u003cp\u003eBig integers in Pascal\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello, Codeforces!\u003c/p\u003e\u003cp\u003eWhen we talk the languages with built-in big integer implementation, usually such languages as \u003cem\u003eJava\u003c/em\u003e or \u003cem\u003ePython\u003c/em\u003e are mentioned. Now I\u0027ll tell you about long arithmetic implementation in \u003cem\u003ePascal\u003c/em\u003e (more precisely, in the \u003cem\u003eFree Pascal Compiler\u003c/em\u003e).\u003c/p\u003e\u003cp\u003eThe simplest code, which reads two big integers and outputs their sum, looks like this:\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eprogram sum;\n\n{$Mode Delphi}\n\nuses\n  gmp;\n\nvar\n  sa, sb: string;\n  a, b: MPInteger;\nbegin\n  readLn(sa);\n  readLn(sb);\n  a :\u003d sa; b :\u003d sb;\n  writeLn(string(a + b));\nend.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003egmp\u003c/code\u003e unit contains all the classes and operators to work with big integers.\u003c/p\u003e\u003cp\u003eHow does it work? This unit contains bindings for \u003ca href\u003d\"https://gmplib.org/\"\u003e\u003cem\u003eGNU Multiprecision Library\u003c/em\u003e\u003c/a\u003e. The program and the library are linked dynamically, so, to make the program work this library is required to install. Luckily, many Linux distros install \u003ccode\u003elibgmp\u003c/code\u003e by default and so this trick can be used in the testing systems like \u003cem\u003eejudge\u003c/em\u003e or \u003cem\u003eYandex.Contest\u003c/em\u003e. Testing systems on \u003cem\u003eWindows\u003c/em\u003e don\u0027t have this library, so this thing won\u0027t work.\u003c/p\u003e\u003cp\u003eFor convenience the unit implements an object-oriented wrapper for \u003ccode\u003elibgmp\u003c/code\u003e functions, for which all the operators are overloaded (yes, \u003cem\u003eFree Pascal\u003c/em\u003e supports operator overloading!)\u003c/p\u003e\u003cp\u003eWhat is also remarkable, \u003ccode\u003elibgmp\u003c/code\u003e has implementation for calculating fast integer square root. So here is a short implementation for problem F for \u003ca href\u003d\"https://olympiads.ru/zaoch\"\u003eelimination to Moscow Open Olympiad\u003c/a\u003e (the website by the link is in Russian and , unfortunately, I cannot find the English version of the statements).\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eprogram F;\n\n{$mode objfpc}{$h+}\n{$optimization LEVEL3}\n\nuses gmp;\n\nvar\n  num: string;\n  mpNum: MPInteger;\n  root, rem: MPInteger;\nbegin\n  readLn(num);\n  mpNum :\u003d num;\n  mpNum :\u003d mpNum - 1;\n  z_sqrtrem(root, rem, mpNum);\n  if rem \u0026lt; root then begin\n    writeln(string(rem + 1));\n  end else begin\n    writeln(string(2 * root + 1 - rem));\n  end;\nend.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":["long arithmetic","pascal","open olympiad","pascal is alive","gmp"]}}