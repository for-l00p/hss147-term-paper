{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1467791755,"rating":2,"authorHandle":"Silver_","modificationTimeSeconds":1467791755,"id":45909,"title":"\u003cp\u003eNCD Training Beginners #1 Tutorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003cstrong\u003eA.Keyboard\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eThis is an implementation problem, therefore most of the solution fit in the time limit. We can even save the keyboard in 3 strings and make a brute force search for each character to find its position and then print the left/right neighbour.\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eB.Maximum in Table\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eIn this problem one needed to implement what was written in the statement: create matrix \u003c/p\u003e\u003cp\u003e(two-dimensional array) using given rules and find maximal value in the table.\u003c/p\u003e\u003cp\u003eIt is also possible to see that maximal element is always in bottom-right corner.\u003c/p\u003e\u003cp\u003eEasier solution with recursion also was enough to get AC:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef elem(row, col):\n    if row \u003d\u003d 1 or col \u003d\u003d 1:\n        return 1\n    return elem(row - 1, col) + elem(row, col - 1)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e``\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eC.Way Too Long Words\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eIn this problem you can just do what is written in the statement. Let read all words. For each of them compute its length L, its the first and the last letter. If L \u0026gt; 10, output word without any changes, otherwise output the first letter, next L - 2 and finally the last letter\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eD.Petya and Strings\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eIn this problem one could transform all letters in both strings to lower case and then \u003c/p\u003e\u003cp\u003ecompare the strings lexicographically. (you can use \u0027\u0026lt;\u0027,\u0027\u0026gt;\u0027,\u0027\u003d\u003d\u0027 operators to compare between them like numbers).\u003c/p\u003e\u003c/div\u003e","tags":["tutorial"]}}