{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1411205615,"rating":8,"authorHandle":"aranjuda","modificationTimeSeconds":1411205615,"id":13876,"title":"\u003cp\u003eCan you find the bug in this analysis of the partition function?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI am not able to calculate the Big O complexity of the partition function given in the code below. I tried to calculate it by estimating the number of nodes in the tree.\u003c/p\u003e\u003cp\u003eSo far, I\u0027ve figured out that from the start node, there will be n children, each that can have n/2 children at most (since the 2nd layer will pick from min(n, max) which will be n/2 at most), and so the 2nd layer will have n/4 children at every node at most, giving the tree a height of at most log(n).\u003c/p\u003e\u003cp\u003eWe can better this, the first level will have n nodes. The second level will have at most 0+1+2+..+lim+lim-1+...1 nodes, and so on (where lim is ceil(n/2)). That gives n^2 nodes at each level, a total of log(n) levels, with O(n) work being done at each node. So, the complexity I get is O(n^3 log(n)).\u003c/p\u003e\u003cp\u003eBut, I am not sure of my calculations, especially because clearly getting an upper bound for the partition function is not an easy problem (this paper: \u003ca href\u003d\"http://link.springer.com/article/10.1007%2Fs11139-007-9022-z#page-1\"\u003ehttp://link.springer.com/article/10.1007%2Fs11139-007-9022-z#page-1\u003c/a\u003e lists it as \u0026lt; c^(root(n)) ). Since that is exponential, my analysis must be wrong, but I\u0027m missing where.\u003c/p\u003e\u003cp\u003eCan someone help?\u003c/p\u003e\u003cp\u003eThe code is at: \u003ca href\u003d\"http://community.topcoder.com/stat?c\u003dproblem_solution\u0026amp;rm\u003d310853\u0026amp;rd\u003d14552\u0026amp;pm\u003d11308\u0026amp;cr\u003d22673583\"\u003ehttp://community.topcoder.com/stat?c\u003dproblem_solution\u0026amp;rm\u003d310853\u0026amp;rd\u003d14552\u0026amp;pm\u003d11308\u0026amp;cr\u003d22673583\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["time complexity","algorithm complexity","complexity","partition","code analysis"]}}