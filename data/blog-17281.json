{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1428174615,"rating":129,"authorHandle":"roosephu","modificationTimeSeconds":1428177830,"id":17281,"title":"\u003cp\u003eZeptoLab Code Rush 2015 — Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello everyone, I hope you can enjoy this special round for Zepto Lab. Here are the solutions of this round.\u003c/p\u003e\u003ch1\u003e\u003ca href\u003d\"//codeforces.com/contest/526/problem/A\"\u003eA. King of Thieves\u003c/a\u003e\u003c/h1\u003e\u003cp\u003eThis task is easy for many of you. We can just iterate over all possible \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - \u003ci\u003ei\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, then we can compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3, ..., 5\u003c/sub\u003e\u003c/span\u003e, and check whether this subsequence satisfies the condition mentioned in the task.\u003c/p\u003e\u003ch1\u003e\u003ca href\u003d\"//codeforces.com/contest/526/problem/B\"\u003eB. Om Nom and Dark Park\u003c/a\u003e\u003c/h1\u003e\u003cp\u003eWe use greedy and recursion to solve this task. For each tree rooted at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, we adjust its two subtrees at first, using recursion. Then we increase one edge from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e\u0027s child to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch1\u003e\u003ca href\u003d\"//codeforces.com/contest/526/problem/C\"\u003eC. Om Nom and Candies\u003c/a\u003e\u003c/h1\u003e\u003cp\u003eIf there is a kind of candy which weighs greater than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ea/4a/ea4a8f0fa7ff9dde8675146b967beda28322260b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, then we can iterate over the number of it to buy, which is less than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ea/4a/ea4a8f0fa7ff9dde8675146b967beda28322260b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eOtherwise, without loss of generality we suppose \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/91/08/9108182233f14787fb9c27dcc85f174afd7ee448.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. If the number of the blue candies that Om Nom eats is more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, he could eat \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e red candies instead of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e blue candies, because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e × \u003ci\u003eW\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003eW\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e × \u003ci\u003eH\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. It means the number of the blue candies will be less than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ea/4a/ea4a8f0fa7ff9dde8675146b967beda28322260b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and we can iterate over this number.\u003c/p\u003e\u003ch1\u003e\u003ca href\u003d\"//codeforces.com/contest/526/problem/D\"\u003eD. Om Nom and Necklace\u003c/a\u003e\u003c/h1\u003e\u003cp\u003eThis task is to determine whether a string is in the form of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eABABA\u003c/i\u003e... \u003ci\u003eABA\u003c/i\u003e\u003c/span\u003e for each prefixes of a given string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eFor a prefix P, let\u0027s split it into some blocks, just like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e \u003d \u003ci\u003eSSSS\u003c/i\u003e... \u003ci\u003eSSSST\u003c/i\u003e\u003c/span\u003e, which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e is a prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e. Obviously, if we use KMP algorithm, we can do it in linear time, and the length of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e will be minimal. There are only two cases : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e \u003d \u003ci\u003eS\u003c/i\u003e, \u003ci\u003eT\u003c/i\u003e ≠ \u003ci\u003eS\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e \u003d \u003ci\u003eS\u003c/i\u003e\u003c/span\u003e. When \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e \u003d \u003ci\u003eS\u003c/i\u003e, \u003ci\u003eP\u003c/i\u003e \u003d \u003ci\u003eSSS\u003c/i\u003e... \u003ci\u003eS\u003c/i\u003e\u003c/span\u003e. Assume that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e appears \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e times. Consider \u0026quot;ABABAB....ABABA\u0026quot;, the last \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e must be a suffix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e, and it must be like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSS\u003c/i\u003e... \u003ci\u003eS\u003c/i\u003e\u003c/span\u003e, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e will be like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSS\u003c/i\u003e... \u003ci\u003eSS\u003c/i\u003e\u003c/span\u003e, and so will \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. By greedy algorithm, the length of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e will be minimal, so it will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSSS\u003c/i\u003e... \u003ci\u003eS\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e appears \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/85/c7/85c76ec0a10ea2141a2dadf8511b2573076ff5c5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e times. And \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSSS\u003c/i\u003e... \u003ci\u003eS\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e appears \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c6/45/c64589c403da96450472eec491599290561ec788.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e times. So we just need to check whether \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/c0/7cc0eec039b2de6615d8ce8886796cb25420201f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e ≠ \u003ci\u003eS\u003c/i\u003e\u003c/span\u003e . When \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e ≠ \u003ci\u003eS\u003c/i\u003e\u003c/span\u003e, the strategy is similar to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e \u003d \u003ci\u003eS\u003c/i\u003e\u003c/span\u003e. A will be like \u0026quot;SS...ST\u0026quot;, and its length will be minimal. At last we just need to check whether \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8e/4e/8e4ed0587bad715fcee651de4dfead078cc439e8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e .\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eThe total time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch1\u003e\u003ca href\u003d\"//codeforces.com/contest/526/problem/E\"\u003eE. Transmitting Levels\u003c/a\u003e\u003c/h1\u003e\u003cp\u003eOur task is to compute at least how many number of blocks are needed to partition a circular sequence into blocks whose sum is less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eBy monotonicity, it is easy to get the length of maximal blocks which starts from 1 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. Assume the block with minimal length is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and its length is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e, it is obvious that whatever the blocks are, there must be a block that it starts in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e. So, we can iterate over all the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e numbers of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, making it the start of a block, and calculate the number of blocks. \u003c/p\u003e\u003cp\u003eNotice that all the lengths of blocks is (non-strictly) greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e, therefore the number of blocks we need is at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e / \u003ci\u003eT\u003c/i\u003e + 1\u003c/span\u003e. We need to iterate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e times, but each time we can get the answer in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e / \u003ci\u003eT\u003c/i\u003e)\u003c/span\u003e, so finally we can check whether the answer is legal in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e * \u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e / \u003ci\u003eT\u003c/i\u003e) \u003d \u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch1\u003e\u003ca href\u003d\"//codeforces.com/contest/526/problem/F\"\u003eF. Pudding Monsters\u003c/a\u003e\u003c/h1\u003e\u003cp\u003eActually this problem is to compute how many segments in a permutation forms a permutation of successive integers. \u003c/p\u003e\u003cp\u003eWe use divide and conquer to solve this problem. \u003c/p\u003e\u003cp\u003eIf we want to compute the answer for an interval \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003en\u003c/i\u003e]\u003c/span\u003e, we divide this interval into two smaller ones \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003em\u003c/i\u003e], [\u003ci\u003em\u003c/i\u003e + 1, \u003ci\u003en\u003c/i\u003e]\u003c/span\u003e where \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9d/32/9d32d043470dd02f8d1e5f88438c76d4d7dd41d5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. We only care about the segments which crosses \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e. We call the first interval \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e and the latter one \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eConsidering the positiions of maximum numbers and minimum numbers in these valid segments, There are four possible cases:\u003c/p\u003e \u003col\u003e   \u003cli\u003ethe maximum number is in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e, the the minimum is also in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e;\u003c/li\u003e   \u003cli\u003ethe maximum number is in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e, the the minimum is also in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e;\u003c/li\u003e   \u003cli\u003ethe maximum number is in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e, the the minimum is in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e;\u003c/li\u003e   \u003cli\u003ethe maximum number is in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e, the the minimum is in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e;\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e be the given sequence and we define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eLmax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003em\u003c/i\u003e\u003c/sub\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Similarly we can define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eRmax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eRmin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eLmin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eFor simplicity we only cares about case 1 and case 4. \u003c/p\u003e\u003cp\u003eIn Case 1, we iterate over the start position of the segment, so we know the maximum and minimum number so we can compute the length of the segment and check the corresponding segment using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eRmin\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eRmax\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eIn Case 4, we iterate over the start position again, denoted as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Suppose the right end is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, then we know that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eLmin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003eRmin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eLmax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003eRmax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e so we can limit \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e into some range. Another constraint for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e is that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eRmax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eLmin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ey\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, i.e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eRmax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003eLmin\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Note that when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e varies, the valid range for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e also varies, but the range is monotone, so we can maintain how many times a number appears in linear time. \u003c/p\u003e\u003cp\u003eIt\u0027s easy to show that this algorithm runs for \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, by Master Theorem. \u003c/p\u003e\u003cp\u003eThere are some other people using segment trees. You can see a nice implement \u003ca href\u003d\"//codeforces.com/contest/526/submission/10584435\"\u003ehere\u003c/a\u003e\u003c/p\u003e\u003ch1\u003e\u003ca href\u003d\"//codeforces.com/contest/526/problem/G\"\u003eG. Spiders Evil Plan\u003c/a\u003e\u003c/h1\u003e\u003cp\u003eIn this task, we are given a tree and many queries. In each query, we are supposed to calculate the maximum total length of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e paths with the constraint that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e must be covered. \u003c/p\u003e\u003cp\u003eConsider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e is the union of the paths (it contains nodes and edges).\u003c/p\u003e\u003cp\u003eFor each query \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e \u003ci\u003ey\u003c/i\u003e \u0026gt; 1\u003c/span\u003e , then there is always a method that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e is connected.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/fa/dd/fadd0452213f899badf6f088134a4a0cb454792b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFurther, we could get the following theorem:\u003c/p\u003e \u003cblockquote\u003e\u003cp\u003eFor an unrooted tree, if it has \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e leaves, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e paths can cover this tree completely.\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003eProof for this theorem is that, if some edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e - \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e is not covered, we can interchange two paths, i.e. we change two paths \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e - \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e - \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e - \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e - \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e in the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e - \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e in the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/2d/e7/2de7cf406e39f6ffa020e99fac975160cdfc3604.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo a query \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e could be described as :\u003c/p\u003e\u003cp\u003eFind \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e leaves in the tree, with node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e, and maximize the total of weight of the edges in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor a query \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e, we can make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e the root. Then this task is how to choose the leaves. Note that we could select leaves one by one, every time we select the leaf which makes answer larger without selecting the others, as follow :\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/39/57/3957e0444442b0aeb80fd3022b19ab590cb8fbc7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eBut if for every query we need to change the root, the time complexity cannot be accepted. Assuming the longest path in the tree is \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e , we could find that whatever the query is, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e will contain either \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e certainly.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/cb/20/cb20ae25193445bb7a00d199966eac8f3d28c100.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo, we just need to make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e the root in turn, and get the maximum answers. However, there is another problem : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e may not be in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e. Like this :\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/fd/88/fd88e67f0e8c9f30e9cfa3ecf295fe59b74f6a95.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eBut it doesn\u0027t matter. We just need to link \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e with the selected, and erase some leaf. Of course after erasing, the answer should be maximum. \u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/ee/71/ee71fc1f52758f816217d1b485d5bea522705bf5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThanks, for all of your excellent performance!\u003c/p\u003e\u003c/div\u003e","tags":[]}}