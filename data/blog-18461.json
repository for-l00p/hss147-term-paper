{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1433950296,"rating":9,"authorHandle":"HandIeNeeded","modificationTimeSeconds":1434179865,"id":18461,"title":"\u003cp\u003eAndrew Stankevich Contest 31 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/group/uz61bMVtvS/contest/100357\"\u003eContest Link\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is a blog for group \u003ca href\u003d\"//codeforces.com/group/qo1icaI3vI/blog\"\u003eASC Editorial Writers\u003c/a\u003e. Hope you find it useful.\u003c/p\u003e\u003cp\u003e    \u003c/p\u003e\u003cp\u003eA- Casino\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100357/submission/11356174\" title\u003d\"Submission 11356174 by Joker_Poker\"\u003e11356174\u003c/a\u003e\u003c/p\u003e\u003cp\u003eB- Chip Reconstruction\u003c/p\u003e\u003cp\u003eJust recover it greedily. Find the the column which need \u0027|\u0027 most. And paint it, and update the count. After that, just check if it\u0027s valid. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100357/submission/11354410\" title\u003d\"Submission 11354410 by Also sprach Zarathustra\"\u003e11354410\u003c/a\u003e\u003c/p\u003e\u003cp\u003eC- Convex Hull\u003c/p\u003e\u003cp\u003eYour turn!\u003c/p\u003e\u003cp\u003eD- Discussions\u003c/p\u003e\u003cp\u003eFind the smallest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, where there exists a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e satisfies \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e5/af/e5afe8ed7d0d53de8108a5b93d7ccf1d92c41594.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eSince we know \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/13/a2/13a22715954c81fb23ba154d1baeaf4e592d1aba.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we can assume \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ek\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. And you can calculate to find out \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/26/ef/26efd37c383ab9414f014562737a97e995507468.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. So we only need to iterate all the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u0026lt; 200\u003c/span\u003e to find a smallest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. You can use binary-search to find a closest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and check if \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e5/af/e5afe8ed7d0d53de8108a5b93d7ccf1d92c41594.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and update the answer. And we are done.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100357/submission/11354564\" title\u003d\"Submission 11354564 by Also sprach Zarathustra\"\u003e11354564\u003c/a\u003e\u003c/p\u003e\u003cp\u003eE- Yet Another Game with Words\u003c/p\u003e\u003cp\u003eA weird game problem, one write a correct word lose the game.(In most of game problem, one has no way to move lose the game, so the final state can be detected. But in this problem, we have a fuzzy final state.) Luckily, we don\u0027t have sub-games, So we don\u0027t need the exact value of SG (\u003ca href\u003d\"http://en.wikipedia.org/wiki/Sprague%E2%80%93Grundy_theorem\"\u003eSprague-Grundy Theory\u003c/a\u003e). We just need to know if it is zero or not. And notice that the length of the string is at most \u003cspan class\u003d\"tex-span\"\u003e50\u003c/span\u003e, and there are 200 strings. So the substring of all the string will only be about \u003cspan class\u003d\"tex-span\"\u003e500000\u003c/span\u003e, it\u0027s not a very large number. We can check SG for each one and get the answer. And we need to do it in a specific order. Longer string goes first, because we know they maybe subtract some letters from the beginning or the end of themselves and transfered into other strings. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100357/submission/11409873\" title\u003d\"Submission 11409873 by HandIeNeeded\"\u003e11409873\u003c/a\u003e\u003c/p\u003e\u003cp\u003eF- Merge\u003c/p\u003e\u003cp\u003eKey abservation is the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - \u003ci\u003eth\u003c/i\u003e\u003c/span\u003e smallest number of the merged sequence is the smallest number which is guaranteed to be greater than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e numbers exactly. Here exactly, I mean you don\u0027t know if it is greater than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/span\u003e numbers for sure, but you know it\u0027s greater than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e numbers for sure. For example, we know \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e)\u003c/span\u003e is guarantee to be greater than or equal to 2 numbers. So does \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e.So the \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003eth\u003c/i\u003e\u003c/span\u003e number in the merge sequence is the minimum of these three numbers.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100357/submission/11409342\" title\u003d\"Submission 11409342 by HandIeNeeded\"\u003e11409342\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBonus\u003c/strong\u003e: Can you figure out how the judges do to check if the output for this problem is correct? \u003c/p\u003e\u003cp\u003eG- The Most Relevant Pattern\u003c/p\u003e\u003cp\u003eEvery substring can be hashed into a unique string using this algorithm: let the first new letter appears in the substring to be \u0027a\u0027, and the second new one be \u0027b\u0027, and so on. If one letter appears before, use the letter we assigned for this letter before. And this can be done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e. And we need to count how many times a specific substring appears in the whole string. Just use hash.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100357/submission/11375945\" title\u003d\"Submission 11375945 by HandIeNeeded\"\u003e11375945\u003c/a\u003e\u003c/p\u003e\u003cp\u003eH- Straight or Flush\u003c/p\u003e\u003cp\u003eThis is a dp problem. I tried to solve it using the inclusion-exclusion principle during the virtual contest, but ended up no where. Let\u0027s try dp.\u003c/p\u003e\u003cp\u003eFor Straight, we can consider the numbers from \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cf/8b/cf8b91370dc8800bb59eb1849cfbb28d9e80cbe1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e be the ways of assign \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e cards to the player using the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e rank numbers and no \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e numbers forms a straight and the last longest straight has length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e.And for the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/span\u003e numbers, we can iterate all the possible number of card \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/span\u003e being assigned to the player and get the new state. Works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e)\u003c/span\u003e. Note that what we find is the opposite to the problem we want. Just subtract it from the total number and get the answer. \u003c/p\u003e\u003cp\u003eFor flush, we can consider the suit from \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d5/33/d533476cae8d50e4b682548a6e62711499b8d6d2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e be the ways of assign \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e cards to the player using the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e suits numbers and no \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e numbers come from same suits. We get a dp works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eNote that BigInteger is needed. So I code it in Python. I thought it would be TLE, but fortunately, it works fine. And if you like to calculate the answer directly you may find out you need to multiple you dp state by two. So I did it in the opposite way. XD.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBonus\u003c/strong\u003e:Can this problem be solved by inclusion-exclusion principle? If U do, please share.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100357/submission/11382789\" title\u003d\"Submission 11382789 by HandIeNeeded\"\u003e11382789\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI- No Term Repetition Exactly One Satisfiability\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100357/submission/11439849\" title\u003d\"Submission 11439849 by cjldl\"\u003e11439849\u003c/a\u003e\u003c/p\u003e\u003cp\u003eJ- Trading Game\u003c/p\u003e\u003cp\u003eYour turn!\u003c/p\u003e\u003cp\u003eK- Parse Tree\u003c/p\u003e\u003cp\u003eKey abservation: leaves are in the position of \u003cspan class\u003d\"tex-span\"\u003e6\u003ci\u003ek\u003c/i\u003e + 1\u003c/span\u003e, and other nodes are in the \u003cspan class\u003d\"tex-span\"\u003e6\u003ci\u003ek\u003c/i\u003e + 4\u003c/span\u003e. And just implement the code as the statement says.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100357/submission/11402934\" title\u003d\"Submission 11402934 by HandIeNeeded\"\u003e11402934\u003c/a\u003e\u003c/p\u003e\u003cp\u003eEnds here. This is my first English editorial for an ASC contest. Sorry for my poor English.\u003c/p\u003e\u003c/div\u003e","tags":["asc 31"]}}