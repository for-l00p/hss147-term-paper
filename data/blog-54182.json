{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1504107248,"rating":6,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1504107248,"id":54182,"title":"\u003cp\u003eNotes on Codeforces Beta Round #73, A, B, C, D, E (Game Theorey: Sprague-Grundy Theorem)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/88/problem/A\" title\u003d\"Codeforces Beta Round 73 (Div. 2 Only)\"\u003e88A - Chord\u003c/a\u003e\u003c/p\u003e\u003cp\u003eGiven three elements, we can generate all the \u003cspan class\u003d\"tex-span\"\u003e6\u003c/span\u003e permutations, and calculate the distance to check which type it belongs to. Note that the distance might be a negative integer and when this occurs, add \u003cspan class\u003d\"tex-span\"\u003e12\u003c/span\u003e to convert it to a positive one.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/88/problem/B\" title\u003d\"Codeforces Beta Round 73 (Div. 2 Only)\"\u003e88B - Keyboard\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWhen given an uppercase letter, the basic idea is to enumerate the distance of all the feasible combinations of “Shift” and the corresponding lowercase letter, and check whether there exists any one that satisfies the requirement. However, if we implement the computayion every time the query comes, it may lead to TLE. As there are at most 26 uppercase letters, we can first calculate the distance for each one, and store the results. When a query comes, just take out the corresponding result.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/88/problem/C\" title\u003d\"Codeforces Beta Round 73 (Div. 2 Only)\"\u003e88C - Trains\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis problem can be solved by direct simulation. Suppose that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, and one can see that after time \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0d/c1/0dc14ade11afb7565b057a29bda59d74f0e8bf9f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, the two trains meet each other again, and thus it is sufficient to focus only on this time interval. \u003c/p\u003e\u003cp\u003eWe implement the simulation based on the length of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, i.e., we first consider the time interval \u003cspan class\u003d\"tex-span\"\u003e[0, \u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eb\u003c/i\u003e, 2\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e[2\u003ci\u003eb\u003c/i\u003e, 3\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e, and so on. There are exactly \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c5/f8/c5f8a8fa8293d0fb49b731bc6513e15584dbdce2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e such intervals. Next, we store and update the starting time of train-a in each interval of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, and calculate the number of interval of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e that is included. This total length is just the time that train-a will be selected, while the left length belongs to train-b.\u003c/p\u003e\u003cp\u003eThe total complexity is about \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003emax\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e))\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/88/problem/D\" title\u003d\"Codeforces Beta Round 73 (Div. 2 Only)\"\u003e88D - Vasya and Types\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis problem can be solved by straightforward implementation. The key point is to store the number of “*” and “\u0026amp;” for each type and do not forget the case where the type reduces to “errtype”.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/88/problem/E\" title\u003d\"Codeforces Beta Round 73 (Div. 2 Only)\"\u003e88E - Interesting Game\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is a famous game theory problem, referred to as Sprague-Grundy Theorem. One can check the book written by the great master \u003ca href\u003d\"//codeforces.com/blog/entry/50728\"\u003eCompetitive Programmer\u0027s Handbook — a new book on competitive programming\u003c/a\u003e for more details.\u003c/p\u003e\u003c/div\u003e","tags":[]}}