{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1502805329,"rating":-1,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1502884559,"id":53875,"title":"\u003cp\u003eNotes on Codeforces Beta Round #69, A, B, C, D, E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/80/problem/A\" title\u003d\"Codeforces Beta Round 69 (Div. 2 Only)\"\u003e80A - Panoramix\u0027s Prediction\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAs the range is quite small, we can directly calculate the next prime integer and check whether it is the same as the given one or not.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/80/problem/B\" title\u003d\"Codeforces Beta Round 69 (Div. 2 Only)\"\u003e80B - Depression\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAt first, we should note that if the hour is larger than 12, we can decrease it by 12, since they will form exactly the same angles. For instance, 13:26 is equivalent to 01:26. Then, we calculate the angles of minute and hour, respectively. As 60 minutes are equal to 360 degrees, its angle is just \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e × 6\u003c/span\u003e. For the hour, 1 hour or 60 minutes is equal to 360/12 degrees. Thus, the angle of hour is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e × 30 + \u003ci\u003eM\u003c/i\u003e × 0.5\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/80/problem/C\" title\u003d\"Codeforces Beta Round 69 (Div. 2 Only)\"\u003e80C - Heroes\u003c/a\u003e\u003c/p\u003e\u003cp\u003eA little complicated but not quite difficult problem. Enumerate all the feasible divisions of the heroes, and find out first the minimum difference and then the maximum liking.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/80/problem/D\" title\u003d\"Codeforces Beta Round 69 (Div. 2 Only)\"\u003e80D - Falling Anvils\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is a pure mathematical problem. We use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e to denote the probability density function (pdf) of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e, respectively. For normal distribution with range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e]\u003c/span\u003e, the pdf is written as \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1f/ba/1fba7c767551bc955c3a61d36bf5d9f6007e338e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Then, we derive the formula as follows:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/23/bf/23bfdec75e432a251384866dab86eb3ec9ef9cf9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWe first deal with the first term. \u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/de/79/de7911e5909c73a74264f3fbd77406e59ca763f8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eThen, it comes to the second term. This should be solved based on the following two cases:\u003c/p\u003e\u003cp\u003e1) \u003cspan class\u003d\"tex-span\"\u003e4\u003ci\u003eb\u003c/i\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c0/a9/c0a9474ff3d3697d7f880f5ba1ae1f70756e5a1a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e2) \u003cspan class\u003d\"tex-span\"\u003e4\u003ci\u003eb\u003c/i\u003e ≥ \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/04/61/046180cd32724d704a7cc57afdd911b01762ab59.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eTherefore, for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≠ 0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e ≠ 0\u003c/span\u003e, we can calculate the answer according to the above formula. For the other cases, the rules are:\u003c/p\u003e\u003cp\u003e1) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003eb\u003c/i\u003e \u003d 0\u003c/span\u003e, the answer should be \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e;\u003c/p\u003e\u003cp\u003e2) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d 0\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e ≠ 0\u003c/span\u003e, the answer is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/06/47/06479cd23d60c92802b763b2307abea3d29db615.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e;\u003c/p\u003e\u003cp\u003e3) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≠ 0\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d 0\u003c/span\u003e, the answer is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/80/problem/E\" title\u003d\"Codeforces Beta Round 69 (Div. 2 Only)\"\u003e80E - Beavermuncher-0xFF\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI think this is a nice problem to practice dp based on trees. We use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e to denote the maximum number of beavers that it can eat, under the condition that all the child nodes of node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e have been processed and it returns back to node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Furthermore, we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eleft\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e to denote the number of beavers that are still at node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, under the above same condition. We need another array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebeaver\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e to denote the number of beavers at each node at the beginning. \u003c/p\u003e\u003cp\u003eNow, we start implementing DFS from the given root node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. To calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e, we assume that all the child nodes of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, i.e., \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003em\u003c/i\u003e\u003c/span\u003e], have been computed (they are obtained when the DFS function returns). Then, we sort all the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003em\u003c/i\u003e]\u003c/span\u003e in a decreasing order. If we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e to denote the number of its child nodes that have at least one beaver, then \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0a/61/0a6168bfcafb678528b587a29d9432abf4d0bccf.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Moreover, note that we might still have beavers left at both node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and its child nodes, and we should take them into consideration as well. Thus, we should further update \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/96/5a/965a115675b9bff6a170623bb4e7bcabf9ed28af.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eBe careful that when we call DFS to deal with any child node, we should decrease \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebeaver\u003c/i\u003e[\u003ci\u003em\u003c/i\u003e]\u003c/span\u003e by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, since we need at least one beaver to return back!! Also remember to update \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eleft\u003c/i\u003e[\u003ci\u003em\u003c/i\u003e]\u003c/span\u003e with correct values. The DFS function trivially returns when it is a leaf node or it has no beavers at all. Finally, we can output \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003es\u003c/i\u003e]\u003c/span\u003e as the required answer.\u003c/p\u003e\u003c/div\u003e","tags":[]}}