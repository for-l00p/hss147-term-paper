{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1485852983,"rating":0,"authorHandle":"mutreta","modificationTimeSeconds":1487709381,"id":50136,"title":"\u003cp\u003eStrings: Matching\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003eMatching\u003c/h1\u003e\u003cp\u003e\u003cem\u003eAdaptation of lectures given by \u003ca class\u003d\"rated-user user-admin\" href\u003d\"/profile/MikeMirzayanov\" title\u003d\"Headquarters, MikeMirzayanov\"\u003eMikeMirzayanov\u003c/a\u003e at Brazilian ICPC Summer Camp on 01-30-2017\u003c/em\u003e\u003c/p\u003e\u003cp\u003eGiven a text \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e...\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e and a pattern \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e...\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e we can define the matching problem as to find any (or all) occurrences of the pattern in the text.\u003c/p\u003e\u003cp\u003eFor instance, given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d \u0026quot;\u003ci\u003endabcmoiadnabcas\u003c/i\u003e\u0026quot;\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u0026quot;\u003ci\u003eabc\u003c/i\u003e\u0026quot;\u003c/span\u003e, we can find two occurrences of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. The first of them start at index \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, and the other starts at position \u003cspan class\u003d\"tex-span\"\u003e11\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e have size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e respectively, them the naive solution to the matching problem has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enm\u003c/i\u003e)\u003c/span\u003e complexity — for each index of the text try to see if the following \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e characters match the pattern.\u003c/p\u003e\u003cp\u003eThere are two different approaches to this problem. The first is to preprocess the text in order to be able to match patterns more efficiently. The second one is to do the opposite, preproccess the pattern. It turns out the the former is complexer and somehow trickier, so we\u0027ll start discussing the later.\u003c/p\u003e\u003ch2\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eZ\u003c/i\u003e\u003c/span\u003e-Function\u003c/h2\u003e\u003cp\u003eThe \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function of a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is an array of same length an values such that:\u003c/p\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 0\u003c/span\u003e\u003c/center\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003elengthoflongestcommonprefixbetweensands\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e..\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e\u003c/center\u003e\u003cp\u003eFor instance, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u003d \u0026quot;\u003ci\u003eabacaba\u003c/i\u003e\u0026quot;\u003c/span\u003e, the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e{0, 0, 1, 0, 3, 0, 1}\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u003d \u0026quot;\u003ci\u003eaaaaa\u003c/i\u003e\u0026quot;\u003c/span\u003e, then the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e takes value \u003cspan class\u003d\"tex-span\"\u003e{0, 4, 3, 2, 1}\u003c/span\u003e. From now on, we are going to denote the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function of the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eBut how the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function relate to the matching problem? Having the strings \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, we build a new string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u003d \u003ci\u003ep\u003c/i\u003e#\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, where \u0027#\u0027 is a special character that is not present in neither of the strings. Now we just need to find the indexes of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003c/span\u003e that have value equals \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eGiven \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u0026quot;\u003ci\u003eabc\u003c/i\u003e\u0026quot;\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d \u0026quot;\u003ci\u003etestabcteztabcc\u003c/i\u003e\u0026quot;\u003c/span\u003e, we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u003d \u0026quot;\u003ci\u003eabc\u003c/i\u003e#\u003ci\u003etestabcteztabcc\u003c/i\u003e\u0026quot;\u003c/span\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003c/span\u003e is given by:\u003c/p\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003e{0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0}\u003c/span\u003e\u003c/center\u003e\u003cp\u003eNotice that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 8\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 15\u003c/span\u003e have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 3\u003c/span\u003e. Removing the size of the pattern and the separator character from the indexes we find that the pattern matches with the text in positions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 4\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 11\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow we just need to learn how to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003eNaive Construction of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eZ\u003c/i\u003e\u003c/span\u003e-Function\u003c/h3\u003e\u003cp\u003eGiven the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, we can see that:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor(int i\u003d1; i\u0026lt;n; ++i)\n  while(i+z[i] \u0026lt; n and s[z[i]+i] \u003d\u003d s[z[i]]) z[i]++;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCorrectly calculates \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e and has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e complexity. But this complexity has no improvement over the naive matching algorithms.\u003c/p\u003e\u003ch3\u003eMaking it linear\u003c/h3\u003e\u003cp\u003eThe previous calculated values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e give us important information about the structure of the string. We can use that knowledge to speed up our quadratic algorithm. To do it we still calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e, but now store two new values, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003er\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e + 1\u003c/span\u003e and r is the biggest possible.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e                                z[l] \u003d r - l + 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|x|y|z|a|b|c|d|e|?|?| | | | | | | | | |x|y|z|a|b|c|d|e|?|?| | | | |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n 0     j      r-l                      l     i       r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eGiven that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003er\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e + 1\u003c/span\u003e, then we know that the strings \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[0..\u003ci\u003er\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e..\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e are the same. This means that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e..\u003ci\u003er\u003c/i\u003e] \u003d \u003ci\u003es\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e..\u003ci\u003er\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e]\u003c/span\u003e and thus \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is at least as big as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Since we know that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e + 1\u003c/sub\u003e! \u003d \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can be bigger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e \u003d \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e and so on.\u003c/p\u003e\u003cp\u003eThe bigger is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, the larger is the range of values we can have precalculated to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. That\u0027s why we should increase \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e every time that we can. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e it means that we can replace \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe code can be written as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint l\u003d0, r\u003d0;\nfor(int i\u003d1; i\u0026lt;n; ++i) {\n    // Use the previous values of z to speed up computation\n    if (i \u0026lt;\u003d r) z[i] \u003d min(z[i-l], r-i+1);\n    // Increase z[i] naively as much as we can.\n    while(i+z[i] \u0026lt; n and s[z[i]+i] \u003d\u003d s[z[i]]) z[i]++;\n    // Increase l and r, if we can.\n    if (z[j] \u0026lt; z[i]) l \u003d i, r \u003d i + z[i] - 1;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis algorithm runs in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. To prove it we must notice that if the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is updated in the inner while loop, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e will be updated in the if below. Since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e only increases, it means that we will only hit the inner while loop at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e times, which give us linear complexity.\u003c/p\u003e\u003ch3\u003eApplications\u003c/h3\u003e\u003cp\u003eAs we\u0027ve seen, we can use the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function to solve the matching problem. This algorithm can also be applied to:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eGiven a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, find the number of different substrings of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThe naive solution to this problem has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e complexity. Using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function we can achieve \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e complexity.\u003c/p\u003e\u003cp\u003eThe idea is to calculate the answer for each prefix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e contained in the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. Suppose we know the answer for prefix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. To find the answer for the prefix of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e, we noticed that the only potentially new substrings are the suffixes of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e-th prefix.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e 0 1 2 3                 ...              i-1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| | | |x|a|b|c|d|e|f|g| | | | | | | | | | | |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n                                             i\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| | | | | | | | | | | | | | | |y|a|b|c|d|e|f|g|\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                                 \\            /\n                                  ------------\n                                        l\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFurthermore, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e is the size of the biggest suffix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e that is present in the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e, then all then all suffixes with size smaller than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e are present in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e too (see the picture above to understand it).\u003c/p\u003e\u003cp\u003eThus, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e the number of substrings of the prefix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ei\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e. To get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e, we just need to find the maximum value of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function of the inverted prefixes. Since the complexity to calculate the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function is linear and we must do it for each of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e prefixes, we can solve this problem with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e complexity.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eGiven a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, find the total length of all substrings of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThis problem is very similar to the previous one and the same approach can be used.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eGiven a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, find the smallest period of it.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eIn this problem, given a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and it\u0027s \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function, we just need to find the smallest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e|\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eGiven a string of text \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and a pattern \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e, find all positions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e such that the pattern differs from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e at most in one position.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThis problem can be solved in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e. Let\u0027s consider that, given the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e, the inverse of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e is denoted by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u0027\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTo match a pattern \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e with the substring \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e..\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e having at most one error, is to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e..\u003ci\u003el\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e - 1]\u003c/span\u003e matches a prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e + 1..\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e matches a suffix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTo do it efficiently, we calculate the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function for two strings: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e1\u003c/sup\u003e \u003d \u003ci\u003ep\u003c/i\u003e#\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e \u003d \u003ci\u003ep\u003c/i\u003e\u0027#\u003ci\u003et\u003c/i\u003e\u0027\u003c/span\u003e. With the first one we can match the prefixes, and with the second one we can match the suffixes.\u003c/p\u003e\u003ch2\u003ePrefix Function\u003c/h2\u003e\u003cp\u003e\u003cem\u003eOBS: We are going to use 1-based index for the Prefix Function and we\u0027re still goingo to use 0-based index for strings.\u003c/em\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e border                         border\n /-----\\                       /-----\\\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |a|b|a|x|a|b|c|d|e|f|g|a|j|k|x|a|b|a|\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \\_/                               \\_/\nborder                            border\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eA string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e has \u003cstrong\u003eborder\u003c/strong\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e has a proper prefix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and a proper suffix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. As showed above a string can have borders of multiple size. The empty string is a border of every string.\u003c/p\u003e\u003cp\u003ePrefix function is a array \u003cspan class\u003d\"tex-span\"\u003eπ\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the leght of the longest border of the prefix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. Some examples:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e        +-+-+-+-+-+-+-+  +-+-+-+-+-+  +-+-+-+-+-+-+-+-+\n string |a|b|a|c|a|b|a|  |a|a|a|a|a|  |a|b|a|b|a|b|a|b|\n        +-+-+-+-+-+-+-+  +-+-+-+-+-+  +-+-+-+-+-+-+-+-+\n prefix |0|0|1|0|1|2|3|  |0|1|2|3|4|  |0|0|1|2|3|4|5|6|\n        +-+-+-+-+-+-+-+  +-+-+-+-+-+  +-+-+-+-+-+-+-+-+\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe prefix function can be used to solve matching problems in a similar way that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e-function can.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e                             match     match\n                            /-----\\   /-----\\\n              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       string |a|b|c|#|t|e|s|a|b|c|m|e|a|b|c|c|\n              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       prefix |0|0|0|0|0|0|0|1|2|3|0|0|1|2|3|0|\n              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                                 ^       ^\n   prefix function of            |       |\n the size of the pattern  -------+-------+\n means it\u0027s end of match\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBefore developing an algorithm to calculate the prefix function, we must learn a little bit about it. Notice that in the examples above, when \u003cspan class\u003d\"tex-span\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e grows, it grow at most one unit. This property holds because if we can find a sequence that ends at index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e that has \u003cspan class\u003d\"tex-span\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e elements and matches a prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e, then we can build a sequence that also matches the a prefix, ends at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e and has \u003cspan class\u003d\"tex-span\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1\u003c/span\u003e elements. Which means that:\u003c/p\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt;  \u003d π\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e + 1\u003c/span\u003e\u003c/center\u003e\u003cp\u003eThe logic below shows how to construct the border of prefix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e from the border of prefix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e                          match\n              pi[i]    /---------\\\n             pi[i-1]   /-------\\\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |a|b|c|d|e| | | | | | |a|b|c|d|e|\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                                i\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe want \u003cspan class\u003d\"tex-span\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to be as big as possible. The biggest value it can take is \u003cspan class\u003d\"tex-span\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e + 1\u003c/span\u003e, which happens when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e + 1\u003c/sub\u003e\u003c/span\u003e. If this last equality does not hold, we have to find the biggest border smaller than \u003cspan class\u003d\"tex-span\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e. By an argument like the one used to prove that $\\pi_{i} \u0026lt;\u003d \\pi_{i-1} + 1$ we can say that \u003cspan class\u003d\"tex-span\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt;  \u003d π\u003csub class\u003d\"lower-index\"\u003eπ{\u003ci\u003ei\u003c/i\u003e - 1}\u003c/sub\u003e + 1\u003c/span\u003e, and that the equality holds if, and only if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003eπ\u003csub class\u003d\"lower-index\"\u003eπ{\u003ci\u003ei\u003c/i\u003e - 1}\u003c/sub\u003e + 1\u003c/sub\u003e\u003c/span\u003e. We can recurse in that logic, breaking the loop if we find a match for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e or if we find out that \u003cspan class\u003d\"tex-span\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt;  \u003d 0\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWith that we can build the code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor(int i\u003d2; i\u0026lt;\u003dn; ++i) {\n  pi[i] \u003d pi[i-1];\n  while (pi[i] \u0026gt; 0 and s[pi[i]] !\u003d s[i-1]) pi[i] \u003d pi[pi[i]];\n  if (s[pi[i]] \u003d\u003d s[i-1]) pi[i]++;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that the code works in linear time, because even though we can decrease \u003cspan class\u003d\"tex-span\"\u003eπ\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e times in a single pass of the \u003ccode\u003efor\u003c/code\u003e loop, we increase \u003cspan class\u003d\"tex-span\"\u003eπ\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e times in the whole algorithm, so we can only decrease it that many times.\u003c/p\u003e\u003ch3\u003eKMP\u003c/h3\u003e\u003cp\u003eHow to use prefix functions to build KMP\u003c/p\u003e\u003c/div\u003e","tags":[]}}