{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1424768721,"rating":73,"authorHandle":"fcspartakm","modificationTimeSeconds":1424800158,"id":16598,"title":"\u003cp\u003eCodeforces Round #293 (Div.2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/517/A\"\u003e517A — Vitaly and Strings\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTo solve this problem we can, for example, find string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e\u003c/span\u003e, which lexicographically next to string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and check that string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e\u003c/span\u003e is lexicographically less than string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. If string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e\u003c/span\u003e is lexicographically smaller than string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, print string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e\u003c/span\u003e and finish algorithm. If string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e\u003c/span\u003e is equal to string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eNo\u003c/i\u003e \u003ci\u003esuch\u003c/i\u003e \u003ci\u003estring\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTo find string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enext\u003c/i\u003e\u003c/span\u003e, which lexicographically next to string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e, at first we need to find maximal suffix of string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e, consisting from letters \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003ez\u003c/i\u003e\u0027\u003c/span\u003e, change all letters \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003ez\u003c/i\u003e\u0027\u003c/span\u003e in this suffix on letters \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003ea\u003c/i\u003e\u0027\u003c/span\u003e, and then letter before this suffix increase on one. I.e. if before suffix was letter, for example, \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003ed\u003c/i\u003e\u0027\u003c/span\u003e, we need to change it on letter \u003cspan class\u003d\"tex-span\"\u003e\u0027\u003ci\u003ee\u003c/i\u003e\u0027\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003es\u003c/i\u003e|)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e — length of string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/517/B\"\u003e517B — Tanya and Postcard\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTo solve this problem at first will count array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[]\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ec\u003c/i\u003e]\u003c/span\u003e — how many times letter \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e found in string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. We will count two numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e2\u003c/span\u003e — how many times Tanya will shouts joyfully \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eYAY\u003c/i\u003e!\u003c/span\u003e and how many times Tanya will says \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eWHOOPS\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s iterate on string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]] \u0026gt; 0\u003c/span\u003e, then increase \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e1\u003c/span\u003e on one and decrease \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]]\u003c/span\u003e on one.\u003c/p\u003e\u003cp\u003eThen let\u0027s again iterate on string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e is letter which equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e,but in the opposite case for it. I. e. if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u0027\u003ci\u003ew\u003c/i\u003e\u0027\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e \u003d \u0027\u003ci\u003eW\u003c/i\u003e\u0027\u003c/span\u003e. Now, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ec\u003c/i\u003e] \u0026gt; 0\u003c/span\u003e, then increase \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e2\u003c/span\u003e on one and decrease \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003eс\u003c/i\u003e]\u003c/span\u003e on one.\u003c/p\u003e\u003cp\u003eNow, print two numbers — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e2\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003es\u003c/i\u003e| + |\u003ci\u003et\u003c/i\u003e|)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e — length of string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003et\u003c/i\u003e|\u003c/span\u003e — length of string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/517/C\"\u003e517C — Anya and Smartphone\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTo solve this problem we will store two arrays — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e[]\u003c/span\u003e. In array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[]\u003c/span\u003e will store current order of icons, i. e. in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e store number of application, icon which stay on position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. In array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e[]\u003c/span\u003e will store on which place in list stays icons, i. e. in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e store in which position of array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[]\u003c/span\u003e stay icon of application number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. We will count answer in variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eLet\u0027s iterate on applications which we need to open. Let current application has number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enum\u003c/i\u003e\u003c/span\u003e. Then to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e we need add (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e[\u003ci\u003enum\u003c/i\u003e] / \u003ci\u003ek\u003c/i\u003e + 1\u003c/span\u003e). Now, if icon of application number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enum\u003c/i\u003e\u003c/span\u003e doesn\u0027t stay on first position in list of applications, we make the following — swap \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e[\u003ci\u003enum\u003c/i\u003e]]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e[\u003ci\u003enum\u003c/i\u003e] - 1]\u003c/span\u003e and update values in array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e[]\u003c/span\u003e for indexes of two icons which numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e[\u003ci\u003enum\u003c/i\u003e]]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e[\u003ci\u003enum\u003c/i\u003e] - 1]\u003c/span\u003e . \u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e — number of applications, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e — number of requests to start applications.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/517/D\"\u003e517D — Ilya and Escalator\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTo solve this problem let\u0027s use dynamic programming. We will store two-dimensional array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[][]\u003c/span\u003e with type \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edouble\u003c/i\u003e\u003c/span\u003e. In \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e will store the likelihood that after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e seconds \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e people are on escalator.\u003c/p\u003e\u003cp\u003eIn dynamic will be following transitions. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, i. e. all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e people already on escalator then we make transition \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e] +  \u003d \u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e. Else, or person number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e go to escalator in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e second, i. e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e + 1] +  \u003d \u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] * \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, or person number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e stays on his place, i. e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e] +  \u003d \u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] * (1 – \u003ci\u003ep\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow we need to count answer — it is sum on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e inclusive \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003et\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] * \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003et\u003c/i\u003e * \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e — on which moment we must count answer, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e — how many people stay before escalator in the beginning.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/517/E\"\u003e517E — Arthur and Questions\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eAt first let\u0027s take two sums \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e. It is correct that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e. If move from right to left all elements apart from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e, all of them will reduce and will left only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e. If write further all sums we will obtain that sequence disintegrate on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e disjoint chains: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003ci\u003ek\u003c/i\u003e + 1\u003c/sub\u003e..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e + 2\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003ci\u003ek\u003c/i\u003e + 2\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003ci\u003ek\u003c/i\u003e + 2\u003c/sub\u003e..., ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e...\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWe will solve the problem for every chain separately. Let\u0027s iterate on first chain and find all pair of indexes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e \u0026lt; \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e, that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e are numbers (not questions) in given sequence, and for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e - 1\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e stay questions. All this questions we need to change on numbers so does not violate the terms of the increase and minimize sum of absolute values of this numbers.\u003c/p\u003e\u003cp\u003eBetween indexes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e stay \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e questions, we can change them on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] - \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - 1\u003c/span\u003e numbers. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e \u0026gt; \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] - \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - 1\u003c/span\u003e, then we need to print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eIncorrect\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esequence\u003c/i\u003e\u003c/span\u003e and finish algorithm. Else we need to change all this questions to numbers in greedy way. \u003c/p\u003e\u003cp\u003eHere we have several cases. Will review one case when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u0026gt;  \u003d 0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] \u0026gt;  \u003d 0\u003c/span\u003e. Let current chain (\u003cspan class\u003d\"tex-span\"\u003e3, ?, ?, ?, 9\u003c/span\u003e), \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u003d 5\u003c/span\u003e. We need to change questions on numbers in the following way — (\u003cspan class\u003d\"tex-span\"\u003e3, 4, 5, 6, 9\u003c/span\u003e). In other cases (when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u0026lt;  \u003d 0\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] \u0026lt;  \u003d 0\u003c/span\u003e and when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u0026lt;  \u003d 0\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] \u0026gt;  \u003d 0\u003c/span\u003e) we need to use greedy similary to first so does not violate the terms of the increase and minimize sum of absolute values of this numbers.\u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e — count of elements in given sequence.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"http://codeforces.ru/problemset/problem/517/F\"\u003e517F — Pasha and Pipe\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eAt first let\u0027s count two two-dimensional arrays of prefix sums \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumv\u003c/i\u003e[][]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumg\u003c/i\u003e[][]\u003c/span\u003e. In \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumv\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e store how many grids are in column \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e beginning from row \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to row \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. In \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumg\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e store how many grid are in row \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e beginning from column \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to column \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s count \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e0\u003c/span\u003e — how many pipes without bending we can pave. Count how many vertical pipes — we can pave. Iterate on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e — 1\u003c/span\u003e and, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumg\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] — \u003ci\u003esumg\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][0] \u003d 0\u003c/span\u003e (i. e. in this column zero grids), increase \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e0\u003c/span\u003e on one. Similary count number of horizontal pipes.\u003c/p\u003e\u003cp\u003eLet\u0027s count \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e1\u003c/span\u003e — how many pipes with \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e bending we can pave. We need to brute cell, in which will bending. There are four cases. Let\u0027s consider first case, others we can count similary. This case — pipe begin in left column, go to current cell in brute and then go to top row. If brute cell in row \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and column \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e then to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e1\u003c/span\u003e we need to add one, if \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003esumg\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] — \u003ci\u003esumg\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][0]) + (\u003ci\u003esumv\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] — \u003ci\u003esumv\u003c/i\u003e[0][\u003ci\u003ej\u003c/i\u003e]) \u003d 0\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s count \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e2\u003c/span\u003e — how many pipes with \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e bendings we can pave. Let\u0027s count how many tunes begin from top row and end in top or bottom row and add this number to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e2\u003c/span\u003e. Then rotate our matrix three times on \u003cspan class\u003d\"tex-span\"\u003e90\u003c/span\u003e degrees and after every rotate add to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e2\u003c/span\u003e count of pipes, which begin from top row and end in top or bottom row. Then we need divide \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e2\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, because every pipe will count twice.\u003c/p\u003e\u003cp\u003eHow we can count to current matrix how many pipes begin from top row and end in top or bottom row? Let\u0027s count four two-dimension arrays \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elf\u003c/i\u003e[][]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erg\u003c/i\u003e[][]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumUp\u003c/i\u003e[][]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumDown\u003c/i\u003e[][]\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e — number of row, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e — number of column of current cell, then in position (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003elf\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e) in matrix are nearest from left grid for cell (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e), and in position (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003erg\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e) in matrix are nearest from right grid for cell (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e). \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumUp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e — how many columns without grids are in submatrix from (\u003cspan class\u003d\"tex-span\"\u003e1, 1\u003c/span\u003e) to (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e) of given matrix. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumDown\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e — how many columns without grids are in submatrix from (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e, 1\u003c/span\u003e) to (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e) of given matrix. Then let\u0027s brute cell in which will be the first bending of pipe (pipe goes from top row and in this cell turned to left or to right), check, that in column \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e above this cell \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e grids, with help of arrays \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elf\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erg\u003c/i\u003e\u003c/span\u003e find out as far as pipe can go to left or to right and with help of arrays \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumUp\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumDown\u003c/i\u003e\u003c/span\u003e carefully update answer. \u003c/p\u003e\u003cp\u003eNow print number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e1 + \u003ci\u003eans\u003c/i\u003e2 + \u003ci\u003eans\u003c/i\u003e3\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAsymptotic behavior of this solution — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003em\u003c/i\u003e * \u003ci\u003econst\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e — hoew many rows in given matrix, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e — how many columns in given matrix, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003econst\u003c/i\u003e\u003c/span\u003e takes different values depending on the implementation, in solution from editorial \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003econst\u003c/i\u003e \u003d 10\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}