{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1511277375,"rating":-3,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1511277375,"id":55932,"title":"\u003cp\u003eNotes on Codeforces Beta Round #94 Div-2, A, B, C, E (Pascal Triangle)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/129/problem/A\" title\u003d\"Codeforces Beta Round 94 (Div. 2 Only)\"\u003e129A - Cookies\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can compute the sum of all the integers. Then, we enumerate each element and test whether their difference is even or not.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/129/problem/B\" title\u003d\"Codeforces Beta Round 94 (Div. 2 Only)\"\u003e129B - Students and Shoelaces\u003c/a\u003e\u003c/p\u003e\u003cp\u003eA straightforward implementation problem. We can use BFS to find out all the nodes whose degree is exactly one. The answer is just the total number of BFS.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/129/problem/C\" title\u003d\"Codeforces Beta Round 94 (Div. 2 Only)\"\u003e129C - Statues\u003c/a\u003e \u003c/p\u003e\u003cp\u003eNote that at the eighth second, all the positions are definitely safe. Therefore, it is sufficient to check whether we can survive within the first eight seconds. One feasible solution is to record and update all the safe positions at each second. If we can survive after eight seconds, it means that we can always reach the right upper corner; otherwise not.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/129/problem/E\" title\u003d\"Codeforces Beta Round 94 (Div. 2 Only)\"\u003e129E - Games with Rectangle\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn fact we might obtain some more clear observation if we consider the length and width of each rectangular in an independent perspective. For instance, for the length, the rectangulars can only have positions at (1, 2, 3,... n-1). As there are exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e rectangulars, we should select \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e positions, which gives \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e different patterns. Similarly, for the width we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e patterns as well, and thus the final answer should be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e × \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e can be calculated by using Pascal triangle.\u003c/p\u003e\u003c/div\u003e","tags":[]}}