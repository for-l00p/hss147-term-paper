{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1522652334,"rating":0,"authorHandle":"strawberrry","modificationTimeSeconds":1522652334,"id":58688,"title":"\u003cp\u003eRound #240 solution\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cblockquote\u003e\u003cp\u003eall problems are solved at 4.2\u003c/p\u003e\u003cp\u003eI seem to be lazy recently... Anyway, I will stick to it next time.\u003c/p\u003e \u003c/blockquote\u003e\u003ch3\u003eA. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/415/problem/A\"\u003eMashmokh and Lights\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eTAG:\u003c/strong\u003e \u003ccode\u003eimplementation\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e对于 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e 的反应，直接从 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e 到 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e 扫一遍，把没有关的灯关掉，记录一下，最后输出。\u003c/p\u003e\u003ch3\u003eB. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/415/problem/B\"\u003eMashmokh and Tokens\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eTAG:\u003c/strong\u003e \u003ccode\u003egreedy\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003eFor this problem you can find the number of tokens you can save if you initally have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e tokens in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e. Then you can calculate the answer for all of numbers in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSuppose \u003cimg alt\u003d\"img\" src\u003d\"/predownloaded/dc/b0/dcb0a646a93fc7adc7ef058d8c6a695504d75f66.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e by \u003cem\u003ep\u003c/em\u003e. then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e· \u003ci\u003eb\u003c/i\u003e ≤ \u003ci\u003ew\u003c/i\u003e·\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. then \u003cimg alt\u003d\"img\" src\u003d\"/predownloaded/aa/a4/aaa42b5f9916c5c5722a4930fd845692bca8d306.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eSuppose initially we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e tokens. Let \u003cimg alt\u003d\"img\" src\u003d\"/predownloaded/81/0e/810ecc3ecfd97d8ca763095cf8a83e6d5d5d969f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e then we need to find such maximum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e that \u003cimg alt\u003d\"img\" src\u003d\"/predownloaded/7f/12/7f12cff1a430c365dfebe1fca6684ea78df8e80b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eSo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e will be equal to \u003cimg alt\u003d\"img\" src\u003d\"/predownloaded/d4/6d/d46d2be60521f95862c47196e1770e182273aa19.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. so we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003eC. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/415/problem/C\"\u003eMashmokh and Numbers\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eTAG:\u003c/strong\u003e \u003ccode\u003emath\u003c/code\u003e \u003ccode\u003egreedy\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e两两取 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e\u003c/span\u003e ，至少分数是 \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/20/d6/20d6339a08eda782e648ec921808225d8ecaef6a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ，那么对于那些 \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8c/3c/8c3c15b742c79b783e708d6836d7e8bd592e4734.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e 的显然无解。\u003c/p\u003e\u003cp\u003e否则考虑贪心地让前两个数的 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e 尽可能接近 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e 后面数的 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e) \u003d 1\u003c/span\u003e ，推一下，就是贪心地令 \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/09/5b/095bb7ef444d44b2b0a638a3d98a9286feefff20.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ！这是考虑 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026gt; 1\u003c/span\u003e 的情况，因此当 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e 有一些特例，比如 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1,  \u003ci\u003ek\u003c/i\u003e \u003d 1\u003c/span\u003e 是不存在， \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1,  \u003ci\u003ek\u003c/i\u003e \u003d 0\u003c/span\u003e 时候 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026gt; 0\u003c/span\u003e ！\u003c/p\u003e\u003ch3\u003eD. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/415/problem/D\"\u003eMashmokh and ACM\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eTAG:\u003c/strong\u003e \u003ccode\u003edp\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e现在看到这种计数DP越来越有感觉了，令 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e 表示目前有 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e 个数，第 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e 个数是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e 的方案数，根据转移要求， \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c4/58/c4587397707d06d703ddf7e99c0122f03fd809d4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ，但是单纯枚举是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e，我们单独考虑右边的贡献，我们可以拿 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e 去更新 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e 的倍数 \u003cspan class\u003d\"tex-span\"\u003e，\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003el\u003c/i\u003e·\u003ci\u003ek\u003c/i\u003e) ，\u003ci\u003el\u003c/i\u003e \u0026gt; 1\u003c/span\u003e 的答案，也就是枚举这个 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e ，这样转移可以降到 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enklogn\u003c/i\u003e)\u003c/span\u003e ！\u003c/p\u003e\u003ch3\u003eE. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/415/problem/E\"\u003eMashmokh and Reverse Operation\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eTAG:\u003c/strong\u003e \u003ccode\u003edp\u003c/code\u003e \u003ccode\u003esorts\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003eBuild a complete binary tree with height \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. So its \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e leaf corresponds to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e element of the initial array. For each vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e lets define its subarray as the subarray containing the elements that have a leaf corresponding to them in subtree rooted at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor each non-leaf vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, suppose its left child\u0027s subarray contains elements \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e...\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e of the array and its right child contains elements \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eb\u003c/i\u003e  +  1...\u003ci\u003ec\u003c/i\u003e]\u003c/span\u003e of the array. We\u0027ll calculate two numbers for this vertex. number of pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e) (\u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003eb\u003c/i\u003e ≤ \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003ec\u003c/i\u003e)\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e·\u003ci\u003ei\u003c/i\u003e  \u0026gt;  \u003ci\u003eb\u003c/i\u003e·\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e and number of pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e,  \u003ci\u003ej\u003c/i\u003e) (\u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003eb\u003c/i\u003e ≤ \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003ec\u003c/i\u003e)\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e·\u003ci\u003ei\u003c/i\u003e  \u0026lt;  \u003ci\u003eb\u003c/i\u003e·\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. We\u0027ll call the first calculated number, normal number and the other one reverse number. Calculating these numbers can be done using merge-sort algorithm in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e·2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e. We\u0027ll\u003c/p\u003e\u003cp\u003eInitially write normal number for each vertex on it. We\u0027ll define a vertex\u0027s type as type of the number that is written on them. Let\u0027s define height of a vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e equal to its distance to the nearest leaf. Also let\u0027s define switching a vertex as switching the number written on it with the other type number(if normal number is written on it change it to reverse number and vise-versa).\u003c/p\u003e\u003cp\u003eInitially sum of writed numbers is equal to number of inversions in the initial array. Now when query \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e is given, by switching all vertices with height at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e, the sum of writed numbers will become equal to the number of inversions in the new array. The only question is how to perform such query fast? One can notice that in a height \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e, always all of the vertices has the same type. So we can calculate two numbers for each height \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e. The sum of normal numbers of vertices with height \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e and the sum of their reverse numbers. Then instead of switching vertices in a height one by one each time, one can just switch the number for that height. The sum of numbers of heights after each query will be the answer for that query. since there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e height each query can be performed in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e so the total running time will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enq\u003c/i\u003e  +  \u003ci\u003en\u003c/i\u003e·2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}