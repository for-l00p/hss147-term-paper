{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1426753832,"rating":337,"authorHandle":"Burunduk1","modificationTimeSeconds":1426757378,"id":17023,"title":"\u003cp\u003eПаросочетание. Быстрый Кун.\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eПост для тех, кому интересно научиться ещё быстрее искать паросочетание в двудольном графе.\u003c/p\u003e\u003cp\u003eАлгоритм \u003ca href\u003d\"http://e-maxx.ru/algo/kuhn_matching\"\u003eКуна\u003c/a\u003e ищет паросочетание в двудольном графе за \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eVE\u003c/i\u003e)\u003c/span\u003e. Реализация, данная на emaxx, укладывается в такой шаблон:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eforn(i, n) {\n  fill(used, 0);\n  dfs(i);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eЯ обычно пишу так:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efill(used, 0);\nforn(i, n) \n  if (dfs(i))\n    fill(used, 0);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eТо есть, обнуляю пометки только если нашёл дополняющую цепь. Теперь Кун работает за \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003eM\u003c/i\u003e|·\u003ci\u003eE\u003c/i\u003e)\u003c/span\u003e, где \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eM\u003c/i\u003e|\u003c/span\u003e — размер максимального паросочетания.\u003c/p\u003e\u003cp\u003eРешение можно ускорить ещё как минимум в 2 раза, используя \u003ca href\u003d\"http://e-maxx.ru/algo/kuhn_matching\"\u003eжадную инициализацию паросочетания\u003c/a\u003e. Идея: применяем Куна не к пустому паросочетанию, а к паросочетанию размера хотя бы \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eM\u003c/i\u003e| / 2\u003c/span\u003e. Кстати, \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eM\u003c/i\u003e| / 2\u003c/span\u003e — оценка снизу, если перед жадной инициализацией сделать \u003ccode\u003erandom_shuffle\u003c/code\u003e, жадность найдёт паросочетание чуть побольше, и Кун будет работать чуть быстрее.\u003c/p\u003e\u003ch4\u003eНовое для меня\u003c/h4\u003e\u003cp\u003eОказалось, можно заставить Куна работать ещё в несколько раз быстрее...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efill(pair, -1);\nfor (int run \u003d 1; run; ) {\n  run \u003d 0, fill(used, 0);\n  forn(i, n)\n    if (pair[i] \u003d\u003d -1 \u0026amp;\u0026amp; dfs(i))\n      run \u003d 1;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eТо есть, теперь я не обнуляю пометки даже если нашёл дополняющую цепь. \u003c/p\u003e\u003cp\u003eЯ успел потестить на нескольких задачах, например, на \u003ca href\u003d\"http://acm.math.spbu.ru/~sk1/problems/floor.pdf\"\u003eзадаче про доминошки\u003c/a\u003e. Эффект: новая идея \u003cstrong\u003eбез\u003c/strong\u003e жадной инициализации \u003cstrong\u003eв 3 раза быстрее\u003c/strong\u003e старой идеи с жадной инициализацией. Можно скачать \u003ca href\u003d\"http://acm.math.spbu.ru/~sk1/problems/floor.7z\"\u003eтесты и решения\u003c/a\u003e и поиграться самостоятельно. Думаете, в доминошках специфический граф? Потестил на \u003ca href\u003d\"http://acm.math.spbu.ru/~sk1/problems/pairs.pdf\"\u003eпроизвольном двудольном графе\u003c/a\u003e, эффект \u0026quot;на макс тесте в 10 раз быстрее\u0026quot;.\u003c/p\u003e\u003cp\u003eМне эта модификация Куна чем-то напоминает Хопкрофта-Карпа, т.к. получается, что мы за \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eE\u003c/i\u003e)\u003c/span\u003e находим не один путь, а несколько. Непонятно, что стало с асимптотикой алгоритма. Может быть, она тоже улучшилась?)\u003c/p\u003e\u003cp\u003eСпасибо за внимание.\u003c/p\u003e\u003c/div\u003e","tags":["matching","паросочетания","алгоритм куна","оптимизации"]}}