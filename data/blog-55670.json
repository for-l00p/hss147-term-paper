{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1510168718,"rating":0,"authorHandle":"amal_taha","modificationTimeSeconds":1510171571,"id":55670,"title":"\u003cp\u003eCodability Intermediate Final Contest Tutorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHey everyone! We hope you had fun solving the problems as much as we had when we were preparing the contest. ^_^ \u003c/p\u003e\u003cp\u003eIn this blog, we\u0027re going to explain the solutions for the contest problems. We recommend you not to read this blog before trying as much as you can to solve each problem yourself, also put in your mind that you might find a different solution for a certain problem other than the one we are going to explain.\u003c/p\u003e \u003chr /\u003e\u003ch4\u003eA.Car\u003c/h4\u003e\u003cp\u003eFor the hardest problem in this contest \u0026quot;As said in the statement\u0026quot;, is it possible to fit \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e people in the car that fits 2 people in the front and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e in the back? Obviously, the car fits \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e people if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e + 2\u003c/span\u003e then you print \u0026quot;YES\u0026quot; otherwise print \u0026quot;NO\u0026quot;.\u003c/p\u003e\u003cp\u003ecomplexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nint main(){\n\tint n,m;\n\tcin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m;\n\tif(n+2\u0026gt;\u003dm)\n\t\tcout\u0026lt;\u0026lt;\u0026quot;YES\\n\u0026quot;;\n\telse\n\t\tcout\u0026lt;\u0026lt;\u0026quot;NO\\n\u0026quot;;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003ch4\u003eB. Flowers Garden\u003c/h4\u003e\u003cp\u003eThe problem says, if Dana cuts \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ecm\u003c/i\u003e\u003c/span\u003e of the grass each day and it grows by \u003cspan class\u003d\"tex-span\"\u003e1\u003ci\u003ecm\u003c/i\u003e\u003c/span\u003e each night, how many days it tasks from Dana to cut all the grass.Well, there is an important observation in this problem as the grass is being cut by \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ecm\u003c/i\u003e\u003c/span\u003e each day it also grows by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e so it\u0027s the same as being cut by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e each day except for the last day it will be cut by 2 and now this harmful grass is fully cut.What you have to do is to look for the maximum height of any tiles of grass and it will be the answer, we subtract 1 from the answer since the last day we cut all the grass and it doesn\u0027t grow anymore.\u003c/p\u003e\u003cp\u003eConsider the corner case that the tallest grass is \u003cspan class\u003d\"tex-span\"\u003e1\u003ci\u003ecm\u003c/i\u003e\u003c/span\u003e height from the beginning, in this case output \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e directly, because it takes Dana \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e day to cut it not \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e.\u003c/p\u003e\u003cp\u003ecomplexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\nint v[100001];\nint main(){\n\tint n;\n\tcin\u0026gt;\u0026gt;n;\n\tint mx\u003d0;\n\tfor(int x,i\u003d0; i\u0026lt;n; ++i){\n\t\tcin\u0026gt;\u0026gt;v[i];\n\t\tif(v[i]\u003d\u003d1)\n\t\t\t++v[i];\n\t\tmx\u003dmax(mx, v[i]-1);\n\t}\n\tcout\u0026lt;\u0026lt;mx\u0026lt;\u0026lt;endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003ch4\u003eC. Mariam and Painting\u003c/h4\u003e\u003cp\u003eIn this problem Mariam needs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e liters to paint \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e square meter of wood. if she has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e square meters of wood as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is considered the area of one piece of wood she will need \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e * \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e liters. therefore all you need to do is just to calculate the area for all of the wooden pieces and sum them up, then multiply the summation result with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e and that will be the amount of purple paint liters she needs to paint the wood with.\u003c/p\u003e\u003cp\u003ethe area of a rectangular shape is given by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eArea\u003c/i\u003e \u003d \u003ci\u003ex\u003c/i\u003e * \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003ecomplexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\nint main(){\n\tint n , k ; \n\tcin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;k;\n\tll ans\u003d0;        // don\u0027t forget to define ans with long long since the answer will exceed 10^9\n\tfor(int x,y,i\u003d0; i\u0026lt;n; ++i){\n\t\tcin\u0026gt;\u0026gt;x\u0026gt;\u0026gt;y;\n\t\tans+\u003d1ll*x*y*k; // 1ll means 1 of type (long long) so the sum doesn\u0027t overflow \n\t}\n\tcout\u0026lt;\u0026lt;ans\u0026lt;\u0026lt;endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003ch4\u003eD. A Friends\u0027 Conflict\u003c/h4\u003e\u003cp\u003eIn this problem each player tries to find two consecutive similar characters and removes both of them in each turn. Since Yahya starts if he finds \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e similar characters next to each other he removes them and Samer starts playing if he didn\u0027t find any, the game ends and Yahya wins, but if Samer finds the similar characters he removes them and it is Yahya\u0027s turn again. As you can see, Yahya starts so he always plays the odd turns and Samer plays the even turns, so if the game finishes in an odd turn the answer is always \u0026quot;YAHYA\u0026quot;, otherwise it is \u0026quot;SAMER\u0026quot;.\u003c/p\u003e\u003cp\u003eNow for the most important part of this problem. How can we remove the similar characters ? If you remember the use of \u003ccode\u003estack\u003c/code\u003e ,it helps us to keep the last character that was pushed in it in the top of the container so we can easily check if the last pushed character in the stack is similar to the character you\u0027re standing on, you remove it from the stack and ignore the one you\u0027re standing on and continue.The number of times that \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e similar characters appear next to each other gives us the answer, if it was \u003cstrong\u003eeven\u003c/strong\u003e then the winner is Samer ,else it is Yahya.\u003c/p\u003e\u003cp\u003ecomplexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\nstring s;\nint main(){\n\tcin\u0026gt;\u0026gt;s;\n\tstack\u0026lt;char\u0026gt; st;\n\tint ct\u003d0;\n\tfor(int i\u003d0; i\u0026lt;s.size(); ++i){\n\t\tif(!st.empty() \u0026amp;\u0026amp; s[i]\u003d\u003dst.top())\n\t\t\tst.pop(),++ct;\n\t\telse\n\t\t\tst.push(s[i]);\n\t}\n\tif(ct%2)\n\t\tcout\u0026lt;\u0026lt;\u0026quot;YAHYA\\n\u0026quot;;\n\telse\n\t\tcout\u0026lt;\u0026lt;\u0026quot;SAMER\\n\u0026quot;;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003ch4\u003eE. Waves\u003c/h4\u003e\u003cp\u003eThis simple problem asks for the maximum height any of Mariam\u0027s ships has achieved. Simply, just find the maximum height of any ship and add it to the maximum height of any wave and the answer is the resulting height.Observe that you can\u0027t go through each wave and find if the current ship is getting the maximum height above this wave (This solution gives TLE).\u003c/p\u003e\u003cp\u003ecomplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\nint n,m;\n\nint main(){\n\tcin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m;\n\tint mx\u003d0;\n\tfor(int x,i\u003d0;i\u0026lt;n; ++i){\n\t\tcin\u0026gt;\u0026gt;x;\n\t\tmx\u003dmax(mx, x);\n\t}\n\tint ans\u003dmx;\n\tfor(int x,i\u003d0; i\u0026lt;m; ++i){\n\t\tcin\u0026gt;\u0026gt;x;\n\t\tans\u003dmax(ans, mx+x);\n\t}\n\tcout\u0026lt;\u0026lt;ans\u0026lt;\u0026lt;endl;\t\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eyou can solve the problem by sorting the height of the ships and get the maximum one and then sorting the heights of the waves and get the maximum one.\u003c/p\u003e\u003cp\u003ecomplexity for sorting solution: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elogn\u003c/i\u003e\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e + \u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elogm\u003c/i\u003e\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e)\u003c/span\u003e\u003c/p\u003e \u003chr /\u003e\u003ch4\u003eF. OZ and Games\u003c/h4\u003e\u003cp\u003eIn this problem , you are required to find the largest palindromic prime number that is less or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, now let\u0027s see how can we think of it.Let\u0027s separate the problem into smaller ones, first we need the number to be prime, this can be done easily by using the square root approach, we usually use it to search for the pairs of divisors for a certain number, since the number is prime there will be no divisors so we go through the numbers from \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/14/37/14375315a16da7f4c50993851382e1793d10c961.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and check if there are no divisors for this number.\u003c/p\u003e\u003cp\u003eSecond , you need to check if the number is a palindrome,there are different ways to do so, one of them is to convert the integer into a string and check if this string and it\u0027s reverse are equal.How to convert an integer to a string? there are also different ways to do this, you might want to use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMOD\u003c/i\u003e\u003c/span\u003e of \u003cspan class\u003d\"tex-span\"\u003e10\u003c/span\u003e to get the last digit and then divide the number by \u003cspan class\u003d\"tex-span\"\u003e10\u003c/span\u003e until the number become \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e then you can\u0027t divide any more, each digit you take from the number add it to a string with it\u0027s ASCII code until you get the whole number into a string . Finally , get the maximum number between the integer you\u0027ve checked that they are both palindromic and prime and thus it\u0027s the answer.\u003c/p\u003e\u003cp\u003ecomplexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/40/a7/40a700de4a7107c82b9d566a1fd40291eb55a111.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nbool isPrime(int x) {\n  for (int i \u003d 2 ; i*i\u0026lt;\u003dx ; ++i) {\n    if (!(x%i))return false;\n  }\nreturn true ; \n}\n\nbool isPalindrome(int x){\n  string s ; \n  while (x \u0026gt; 0){\n  s+\u003d (x%10)+\u00270\u0027;\n  x/\u003d10 ; \n  }\n  string d \u003d s;\n  reverse(d.begin() , d.end()) ; \n  if (s\u003d\u003dd)return true ; \n  return false;\n}\n\nint main(){\n  int n ;  \n  scanf(\u0026quot;%d\u0026quot; , \u0026amp;n) ; \n   if (n \u003d\u003d 1)\n      return puts(\u0026quot;-1\u0026quot;) , 0 ; \n\n   for (int i \u003dn ; i\u0026gt;\u003d 0 ; i--) {\n     if (isPrime(i) \u0026amp;\u0026amp; isPalindrome(i)){\n        printf(\u0026quot;%d\\n\u0026quot; , i);\n        return  0 ; \n     }\n  \n     }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eAn easier way to convert an integer to a string and vise-versa is the \u003ccode\u003estringstream\u003c/code\u003e method \u003ca href\u003d\"https://www.youtube.com/watch?v\u003dLM6EDIKS5Pk\"\u003eWatch this\u003c/a\u003e \u0026amp; see the code below :\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nbool pr(int x){\n\tfor(int i\u003d2; i*i\u0026lt;\u003dx; ++i)\n\t\tif(x%i\u003d\u003d0)\n\t\t\treturn false;\n\treturn true;\n}\nint main(){\n\tint n;\n       cin\u0026gt;\u0026gt;n;\n\tif(n\u003d\u003d1)\n\t\treturn cout\u0026lt;\u0026lt;-1,0;\n\tint mx\u003d0;\n\tfor(int i\u003d2; i\u0026lt;\u003dn; ++i){\n\t\tif(!pr(i))continue;\n\t\tstringstream ss;\n\t\tss\u0026lt;\u0026lt;i;\n\t\tstring s;\n\t\tss\u0026gt;\u0026gt;s;\n\t\tbool f\u003d0;\n\t\tfor(int j\u003d0; j\u0026lt;s.size()/2; ++j)\n\t\t\tif(s[j]!\u003ds[s.size()-1-j])\n\t\t\t\tf\u003d1;\n\t\tif(!f)\n\t\t\tmx\u003dmax(mx, i);\n\t}\n\tcout\u0026lt;\u0026lt;mx\u0026lt;\u0026lt;endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003ch4\u003eG. Fruit Sticker Codes\u003c/h4\u003e\u003cp\u003eYou\u0027re given \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e integers each of them is the sum of the integers from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and you want the last digit from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, but you don\u0027t know what is number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and you want to \u003cstrong\u003esearch\u003c/strong\u003e for it. If you are familiar with the arithmetic progressions in mathematics and Solving quadratic equations you will solve it easily . The summation series of integers form \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6a/a5/6aa5010b0d8fed6f2ed05d5545dacf71f0264377.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e which you\u0027re given in the input , let\u0027s assume that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2e/29/2e2901e7f82b53b5c2eb24fd123d181a9d1445ea.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e , then \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e \u003d \u003ci\u003ex\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e + 1)\u003c/span\u003e distribute the multiplication and move \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e to the other part of the equation, now you\u0027ve got a quadratic equation which is \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + \u003ci\u003ex\u003c/i\u003e - 2\u003ci\u003en\u003c/i\u003e \u003d 0)\u003c/span\u003e solve it with the quadratic formula \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bc/63/bc6383fb921ea75958aaccf0d6f6482029e79f48.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and now you\u0027ve found the answer mathematically , get the last digit by using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMOD\u003c/i\u003e\u003c/span\u003e of \u003cspan class\u003d\"tex-span\"\u003e10\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAnother helpful and easier solution is to use Binary Search algorithm to search for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e .As you can see ,the summation series for any integer that is less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is also less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e , so just check if the current \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emid\u003c/i\u003e\u003c/span\u003e in the equation \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f3/20/f320679b68bfc2384e21b0f47a72425e9d7f9c17.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is less or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e until you find the answer .\u003c/p\u003e\u003cp\u003ecomplexity for the mathematical solution : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\nint main(){\n\n for (int i\u003d 0 ; i\u0026lt;4 ; ++i) {\n  ll x ; \n  scanf(\u0026quot;%lld\u0026quot; , \u0026amp;x) ; \n  ll y \u003d (-1+sqrt(1+4*1ll*2*x))/2; \n  printf(\u0026quot;%lld\u0026quot; , y%10) ; \n }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003ecomplexity for binary search : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elogn\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\nconst int oo \u003d 1000000000;\n\nint main(){\n\n      for(int i\u003d0; i\u0026lt;4; ++i){\n\t\tll x;\n\t\tcin\u0026gt;\u0026gt;x;\n\t\tll lo\u003d1, hi\u003d2*oo, md, ans;\n\t\twhile(lo\u0026lt;\u003dhi){\n\t\t\tmd\u003d(lo+hi)/2;\n\t\t\tif(md*(md+1)/2\u003d\u003dx)\n\t\t\t\tans\u003dmd%10;\n\t\t\tif(md*(md+1)/2\u0026gt;\u003dx)\n\t\t\t\thi\u003dmd-1;\n\t\t\telse\n\t\t\t\tlo\u003dmd+1;\n\t\t}\n\t\tcout\u0026lt;\u0026lt;ans;\n\t }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003ch4\u003eH. Solve it Mariam (A)\u003c/h4\u003e\u003cp\u003eIn this problem, you want to serve each employee as many dishes as possible depending on how much money he\u0027s gotten, think of it simply , if the first dish needs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e money and the second needs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e then you will spend \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e money for the first \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e dishes , but you need as much dishes as possible so you will try to find dishes which costs the least then the more expensive dishes and so on, so you need to sort the prices of the dishes and use cumulative sum to now how much money you have to pay for all the dishes from the beginning till the current dish. Finally, you want to know how many dishes each employee wants to buy, the easiest way to do so is to use the \u003ccode\u003eupper_bound()\u003c/code\u003e method ,and now you\u0027ve gotten the answer.\u003c/p\u003e\u003cp\u003eObserve that you want to get the index of the last dish that an employee might take so you subtract \u003ccode\u003ev.begin()\u003c/code\u003e from the result of the \u003ccode\u003eupper_bound()\u003c/code\u003e.\u003c/p\u003e\u003cp\u003ecomplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e(\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e + \u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elogm\u003c/i\u003e\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n vector\u0026lt;ll\u0026gt;v ;\n int a[100001] ;\nint n , m ; \nint main(){\n  scanf(\u0026quot;%d\u0026quot; , \u0026amp;m) ;\n  for (int i \u003d0 ; i\u0026lt;m ; i++){\n    int x ;\n    scanf(\u0026quot;%d\u0026quot; , \u0026amp;a[i]) ;\n  }\n  v.resize(m);\n  sort(a,a+m);\n  for (int i\u003d 0 ; i\u0026lt;m ; ++i) {\n    if (!i)v[i] \u003d a[i];\n    else v[i]\u003dv[i-1]+a[i];\n  }\n  int n ;\n  scanf(\u0026quot;%d\u0026quot; , \u0026amp;n) ;\n  for (int i \u003d0 ; i\u0026lt;n ; i++) {\n    int x;\n    scanf(\u0026quot;%d\u0026quot; , \u0026amp;x) ;\n    int idx \u003d -1 ; \n    if (upper_bound(v.begin() , v.end() , x) \u003d\u003d v.end())\n    \tidx \u003d m ;\n\n    else {\n    \tidx \u003d upper_bound(v.begin() , v.end() , x)- v.begin();\n    }\n    printf(\u0026quot;%d\\n\u0026quot; , idx) ;\n  }\n\nreturn 0 ;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003ch4\u003eI. Solve it Mariam (B)\u003c/h4\u003e\u003cp\u003eThe picture below shows the intervals that represent the time for which an employee starts and finishes his work in the first sample. As you can see \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e employee starts at time \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e then \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e employees starts at time \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, thus between the interval \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e — \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e we have \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e employees working, at time \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e one employee leaves and another one starts so we still have \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e of them, at time \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e one employee leaves and another one starts so we still have \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e employees until time \u003cspan class\u003d\"tex-span\"\u003e5\u003c/span\u003e, at time \u003cspan class\u003d\"tex-span\"\u003e5\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e employees finish and the last one keeps working until \u003cspan class\u003d\"tex-span\"\u003e9\u003c/span\u003e. As an observation, if at time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e an employee starts working the number of workers increases by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and if an employee leaves at time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e the number of workers decreases by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e also, so what we are going to do is to use \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e frequency arrays the first one represents the number of employees who start at time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and the second one represents the number of employees who finish at time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and we keep track of the number of people who are working by going through the whole interval starting from the minimum time till the maximum with adding the number of people who are starting at time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and subtracting the number of them who leaves at time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, the time when the counter reaches maximum number of people is going to be the answer.Thus, the maximum number of overlapping intervals is the answer to this problem.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/b9/e9/b9e9b4cdbce40cb5983e145f570d677d50094c23.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003c/p\u003e\u003cp\u003eThere are other different ways to implement the idea of the overlapping intervals, but still this is one of the easiest. Our recommendation is to try thinking of another solution using \u003ccode\u003emultiset\u003c/code\u003e or \u003ccode\u003epriority_queue()\u003c/code\u003e to train yourself writing STL codes. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.youtube.com/watch?v\u003dVhwLLc42rrU\"\u003eWatch this about multiset\u003c/a\u003e \u003c/p\u003e\u003cp\u003ecomplexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\n int frq1[100001] \u003d{}, frq2[100001]\u003d{} ;\n\nint main(){\n   int n ; \n        scanf(\u0026quot;%d\u0026quot; , \u0026amp;n) ;\n        int mn \u003d 1e9 , mx \u003d 0;\n        for (int i \u003d 0 ; i\u0026lt; n ; ++i){\n          int x , y;\n          scanf(\u0026quot;%d %d\u0026quot; , \u0026amp;x , \u0026amp;y);\n          frq1[x]++;\n          frq2[y]++;\n          mn \u003d min(mn , x);\n          mx \u003d max(mx , y);\n        }\n        int ans \u003d 0 ,  ans2 \u003d0 ;  \n        for (int i \u003d mn ; i\u0026lt;\u003d mx ; ++i){\n          ans+\u003dfrq1[i];\n          ans-\u003dfrq2[i];\n          ans2 \u003d max(ans2 , ans);\n        \n        }\n        cout\u0026lt;\u0026lt;ans2\u0026lt;\u0026lt;endl;\nreturn 0 ; \n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003ch4\u003eJ. Street Lights (A)\u003c/h4\u003e\u003cp\u003eThis problem asks for the maximum number of street lights that were turned on at any moment while Amal was walking. Since we have small constrains we can think of a brute force technique, each time Amal moves to a new block, you can go through all the previous blocks and count how many of them is still turned on (not all of them might be turned on).Also , be aware that it takes Amal 1 minute to leave a block and after this the block will stay turned on for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e minutes, so for each block start counting the number of blocks that might be turned on from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, not from \u003cstrong\u003ezero\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003ecomplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nint main(){\n\n\tcin\u0026gt;\u0026gt;n;\n\tfor(int i\u003d0; i\u0026lt;n; ++i){\n\t\tcin\u0026gt;\u0026gt;v[i];\n\t}\n\tint mx\u003d0;\n\tfor(int i\u003d0; i\u0026lt;n; ++i){\n\t\tint ct\u003d1;\n\t\tfor(int j\u003d0; j\u0026lt;i; ++j){\n\t\t\tif(v[j])\n\t\t\t\t++ct;\n\t\t\tif(v[j])\n\t\t\t\t--v[j];\n\t\t}\n\t\tmx\u003dmax(mx, ct);\n\t}\n\tcout\u0026lt;\u0026lt;mx\u0026lt;\u0026lt;endl;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003ch4\u003eK. Street Lights (B)\u003c/h4\u003e\u003cp\u003eThis problem is same to problem J but with larger constraints and since we have a larger constraints we can’t think of a brute force technique to solve it , so the other optimal solution is; When Amal leaves the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e block the light stays turned on until she reaches block number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e + \u003c/span\u003e curBlock and to get the answer we need to use \u003ccode\u003emultiset\u003c/code\u003e since the numbers in it are sorted and they could be repeated, when Amal is in the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e block we check if the multiset has any number smaller than the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e block and we erase it from the multiset and then we insert the value of the light of the block Amal is standing on and finally at each block we compare weather the curAns is smaller than the the multiset size and we take the larger.\u003c/p\u003e\u003cp\u003ecomplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlogn\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\nint n,v[100001];\n \nint main(){\n\n\tcin\u0026gt;\u0026gt;n;\n\tfor(int i\u003d0; i\u0026lt;n; ++i){\n\t\tcin\u0026gt;\u0026gt;v[i];\n\t}\n\tint mx\u003d0;\n\tmultiset\u0026lt;int\u0026gt; st;\n\tint tm\u003d0;\n\tfor(int i\u003d0; i\u0026lt;n; ++i){\n\t\twhile(!st.empty() \u0026amp;\u0026amp; *st.begin()\u0026lt;i)\n\t\t\tst.erase(st.begin());\n\t\tst.insert(v[i]+i);\n\t\tmx\u003dmax(mx, st.size());\n\t}\n\tcout\u0026lt;\u0026lt;mx\u0026lt;\u0026lt;endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003ch4\u003eL. ADNOSYZ\u003c/h4\u003e\u003cp\u003eHave you tried to figure out why was the problem named \u0026quot;ADNOSYZ\u0026quot; \u003cspan class\u003d\"tex-span\"\u003e?\u003c/span\u003e We won\u0027t tell you anyway , it\u0027s not a big deal. This problem asks for the different subsets of numbers between \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e7\u003c/span\u003e that their resulting sum contains the digit \u003cspan class\u003d\"tex-span\"\u003e7\u003c/span\u003e . Simply, try to solve it recursively, each time you either add the current number to the sum or pass through it to get the different possible subsets of numbers summation, and then check for number \u003cspan class\u003d\"tex-span\"\u003e7\u003c/span\u003e in the resulting sum of each subset anyway you want, since the biggest number you might get is \u003cspan class\u003d\"tex-span\"\u003e49\u003c/span\u003e there are few integers which contains the digit \u003cspan class\u003d\"tex-span\"\u003e7\u003c/span\u003e.\u003c/p\u003e\u003cp\u003ecomplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e7\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nint v[10];\nint calc(int u, int s){\n\tif(u\u003d\u003d7){\n\t\tbool f\u003d0;\n\t\twhile(s){\n\t\t\tif(s%10\u003d\u003d7)\n\t\t\t\tf\u003d1;\n\t\t\ts/\u003d10;\n\t\t}\n\t\treturn f;\n\t}\n\treturn calc(u+1, s)+calc(u+1,s+v[u]);\n}\nint main(){\n\n\tfor(int i\u003d0; i\u0026lt;7; ++i){\n\t\tcin\u0026gt;\u0026gt;v[i];\n\t}\n\tcout\u0026lt;\u0026lt;calc(0,0)\u0026lt;\u0026lt;endl;\n\t\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003c/div\u003e","tags":[]}}