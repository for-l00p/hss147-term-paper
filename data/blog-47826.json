{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1476708760,"rating":48,"authorHandle":"Sherlock2000","modificationTimeSeconds":1477009796,"id":47826,"title":"\u003cp\u003eMy tutorial of Codeforces Round #376 (Div.2)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003eSomething need to say\u003c/h1\u003e\u003cp\u003efirst of all, this is my first tutorial of one whole round, so there must be some places that i need to improve, if you find bug, just comment it and i will be pleasure to update.\u003c/p\u003e\u003cp\u003eSecondly, this round i got rk 151 in div2. it\u0027s too stupid that i came up with a wrong idea which made me waste lots of time, but after the competition, i finish them, it seems the offical tutorial still not okay. Therefore, i published this one.\u003c/p\u003e\u003cp\u003eThird, i wanna say thanks to my friends: samzhang[15120] \u0026amp; quailty[quailty]\u003c/p\u003e\u003ch1\u003eA. Night at the Museum\u003c/h1\u003e\u003cp\u003eWe know if we are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e now and we wanna go to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, there are two ways.\u003c/p\u003e\u003cp\u003e1.clockwise, which cost \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003epos\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003epos\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e|\u003c/span\u003e\u003c/p\u003e\u003cp\u003e2.counter-clockwise, which cost \u003cspan class\u003d\"tex-span\"\u003e26 - |\u003ci\u003epos\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003epos\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e|\u003c/span\u003e\u003c/p\u003e\u003cp\u003ejust choose the smaller one.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/731/submission/21476722\"\u003eC++ CODE\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eB.Coupons and Discounts\u003c/h1\u003e\u003cp\u003ethere are two ways to buy pizzas:\u003c/p\u003e\u003cp\u003e1.one day, two pizzas.\u003c/p\u003e\u003cp\u003e2.two day, one pizza each day.\u003c/p\u003e\u003cp\u003eWe know it is always better if we can buy exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e pizzas in that day\u003c/p\u003e\u003cp\u003ebut sometimes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can\u0027t be divided by \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e\u003c/p\u003e\u003cp\u003eso we need to buy option#2 : one pizza each day\u003c/p\u003e\u003cp\u003ethen \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1\u003c/span\u003e can be divided by \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e\u003c/p\u003e\u003cp\u003ebut don\u0027t forget \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e shoude decrease \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e\u003c/p\u003e\u003cp\u003ewhy only one? beacause the main idea is to make smaller influence\u003c/p\u003e\u003cp\u003ebtw, when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; 0\u003c/span\u003e ( after decreasing ), stop and exit.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/731/submission/21478267\"\u003eC++ CODE\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eC. Socks\u003c/h1\u003e\u003cp\u003econsider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as a non-directed edge.\u003c/p\u003e\u003cp\u003eso the question changes into: there are some conected components, one component must be the same color, query the minimum times to modify one vector\u0027s color.\u003c/p\u003e\u003cp\u003eit\u0027s easy to solve with \u003cem\u003edsu\u003c/em\u003e , first of all, we use dsu to get all conected components. For each conected component, we use the color which has the most frequency to colour this connected component.\u003c/p\u003e\u003cp\u003eso we get an \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9a/f7/9af7c66e15593e55f4a623010b13f07a7242d577.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e algorithm.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/731/submission/21483617\"\u003eC++ CODE\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eD.80-th Level Archeology\u003c/h1\u003e\u003cp\u003eimagine we need to sort an array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003ewe want \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e  (\u003ci\u003ej\u003c/i\u003e \u0026gt; \u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e, we just need to make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003ethis problem is the same way, if we want all words are sorted, we just need to compare each pair of adjacent words.\u003c/p\u003e\u003cp\u003econsider about the following two words:\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e \u003ci\u003eand\u003c/i\u003e \u003ci\u003eB\u003c/i\u003e(\u003ci\u003eA\u003c/i\u003e \u003ci\u003eis\u003c/i\u003e \u003ci\u003ein\u003c/i\u003e \u003ci\u003efront\u003c/i\u003e \u003ci\u003eof\u003c/i\u003e \u003ci\u003eB\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003eAccording to the notice, we know for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e we need \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003elet x represent the answer, consider two elements, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eif \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, skip\u003c/p\u003e\u003cp\u003eif \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, absolutely \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3d/f6/3df680444645e4ff7ef05377a21c71848f0a79a3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eif \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, we also say that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f0/e0/f0e07fed6b38acd2a42a3584f2a13ba1efe91ccb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eas soon as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≠ \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is satisfie, we can skip the rest.\u003c/p\u003e\u003cp\u003ehow to solve these inequalities? just use Segment_Tree or Bit or Difference\u003c/p\u003e\u003cp\u003ei recommend Difference because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/731/submission/21517946\"\u003eC++ CODE\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eE. Funny Game\u003c/h1\u003e\u003cp\u003elet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e represent the maximum difference when Petya is first,and he got prefix \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e\u003c/p\u003e\u003cp\u003eit\u0027s easy to see that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/de/88/de88dce741ef316249deee21fe238d0be7b0e3c0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e represent \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b1/5e/b15e13b981ff1c31fdda2a08170d9ccc830c5dea.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003edo a change, we have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c5/b4/c5b4f868748601d873800ad98a1f1719cdfdda90.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003euse suffix maximum array is enough.\u003c/p\u003e\u003cp\u003econsider transform as swaping characters.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/731/submission/21509197\"\u003eC++ CODE\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eF. Video Cards\u003c/h1\u003e\u003cp\u003eit is easy to notice that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ 2 × 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eso we use an array to count the number of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eafter that, we suppose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the base\u003c/p\u003e\u003cp\u003ethen we know all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e \u003d \u003ci\u003ek\u003c/i\u003e × \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, find how many times \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e appears after modifying\u003c/p\u003e\u003cp\u003eit is easy to solve by the array we created.\u003c/p\u003e\u003cp\u003ebecause of this is harmonic progression, so it is an \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5d/1f/5d1f29f648247e77966a5b1703590aea2a6a75b6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e algorithm.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/731/submission/21490349\"\u003eC++ CODE\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThanks for reading!\u003c/p\u003e\u003c/div\u003e","tags":["solution","greedy","dp","games"]}}