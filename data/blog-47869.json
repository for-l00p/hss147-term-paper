{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1476855929,"rating":-13,"authorHandle":"maximus12793","modificationTimeSeconds":1476855957,"id":47869,"title":"\u003cp\u003epython 2.7 too slow test 18 \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/515/problem/D\"\u003ehttp://codeforces.com/contest/515/problem/D\u003c/a\u003e \u003ca href\u003d\"//codeforces.com/contest/515/submission/21582967\"\u003ehttp://codeforces.com/contest/515/submission/21582967\u003c/a\u003e Im getting a tle on test 18. Is there anything I can do to improve this vs rewriting in c++? I added the ct/z flags to make sure I save 1 extra loop in the case that I filled all tiles or produced no degree 1 edges. I implemented the same strategy as in their editorial but somehow it is too slow. (\u003ca href\u003d\"//codeforces.com/blog/entry/16468\"\u003ehttp://codeforces.com/blog/entry/16468\u003c/a\u003e) ideas?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr /\u003efrom Queue import Queue\n\n\ndef main():\n    q \u003d Queue()\n    n, m \u003d map(int,raw_input().split()) \n    grid \u003d [list(raw_input()) for x in xrange(n)]\n    z \u003d True\n    while z:\n        ct\u003d0\n        z \u003d False\n        for r in xrange(n):\n            for c in xrange(m):\n                if grid[r][c] \u003d\u003d \u0027*\u0027:\n                    ct+\u003d1\n                if grid[r][c] \u003d\u003d \u0027.\u0027:\n                    deg \u003d 0\n                    up \u003d left \u003d right \u003d down \u003d False\n                    if c+1\u0026lt;m and grid[r][c+1] \u003d\u003d \u0027.\u0027:\n                        deg +\u003d1\n                        right \u003d True\n                    if r+1\u0026lt;n and grid[r+1][c] \u003d\u003d \u0027.\u0027:\n                        deg +\u003d1\n                        down \u003d True\n                    if r-1\u0026gt;\u003d0 and grid[r-1][c] \u003d\u003d \u0027.\u0027:\n                        deg +\u003d1\n                        up \u003d True\n                    if c-1\u0026gt;\u003d0 and grid[r][c-1] \u003d\u003d \u0027.\u0027:\n                        deg +\u003d1\n                        left \u003d True\n                    if deg \u003d\u003d 1:\n                        z \u003d True #if we hit a degree 1 we may have created another\n                        if left: \n                            q.put((r,c-1,\u0027\u0026lt;\u0027))\n                            q.put((r,c,\u0027\u0026gt;\u0027)) \n                            grid[r][c-1] \u003d \u0027@\u0027 #mark this so we dont overwrite it\n                            #with another configuration and skip it in the main loop\n                        if up: \n                            q.put((r-1,c,\u0027^\u0027))\n                            q.put((r,c,\u0027v\u0027))\n                            grid[r-1][c] \u003d \u0027@\u0027\n                        if down: \n                            q.put((r,c,\u0027^\u0027))\n                            q.put((r+1,c,\u0027v\u0027))\n                            grid[r+1][c] \u003d \u0027@\u0027\n                        if right: \n                            q.put((r,c,\u0027\u0026lt;\u0027))\n                            q.put((r,c+1,\u0027\u0026gt;\u0027))\n                            grid[r][c+1] \u003d \u0027@\u0027\n\n        if(q.qsize()+ct) \u0026gt;\u003d n*m:\n            z \u003d True \n            break\n\n    if z \u003d\u003d False:\n        print \u0026quot;Not unique\u0026quot;\n        return \n    while q.empty() \u003d\u003d False:\n        x,y,s \u003d q.get()\n        if grid[x][y] \u003d\u003d \u0027.\u0027 or grid[x][y] \u003d\u003d \u0027@\u0027:\n            grid[x][y] \u003d s\n        else:\n            continue\n    for i in grid:\n        print \u0027\u0027.join(i)\n    \nif __name__ \u003d\u003d \u0027__main__\u0027:\n    main()\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["#timelimit","python 2","python faster thanc,c++","optimization","contest time"]}}