{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1461355682,"rating":46,"authorHandle":"mathsux","modificationTimeSeconds":1461411481,"id":44504,"title":"\u003cp\u003eMinijudge — a lightweight batch testing utility\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eHello, Codeforces!\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eTwo months ago, I created a certain utility that I\u0027d like to share with you. As noted in the title of the topic, its main purpose is to evaluate your solution on a set of tests. It is likely (and I\u0027m really sure of it) that there exist similar utilities that are capable of doing the same thing or even more, but my primary intent was to implement something lightweight and cross-platform.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://github.com/xeeen/minijudge\"\u003eHere is the utility (Github link).\u003c/a\u003e  \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSome kind of a backstory:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eOne day, I was getting rid of unnecessary files that had been accumulating on my hard drive. I stumbled upon an archive of an old contest that I seemingly had missed and hadn\u0027t had an opportunity to participate in. I thought that the tasks from this contest were interesting enough, so I went to Codeforces and tried to find it in “Gym” section. To my dismay, there was no such contest there.\u003c/p\u003e\u003cp\u003eI was not attracted by the prospect of writing the contest without being able to test my solution, so I decided to write an utility that would help me to run my program on the system tests from archive. It took me only a few hours before the first working version was ready.\u003c/p\u003e\u003cp\u003eDays in the future, but not many, another idea struck me: to evolve the utility into a full-featured testing system that would still remain lightweight. As a proof of concept I did even write a simple working web application for submitting solutions, but that was it. The script, however, eventually proved itself to be pretty useful in everyday life.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNotes:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe source code is \u003cem\u003ework in progress\u003c/em\u003e, but the utility itself is usable. The script was primarily designed for use in conjunction with checkers that utilize \u003ca href\u003d\"//codeforces.com/testlib\"\u003etestlib\u003c/a\u003e, but I think that every other checker that confines to the same input and output requirements would suffice.\u003c/p\u003e\u003cp\u003eThe utility requires \u003cem\u003ePython 3\u003c/em\u003e to run (you can learn more about the dependencies in the \u003ca href\u003d\"https://github.com/xeeen/minijudge#minijudge\"\u003ereadme\u003c/a\u003e).\u003c/p\u003e\u003cp\u003e\u003cem\u003eThe script have been tested on OS X and Linux, so I\u0027d like you to report if something is the case. Please also note the \u003ccode\u003ecompilers.json\u003c/code\u003e file that describes compilers and interpreters: it\u0027s very likely that the default provided commands may not work for you.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD:\u003c/strong\u003e \u003ca href\u003d\"https://asciinema.org/a/43283\"\u003eDemo\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["utility","testing"]}}