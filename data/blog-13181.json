{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1406223379,"rating":39,"authorHandle":"PraveenDhinwa","modificationTimeSeconds":1406284649,"id":13181,"title":"\u003cp\u003eCodeforces Round #258 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003e\u003ca href\u003d\"/contest/451/problem/A\" title\u003d\"Codeforces Round 258 (Div. 2)\"\u003e451A - Game With Sticks\u003c/a\u003e\u003c/strong\u003e \u003c/p\u003e\u003cp\u003eFrom a grid of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e * \u003ci\u003em\u003c/i\u003e\u003c/span\u003e, if we remove an intersection point, then the grid after removing the sticks passing through it, will of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNotice when the grid consists of a single horizontal stick and m vertical sticks, If we pick any intersection point, then the updated grid will be only made of vertical sticks. You can see that there is no intersection point in the grid now.\u003c/p\u003e\u003cp\u003eSo\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e) \u003d \u003ci\u003eans\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1, \u003ci\u003em\u003c/i\u003e - 1)\u003c/span\u003e ^ \u003cspan class\u003d\"tex-span\"\u003e1.\u003c/span\u003e\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e(1,  * ) \u003d 1\u003c/span\u003e\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e( * , 1) \u003d 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003eSo we can notice that answer will depend on the parity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eminimum\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003cbr /\u003eYou can prove it using the previous equations. You can also check this by seeing the pattern.\u003c/p\u003e\u003cp\u003eSo finally if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e is odd, then Akshat will win. Otherwise Malvika will win. \u003c/p\u003e\u003cp\u003eYou can also observe that \u0026quot;players will play optimally\u0026quot; is useless in this case. \u003c/p\u003e\u003cp\u003eComplexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e\u003c/span\u003e(1)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution codes\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/451/submission/7233706\"\u003emy solution\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e\u003ca href\u003d\"/contest/451/problem/B\" title\u003d\"Codeforces Round 258 (Div. 2)\"\u003e451B - Sort the Array\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eNote that if from a given sorted array, if reverse a segment, then the remaining array will be arranged in following way. First increasing sequence, then decreasing, then again increasing.\u003c/p\u003e\u003cp\u003eYou can find the first position where the sequences start decreasing from the beginning. Call it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003eYou can find the first position where the sequences start increasing from the end. Call it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow we just need to reverse the segment between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003eL\u003c/i\u003e]\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003eR\u003c/i\u003e]\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eHere is outline of my solution which is easy to implement. First I map larger numbers to numbers strictly in the range 1, n.\u003cbr /\u003eAs all the numbers are distinct, no two numbers in the mapping will be equal too. \u003c/p\u003e\u003cp\u003eLet us define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e to be smallest index such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]! \u003d \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003eLet us also define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e to be largest index such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]! \u003d \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eNote that if there is no such L and R, it means that array is sorted already. So answer will be \u0026quot;yes\u0026quot;, we can simply reverse any of the 1 length consecutive segment.\u003c/p\u003e\u003cp\u003eOtherwise we will simply reverse the array from \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eL\u003c/i\u003e, \u003ci\u003eR\u003c/i\u003e]\u003c/span\u003e. After the reversal, we will check whether the array is sorted or not.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlogn\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution codes\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/451/submission/7233716\"\u003emy solution\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e\u003ca href\u003d\"/contest/451/problem/C\" title\u003d\"Codeforces Round 258 (Div. 2)\"\u003e451C - Predict Outcome of the Game\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e be number of wins of first team in the first k games.\u003cbr /\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e be number of wins of second team in the first k games.\u003cbr /\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e be number of wins of third team in the first k games. \u003c/p\u003e\u003cp\u003eNote that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u003d \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e ---(1)\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e| \u003d \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e.\u003c/span\u003e — (a)\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e| \u003d \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e.\u003c/span\u003e — (b) \u003c/p\u003e\u003cp\u003eNote that |x| can be x and -x depending on the sign of x. \u003c/p\u003e\u003cp\u003eCase 1: Assume that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026gt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u0026gt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e.\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u003d \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e ---(2)\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u003d \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e ---(3) \u003c/p\u003e\u003cp\u003eAdding 1 and 2, we get\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u003d \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e --(4)\u003cbr /\u003eAdding 2 and 3, we get\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u003d \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e ---(5). \u003c/p\u003e\u003cp\u003eNow solve (4) and (5), we will get values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e. By those values, compute value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e. Now we should check the constraints that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e ≥ \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e ≥ 3\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow comes the most important part. Number of wins at the end of each team should be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e / 3\u003c/span\u003e. So if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is not divisible by 3, then our answer will be definitely \u0026quot;no\u0026quot;.\u003c/p\u003e\u003cp\u003eNote that if all of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e are \u003cspan class\u003d\"tex-span\"\u003e ≤ \u003ci\u003en\u003c/i\u003e / 3\u003c/span\u003e, then we can have the remaining matches in such a way that final numbers of wins of each team should be equal.\u003c/p\u003e\u003cp\u003eNow you have to take 4 such cases. Implementing such cases in 4 if-else statements could incur errors in implementation. You can check my code to understand a simple way to implement it.\u003c/p\u003e\u003cp\u003eI will explain idea of my code briefly, basically equation (a) and (b) can be opened with either positive or negative sign due to modulus.\u003cbr /\u003eSo if our sign is negative we will change \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e to be \u003cspan class\u003d\"tex-span\"\u003e - \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e. So if we solve a single equation and replace \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e by \u003cspan class\u003d\"tex-span\"\u003e - \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, we can get solution for the second case. \u003c/p\u003e\u003cp\u003eAll the cases can be dealt in such way. Please see my code for more details.\u003c/p\u003e\u003cp\u003e\u003cem\u003eComplexity:\u003c/em\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e\u003c/span\u003e(1) per test case.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution codes\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/451/submission/7233730\"\u003emy solution\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e\u003ca href\u003d\"/contest/451/problem/D\" title\u003d\"Codeforces Round 258 (Div. 2)\"\u003e451D - Count Good Substrings\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eMerging Step: We have to convert string like \u0026quot;aaaabbbaabaaa\u0026quot; into \u0026quot;ababa\u0026quot;.\u003c/p\u003e\u003cp\u003e\u003cem\u003eImportant Observation\u003c/em\u003e\u003cbr /\u003eA substring made of the string will be a \u0026quot;good\u0026quot; palindrome if their starting and ending characters are same. If the starting and ending characters are same, then the middle characters after merging will be alternating between \u0027a\u0027 and \u0027b\u0027. eg. \u0026quot;abaa\u0026quot; is not a palindrome, but it is a good palindrome. After merging step it becomes \u0026quot;aba\u0026quot;. Note that in the string left after merging, the consecutive characters will alternate between \u0027a\u0027 and \u0027b\u0027.\u003c/p\u003e\u003cp\u003eSo if we are currently at the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e character, then we can have to simply check how many positions we have encountered upto now having the same character as that of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. For counting even and odd separately, we can make count of a\u0027s and b\u0027s at even and odd positions.\u003c/p\u003e\u003cp\u003eSo if we are at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e position, for counting even good palindromes, you just need to add count of number of characters a\u0027s at odd position. For counting odd good palindromes, you just need to add count of number of characters a\u0027s at even position.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e\u003c/span\u003e(n) where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is length of string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution codes\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/451/submission/7233740\"\u003emy solution\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eNote that you can also consult following comment for \u003ca href\u003d\"//codeforces.com/blog/entry/13111#comment-179408\"\u003ealternate editorial\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003ca href\u003d\"/contest/451/problem/E\" title\u003d\"Codeforces Round 258 (Div. 2)\"\u003e451E - Devu and Flowers\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe number of ways to choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e items out of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e groups where each item in a group is identical is equal to the number of integral solutions to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e...\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eN\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003eL\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the number of items in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e group. Number of integral solutions are coefficient of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e in [Product of \u003cspan class\u003d\"tex-span\"\u003e(1 + \u003ci\u003ex\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e * \u003ci\u003ex\u003c/i\u003e + ...\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eL\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sup\u003e\u003c/span\u003e) over all $i$].\u003c/p\u003e\u003cp\u003eYou need to find coefficient of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e(1 + \u003ci\u003ex\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e +  + ..\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e) *  *  * (1 + \u003ci\u003ex\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e +  + ..\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eUsing sum of Geometric progression we can say that \u003cspan class\u003d\"tex-span\"\u003e(1 + \u003ci\u003ex\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e +  + ..\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e) \u003d (1 - \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e(\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + 1)\u003c/sup\u003e) / (1 - \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSubstituting in the expression, we get \u003cspan class\u003d\"tex-span\"\u003e(1 - \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e(\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + 1))\u003c/sup\u003e / (1 - \u003ci\u003ex\u003c/i\u003e) *  *  * (1 - \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e(\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e + 1))\u003c/sup\u003e / (1 - \u003ci\u003ex\u003c/i\u003e).\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003d \u003cspan class\u003d\"tex-span\"\u003e(1 - \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e(\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + 1))\u003c/sup\u003e * .. * (1 - \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e(\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e + 1))\u003c/sup\u003e * (1 - \u003ci\u003ex\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e( - \u003ci\u003en\u003c/i\u003e)\u003c/sup\u003e.\u003c/span\u003e \u003c/p\u003e\u003cp\u003eNow we can find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e(1 - \u003ci\u003ex\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e - \u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e easily. It is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0c/93/0c93620cf08e59ffbd6334cc368b1c96474d0bf0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eYou can have a look at following \u003ca href\u003d\"http://math.stackexchange.com/questions/85708/negative-exponents-in-binomial-theorem\"\u003elink\u003c/a\u003e. to understand it better.\u003c/p\u003e\u003cp\u003eSo now as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e is large, we can not afford to iterate over \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eBut \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is small, we notice that \u003cspan class\u003d\"tex-span\"\u003e(1 - \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e(\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + 1))\u003c/sup\u003e * .. * (1 - \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e(\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e + 1))\u003c/sup\u003e\u003c/span\u003e can have at most \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e terms.\u003c/p\u003e\u003cp\u003eSo we will simply find all those terms, they can be very easily computed by maintaining a vector\u0026lt;pair\u0026lt;int, int\u0026gt; \u0026gt; containing pairs of coefficients and their corresponding powers. You can write a recursive function for doing this.\u003c/p\u003e\u003cp\u003eHow to find \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d2/3b/d23bc4150c5dae12102d7097dd62672f50bce87b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e % p. As \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + \u003ci\u003es\u003c/i\u003e - 1\u003c/span\u003e is large and s is very small. You can use \u003ca href\u003d\"http://www.cut-the-knot.org/arithmetic/combinatorics/LucasTheorem.shtml\"\u003elucas\u0027s theorem\u003c/a\u003e. If you understand lucas\u0027s theorem, you can note that we simply have to compute \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3d/3f/3d3ff49d9dc424c062a6eecdfb6a4507d3df480f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAnother solution based on \u003ca href\u003d\"http://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle\"\u003einclusion exclusion principle\u003c/a\u003e.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003ePlease see the following comments to get the complete idea.\u003cbr /\u003e\u003ca href\u003d\"//codeforces.com/blog/entry/13181#comment-179490\"\u003eComment 1\u003c/a\u003e\u003cbr /\u003e\u003ca href\u003d\"//codeforces.com/blog/entry/13181#comment-179450\"\u003eComment 2\u003c/a\u003e\u003cbr /\u003e\u003ca href\u003d\"//codeforces.com/blog/entry/13181#comment-179491\"\u003eComment 3\u003c/a\u003e \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution codes\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/451/submission/7233746\"\u003emy solution (Java)\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/451/submission/7233777\"\u003eanother (C++)\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/451/submission/7241218\"\u003eInclusion Exclusion based solution\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003c/div\u003e","tags":["tutorial"]}}