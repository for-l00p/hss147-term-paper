{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1528116319,"rating":19,"authorHandle":"Jakube","modificationTimeSeconds":1528116608,"id":59842,"title":"\u003cp\u003eAvoid overflow in linear diophantine equation:\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI solved \u003ca href\u003d\"/contest/986/problem/F\" title\u003d\"Codeforces Round 485 (Div. 1)\"\u003e986F - Oppa Funcan Style Remastered\u003c/a\u003e today and faced the following problem.\u003c/p\u003e\u003cp\u003eYou had to solve a linear diophantine equation:\u003c/p\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e·\u003ci\u003ex\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e·\u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e\u003c/center\u003e\u003cp\u003eThis is of course quite easy, with the extended Euclidean algorithm you can find a solution:\u003c/p\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e·\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e·\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u003d \u003ci\u003eg\u003c/i\u003e\u003c/span\u003e\u003c/center\u003e\u003cp\u003eand by multiplying with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e / \u003ci\u003eg\u003c/i\u003e\u003c/span\u003e gives a final solution:\u003c/p\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e·(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e·\u003ci\u003ec\u003c/i\u003e / \u003ci\u003eg\u003c/i\u003e) + \u003ci\u003eb\u003c/i\u003e·(\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e·\u003ci\u003ec\u003c/i\u003e / \u003ci\u003eg\u003c/i\u003e) \u003d \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e\u003c/center\u003e\u003cp\u003eAnd all solutions can be written as\u003c/p\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e·(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e·\u003ci\u003ec\u003c/i\u003e / \u003ci\u003eg\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e·\u003ci\u003eb\u003c/i\u003e / \u003ci\u003eg\u003c/i\u003e) + \u003ci\u003eb\u003c/i\u003e·(\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e·\u003ci\u003ec\u003c/i\u003e / \u003ci\u003eg\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e·\u003ci\u003ea\u003c/i\u003e / \u003ci\u003eg\u003c/i\u003e) \u003d \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e\u003c/center\u003e\u003cp\u003eThe problem is, that this can easily give an integer overflow. E.g. when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e are as large as \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e18\u003c/sup\u003e\u003c/span\u003e. To solve the problem I just took my BigInteger implementation. But this is of course quite ugly (400 additional lines of code just for one simple calculation).\u003c/p\u003e\u003cp\u003eHow can we avoid the overflow? I want a solution for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e·\u003ci\u003ex\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e·\u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ex\u003c/i\u003e|, |\u003ci\u003ey\u003c/i\u003e| ≤ 10\u003csup class\u003d\"upper-index\"\u003e18\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eI found the following code in the solution of \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/tourist\" title\u003d\"Legendary grandmaster tourist\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003et\u003c/span\u003eourist\u003c/a\u003e. But I\u0027m unable to wrap my head around it. Can somebody explain me the logic of this formula?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eg \u003d extgcd(a, b, x, y);\nif (c % g !\u003d 0) {\n  return false;\n}\nlong long dx \u003d c / a;\nc -\u003d dx * a;\nlong long dy \u003d c / b;\nc -\u003d dy * b;\nx \u003d dx + mulmod(x, c / g, b);\ny \u003d dy + mulmod(y, c / g, a);\ng \u003d abs(g);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":[]}}