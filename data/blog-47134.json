{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1473975508,"rating":15,"authorHandle":"KhaledKEE","modificationTimeSeconds":1474036660,"id":47134,"title":"\u003cp\u003eacmASCIS 2017 Mentors Training #1 tutorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eFirst, I would like to thank you for participating and I hope you enjoyed solving the problems. Second, note that most of the problems are classic and some have useful tricks that you can teach to your trainees.\u003c/p\u003e\u003ch2\u003e[problem:208702A]\u003c/h2\u003e\u003cp\u003eLet Q \u003d number of queries, N \u003d number of player, M \u003d number of positions.\u003c/p\u003e\u003cp\u003eForget about recovery/injury. Define VISIT and INDEX as a visited array that keeps track of the players in the team so far and the index of the current position we are yet to determine its player respectively. The transitions are as following:\u003cbr /\u003e Solve(VISIT, INDEX) \u003d \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5a/99/5a996e88be867bb1478bbf339cdeceaf33511108.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e;\u003c/p\u003e\u003cp\u003eFor the recovery/injury query. Keep track of the players and if the current player is injured, do not give him a position in the team.\u003cbr /\u003eComplexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/63/cf/63cf62b7245d309e27891dd992c01c7f4400d033.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge #1\u003c/strong\u003e: (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003eQ\u003c/i\u003e, \u003ci\u003eN\u003c/i\u003e, \u003ci\u003eM\u003c/i\u003e ≤ 100\u003c/span\u003e)\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution #1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThis is a classical MinCost-MaxFlow problem. First, create a SOURCE and SINK nodes. For each position, create a node and edge to the SINK with flow \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and cost \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. For each player create a node and an edge from the SOURCE to this node with flow \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and cost \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. For each pair of player and position create an edge from the player to the position with flow \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and cost of \u003cstrong\u003eNEGATIVE\u003c/strong\u003e his strength. The answer is \u003cstrong\u003eNEGATIVE\u003c/strong\u003e the cost. For updating, make the capacity of the edge \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. we may use potential function to ensure that all costs are positive.\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eQ\u003c/i\u003e * \u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e1.5\u003c/sup\u003e * \u003ci\u003eM\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eChallenge #2\u003c/strong\u003e: (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003eQ\u003c/i\u003e, \u003ci\u003eN\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e, 1 ≤ \u003ci\u003eM\u003c/i\u003e ≤ 10\u003c/span\u003e)\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution #2\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThe previous solution is overkill. Consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e[\u003ci\u003eMASK\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e \u003d maximum strength for the positions in the mask using the players from index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Transitions are omitted for brevity. Of course, this solution would \u003cem\u003eTLE\u003c/em\u003e even for the original problem. However, we can use the Divide and Conquer optimization. Only calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e[\u003ci\u003eMASK\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e - 1]\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is a non-negative integer.\u003cbr /\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fa/c0/fac02aa6851149ecd9b15db69471abbd3f728820.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e;\u003cbr /\u003eAnd base case of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e[\u003ci\u003eMASK\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003estrength\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003eMASK\u003c/i\u003e]\u003c/span\u003e which is zero for masks with more than one position. For updating, notice that this optimization can be represented in a segment tree, where each node holds \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e[\u003ci\u003eMASK\u003c/i\u003e][\u003ci\u003eL\u003c/i\u003e][\u003ci\u003eR\u003c/i\u003e]\u003c/span\u003e for each MASK.\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e((\u003ci\u003eN\u003c/i\u003e + \u003ci\u003eQ\u003c/i\u003e) * \u003ci\u003elgN\u003c/i\u003e * 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e[problem:208702B]\u003c/h2\u003e\u003cp\u003eUsually this kind of problems is the least interesting, but hard implementation problems require strategies before attacking. It is beneficial to practice on this type from time to time.\u003cbr /\u003e For a given point \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e the new inclusive range of points will be:\u003cbr /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/38/f8/38f82fe26f07c78a64864395565accf949a0bb78.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eH\u003c/i\u003e * \u003ci\u003eW\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003ch2\u003e[problem:208702C]\u003c/h2\u003e\u003cp\u003eNotice that the multiplication of the first few primes is bigger than \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e1000\u003c/sup\u003e\u003c/span\u003e. Precisely, the multiplication of the first \u003cspan class\u003d\"tex-span\"\u003e352\u003c/span\u003e primes. We can use BigInteger or custom implementation of it in \u003cem\u003eC++\u003c/em\u003e. Note that there is no need to use fast multiplication algorithms like \u003cem\u003eFFT\u003c/em\u003e, \u003cem\u003eNTT\u003c/em\u003e, or \u003cem\u003eKaratsuba\u003c/em\u003e. We can precompute the multiplication of the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e primes for every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≤ 351\u003c/span\u003e and binary search the answer for every query.\u003c/p\u003e\u003ch2\u003e[problem:208702D]\u003c/h2\u003e\u003cp\u003eThere are many ways to solve this problem. Notice that the slope of the perpendicular line must equal negative the inverse of the line slope. Recall that slope \u003d difference in \u003cem\u003ey-axis\u003c/em\u003e over difference in \u003cem\u003ex-axis\u003c/em\u003e. The slope of the perpendicular line will \u003d negative difference in x-axis over difference in y-axis. Then point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e can be:\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eC\u003c/i\u003e.\u003ci\u003ex\u003c/i\u003e + \u003ci\u003eA\u003c/i\u003e.\u003ci\u003ey\u003c/i\u003e–\u003ci\u003eB\u003c/i\u003e.\u003ci\u003ey\u003c/i\u003e, \u003ci\u003eC\u003c/i\u003e.\u003ci\u003ey\u003c/i\u003e + \u003ci\u003eB\u003c/i\u003e.\u003ci\u003ex\u003c/i\u003e–\u003ci\u003eA\u003c/i\u003e.\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e\u003cbr /\u003eNotice that the segment \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0a/40/0a400659da231c28191fa9057f6dc237991d5451.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e has the same length of the segment \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/16/2d/162dfaf88e317c85e8f444f3e32e55f0eae9549e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge #3\u003c/strong\u003e: given an angle \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e, find any point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e where the angle between the line \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0a/40/0a400659da231c28191fa9057f6dc237991d5451.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and the line \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/16/2d/162dfaf88e317c85e8f444f3e32e55f0eae9549e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e from the counter-clockwise side of the line \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/16/2d/162dfaf88e317c85e8f444f3e32e55f0eae9549e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution #3\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eWe can first represent the line \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/16/2d/162dfaf88e317c85e8f444f3e32e55f0eae9549e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e as vector for example \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eB\u003c/i\u003e.\u003ci\u003ex\u003c/i\u003e–\u003ci\u003eA\u003c/i\u003e.\u003ci\u003ex\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e.\u003ci\u003ey\u003c/i\u003e–\u003ci\u003eA\u003c/i\u003e.\u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e. We can rotate a vector around the origin by multiplying by the rotation matrix. The result will be \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e * \u003ci\u003ecos\u003c/i\u003e(\u003ci\u003eT\u003c/i\u003e)–\u003ci\u003ey\u003c/i\u003e * \u003ci\u003esin\u003c/i\u003e(\u003ci\u003eT\u003c/i\u003e), \u003ci\u003ex\u003c/i\u003e * \u003ci\u003esin\u003c/i\u003e(\u003ci\u003eT\u003c/i\u003e) + \u003ci\u003ey\u003c/i\u003e * \u003ci\u003ecos\u003c/i\u003e(\u003ci\u003eT\u003c/i\u003e))\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eV\u003c/i\u003e\u003c/span\u003e be the resultant vector after rotation. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e will equal \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eC\u003c/i\u003e.\u003ci\u003ex\u003c/i\u003e + \u003ci\u003eV\u003c/i\u003e.\u003ci\u003ex\u003c/i\u003e, \u003ci\u003eC\u003c/i\u003e.\u003ci\u003ey\u003c/i\u003e + \u003ci\u003eV\u003c/i\u003e.\u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e[problem:208702E]\u003c/h2\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e \u003d number of players, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e \u003d Max number of elements in one box.\u003cbr /\u003eFor each player we can sort the elements in his box. Using binary search we can find the number of elements with type larger than the current one and the number of the elements of the same type as the current one. We can also use two pointers technique or simply use \u003cem\u003estd::map\u003c/em\u003e.\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e * \u003ci\u003eKlgK\u003c/i\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e * \u003ci\u003eK\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge #4\u003c/strong\u003e: Add rule, five points for every ordered triple.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution #4 1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eOne common trick to solve problems involving counting pair is using squares.\u003cbr /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/ee/e7ee8ccf4fe700f6b3b49a7ac82aef954ec0e918.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003cbr /\u003e We are only interested in the second one so the answer for the original problem would be:\u003cbr /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4d/6b/4d6b0727c0c68440e62d009537162f0b1c300626.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003cbr /\u003e Which can be computed in linear time and offer no advantage over the previous solution. But we can apply the same trick on triples.\u003cbr /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d8/c1/d8c1124e391cc9ac4010341fa25a5f373bf8e265.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003cbr /\u003e Which is equivalent to:\u003cbr /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/69/95/6995234e6f93b7f26d39436154d148c3e2fe1df1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003cbr /\u003e The first and second terms can be computed in linear time. Therefore, we can now find the value of the third term also in linear time. Then we can divide by \u003cspan class\u003d\"tex-span\"\u003e3!\u003c/span\u003e and multiply by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ePoints\u003c/i\u003e[3]\u003c/span\u003e\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e * \u003ci\u003eK\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution #4 2\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eAnother easier solution uses \u003cem\u003eDP\u003c/em\u003e. First sort element by type number, Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e \u003d number of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-tuples in the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e elements.\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][1] \u003d \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e\u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d \u003ci\u003eDP\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e] + \u003ci\u003eDP\u003c/i\u003e[\u003ci\u003elast\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e - 1], \u003ci\u003elast\u003c/i\u003e \u0026lt; \u003ci\u003ei\u003c/i\u003e, \u003ci\u003etype\u003c/i\u003e[\u003ci\u003elast\u003c/i\u003e] ≠ \u003ci\u003etype\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e], \u003ci\u003etype\u003c/i\u003e[\u003ci\u003elast\u003c/i\u003e + 1] \u003d \u003ci\u003etype\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e\u003cbr /\u003e However, the trick of computing pairs using square the sum and triples using cube the sum, appears in many problems.\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e * \u003ci\u003eK\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e[problem:208702F]\u003c/h2\u003e\u003cp\u003eWe can check for every substring of size \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eS\u003c/i\u003e| / 2\u003c/span\u003e that it equals the rotation of the other half or not.\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003eS\u003c/i\u003e|\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e\u003cbr /\u003e \u003cstrong\u003eChallenge #5\u003c/strong\u003e: \u003cspan class\u003d\"tex-span\"\u003e(1 ≤ |\u003ci\u003eS\u003c/i\u003e| ≤ 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution #5\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eIf the string consists of only one unique character. The answer is the size of the string. Assume that the string \u003cem\u003eS\u003c/em\u003e is palindrome in one shift but contains more than one unique character.\u003cbr /\u003e \u003cem\u003eLemma 1\u003c/em\u003e: The answer is \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eS\u003c/i\u003e|\u003c/span\u003e is even and \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eS\u003c/i\u003e|\u003c/span\u003e is odd.\u003cbr /\u003e \u003cem\u003eProof\u003c/em\u003e: Assume that we shifted \u003cem\u003eS\u003c/em\u003e until it is palindrome. For any subsequent shift the character \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e which is currently compared with character \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e \u003d |\u003ci\u003eS\u003c/i\u003e| - \u003ci\u003ei\u003c/i\u003e–1)\u003c/span\u003e will be compared with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/26/93/26931bd4be5ac0b7c651f6f3e267fadaf08a5af4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for any positive \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e ≤ |\u003ci\u003eS\u003c/i\u003e| / 2\u003c/span\u003e. Which means character in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eS\u003c/i\u003e| - \u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/65/7f/657f8baad0ca6d5a3d750ad047615bf1001165de.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/78/47/7847c703e6c61cb4199899ceb57dbcb9994712a8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, etc, are equal. \u003cspan class\u003d\"tex-span\"\u003e2 * \u003ci\u003eK\u003c/i\u003e\u003c/span\u003e would loop over all indexes if \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eS\u003c/i\u003e|\u003c/span\u003e is odd (since \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e is co-prime to \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eS\u003c/i\u003e|\u003c/span\u003e) for any \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e. \u003cspan class\u003d\"tex-span\"\u003e2 * \u003ci\u003eK\u003c/i\u003e\u003c/span\u003e would loop over all indexes if \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eS\u003c/i\u003e|\u003c/span\u003e is even except for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e \u003d |\u003ci\u003eS\u003c/i\u003e| / 2\u003c/span\u003e.\u003cbr /\u003e So the problem is reduced to whether \u003cem\u003eS\u003c/em\u003e has any palindrome shift or not. We can solve it non-deterministically using hash in linear time or deterministically using Suffix Structures such as Suffix Array with LCP in super-linear time or Suffix Automaton in linear time.\u003cbr /\u003e Complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003eS\u003c/i\u003e|\u003ci\u003elg\u003c/i\u003e|\u003ci\u003eS\u003c/i\u003e|)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003eS\u003c/i\u003e|)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e[problem:208702G]\u003c/h2\u003e\u003cp\u003eTo check if a given subset is a primary key, we have to compute the \u003cem\u003etransitive closure\u003c/em\u003e of this set. The \u003cem\u003etransitive closure\u003c/em\u003e of a set of attributes is the set of all attributes cover by this set. On way to solve, loop over all functional dependency, add all right hand side attributes to the closure only if all left hand side attributes are already in the closure. Continue looping until no more attributes are added, Find the minimum subset of attributes such that its \u003cem\u003etransitive closure\u003c/em\u003e is the whole set of attributes. It is clear that the minimum subset is also minimal.\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e * ||\u003ci\u003eF\u003c/i\u003e|| * \u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003eOptimizations:\u003c/h4\u003e\u003cp\u003eIn the real world, database design programs use many optimizations like calculating a \u003cem\u003ecanonical cover\u003c/em\u003e of the functional dependencies (minimal subset of functional dependencies where each dependency cannot be implied from any other subset of dependencies). Another optimization is to notice that any attribute does not appear in right hand side of the functional dependencies, appears in all candidate keys. In addition, any attribute appears only in the right hand side, does not appear in any candidate key. Last optimization is to calculate \u003cem\u003etransitive closure\u003c/em\u003e using \u003cem\u003eSCC\u003c/em\u003e in the dependency graph.\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e * ||\u003ci\u003eF\u003c/i\u003e||)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge #6\u003c/strong\u003e: \u003cspan class\u003d\"tex-span\"\u003e(1 ≤ \u003ci\u003eN\u003c/i\u003e ≤ 50)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution #6\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eWe can solve this problem using \u003cem\u003eMan-in-the-Middle\u003c/em\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMAX\u003c/i\u003e(\u003ci\u003eA\u003c/i\u003e)\u003c/span\u003e be any maximal set of attributes such that the \u003cem\u003etransitive closure\u003c/em\u003e of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMAX\u003c/i\u003e(\u003ci\u003eA\u003c/i\u003e)\u003c/span\u003e does not cover the subset \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e \u003cem\u003eLemma 2\u003c/em\u003e: a subset \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e appear in a candidate key if and only if the \u003cem\u003etransitive closure\u003c/em\u003e of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c0/0e/c00e5f56f1fca3fa4568de34c9aa0c2a6f5ffe7f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is the whole set of attributes and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b9/9f/b99f1fb50cca03c24d8269791d7dfde30c6c4d24.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is a candidate key.\u003cbr /\u003e \u003cem\u003eProof\u003c/em\u003e: \u003ca href\u003d\"http://dl.acm.org/citation.cfm?id\u003d73734\"\u003emannila89\u003c/a\u003e\u003cbr /\u003e Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e1[\u003ci\u003eMASK\u003c/i\u003e]\u003c/span\u003e \u003d minimal subset of the first half covering the attributes of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMASK\u003c/i\u003e\u003c/span\u003e. This can be computed greedily.\u003cbr /\u003e Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e2[\u003ci\u003eMASK\u003c/i\u003e]\u003c/span\u003e \u003d primary key containing only MASK from the second half.\u003cbr /\u003e To calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e2[\u003ci\u003eMASK\u003c/i\u003e]\u003c/span\u003e, first find the set of attributes of the first half that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMASK\u003c/i\u003e\u003c/span\u003e does not cover, denote it as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMSK\u003c/i\u003e1\u003c/span\u003e. If \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/d3/7cd3526e3cc85ab9f449616683c8cbf0a68d337a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is a super key (e.g. covers all attributes), then \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/d3/7cd3526e3cc85ab9f449616683c8cbf0a68d337a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is a primary key.\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e / 2\u003c/sup\u003e * \u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e * ||\u003ci\u003eF\u003c/i\u003e||)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e / 2\u003c/sup\u003e * \u003ci\u003eN\u003c/i\u003e * ||\u003ci\u003eF\u003c/i\u003e||)\u003c/span\u003e using the previous optimizations.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eChallenge #7\u003c/strong\u003e: \u003cspan class\u003d\"tex-span\"\u003e(1 ≤ \u003ci\u003eN\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution #7\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eWow, we can solve this problem greedily. First store the whole set as a super key. For each attribute check that removing it alter the property of the super key or not.\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e * ||\u003ci\u003eF\u003c/i\u003e||)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e * ||\u003ci\u003eF\u003c/i\u003e||)\u003c/span\u003e using the previous optimizations.\u003cbr /\u003e The \u003cem\u003eNP-complete\u003c/em\u003e problem is checking that a given subset of attributes is part of any candidate key or not.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e[problem:208702H]\u003c/h2\u003e\u003ch4\u003eBackground (not necessary):\u003cbr /\u003e\u003c/h4\u003e\u003cp\u003eThe concept of dominion sets arises often in theoretical games related to empty-word problems in automata.\u003cbr /\u003e Specifically, there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e players where each player owns all vertices of specific color. There is a token currently in an initial vertex. The player can move the token along edges if and only if the current vertex has his color. Each vertex is given a number \u003cem\u003e(aka priority)\u003c/em\u003e. The problem is whether given the graph and initial vertex, can the player \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e guarantee an infinite walk with specific properties on the priorities that appear \u003cem\u003e(infinitely)\u003c/em\u003e often.\u003cbr /\u003e Equivalently, given an automaton, initial state, and a custom \u003cem\u003eRabin\u003c/em\u003e acceptance condition, does this automaton recognize any \u003cem\u003e(infinite)\u003c/em\u003e word, or does it represent an empty \u003cem\u003e(regular)\u003c/em\u003e language.\u003cbr /\u003e We can show that the winning regions of the player \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-dominion sets and any maximal dominion set, does not contain the initial vertex, can be removed without affecting the result of the game. Finding dominion sets is \u003ca href\u003d\"https://en.wikipedia.org/wiki/Parameterized_complexity\"\u003efixed-parameter tractable\u003c/a\u003e, which offers a deterministic subexponential improvement over the straightforward brute force.\u003c/p\u003e\u003ch4\u003eSolution:\u003cbr /\u003e\u003c/h4\u003e\u003cp\u003eThe small constraints suggests straightforward brute-force. Notice that the graph is connected, meaning that any \u003cem\u003e(proper)\u003c/em\u003e subset of the vertices contains at least one vertex with out edge to some vertex out of the subset. Therefore, the only dominion set of more than one color is the whole graph. For every set, check the color of the vertex with out-edge to some vertex out of the set. If there is more than one color, this set cannot be a dominion set. Also, check that all vertices are connected to some other vertex inside the set (that is why a set of one node is not a dominion set).\u003cbr /\u003eComplexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e * (\u003ci\u003eM\u003c/i\u003e + \u003ci\u003eC\u003c/i\u003e))\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sup\u003e * (\u003ci\u003eN\u003c/i\u003e + \u003ci\u003eC\u003c/i\u003e))\u003c/span\u003e using bit manipulation.  \u003c/p\u003e\u003c/div\u003e","tags":[]}}