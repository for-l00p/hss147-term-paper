{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1521037326,"rating":69,"authorHandle":"alooochaat1998","modificationTimeSeconds":1521462534,"id":58361,"title":"\u003cp\u003eInvitation to Alkhwarizm — 2018\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/e3/97/e397dc0023df73c082d86704b371b5c05474c164.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eHello, Codeforces!\u003c/p\u003e\u003cp\u003eI would like to invite you all to \u003ca href\u003d\"https://www.codechef.com/ALKH2018\"\u003eAlkhwarizm 2018\u003c/a\u003e, the flagship coding event of \u003ca href\u003d\"https://aparoksha.org/\"\u003eAparoksha\u003c/a\u003e — The Annual tech fest of IIIT-Allahabad.\u003c/p\u003e\u003cp\u003eIt will contain 10 tasks of varying difficulty and you will get 5 hours of time to fight this fierce battle of \u003cem\u003eCodditch\u003c/em\u003e(another version of \u003ca href\u003d\"http://harrypotter.wikia.com/wiki/Quidditch\"\u003eQuidditch\u003c/a\u003e).\u003c/p\u003e\u003cp\u003eThe contest will be an \u003ca href\u003d\"https://blog.codechef.com/2017/03/09/a-star-studded-rating-system/\"\u003eExternal rated contest\u003c/a\u003e. We are happy to announce that \u003ca href\u003d\"https://www.codechef.com/ALKH2017\"\u003eAlkhwarizm 2017\u003c/a\u003e was the first External rated contest in the history of Codechef and this year \u003ca href\u003d\"https://www.codechef.com/ALKH2018\"\u003eAlkhwarizm 2018\u003c/a\u003e is the first External rated contest for both Divisions after the \u003ca href\u003d\"https://www.codechef.com/ratings/divisions\"\u003eNew Rating Division\u003c/a\u003e system on Codechef.\u003c/p\u003e\u003cp\u003eThe problem setters and testers are me(\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/alooochaat1998\" title\u003d\"Candidate Master alooochaat1998\"\u003ealooochaat1998\u003c/a\u003e), \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/blake_786\" title\u003d\"Candidate Master blake_786\"\u003eblake_786\u003c/a\u003e and \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/priyanshupkm\" title\u003d\"Expert priyanshupkm\"\u003epriyanshupkm\u003c/a\u003e. Buckle up for an adventure ride through the wizarding world of Harry Potter once again. Each problem you solve will score a goal. Score all goals in this fierce battle of \u003cem\u003eCodditch\u003c/em\u003e and we\u0027ll make sure that you get the lion\u0027s share in \u003cem\u003eMonex Melicis\u003c/em\u003e (the money potion, another version of \u003ca href\u003d\"http://harrypotter.wikia.com/wiki/Felix_Felicis\"\u003eFelix Felicis\u003c/a\u003e).\u003c/p\u003e\u003cp\u003eThe contest starts at 9:00PM (IST) on 16th March,2018. \u003ca href\u003d\"https://www.timeanddate.com/worldclock/fixedtime.html?msg\u003dAlkhwarizm+2018\u0026amp;iso\u003d20180316T21\u0026amp;p1\u003d176\u0026amp;ah\u003d5\"\u003eCheck your timezone here\u003c/a\u003e.\u003c/p\u003e\u003cp\u003ePrizes:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eThe best wizard/witch will get a lion\u0027s share of \u003cstrong\u003e10K INR\u003c/strong\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eThe 2nd best wizard/witch will get a panther\u0027s share of \u003cstrong\u003e6K INR\u003c/strong\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eThe 3rd best wizard/witch will get a wolf\u0027s share of \u003cstrong\u003e4K INR\u003c/strong\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eTop \u003cstrong\u003e5 global\u003c/strong\u003e winners and top \u003cstrong\u003e5 Indian\u003c/strong\u003e winners will get \u003cstrong\u003e300 laddus\u003c/strong\u003e each straight from the kitchen of \u003ca href\u003d\"http://harrypotter.wikia.com/wiki/Honeydukes\"\u003eHoneydukes\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eRegister right now at the \u003ca href\u003d\"https://goo.gl/forms/TvMLe5QKYarC8cTF3\"\u003elink\u003c/a\u003e to be eligible for getting Monex Melicis.  The contest is open for all but prize money is only for Top 3 college students from the global leader board.\u003c/p\u003e\u003cp\u003ePast Alkwarizm links : \u003ca href\u003d\"https://www.codechef.com/ALKH2017\"\u003eALKH2017\u003c/a\u003e, \u003ca href\u003d\"https://www.codechef.com/ALKH2016\"\u003eALKH2016\u003c/a\u003e, \u003ca href\u003d\"https://www.codechef.com/ALKH2013\"\u003eALKH2013\u003c/a\u003e, \u003ca href\u003d\"https://www.codechef.com/ALKH2012\"\u003eALKH2012\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eGood luck everyone! Hope to see all wizards and witches on the leaderboard.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eReminder\u003c/strong\u003e : Contest starts in 1 hour.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUpdate\u003c/strong\u003e : It was great seeing so many submissions. Thank you for participating. Short Hints will be provided within 2 days since we are quite busy in tech-fest events. Also, detailed editorial will be announced within a week. Congratulations to all the winners. Thank you all for participating. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUpdate 2\u003c/strong\u003e : Sorry for removing the blog suddenly. I had forgotten to repost after saving the draft. Rest of the short hints will be updated within tomorrow.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUpdate 3\u003c/strong\u003e : All the short hints are given. Editorial will be posted within a week.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eShort Hints\u003c/strong\u003e:\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHELPVOLD\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eStatement\u0027s second paragraph shows that Voldemort has to go from room having lowest energy(to which he arrived) to room having highest energy in a sorted manner. Hence first sort the energies in increasing order and take the sum of pairwise adjacent energies to get the answer.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHARRYWND\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eLet f(i,x) be the maximum number of wands using which we can make a stick of length \u003cstrong\u003ex\u003c/strong\u003e using the types of sticks from type 1 to type i.Our answer is f(K,N). The recurrence can be written, f(i,x) \u003d max(f(i-1,x), f(i-1,x-len[i])). Similarly for minimum g(i,x)\u003dmin(g(i-1,x),g(i-1,x-len[i])).\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHEDWIG\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThe intended solution was using \u003cstrong\u003eSmall to Large trick\u003c/strong\u003e. We can maintain 2 maps for each vertex, one for storing the frequency of colors in its subtree, and second for storing the counts of colors that appear specific times. While merging the maps, we can use the Small to Large trick to reduce the complexity to O(n*log n). \u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eROOMOFRM\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eForgetting about the constraints, we can use binary search to find answer to 1st type of query. Applying binary search to each query won\u0027t pass the time limit. We can use \u003cstrong\u003eParallel Binary Search\u003c/strong\u003e for this. Solution of second query can be found out by traversing the operations backwards and using disjoint set union. \u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHARRYHBP\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eWe can solve this problem using Centroid Decomposition and BIT.\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eFind the centroid of tree.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eRight now we are finding the value of min_in_path * max_in_path for all the paths passing through given centroid.(this can be done using BIT). Add this value to your final answer.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eRemove the current centroid and recursively calculate the value of P for all the decomposed trees and add them to your answer.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003e[As simple as divide and conquer]\u003c/p\u003e\u003cp\u003eNow how to calculate the value of min_in_path * max_in_path for all the the paths passing through given centroid. Run a dfs from the centroid and store the minimum and maximum value from root node(centroid) to current node in a vector of pair. \u003c/p\u003e\u003cp\u003eNow the problem is reduced to :\u003c/p\u003e\u003cp\u003eGiven a vector of pair find the summation of min(A[i].first, A[j].first) * max(A[i].second, A[j].second) for all pair i,j in the index of array. Think about it. \u003c/p\u003e\u003cp\u003eHint : This is the right place to use BIT.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHARRYDH1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThis was a game theory problem with range queries and use of trie to build a tree on which game will be played. The game is known as Hackenbush which is pretty famous.\u003c/p\u003e\u003cp\u003eBasically we have to build a forest of trees using given strings on which the game will be played. Each move is nothing but removing an edge from a tree which leads to removing its subtree which is not connected to the root anymore.\u003c/p\u003e\u003cp\u003eEach game is played on a range of trees where number of string used to construct it is less than k.\u003c/p\u003e\u003cp\u003eStep to proceed:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eBuild trie for all the strings with a particular id.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eBuild tree from each trie on which game is played.(Redundant)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eFind grundy number for each each tree.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eFor each query construct a set S of grundy values of all trees where number of strings used to construct it is less than k in range l to r.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eLet the xor of all the values in set S be g. Find the frequency of g in S. \u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eStep 4 and 5 can be done using merge sort tree.(How ?)\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHARRYCOS\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eIntended solution is to use Hashing. For Hash you can either use two primes or it can even be done using one prime(How ?).\u003c/p\u003e\u003cp\u003eFind the Hash for each K * K submatrix of matrix A save the count of each hash in map A.\u003c/p\u003e\u003cp\u003eFind the Hash for each K * K submatrix of matrix B save the count of each hash in map B.\u003c/p\u003e\u003cp\u003eNow to count total number of equal submatrix pairs iterate on each hash value and add the product of count of this hash in map A and map B to your final answer.\u003c/p\u003e\u003cp\u003eSolutions with a complexity of O(n * n * log(n*n)) , appropriate optimization and strong hash can pass all the test cases. \u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHARRYPSS\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eBreak the summation into 2 parts.\u003c/p\u003e\u003cp\u003e1st part :- consider 2 cases :-\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e       when N is odd \u003d\u003d\u0026gt; 2^(N - 1)\n       when N is even \u003d\u003d\u0026gt; 2^(N - 1) + C(N, N/2)/2\n         C(N,N/2) can be easily calculated using Lucas Theorem\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e2nd part :- Fibonacci(n) using matrix expo\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHARRYGOF\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eSort the queries in reverse order. Store pairs of (A[i], i) in vector and sort the vector. Maintain a segment tree to answer queries of L to R (Refer to the problem \u003ca\u003ehttp://www.spoj.com/problems/GSS1/)\u003c/a\u003e. Initially Update all points of segment tree with K. For each query update only those points for which A[i] \u0026gt; Q[i].P. In this way only N updates will occur.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHARRYDH2\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eSort the values on the basis of age . For each index a range is needed which can be calculated using binary search. For finding answer for a range construct a segment tree where each node contains 2 matrix M^S[i] and M^(S[i] — 2) where M represents the matrix constructed from recurrence for F(N). Merge operation can be find easily using these 2 matrix. The intended solution was to use diagonalization of matrix to find M^S[i] and M^(S[i] — 2).\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":["alkhwarizm","invitation","contest","rated"]}}