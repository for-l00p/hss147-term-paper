{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1406545832,"rating":85,"authorHandle":"adamant","modificationTimeSeconds":1406991483,"id":13218,"title":"\u003cp\u003eSkip-list\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi everyone!\u003c/p\u003e\u003cp\u003eI recently read about such an interesting data structure as skip-list. It seemed to me, the structure is very interesting and at the same time easy to use. That is the reason I decided to experiment with the structure in various problems and try to implement the various modifications of it. \u0026quot;Basic\u0026quot; operations are well described in this \u003ca href\u003d\"http://en.wikipedia.org/wiki/Skip_list\"\u003eentry\u003c/a\u003e from wikipedia. So I will not give them too much time.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBasic implementation.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eHere is \u0026quot;pure\u0026quot; variant of skip-list — implemented only the basic operations — find, insert, erase. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/XnXIFl\"\u003ecode\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAdding order statistics functions.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eNow we need to add two new functions \u003ccode\u003efind_by_order()\u003c/code\u003e and \u003ccode\u003eorder_of_key()\u003c/code\u003e. In order to do this, in balanced binary trees we used to store the size of subtrees. But here we just should store the length of links. After this both functions can be implemented easy enough. In first function we change binary predicate and comparing not elements themselves, but length of the prefixes they are ending in. In the second function we do everything just like in usual \u003ccode\u003efind()\u003c/code\u003e, but we also store the length of prefix that lead to current element.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/zhcWYa\"\u003ecode\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMake the structure use implicit key.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eWhen we added \u003ccode\u003efind_by_order()\u003c/code\u003e we also got an opportunity to make skip-list use implicit key, i.e. key\u003dorder of element in set. Everything we need in order to use it is using \u003ccode\u003efind_by_order()\u003c/code\u003e instead of \u003ccode\u003efind()\u003c/code\u003e. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/zhPn4D\"\u003ecode\u003c/a\u003e\u003c/p\u003e\u003cp\u003eP.S. What do you think about this data structure? How wise is it to use skip-lists on the contests? What other modifications do you know? Also, my implementation is pretty weak, do you know the better one?\u003c/p\u003e\u003c/div\u003e","tags":["skip-list","list","set"]}}