{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1460319287,"rating":56,"authorHandle":"Nickolas","modificationTimeSeconds":1460320666,"id":44292,"title":"\u003cp\u003eVK Cup 2016 Wild Card Round 1: editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eAll solutions use the same verb definitions to read and write data as the example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eprint \u003d: 1!:2\u0026amp;2\nread \u003d: 1!:1[3\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBesides, the scripts have to end with verb exit \u0027\u0027.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/640/problem/A\" title\u003d\"VK Cup 2016 - Wild Card Round 1\"\u003e640A - Lazy Caterer Sequence\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eAs usual, the first problem tests competitor\u0027s ability to do basic arithmetics. Even in a language so unusual as J arithmetic verbs look pretty standard. Well, except for the fact that in absence of brackets operations are performed right-to-left, without any operator precedence, and division is denoted with %. Verb \u003ca href\u003d\"http://code.jsoftware.com/wiki/Vocabulary/quotedot#dyadic\"\u003e\u0026quot;.\u003c/a\u003e converts a string to a number or an array of numbers.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003en \u003d. \u0026quot;. (read-.LF)-.CR\nprint 1 + (n * (n + 1)) % 2\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/640/problem/B\" title\u003d\"VK Cup 2016 - Wild Card Round 1\"\u003e640B - Seasons\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eThis problem hints the competitors that J also has common imperative constructs for loops and conditional execution. In this case it\u0027s convenient to use \u003ca href\u003d\"http://www.jsoftware.com/help/dictionary/csel.htm\"\u003eselect. case. do.\u003c/a\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emonth \u003d. (read-.LF)-.CR\n\nseason \u003d: monad define\nselect. y\ncase. \u0027December\u0027;\u0027January\u0027;\u0027February\u0027 do. \u0027winter\u0027\ncase. \u0027March\u0027;\u0027April\u0027;\u0027May\u0027 do. \u0027spring\u0027\ncase. \u0027June\u0027;\u0027July\u0027;\u0027August\u0027 do. \u0027summer\u0027\ncase. \u0027September\u0027;\u0027October\u0027;\u0027November\u0027 do. \u0027autumn\u0027\nend.\n)\n\nprint season month\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/640/problem/C\" title\u003d\"VK Cup 2016 - Wild Card Round 1\"\u003e640C - Array Sum\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eA+B program from the example can actually calculate sum of arbitrary quantity of numbers, as long as all of them are written in a single line. J reads the input file as a whole, so the contents of different lines is separated with characters CR (#13) and LF (#10). To find sum of numbers written in different lines, one has to split this string into an array of numbers. A convenient way to do this is to remove CR characters after reading, and then use verb \u003ca href\u003d\"http://code.jsoftware.com/wiki/Vocabulary/semidot1#negative\"\u003e;._2\u003c/a\u003e to split string into parts between characters LF (which is conveniently last character of the string).\u003c/p\u003e \u003cpre\u003e\u003ccode\u003einraw \u003d. read -. CR\nNB. we know that last character will be LF, so use _2 to use last character as delimiter and exclude it from intervals\nprint +/ \u0026quot;. ;._2 inraw\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/640/problem/D\" title\u003d\"VK Cup 2016 - Wild Card Round 1\"\u003e640D - Maximal Difference\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eThe beauty of J language is that all operations apply to arrays. In this problem the answer can be represented as follows: array a1 is original array without the first element \u003ca href\u003d\"http://code.jsoftware.com/wiki/Vocabulary/curlyrtdot\"\u003e}.\u003c/a\u003e, array a2 is original array without the last element \u003ca href\u003d\"http://code.jsoftware.com/wiki/Vocabulary/curlyrtco\"\u003e}:\u003c/a\u003e, subtract these arrays from each other (i.e. create array of element-wise differences) and find maximal absolute value of elements of this array.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003earr \u003d. \u0026quot;. (read-.LF)-.CR\ndiffs \u003d. (}. arr) - (}: arr)\nprint \u0026gt;./ | diffs\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/640/problem/E\" title\u003d\"VK Cup 2016 - Wild Card Round 1\"\u003e640E - Divisibility Check\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eIf such a number exists, it equals least common multiple of all numbers of the array (it has to be divisible not only by other numbers but also by itself). Besides, it will be the greatest of the numbers of the array. Verbs [*.](\u003ca href\u003d\"http://code.jsoftware.com/wiki/Vocabulary/stardot#dyadic\"\u003ehttp://code.jsoftware.com/wiki/Vocabulary/stardot#dyadic\u003c/a\u003e) and \u003ca href\u003d\"http://code.jsoftware.com/wiki/Vocabulary/gtdot#dyadic\"\u003e\u0026gt;.\u003c/a\u003e allow to find LCM and maximum of the array, all that is left is to compare them. Comparison result will be 1 if these values are equal, and 0 otherwise.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003earr \u003d. \u0026quot;. (read-.LF)-.CR\nprint (*. / arr) \u003d (\u0026gt;. / arr)\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/640/problem/F\" title\u003d\"VK Cup 2016 - Wild Card Round 1\"\u003e640F - Primes in Interval\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eVerb \u003ca href\u003d\"http://code.jsoftware.com/wiki/Vocabulary/pco\"\u003ep:\u003c/a\u003e returns prime number with the given index. Its inverse p:^:_1 returns the number of primes less than the given number.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ein \u003d. (read -.LF) -.CR\n\nNB. split on space and convert to integers\nab \u003d. \u0026quot;. ;._1 \u0027 \u0027,in\n\nNB. first element is A, second is B - need to increment B to get upper bound inclusive\nabinc \u003d. ab + (0 1)\n\nNB. apply inverse of primes\nnprimes \u003d. p:^:_1 abinc\n\nNB. subtract first element (head) from second (tail)\nprint ({: nprimes) - ({. nprimes)\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/640/problem/G\" title\u003d\"VK Cup 2016 - Wild Card Round 1\"\u003e640G - Hungarian Notation\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eIn this problem one has to use any conditional construct to check whether variable value contains a decimal dot.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003einraw \u003d. read -. CR\na \u003d. \u0026lt;;._2 inraw\n\nname \u003d. \u0026gt; {. a\ncontent \u003d. \u0026gt; {: a\n\ncapName \u003d. (toupper {. name),(}. name)\n\ntypeChar \u003d: monad define\nif. (y +./@:E.~ \u0027.\u0027) do. \u0027f\u0027 elseif. do. \u0027i\u0027 end.\n)\n\nprint (typeChar content),capName\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/640/problem/H\" title\u003d\"VK Cup 2016 - Wild Card Round 1\"\u003e640H - Rotate Matrix\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eThis problem shows the power of J in matrix processing — J solution is much shorter than C++ one :-) To rotate a matrix 90 degrees clockwise, one can transpose it (verb \u003ca href\u003d\"http://code.jsoftware.com/wiki/Vocabulary/barco\"\u003e|:\u003c/a\u003e) and then reverse each row separately (глагол \u003ca href\u003d\"http://code.jsoftware.com/wiki/Vocabulary/bardot#dyadic\"\u003e|.\u0026quot;1\u003c/a\u003e).\u003c/p\u003e \u003cpre\u003e\u003ccode\u003einraw \u003d. read -. CR\nNB. first split on LF, then convert to numbers (splitting on space)\nm \u003d. \u0026quot;. ;._2 inraw\n\nprint |.\u0026quot;1 |: m\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["vkcup2016","surprise language round","unknown language round"]}}