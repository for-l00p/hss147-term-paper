{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1469732671,"rating":-51,"authorHandle":"Tornad0","modificationTimeSeconds":1469732671,"id":46312,"title":"\u003cp\u003eproblem on trie\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi, today I learned Trie:D and I solved a easy problem. Here is my code on the problem\u003c/p\u003e\u003ch1\u003einclude \u003c/h1\u003e\u003cp\u003eint const N \u003d 1000002; int const BITS \u003d 31;\u003c/p\u003e\u003cp\u003eint link[N * BITS][2]; int a[N], num[N * BITS];\u003c/p\u003e\u003cp\u003eint main() {  int n, k;  //read the cutest data:D  scanf(\u0026quot;%d%d\u0026quot;, \u0026amp;n, \u0026amp;k);  for(int i\u003d1;i\u0026lt;\u003dn;i++)scanf(\u0026quot;%d\u0026quot;,\u0026amp;a[i]);  for (int i \u003d 1; i \u0026lt;\u003d n; i++) a[i] ^\u003d a[i — 1];  int freak \u003d 2;  int root \u003d 1;  long long ans \u003d 0;  for (int i \u003d 0; i \u0026lt;\u003d n; i++) {  int v \u003d root;  //get all that less than K :D  for (int b \u003d BITS — 1; b \u0026gt;\u003d 0 \u0026amp;\u0026amp; v \u0026gt; 0; b--) {  int curAi \u003d (a[i] \u0026gt;\u0026gt; b) \u0026amp; 1;  int curK \u003d (k \u0026gt;\u0026gt; b) \u0026amp; 1;  if (curK \u003d\u003d 1) {  if (link[v][curAi] \u0026gt; 0) {  ans +\u003d num[link[v][curAi]];  }  }  v \u003d link[v][curAi ^ curK];  }  v \u003d root;\u003c/p\u003e \u003cpre\u003e//insert a[i] to trie:D\nfor (int b \u003d BITS - 1; b \u0026gt;\u003d 0; b--) {\n  num[v]++;\n  int cur \u003d (a[i] \u0026gt;\u0026gt; b) \u0026amp; 1;\n  if (link[v][cur] \u003d\u003d 0) {\n    link[v][cur] \u003d freak++;\n  }\n  v \u003d link[v][cur];\n}\nnum[v]++;\u003c/pre\u003e\u003cp\u003e}  //ans get those less than K:D  printf(\u0026quot;%I64d\\n\u0026quot;, (long long) n * (n + 1) / 2 — ans); }\u003c/p\u003e\u003cp\u003eThat\u0027s all. **** \u003cstrong\u003eI will be back:D\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e","tags":["trie","stupid:)","i will be back"]}}