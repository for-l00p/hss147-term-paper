{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1479124110,"rating":229,"authorHandle":"Wild_Hamster","modificationTimeSeconds":1479153340,"id":48380,"title":"\u003cp\u003eHow to get 100% points for hackerrank challenges with inadequate solutions\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eIn this post I will describe inadequate solutions for 4 hackerrank problems from last 2 codesprint contest, that I participated(with difficulty hard-advanced), that get 100% score and provide counter-test to each solution.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/ncr-codesprint/challenges/coconut-plantation\"\u003e\u003cstrong\u003eNCR Codesprint, Coconut Plantation\u003c/strong\u003e\u003c/a\u003e \u003c/p\u003e\u003cp\u003eAt first we will water plants, as described in official editorial:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/f6/a0/f6a06372b300ae53cc619378ebdf1a7794095577.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFor example, we need to water squares (2,2,3,3) and (3,3,4,4). We add one to the highest cells of this square and decrement one from cells under this square. After we do this with all rectangles, we can get array of watered coconuts by simple cycle:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (int i \u003d 0; i \u0026lt; r; i++)\n for (int j \u003d 0; j \u0026lt; c; j++)\n  b[i][j] \u003d (i\u0026gt;0?b[i-1][j]:0) + a[i][j]; // a[i][j] is array from the picture\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe got array b and now we change values of b[i][j] to 1 if b[i][j] \u0026gt;\u003d m else to 0.\u003c/p\u003e\u003cp\u003eIn official editorial something is said about HopCroft-Karp algorithm, but I don\u0027t even know what is it. So I will try to solve it greedily. We go through all array and find out cells that have only horizontal or only vertical neighbours. It\u0027s obvious, that then for horizontal neighbours we have to draw horizontal line through this cell and for vertical neighbours we have to draw vertical line.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/bd/96/bd966fe2dbab8122c76c94dfb2446c869df4db35.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWe can do nothing after that and this solution will already get 32.00/60.00 points, but it doesn\u0027t work even on my random picture case. \u003ca href\u003d\"http://pastebin.com/jjjC2TXq\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI will name non-harvested cells free now.\u003c/p\u003e\u003cp\u003eNow we go through all not harvested cells and find out for each cell \u003cstrong\u003emax(free cells that we can reach from this cell moving horizontally, free cells that we can reach from this cell moving vertically)\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/41/a9/41a9e5e8ecae65989db6fe54dc488765bf09facd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThen we sort this cells by decreasing order of this value. Now we go through cells and from each free cell we move horizontally or vertically depending on where is more free cells left. And BOOM, it gets 60/60. \u003ca href\u003d\"http://pastebin.com/eZxGHdS4\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCounter-test:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e1\n7 7 3 1\n0 0 6 1\n0 0 2 5\n4 0 6 5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg alt\u003d\"Counter-test\" src\u003d\"/predownloaded/0d/2a/0d2a33564c028683ca80f7ea4892460d5f0869c5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/ncr-codesprint/challenges/area-of-triangles\"\u003e\u003cstrong\u003eNCR Codesprint, Area of Triangles\u003c/strong\u003e\u003c/a\u003e \u003c/p\u003e\u003cp\u003eFor this task you can just look at this pseudocode and picture and you will understand my solution.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eS\u003d0\ndouble dy \u003d 10000000./n;\ndouble dx \u003d (maxx-minx)/dy;\nfor (double i \u003d minx+dx/2; i \u0026lt;\u003d maxx; i+\u003d dx)\n   S +\u003d area of triangles on the line x\u003di //for example for sample case for i\u003d3 area will be equal to 3, for i\u003d2 area\u003d4\nprint (maxx-minx)*S/dy\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/9e/bb/9ebbf0cd92461c4dfa2feed89e22fa3bd62ed600.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/84Gn1jsp\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCounter-test:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e2\n-1000000 0 -1000000 1 -999999 0\n1000000 0 1000000 1 999999 0\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg alt\u003d\"Counter-test \" src\u003d\"/predownloaded/5c/54/5c5414dae24787c6b342312188bc79c3fdf48bbc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/university-codesprint/challenges/array-construction\"\u003e\u003cstrong\u003eUniversity CodeSprint, Array Construction\u003c/strong\u003e\u003c/a\u003e \u003c/p\u003e\u003cp\u003eI think, I wrote pretty cool solution for this challenge, but it still shouldn\u0027t pass TL. Assume, that the answer array for each queue is \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, ..., \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe sum of absolute differences between each pair of elements will be \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e) * (\u003ci\u003en\u003c/i\u003e - 1) * 1 + (\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e - \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e) * (\u003ci\u003en\u003c/i\u003e - 2) * 2 + ... + (\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/sub\u003e) * 1 * (\u003ci\u003en\u003c/i\u003e - 1)\u003c/span\u003e \u003c/p\u003e\u003cp\u003eWe can go on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e means if it\u0027s possible to get sum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e and sum of absolute differences \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e for first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e elements.\u003c/p\u003e\u003cp\u003ePassing from state to state then will be: \u003c/p\u003e\u003cp\u003eif \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e])\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e + \u003ci\u003el\u003c/i\u003e * (\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e)][\u003ci\u003ek\u003c/i\u003e + (\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e) * \u003ci\u003ei\u003c/i\u003e * \u003ci\u003el\u003c/i\u003e] \u003d \u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003ewhere \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e - \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and we are iterating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to the time when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e + \u003ci\u003el\u003c/i\u003e * (\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e) \u0026gt; 200\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e + (\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e) * \u003ci\u003ei\u003c/i\u003e * \u003ci\u003el\u003c/i\u003e \u0026gt; 2000\u003c/span\u003e, it will be at average 4 iterations, I guess.\u003c/p\u003e\u003cp\u003eSo I precalced dp for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1... 50\u003c/span\u003e. It seems, like complexity of this should be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003en\u003c/i\u003e * \u003ci\u003es\u003c/i\u003e * \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e, what is very much, but it takes only approximately \u003cspan class\u003d\"tex-span\"\u003e67 * 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e operations if we make this dp recursively, but it still couldn\u0027t pass TL(precalc was working for 3.3s in CF custom invocation). While dp was done recursively, I was remembering current array, so I could save the answer, when I met triple(i,j,k), that is required from the queries.\u003c/p\u003e\u003cp\u003eBut still it works for 3.3s. So I decided not to iterate through all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1... 50\u003c/span\u003e, but only through \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, that was required from the queries and my solution passed in 1.83s. That\u0027s not a very big fail in testcases, but it still makes sense.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/7gHyVbBn\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCounter-test:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e50\n1 0 0\n2 0 0\n...\n50 0 0\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/university-codesprint/challenges/counting-on-a-tree\"\u003e\u003cstrong\u003eUniversity CodeSprint, Counting On a Tree\u003c/strong\u003e\u003c/a\u003e \u003c/p\u003e\u003cp\u003eI was trying to come up with normal solution like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) * \u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003elog\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e for whole day, but then I saw this \u003ca href\u003d\"//codeforces.com/blog/entry/48304?#comment-324816\"\u003ecomment\u003c/a\u003e. You can see nothing special here, just mad guy, but if you pay more attention to this comment, you will see this sentence: \u003ccode\u003e\u0026quot;Problemsetter of last problem said that he will change the test cases, because I told him my old solution with complexity N^2 passed\u0026quot;\u003c/code\u003e\u003c/p\u003e\u003cp\u003eCHALLENGE ACCEPTED. It\u0027s time to write \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e solution.\u003c/p\u003e\u003cp\u003eI wrote this code:\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003efor (i \u003d 0; i \u0026lt; q; i++)\n\t{\n\t\tscanf(\u0026quot;%d %d %d %d\u0026quot;,\u0026amp;x1,\u0026amp;y1,\u0026amp;x2,\u0026amp;y2);\n\t\tll ans \u003d 0;\n\t\twhile (!upper(x1,y1))//upper(x1,y1) is function, that check if y1 is in subtree with vertice x1 \n\t\t{\n\t\t\tb[a[x1]]++;//a[i] is value of i-th vertex\n\t\t\tx1 \u003d pr[x1];//pr[v] is ancestor of v\n\t\t}\n\t\twhile (y1 !\u003d x1)\n\t\t{\n\t\t\tb[a[y1]]++;\n\t\t\ty1 \u003d pr[y1];\n\t\t}\n\t\tb[a[x1]]++;\n\t\t\n\t\twhile (!upper(x2,y2))\n\t\t{\n\t\t\tans+\u003db[a[x2]];\n\t\t\tx2 \u003d pr[x2];\n\t\t}\n\t\twhile (y2 !\u003d x2)\n\t\t{\n\t\t\tans+\u003db[a[y2]];\n\t\t\ty2 \u003d pr[y2];\n\t\t}\n\t\tans+\u003db[a[x2]];\n\t\tcout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl;\n\t}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eIt worked maximum in 1.8s on all testcases and it got WA, because I was not assigning array b to zero and didn\u0027t substract the length of two paths intersection. I could go through path (x1,y1) and assign b[a[x1]] to zero, but it would take approximately 0.9s more, so 2.7s will not pass. I almost surrendered trying to optimize this so it will pass in 2s, but then I got an idea. Java got 4s time limit on hackerrank, so I can try to make this solution pass in Java.\u003c/p\u003e\u003cp\u003eI don\u0027t know, what\u0027s wrong with Java compilator, but same solution was getting randomly TL from set {5,8,11,14,17} of testcases. For example for first time it was getting TL 5,8,14, and for second time it was getting TL 11,17. I separated finding length of two paths intersection by LCA and going through whole path and counting array b, somehow it got accepted.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/3a7zPS0E\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCounter-test can be generated by this code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecout \u0026lt;\u0026lt; 100000 \u0026lt;\u0026lt; \u0026quot; \u0026quot; \u0026lt;\u0026lt; 50000 \u0026lt;\u0026lt; endl;\nfor (i \u003d 0; i \u0026lt; 100000; i++)\n cout \u0026lt;\u0026lt; 1 \u0026lt;\u0026lt; \u0026quot; \u0026quot;;\ncout \u0026lt;\u0026lt; endl;\nfor (i \u003d 0; i \u0026lt; 99999; i++)\n cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot; \u0026lt;\u0026lt; i+1 \u0026lt;\u0026lt; endl;\nfor (i \u003d 0; i \u0026lt; 50000; i++)\n cout \u0026lt;\u0026lt; 1 \u0026lt;\u0026lt; \u0026quot; \u0026quot; \u0026lt;\u0026lt; 100000 \u0026lt;\u0026lt; endl;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMy code will get TL for sure and WA because the answer will be approximately \u003cspan class\u003d\"tex-span\"\u003e5 × 10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e and it doesn\u0027t fit an integer.\u003c/p\u003e\u003cp\u003eP.S. This post doesn\u0027t contain offense to hackerrank admins and community. I just want to show mistakes, so maybe they will improve. Contests with prize pool 15000$ are pretty cool, but I think that Hackerrank must pay more attention to creating testcases by writing naive solutions to each problem and stresstesting, so inadequate solutions will not pass during the contest.\u003c/p\u003e\u003c/div\u003e","tags":["hackerrank","inadequate solutions","god of paint","bad code"]}}