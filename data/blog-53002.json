{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1498833716,"rating":0,"authorHandle":"SAeed","modificationTimeSeconds":1498833936,"id":53002,"title":"\u003cp\u003eSPU Contest #15\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e \u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214332/problem/Blue\"\u003eBlue — Game\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eGame Theory\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eFor the field of an even size there is a winning strategy for the second player. Namely, to paint a cell that is symmetrical with respect to the center of the field to the cell painted by the first player on the previous turn. After each turn of the second player the field is centrosymmetrical and so there is always a cell that can be painted that is symmetrical with respect to the center of the field to any cell that the first player can choose to paint.\u003c/p\u003e\u003cp\u003eFor the field of an odd size there is a winning strategy for the first player. Namely, on the first turn to paint the central cell, then to paint a cell that is symmetrical with respect to the center of the field to the cell painted by the second player on the previous turn. After each turn of the first player the field is centrosymmetrical and so there is always a cell that can be painted that is symmetrical with respect to the center of the field to any cell that the second player can choose to paint.\u003c/p\u003e\u003cp\u003eSo for even n the answer is 2, for odd n the answer is 1. One of the possible formulas for the problem is \u003ccode\u003e2 - (n % 2)\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(1)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#define _CRT_SECURE_NO_WARNINGS\n#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\nint main(){\n\t//freopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\t//freopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n\t\n\tll n; cin \u0026gt;\u0026gt; n;\n\tcout \u0026lt;\u0026lt; 2 - (n % 2) \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214332/problem/Cyan\"\u003eCyan — Vasya and Petya\u0027s Game\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eNumber Theory\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eEach number is formed from many prime number : \u003ccode\u003e2^i x 3^j x 5^k x ...\u003c/code\u003e where \u003ccode\u003ei\u003c/code\u003e, \u003ccode\u003ej\u003c/code\u003e and \u003ccode\u003ek\u003c/code\u003e are positive integers.\u003c/p\u003e\u003cp\u003eWe can never guess what the number is, unless we asked about all the prime number, with all their powers.\u003c/p\u003e\u003cp\u003eFor example we have to ask about : \u003ccode\u003e2, 4, 8, ...\u003c/code\u003e and \u003ccode\u003e3, 9, 27, ...\u003c/code\u003e and so on.\u003c/p\u003e\u003cp\u003eAn easy implementation is to generate all the prime number using sieve algorithm, then add to the answer all the powers of each prime number, that are smaller than or equal to \u003ccode\u003en\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(n log log n)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#define _CRT_SECURE_NO_WARNINGS\n#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\nvector\u0026lt;int\u0026gt;prime;\nbool mat[1000100] \u003d { 0 };\nvoid generate_primes(int n)\n{\n\tprime.clear();\n\tprime.push_back(2);\n\tfor (int i \u003d 3; i*i \u0026lt;\u003d n; i +\u003d 2)\n\t{\n\t\tif (mat[i] \u003d\u003d 0)\n\t\t{\n\t\t\tfor (int j \u003d i*i; j\u0026lt;n; j +\u003d 2 * i)\n\t\t\t\tmat[j] \u003d 1;\n\t\t}\n\t}\n\tfor (int i \u003d 3; i \u0026lt;\u003d n; i +\u003d 2)\n\tif (!mat[i])\n\t\tprime.push_back(i);\n}\n\nvector\u0026lt;ll\u0026gt; ans;\n\nint main(){\n\t//freopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\t//freopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n\t\n\tll n; cin \u0026gt;\u0026gt; n;\n\tgenerate_primes(n + 10);\n\tfor (int i \u003d 0; i \u0026lt; prime.size(); i++){\n\t\tll prm \u003d prime[i];\n\t\twhile (prm \u0026lt;\u003d n){\n\t\t\tans.push_back(prm);\n\t\t\tprm *\u003d prime[i];\n\t\t}\n\t}\n\tcout \u0026lt;\u0026lt; ans.size() \u0026lt;\u0026lt; endl;\n\tfor (int i \u003d 0; i \u0026lt; ans.size(); i++){\n\t\tif (i) cout \u0026lt;\u0026lt; \u0026quot; \u0026quot;;\n\t\tcout \u0026lt;\u0026lt; ans[i];\n\t}\n\tcout \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214332/problem/Green\"\u003eGreen — Bash\u0027s Big Day\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eNumber Theory\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eWhat does it mean to take numbers such that their \u003ccode\u003egcd\u003c/code\u003e is not \u003ccode\u003e1\u003c/code\u003e? It means that these number has at least one prime divisor in common.\u003c/p\u003e\u003cp\u003eWe can modify sieve algorithm to calculate all the prime divisors of all the number between \u003ccode\u003e2\u003c/code\u003e and \u003ccode\u003eMAX_N\u003c/code\u003e. Make an array of vector data structure (similar to the one you use for graph), and store for each number its divisors (you can copy my code and keep it with you and bring it to ACM contests).\u003c/p\u003e\u003cp\u003eno all we have to do is to see which prime number has appeared most among our given number. The number of these appearances is the answer, since all these numbers can be chosen and their \u003ccode\u003egcd\u003c/code\u003e will be surely greater than \u003ccode\u003e1\u003c/code\u003e, since they have this prime number in common.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(n log log n)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#define _CRT_SECURE_NO_WARNINGS\n#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\nconst int MAX_N \u003d 1e5 + 10;\nvector\u0026lt;int\u0026gt; primeDivisors[100100];\nint notPrime[MAX_N];\nvoid modifiedSieve(){\n\tfor (int i \u003d 2; i \u0026lt; MAX_N; i++){\n\t\tif (notPrime[i]) continue;\n\t\tfor (int j \u003d i; j \u0026lt; MAX_N; j +\u003d i){\n\t\t\tnotPrime[j] \u003d 1;\n\t\t\tprimeDivisors[j].push_back(i);\n\t\t}\n\t}\n}\n\nint a[100100];\nint cnt[100100];\n\nint main(){\n\t//freopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\t//freopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n\t\n\tmodifiedSieve();\n\tint n; cin \u0026gt;\u0026gt; n;\n\tfor (int i \u003d 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i];\n\tfor (int i \u003d 0; i \u0026lt; n; i++){\n\t\tfor (int j \u003d 0; j \u0026lt; primeDivisors[a[i]].size(); j++) cnt[primeDivisors[a[i]][j]]++;\n\t}\n\tint maxi \u003d 1;\n\tfor (int i \u003d 0; i \u0026lt; MAX_N; i++) maxi \u003d max(maxi, cnt[i]);\n\tcout \u0026lt;\u0026lt; maxi \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214332/problem/Purple\"\u003ePurple — Divisibility\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eNumber Theory\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe smallest number that is divisible by all the numbers from \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003en\u003c/code\u003e is \u003ccode\u003eLCM(2, 3, 4, 5, 6, 7, 8, 9, 10)\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eThe second number is \u003ccode\u003e2 x LCM(2, 3, 4, 5, 6, 7, 8, 9, 10)\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eObviously, the number of numbers divisible by all the numbers from \u003ccode\u003e2\u003c/code\u003e to \u003ccode\u003e10\u003c/code\u003e is:\u003c/p\u003e\u003cp\u003e\u003ccode\u003en / LCM(2, 3, 4, 5, 6, 7, 8, 9, 10)\u003c/code\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(1)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#define _CRT_SECURE_NO_WARNINGS\n#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\nll gcd(ll a, ll b) { return (b \u003d\u003d 0 ? a : gcd(b, a % b)); }\nll lcm(ll a, ll b) { return (a * (b / gcd(a, b))); }\n\nint main(){\n\t//freopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\t//freopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n\t\n\tll n; cin \u0026gt;\u0026gt; n;\n\tll LCM \u003d 1;\n\tfor (int i \u003d 2; i \u0026lt;\u003d 10; i++) LCM \u003d lcm(LCM, i);\n\tcout \u0026lt;\u0026lt; n / LCM \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214332/problem/Red\"\u003eRed — Fox Dividing Cheese\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eNumber Theory\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIt is easy to see that the fox can do three type of operations: divide by 2, divide by 3 and divide by 5. Let’s write both given numbers in form:\u003c/p\u003e\u003cp\u003e\u003ccode\u003ea \u003d x · 2^a2 · 3^a3 · 5^a5\u003c/code\u003e\u003c/p\u003e\u003cp\u003e\u003ccode\u003eb \u003d y · 2^b2 · 3^b3 · 5^b5\u003c/code\u003e\u003c/p\u003e\u003cp\u003ewhere x and y are not dibisible by 2, 3 and 5. If x ≠ y the fox can’t make numbers equal and program should print -1. If x \u003d y then soluion exists. The answer equals to |a2 - b2| + |a3 - b3| + |a5 - b5|, because |a2 - b2| is the minimal number of operations to have 2 in the same power in both numbers, |a3 - b3| is the minimal number of operations to have 3 in the same power in both numbers, and |a5 - b5| is the same for 5.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(log n)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#define _CRT_SECURE_NO_WARNINGS\n#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\n\n\nint main(){\n\t//freopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\t//freopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n\t\n\tll a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b;\n\tint aTwo \u003d 0, aThree \u003d 0, aFive \u003d 0;\n\twhile (a % 2 \u003d\u003d 0) aTwo++, a /\u003d 2;\n\twhile (a % 3 \u003d\u003d 0) aThree++, a /\u003d 3;\n\twhile (a % 5 \u003d\u003d 0) aFive++, a /\u003d 5;\n\tint bTwo \u003d 0, bThree \u003d 0, bFive \u003d 0;\n\twhile (b % 2 \u003d\u003d 0) bTwo++, b /\u003d 2;\n\twhile (b % 3 \u003d\u003d 0) bThree++, b /\u003d 3;\n\twhile (b % 5 \u003d\u003d 0) bFive++, b /\u003d 5;\n\tif (a !\u003d b) return cout \u0026lt;\u0026lt; -1 \u0026lt;\u0026lt; endl, 0;\n\n\tcout \u0026lt;\u0026lt; abs(aTwo - bTwo) + abs(aThree - bThree) + abs(aFive - bFive) \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214332/problem/Yellow\"\u003eYellow — Multiplication Table\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eMath\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eWhat does it mean that \u003ccode\u003ei x j \u003d x\u003c/code\u003e? It means that both \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003ej\u003c/code\u003e are divisors of \u003ccode\u003ex\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eWe can calculate all the divisors of \u003ccode\u003ex\u003c/code\u003e with a \u003ccode\u003efor\u003c/code\u003e loop to \u003ccode\u003esqrt(n)\u003c/code\u003e which is no more than \u003ccode\u003e10^5\u003c/code\u003e. If we have one divisor that is \u003ccode\u003ei\u003c/code\u003e, the other divisor is \u003ccode\u003ex / i\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(sqrt(x))\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#define _CRT_SECURE_NO_WARNINGS\n#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\nset\u0026lt;ll\u0026gt; divisors;\n\nint main(){\n\t//freopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\t//freopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n\t\n\tll n, x; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; x;\n\tfor (int i \u003d 1; i \u0026lt; 1e5; i++){\n\t\tif (x % i !\u003d 0) continue;\n\t\tif (i \u0026lt;\u003d n \u0026amp;\u0026amp; x / i \u0026lt;\u003d n){\n\t\t\tdivisors.insert(i);\n\t\t\tdivisors.insert(x / i);\n\t\t}\n\t}\n\tcout \u0026lt;\u0026lt; divisors.size() \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}