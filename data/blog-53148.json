{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1499352868,"rating":-23,"authorHandle":"mayankpathak","modificationTimeSeconds":1499353537,"id":53148,"title":"\u003cp\u003eSorting array element by frequency in O(nlgn) time\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI am trying to solve a problem where i have to sort an array based on the frequency of the elements(in case of a tie the one that comes first in the input array should be present first that is i have to maintain the initial order of elements) in O(nlgn) time. I came up with the following logic\u003c/p\u003e \u003cul\u003e   \u003cli\u003eMake an array of objects and initialize its index and value at that index using the given array.\u003c/li\u003e   \u003cli\u003eNow sort the array of objects, using the value.\u003c/li\u003e   \u003cli\u003eFill their frequencies in the object\u0027s frequency field.\u003c/li\u003e   \u003cli\u003eSort according to frequency and index\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eMy implementation gives an error of \u003cstrong\u003eerror: must use \u0027.*\u0027 or \u0027-\u0026gt;*\u0027 to call pointer-to-member function\u003c/strong\u003e moreover the error occurs at the 1st instance of stable_sort(). C++ compiler details are g++ 4.9.2\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include\u0026lt;iostream\u0026gt;\n#include\u0026lt;algorithm\u0026gt;\nusing namespace std;\n\nclass Element {\n    int index, value, frequency;\npublic:\n    Element();\n    void setIndex(int);\n    void setValue(int);\n    void setFrequency(int);\n    int getIndex();\n    int getValue();\n    int getFrequency();\n};\n\nclass Solution {\npublic:\n    void sortByFrequency(int [], int);\n    bool compareByValue(Element *, Element *);\n    bool compareByFrequency(Element *, Element *);\n};\n\nElement::Element() {\n    frequency \u003d index \u003d value \u003d 0;\n}\n\nvoid Element::setIndex(int i) {\n    index \u003d i;\n}\n\nvoid Element::setValue(int i) {\n    value \u003d i;\n}\n\nvoid Element::setFrequency(int i) {\n    frequency \u003d i;\n}\n\nint Element::getIndex() {\n    return index;\n}\n\nint Element::getValue() {\n    return value;\n}\n\nint Element::getFrequency() {\n    return frequency;\n}\n\nvoid Solution::sortByFrequency(int a[], int n) {\n    Element obj[n];\n    for(register int i \u003d 0; i \u0026lt; n; i++) {\n        obj[i].setIndex(i);\n        obj[i].setValue(a[i]);\n    }\n    stable_sort(obj, obj + n, compareByValue);\n    obj[0].setFrequency(1);\n    for(register int i \u003d 1; i \u0026lt; n; i++) {\n        if(obj[i].getValue() \u003d\u003d obj[i - 1].getValue()) {\n            obj[i].setFrequency(obj[i].getFrequency() + obj[i - 1].getFrequency() + 1);\n            obj[i - 1].setFrequency(-1);\n            obj[i].setIndex(obj[i - 1].getIndex());\n        } else {\n            obj[i].setFrequency(1);\n        }\n    }\n    stable_sort(obj, obj + n, compareByFrequency);\n    for(register int i \u003d n - 1, j \u003d 0; i \u0026gt;\u003d 0; i--) {\n        if(obj[i].getFrequency() !\u003d -1) {\n            for(register int k \u003d 0; k \u0026lt; obj[i].getFrequency(); k++) {\n                a[j++] \u003d obj[i].getValue();\n            }\n        }\n    }\n}\n\nbool Solution::compareByValue(Element *a, Element *b) {\n    return (a -\u0026gt; getValue() \u0026lt; b -\u0026gt; getValue());\n}\n\nbool Solution::compareByFrequency(Element *a, Element *b) {\n    if(a -\u0026gt; getFrequency() !\u003d b -\u0026gt; getFrequency()) {\n        return (a -\u0026gt; getFrequency() \u0026lt; b -\u0026gt; getFrequency());\n    } else {\n        return (a -\u0026gt; getIndex() \u0026gt; b -\u0026gt; getIndex());\n    }\n}\n\nint main() {\n\tint a[] \u003d {2, 5, 2, 6, -1, 9999999, 5, 8, 8, 8};\n\tint n \u003d sizeof(a)/sizeof(a[0]);\n\tSolution obj;\n\tobj.sortByFrequency(a, n);\n    for(register int i \u003d 0; i \u0026lt; n; i++) {\n        cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \u0026quot; \u0026quot;;\n    }\n\treturn 0;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["#c++","comparators","sorting","pointers"]}}