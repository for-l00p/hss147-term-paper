{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1412808875,"rating":260,"authorHandle":"MikeMirzayanov","modificationTimeSeconds":1414968479,"id":14184,"title":"\u003cp\u003e10 Reasons to Prepare Problems in Polygon\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cimg src\u003d\"//assets.codeforces.com/images/poly21.jpg\" style\u003d\"float: right;margin: 0 0.5em 1.0em 1.0em;max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eHello Codeforces.\u003c/p\u003e\u003cp\u003eJust a reminder about something most of you know. Polygon is a service to prepares programming problems and contests. It is usually used to prepare problems for olympiads/programming contests but it is also often used to prepare educational content. It is located at \u003ca href\u003d\"https://polygon.codeforces.com/\"\u003ehttps://polygon.codeforces.com/\u003c/a\u003e and is open to everybody.\u003c/p\u003e\u003cp\u003eI have recently found out that it\u0027s been more than five years since the creation of Polygon. It\u0027s high time to summarize the experience we\u0027ve accumulated. \u003c/p\u003e\u003cp\u003eI first publicly spoke about Polygon in a narrow circle of Russian teams\u0027 coaches on ACM-ICPC World Finals in 2009. I cannot say that everybody was enthusiastic about the innovation. Some people were openly skeptical about such system\u0027s viability and relevance. After 5 years on the ACM-ICPC finals in Ekaterinburg Oleg Hhristenko (\u003ca class\u003d\"rated-user user-black\" href\u003d\"/profile/snarknews\" title\u003d\"Unrated, snarknews\"\u003esnarknews\u003c/a\u003e) said that in his opinion, the creation of Polygon is more of my achievement than Codeforces. Of course I was surprised but I said so to Polygon :-)\u003c/p\u003e\u003cp\u003eWhen I started working on Polygon (in the autumn of 2008), I understood very well how much this system was needed. By that time I had already been an experienced writer of many problems. The infinite number on highs-school Saratov Olympiads and ACM-ICPC Subregionals. My problems were on the All-Russian Team School Student Olympiad in Programming, the Russian National Olympiad in Informatics (for High-School Children), the ACM-ICPC NEERC Regionals, the TopCoder Open Finals and many other places. In most cases the problems were developed in some VCS (e.g. SVN) everything was structured by some half-formal unspoken naming rules.\u003c/p\u003e\u003cp\u003eI am going to give you some thesis statements on why it is good to use Polygon and bad not to.\u003c/p\u003e\u003ch4\u003e1. Polygon protects from errors\u003c/h4\u003e\u003cp\u003ePolygon is full of automatization, self-checks and verifications. Some examples:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eit is hard to make a misprint in a sample input/output and forget to actualize it after the tests are changed as it is inserted automatically and the answer is generated by Polygon using the model solution;\u003c/li\u003e   \u003cli\u003eit is hard to leave a non-compiling solution in the archive (even experienced teams like ITMO regularly leave the solutions on Java in the archive where the name of the class doesn\u0027t match the name of the file);\u003c/li\u003e   \u003cli\u003eit is hard to forget to make the first test the statement test, Polygon would warn you about it;\u003c/li\u003e   \u003cli\u003eit is hard to write a generator that is initialized from time and thus it prints different tests on consecutive invocations (i.e. not stable), Polygon will run the generator a couple of times with an interval of one second and check if the tests match.\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003e2. The archives (packages) of the Polygon problems are uniform and machine-readable\u003c/h4\u003e\u003cp\u003eIt\u0027s striking that the olympiad community hasn\u0027t standardized a method to distribute problems. The problems from Polygon have a uniform and logical way of organizing files and are machine-readable. File problem.xml contains not only the basic meta information like memory limits, but it also has everything you are going to need for the continuing work at a problem. Here are some examples:\u003c/p\u003e \u003cul\u003e   \u003cli\u003efor TL it shows the type of the processor for which the TL was chosen;\u003c/li\u003e   \u003cli\u003eit clearly shows the IO method and file names (if used);\u003c/li\u003e   \u003cli\u003eit supports multiple native languages in for problem title/statements;\u003c/li\u003e   \u003cli\u003eIt has an exact way to generate each of the generated tests;\u003c/li\u003e   \u003cli\u003esolution tags (for example, a deliberately slow solution can be tagged as time-limit-exceeded);\u003c/li\u003e   \u003cli\u003eprecise paths to tests and other resources.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eI don\u0027t know any other machine-readable descriptor formats in use that are so complete.\u003c/p\u003e\u003ch4\u003e3. Polygon stores files for long-term and keeps them available\u003c/h4\u003e\u003cp\u003eI can open the problems of the ACM-ICPC Saratov Subregional 2009 and edit a test. Everybody who has access to the problem can do the same. All the changes will be visible to all the coauthors, they will be notified via email and the automatic testing systems can get the changes when new problem package is built. I can run the solutions as I edit, all tests will be validated, all the solutions will be ran. But what happens if you don\u0027t use Polygon? For the time of contest developement a local version control system is used, it is usually shut down later and only the archive remains: we lose editing history, developing access, automated invocations and other things.\u003c/p\u003e\u003ch4\u003e4. Polygon decreases the barrier to entry the problem preparation process\u003c/h4\u003e\u003cp\u003eThe Codeforces problem writers are the contest participants of different level of training, cultural and professional background, for many of them it\u0027s their first experience of preparing problems. They almost always easily understand what to do and how to do it, they can add problems. If you don\u0027t use Polygon, then the process is usually regulated by a system of unspoken rules (like, add suffix _slow, or _tl to the title of the slow solution), an unexperienced participant gets lost and cannot understand what to begin with and how to work. Besides, it usually requires some knowledge of basic principles of working with svn and command line and work differs for the Windows and Linux users.\u003c/p\u003e\u003ch4\u003e5. Polygon helps you manage access\u003c/h4\u003e\u003cp\u003eIn Polygon you can give access to the problem to any registered user. If you work without Polygon, it is usually done by the version control system server administrator and you don\u0027t even have the list of your co-authors. You cannot manage access on your own, the access is usually managed at the contest level, not problem level.\u003c/p\u003e\u003ch4\u003e6. Polygon has issue-tracking\u003c/h4\u003e\u003cp\u003eWhen there is more than one developer working simultaneously, they absolutely need to be able to add and manage issues. Besides, issue-tracking is useful in individual work as well. It structures work, helps you not to lose track of the details. Whenever I\u0027ve worked outside Polygon, the best task management I saw was a special file with a numbered list of tasks.\u003c/p\u003e\u003ch4\u003e7. Polygon is easily integrated with online judges\u003c/h4\u003e\u003cp\u003ePolygon offers machine-readable problem packages with prepared tests (for both Windows and Linux) or enables to generate them at package deploying. Polygon has a simple HTTP POST-based API to access data. While POST-queries are formed, you need to set the user\u0027s login and password parameters (and optionally, revision).\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"https://polygon.codeforces.com/p/username/problemname\"\u003ehttps://polygon.codeforces.com/p/username/problemname\u003c/a\u003e — download the last package (unless the revision is defined);\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://polygon.codeforces.com/p/username/problemname/problem.xml\"\u003ehttps://polygon.codeforces.com/p/username/problemname/problem.xml\u003c/a\u003e — download the descriptor from the last package (unless the revision is defined). For example, in order to see that the revision has changed and we need to re-download the package;\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://polygon.codeforces.com/c/contestid/contest.xml\"\u003ehttps://polygon.codeforces.com/c/contestid/contest.xml\u003c/a\u003e — download the descriptor of the contest\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://polygon.codeforces.com/c/contestid/english/statements.pdf\"\u003ehttps://polygon.codeforces.com/c/contestid/english/statements.pdf\u003c/a\u003e — download the PDF with statements in English, all the statements are listed in the contest\u0027s descriptor.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eSay no to manually copying problems into the judging system, let the system upload the problem for you and deploy or update it.\u003c/p\u003e\u003ch4\u003e8. Without Polygon the developer needs to have some special soft on his PC\u003c/h4\u003e\u003cp\u003eFor example, a developer with Windows may need bash to run doall.sh that generates all the tests. Or a Java programmer will have to install C++ to compile the checker. Use LaTeX to compile the statement. Polygon sets you free from all of that, lots of work is done on the side of the server.\u003c/p\u003e\u003ch4\u003e9. Polygon is safer than most alternative ways of shared development\u003c/h4\u003e\u003cp\u003ePolygon uses HTTPS, you can attach browser session to IP-address (it is optional, of course), session is attached to User-Agent, we use CSRF-tokens everywhere.\u003c/p\u003e\u003ch4\u003e10. Polygon classifies and indexes problems\u003c/h4\u003e\u003cp\u003eYou will never get lost in problems. I have about 500 problems in Polygon made by me only, but due to tags, filters, search and sorting into contests I never get lost in them and can quickly find what I need.\u003c/p\u003e\u003ch4\u003eThe End\u003c/h4\u003e\u003cp\u003eThose are only the first reasons that came to my mind at 2 AM. I am sure that we can come up with some more of them after some thorough thinking.\u003c/p\u003e\u003cp\u003eThe conclusion is simple. Every time you make a problem not in Polygon, god kills a kitten.\u003c/p\u003e\u003c/div\u003e","tags":["polygon","problems","writers","writer","contests","codeforces"]}}