{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1498319005,"rating":0,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1498319005,"id":52877,"title":"\u003cp\u003eNotes on Codeforces Beta Round #55, A, B, C, D(Grouping and sort)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eA. Word\u003c/p\u003e\u003cp\u003eThis is a simple problem. We can count the number of uppercase letters and lowercase letters, respectively, and then compare their results and implement operations accordingly.\u003c/p\u003e\u003cp\u003eB. Fortune Telling\u003c/p\u003e\u003cp\u003eWe can adopt two arrays to store the even integers and odd integers, respectively. If there are no odd integers, we should output 0. On the contrary, we first add all the even integers together, and sort all the odd integers in a decreasing order. Then, if the total number of odd integers is odd, we add all of them together; otherwise we add all of them except for the minimum one.\u003c/p\u003e\u003cp\u003eC. Title\u003c/p\u003e\u003cp\u003eIt is sufficient to deal with the first half of the string. We use s[i] to denote the i-th (index starts from 1) character in the first half of the string, and further denote the length of the string is n. For each pair s[i] and s[n-i+1], if both of them are \u0027?\u0027, we just leave them as they are. If both of them are letters, we check whether they are the same or not, and if they are different, we can immediately output \u0026quot;IMPOSSIBLE\u0026quot;. If exactly one of them is a letter while the other one is \u0026quot;?\u0026quot;, we just replace \u0026quot;?\u0026quot; with this letter.\u003c/p\u003e\u003cp\u003eAfter we have completed the above operations, we start from s\u003ca href\u003d\"here\"\u003e(n+1)/2\u003c/a\u003e until we reach s[1]. During this process, whenever we meet a \u0026quot;?\u0026quot;, we replace it with the \u0026quot;largest\u0026quot; letter that is still not contained in the current string; while if all the letters have been contained in the string, we replace all the left \u0026quot;?\u0026quot; with letter \u0027a\u0027. Finally, remember to check whether the required letters have appeared in the string for at least once or not.\u003c/p\u003e\u003cp\u003eD. Team Arrangement\u003c/p\u003e\u003cp\u003eAt first, we should find out whether the student with number k is the captain or not. To solve this, we can first find the team to which this student belongs (this is just the row index in the \u0026quot;members of a given team\u0026quot; matrix). Then, we enumerate from the first student according to the results of personal training sessions, and find the first one who belongs to the team where the student with number k is. This student must be the captain of this team.\u003c/p\u003e\u003cp\u003eIf student with number k is not the captain, we can directly output 1,2,...,n but skipping k, since the priority list of student with number k has no effect on how the members are selected.\u003c/p\u003e\u003cp\u003eIf student with number k is the captain, we can immediately find out his two teammates, denoted as T1 and T2, and without loss of generality, we assume that T1\u0026lt;T2. Then, we divide the other students into two groups G1 and G2. At first, all the students that belong to the following teams are put into G2. Then, for the students that belong to the previous teams, if his number is larger than T2, he should be put into G2; otherwise put into G1. Finally, both T1 and T2 are put into G1. After sorting G1 and G2 in both increasing order, we can output G1 and G2 in turn, and this is just the answer. This solutions works since all the students belonging to the following teams cannot be put before T1 and T2, since otherwise some one of them will be selected instead of T1 or T2. Next, all the students with number larger than T2 and belonging to the previous teams should be put after T1 and T2, since they have been selected by other teams and thus they have no effect on the current team. \u003c/p\u003e\u003c/div\u003e","tags":[]}}