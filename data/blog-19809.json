{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1439656816,"rating":-3,"authorHandle":"Karan2116","modificationTimeSeconds":1439656816,"id":19809,"title":"\u003cp\u003eSaving Memory In Dynamic Programming\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI am trying to practice some problems in dynamic programming. Now there are memory constraints and i want to manage the memory efficiently for which i want to maintain only those rows on which the final answer depends.\u003c/p\u003e\u003cp\u003eFor instance in knapsack,I want to maintain only two rows. I am trying it in the following way but failing.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elong long int knapSack(long long W, vector\u0026lt;long long\u0026gt; \u0026amp;wt, vector\u0026lt;long long\u0026gt; \u0026amp;val, int n)\n{\n   long long int i, w;\n   long long int K[2][W+1];\n   for (i \u003d 0; i \u0026lt;\u003d n; i++)\n   {\n       for (w \u003d 0; w \u0026lt;\u003d W; w++)\n       {\n           if (i\u003d\u003d0 || w\u003d\u003d0)\n               K[i%2][w] \u003d 0;\n           else if (wt[i-1] \u0026lt;\u003d w)\n                 K[i%2][w] \u003d max(val[i-1] + K[(i-1)%2][w-wt[i-1]],  K[(i-1)%2][w]);\n           else\n                 K[i%2][w] \u003d K[(i-1)%2][w];\n       }\n   }\n   return K[n%2][W];\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHaven\u0027t tried it before and could not find some useful material. It would be great if someone can guide.\u003c/p\u003e\u003c/div\u003e","tags":["dp","memory manipulation"]}}