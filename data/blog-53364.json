{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1500396349,"rating":4,"authorHandle":"LeBronJamez","modificationTimeSeconds":1500421298,"id":53364,"title":"\u003cp\u003eMatrix Data Structure\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eEdit (2): an other version of the problem is the following: We are given a set S of m pairs of integers (x(i), y(i)). For every i\u0026lt;\u003dm we have x(i), y(i) \u0026lt;\u003d n. We are also given Q queries. Every query is an integer k and a sequence T of k integers, each \u0026lt;\u003d n. If there is a pair (x, y) in S such that x not in T and y not in T, then we answer true. Otherwise, we answer false.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eI am trying to find a data structure which, given a boolean square matrix symmetric with respect to the main diagonal, can efficiently handle the following operations: update(x): set all the entries in row x and column x to 0. query(): return true if there is at least one 1 in the matrix, return false otherwise. I\u0027ve been thinking of using 2d-segment tree with lazy propagation, but after a quick search I found out that there is no such thing ( \u003cstrong\u003eEdit: I should have stated this in a better way; what i meant was that there is no efficient algorithm/data structure (i.e. with sublinear complexity) for ranged updates/queries in 2D\u003c/strong\u003e ). The only way of efficiently doing range updates and queries in 2D is with Binary Indexed Tree, but using BIT only limits us to updating/querying sums. However, in my case the updates are quite restricted, since we only update an entire row and an entire column at a time, so I was wondering if there is some other way I could approach the problem. Any help is appreciated :)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eEdit: my goal is to achieve sub-linear complexity for both the update and the query operations\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e","tags":["#data structure","boolean-matrix","#algorithms"]}}