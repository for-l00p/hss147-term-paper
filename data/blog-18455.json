{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1433934592,"rating":36,"authorHandle":"DarthPrince","modificationTimeSeconds":1469134251,"id":18455,"title":"\u003cp\u003eInteractors with testlib.h\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eInteractive problems are problems in which solution talks to the judge. For example, \u003ca href\u003d\"/gym/100553/problem/G\" title\u003d\"2014-2015 ACM-ICPC Northeastern European Regional Contest (NEERC 14)\"\u003e100553G - Gomoku\u003c/a\u003e. We don\u0027t see interactive problems much in ACM-ICPC style problems. Most of them are Olympiad style(IOI and CEOI). Unfortunately using interactive in Codeforces contests is not allowed, but you can see some of them in Gym. Also \u003ca href\u003d\"https://polygon.codeforces.com\"\u003ePolygon\u003c/a\u003e handles such problems(there\u0027s a checkbox \u003ccode\u003eInteractive\u003c/code\u003e in general info of the problem). When we don\u0027t wanna handle the judge manually, we should use a code named interactor to talk to code instead of a person. With testlib.h, we can write interactors as simple as checkers and validators.\u003c/p\u003e\u003cp\u003eIn an interactive problem, you may use also a checker. To connect this programs together(generator, validator, solution, checker and interactor), you can use teslib input streams. An input stream, is a structure that reads data from a specific file using some pre-implemented methods. Input streams you can use with testlib.h:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003ccode\u003einf\u003c/code\u003e: It\u0027s the input generated by generator or manually (In polygon, manual tests and output of generators, based on how the input file of the current testcase was generated).\u003c/li\u003e   \u003cli\u003e\u003ccode\u003eouf\u003c/code\u003e: It\u0027s the output produced by the solution you\u0027re working on.\u003c/li\u003e   \u003cli\u003e\u003ccode\u003eans\u003c/code\u003e: Output produced by your correct solution.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eAlso, there\u0027s an input/output stream for interactive tasks named \u003ccode\u003etout\u003c/code\u003e. It\u0027s a log file, you can write some information to it with the interactor and later, check the information written in it with the checker (and determine the verdict). For writing in it, you can use style of C++ \u003ccode\u003ecout\u003c/code\u003e, like \u003ccode\u003etout \u0026lt;\u0026lt; n \u0026lt;\u0026lt; endl;\u003c/code\u003e. In the checker, you can read that information from \u003ccode\u003eouf\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eMethods you can use for input streams: \u003ca href\u003d\"/blog/entry/18426\"\u003eValidator doc\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn interactor, you read the information about the current testcase from \u003ccode\u003einf\u003c/code\u003e, write what needs to be given to the solution you\u0027re checking and the correct solution using stdout (online), read the output produces by the solution you\u0027re checking using \u003ccode\u003eouf\u003c/code\u003e (online), read the output produces by your correct solution using \u003ccode\u003eans\u003c/code\u003e (online) and write log to \u003ccode\u003etout\u003c/code\u003e if you want.\u003c/p\u003e\u003cp\u003eIf at anytime, some with methods of input streams used in interactor goes wrong(fails), verdict will be Wrong Answer.\u003c/p\u003e\u003cp\u003eAlso, you can determine the verdict in interactor. There are much useful methods in teslib you can use in interactors for \u003ccode\u003eassert\u003c/code\u003e-like checking, ensuring and determining the verdict. You can find them in \u003ca href\u003d\"/blog/entry/18431\"\u003echecker docs\u003c/a\u003e (methods like \u003ccode\u003equitf\u003c/code\u003e and \u003ccode\u003eensuref\u003c/code\u003e).\u003c/p\u003e\u003cp\u003eYou can also see possible verdicts in \u003ca href\u003d\"/blog/entry/18431\"\u003echecker docs\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIf verdict determined by interactor\u0027s ok, then it will be ensured by the checker (which uses \u003ccode\u003etout\u003c/code\u003e/\u003ccode\u003eouf\u003c/code\u003e) if there\u0027s any.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHow to use interactor program ?\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSimple:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eWindows:\n\ninteractor.exe \u0026lt;Input_File\u0026gt; \u0026lt;Output_File\u0026gt; [\u0026lt;Answer_File\u0026gt; [\u0026lt;Result_File\u0026gt; [-appes]]],\nReads test from inf (mapped to args[1]), writes result to tout (mapped to argv[2],\ncan be judged by checker later), reads program output from ouf (mapped to stdin),\nwrites output to program via stdout (use cout, printf, etc).\n\nLinux:\n\n./interactor.out \u0026lt;Input_File\u0026gt; \u0026lt;Output_File\u0026gt; [\u0026lt;Answer_File\u0026gt; [\u0026lt;Result_File\u0026gt; [-appes]]],\nReads test from inf (mapped to args[1]), writes result to tout (mapped to argv[2],\ncan be judged by checker later), reads program output from ouf (mapped to stdin),\nwrites output to program via stdout (use cout, printf, etc).\n\u003c/code\u003e\u003c/pre\u003e\u003ch3\u003eSample Interactive Problem\u003c/h3\u003e\u003cp\u003eI(judge) choose an integer in the interval \u003cspan class\u003d\"tex-span\"\u003e[1, 10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e]\u003c/span\u003e and you should write a code to guess it. You can ask me at most 50 questions. In each question, you tell me a number in the interval \u003cspan class\u003d\"tex-span\"\u003e[1, 10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e]\u003c/span\u003e, and I tell you:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e1 if it is equal to answer(the chosen number), and your program should stop asking after that.\u003c/li\u003e   \u003cli\u003e0 if it is smaller than answer.\u003c/li\u003e   \u003cli\u003e2 if it is greater than answer.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eSample interactor for this problem:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Like checkers and validators and generator, you should first initialize your interactor with \u003ccode\u003eregisterInteraction(argc, argv)\u003c/code\u003e.\u003c/p\u003e\u003cp\u003ePlease note that in this problem, we can determine the verdict without using the correct solution and \u003ccode\u003eans\u003c/code\u003e because we don\u0027t care about it\u0027s product. But in some problems, we\u0027ll have to compare it with the product of the correct solution using \u003ccode\u003eans\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint main(int argc, char ** argv){\n\tregisterInteraction(argc, argv);\n\tint n \u003d inf.readInt();\t// chosen integer\n\tcout.flush();\t// to make sure output doesn\u0027t stuck in some buffer\n\tint left \u003d 50;\n\tbool found \u003d false;\n\twhile(left \u0026gt; 0 \u0026amp;\u0026amp; !found){\n\t\tleft --;\n\t\tint a \u003d ouf.readInt(1, 1000000000);\t// the number you tell me\n\t\tif(a \u0026lt; n)\n\t\t\tcout \u0026lt;\u0026lt; 0 \u0026lt;\u0026lt; endl;\n\t\telse if(a \u0026gt; n)\n\t\t\tcout \u0026lt;\u0026lt; 2 \u0026lt;\u0026lt; endl;\n\t\telse\n\t\t\tcout \u0026lt;\u0026lt; 1 \u0026lt;\u0026lt; endl, found \u003d true;\n\t\tcout.flush();\n\t}\n\tif(!found)\n\t\tquitf(_wa, \u0026quot;couldn\u0027t guess the number with 50 questions\u0026quot;);\n\touf.readEof();\n\tquitf(_ok, \u0026quot;guessed the number with %d questions!\u0026quot;, 50 - left);\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eResources: \u003ca href\u003d\"/blog/entry/18426\"\u003eCheckers\u003c/a\u003e, \u003ca href\u003d\"/blog/entry/18426\"\u003evalidators\u003c/a\u003e and my personal experience from reading one of \u003ca class\u003d\"rated-user user-admin\" href\u003d\"/profile/MikeMirzayanov\" title\u003d\"Headquarters, MikeMirzayanov\"\u003eMikeMirzayanov\u003c/a\u003e\u0027s interactors.\u003c/p\u003e\u003c/div\u003e","tags":["testlib","interactive","interactor"]}}