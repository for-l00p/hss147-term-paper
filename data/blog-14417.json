{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1414181329,"rating":24,"authorHandle":"IAmNotDaniil","modificationTimeSeconds":1414667372,"id":14417,"title":"\u003cp\u003eCodeforces Round #275 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/483/problem/A\" title\u003d\"Codeforces Round 275 (Div. 2)\"\u003e483A - Counterexample \u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/gridnevvvit\" title\u003d\"Candidate Master gridnevvvit\"\u003egridnevvvit\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis problem has two possible solutions:\u003c/p\u003e \u003col\u003e   \u003cli\u003eLet\u0027s handle all possible triples and check every of them for being a counterexample. This solution works with asymptotics \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e\u003ci\u003elogA\u003c/i\u003e)\u003c/span\u003e\u003c/li\u003e   \u003cli\u003eHandle only a few cases. It could be done like this:\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e  if (l % 2 !\u003d 0)\n      l++;\n   \n  if (l + 2 \u0026gt; r)\n    out.println(-1);\n  else\n    out.println(l + \u0026quot; \u0026quot; + (l + 1) + \u0026quot; \u0026quot; + (l + 2));\n \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/483/submission/8394832\" title\u003d\"Submission 8394832 by gridnevvvit\"\u003e8394832\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/483/problem/B\" title\u003d\"Codeforces Round 275 (Div. 2)\"\u003e483B - Friends and Presents\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/gridnevvvit\" title\u003d\"Candidate Master gridnevvvit\"\u003egridnevvvit\u003c/a\u003e\u003c/p\u003e\u003cp\u003eJury\u0027s solution is using binary search. First, you can notice that if you can make presents with numbers \u003cspan class\u003d\"tex-span\"\u003e1, 2, ..., \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e then you can make presents with numbers \u003cspan class\u003d\"tex-span\"\u003e1, 2, ..., \u003ci\u003ev\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e + 1\u003c/span\u003e too. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e be the function returning true or false: is it right, that you can make presents with numbers \u003cspan class\u003d\"tex-span\"\u003e1, 2, ..., \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e be the number of numbers divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e — the number of numbers divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eboth\u003c/i\u003e\u003c/span\u003e — number of numbers divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e (as soon as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e are primes, it is equivalent to divisibility by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e·\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e). Then to first friend at first we shold give \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - \u003ci\u003eboth\u003c/i\u003e\u003c/span\u003e numbers, and to second friend \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - \u003ci\u003eboth\u003c/i\u003e\u003c/span\u003e numbers. Then we must check, could we give all other numbers divisible neither by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e nor by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThis solution works with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/483/submission/8394846\" title\u003d\"Submission 8394846 by gridnevvvit\"\u003e8394846\u003c/a\u003e \u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/483/problem/C\" title\u003d\"Codeforces Round 275 (Div. 2)\"\u003e483C - Diverse Permutation\u003c/a\u003e / \u003ca href\u003d\"/contest/482/problem/A\" title\u003d\"Codeforces Round 275 (Div. 1)\"\u003e482A - Diverse Permutation\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/gridnevvvit\" title\u003d\"Candidate Master gridnevvvit\"\u003egridnevvvit\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s see, what\u0027s the solution for some \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e:\u003c/p\u003e\u003cp\u003e1 10 2 9 3 8 4 7 5 6\u003c/p\u003e\u003cp\u003eAt the odd indexes we placed increasing sequence 1, 2, 3 .., at the even — decreasing sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e - 1, \u003ci\u003en\u003c/i\u003e - 2, ..\u003c/span\u003e. First, we must get the permutation the way described above, then get first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e numbers from it, and then we should make all other distances be equal to 1.\u003c/p\u003e\u003cp\u003eThis solution works with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/483/submission/8394876\" title\u003d\"Submission 8394876 by gridnevvvit\"\u003e8394876\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/483/problem/D\" title\u003d\"Codeforces Round 275 (Div. 2)\"\u003e483D - Interesting Array\u003c/a\u003e / \u003ca href\u003d\"/contest/482/problem/B\" title\u003d\"Codeforces Round 275 (Div. 1)\"\u003e482B - Interesting Array\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/gridnevvvit\" title\u003d\"Candidate Master gridnevvvit\"\u003egridnevvvit\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe will solve the task for every distinct bit. Now we must handle new constraint: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e], \u003ci\u003er\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e], \u003ci\u003eq\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. If number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e has 1 in bit with number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e, then all numbers in segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e], \u003ci\u003er\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]]\u003c/span\u003e will have 1 in that bit too. To do that, we can use a standard idea of adding on a segment.\u003c/p\u003e\u003cp\u003eLet\u0027s do two adding operation in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e]\u003c/span\u003e array — in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e we will add \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, and in posiotion \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] + 1\u003c/span\u003e — -1. Then we will calculate partial sums of array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e]\u003c/span\u003e, and if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e \u0026gt; 0 (the sum on prefix length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e), then bit at position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e will be 1, otherwise — 0.\u003c/p\u003e\u003cp\u003eAfter that, you can use segment tree to check satisfying constraints.\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/483/submission/8394894\" title\u003d\"Submission 8394894 by gridnevvvit\"\u003e8394894\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/483/problem/E\" title\u003d\"Codeforces Round 275 (Div. 2)\"\u003e483E - Game with Strings\u003c/a\u003e / \u003ca href\u003d\"/contest/482/problem/C\" title\u003d\"Codeforces Round 275 (Div. 1)\"\u003e482C - Game with Strings\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/gridnevvvit\" title\u003d\"Candidate Master gridnevvvit\"\u003egridnevvvit\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s handle all string pairs and calculate the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003c/span\u003e mask, which will have 1-bits only in positions in which that strings have the same characters. In other words, we could not distinguish these strings using positions with submask of mask \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003c/span\u003e, then we must add in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003emask\u003c/i\u003e]\u003c/span\u003e 1-bits in positions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. This way in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003emask\u003c/i\u003e]\u003c/span\u003e we store mask of strings, which we could not distinguish using only positions given in mask \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003c/span\u003e. Using information described above, we can easily calculate this dynamics.\u003c/p\u003e\u003cp\u003eNow, when we have array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e calculated, it is not hard to calculate the answer. Let\u0027s handle some mask \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003c/span\u003e. Now we should try to make one more question in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e, which is equal to adding one more 1-bit in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003c/span\u003e in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e. After that we may guess some strings, they are 1-bits in mask \u003ccode\u003es \u003d d[mask] ^ d[mask | (1 \u0026lt;\u0026lt; pos)]\u003c/code\u003e. Then you have to calculate number of bits in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e quickly and update the answer.\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/483/submission/8394918\" title\u003d\"Submission 8394918 by gridnevvvit\"\u003e8394918\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/482/problem/D\" title\u003d\"Codeforces Round 275 (Div. 1)\"\u003e482D - Random Function and Tree\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/RoKi\" title\u003d\"Candidate Master RoKi\"\u003eRoKi\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e][\u003ci\u003ep\u003c/i\u003e]\u003c/span\u003e dynamics — the answer for vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e with size of parity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAt first step to calculate this dynamic for vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e we should count all different paintings of a subtree visiting all children in increasing order of their numbers. By multiplying this number by 2 we will get paintings visiting children in decreasing order. Now some paintings may count twice. To fix that, let\u0027s have a look on a some subtree of a vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eConsider all the parities of children subtrees visited by our function (0 or 1). First thing to note is that among these parities exist two different values, the subtree will have different paintings with different ordering (you can prove it yourself). Otherwise, all our children sizes have the same parity.\u003c/p\u003e\u003cp\u003eIf all sizes are even, this subtree will be counted twice. Otherwise, if sizes are odd, we are interested only in odd count of visited subtrees. This way, we must subtract from our dynamic the number of ways to paint any number of children with even subtree sizes and odd number of children with odd subtree sizes.\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/482/submission/8394936\" title\u003d\"Submission 8394936 by gridnevvvit\"\u003e8394936\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/482/problem/E\" title\u003d\"Codeforces Round 275 (Div. 1)\"\u003e482E - ELCA\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/dans\" title\u003d\"Master dans\"\u003edans\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s split all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e requests in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/61/ea/61ea97a74324784c1feda6bff27bf6c17dfb431b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e blocks containing \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/61/ea/61ea97a74324784c1feda6bff27bf6c17dfb431b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e requests each. Every block will be processed following way:\u003c/p\u003e\u003cp\u003eFirst using dfs we need to calculate \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5e/bd/5ebdb65e31897e98ea5bc803a0547bc9994e3b58.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for every vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e is every ancestor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esize\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — size of subtree of vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, including itself. This value shows how will the answer change after removing or adding vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e as child to any other vertex, furthermore, answer will change exactly by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epath\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003esize\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (decreasing or increasing).\u003c/p\u003e\u003cp\u003eThen we will calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ech\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e the same way — the number of all possible vertex pairs, which have LCA in vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. This value shows how the answer changes after changing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eV\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eV\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e changes by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edV\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, answer changes by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ech\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003edV\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen mark all vertexes, which occur in our block at least once (in worst case their number is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/db/b0/dbb021c66f89403a72bff6603c4d776442240666.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e). Next, mark every vertex being LCA of some pair of already marked vertexes, using DFS. We can prove that final number of these vertexes is at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3f/e4/3fe4b4730fa77b8d22bd097328bef7ae62477638.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. After all this we got \u0027compressed\u0027 tree, containing only needed vertexes. Parent of vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in compressed tree we will call vertex numbered \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eOn the image above example of this \u0027compression\u0027 way is given. Vertexes colored red are vertexes in request block, blue — vertexes marked after LCA, dotted line — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e → \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e edges in compressed tree.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"Example of compressed tree\" src\u003d\"/predownloaded/bd/d2/bdd29831ecc0ae3f8a14002b0de45cf26aa2ade3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eOn such compressed tree we need to calculate one new value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for every vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e — the size of a vertex, lying on a way from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e on main (non-compressed) tree (son of a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e vertex in main tree).\u003c/p\u003e\u003cp\u003eNow we should process request on changing parent of vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e on a compressed tree. The answer will change by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epath\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003esize\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Now for every vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, lying on a way from root to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e vertex, two values will change: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esize\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e will be decreased by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esize\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, but \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ech\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e will be decreased by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esize\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e·(\u003ci\u003esize\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e), but \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epath\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e will stay unchanged. For every other vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epath\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e will be changed: it will be decreased by \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4c/be/4cbece43e181d38f5867d1ba542a17ce16712e8c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. After that, we got compressed subtree where subtree of a vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e is missing. Next, doing the same way as above, all values are changed considering that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e (and all it\u0027s subtree) is a children of a vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e. Do not forget to change \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e too.\u003c/p\u003e\u003cp\u003eLet\u0027s see, how the value-changing request of a vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e is to be processed. As described above, the answer will be changed by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ech\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003edV\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. For every vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e lying in vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e subtree only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epath\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e will be changed (it could be easy done using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eto\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e values), all other values stay unchanged.\u003c/p\u003e\u003cp\u003eThis solution has \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/88/ff/88ff7e32eec0c987fe126a858176b4178493c129.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e complexity, but in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d \u003ci\u003eM\u003c/i\u003e\u003c/span\u003e case it has to be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5e/d4/5ed4b36617ad3dee52cd70f1505971c5860f5e8e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eАвторское решение: \u003ca href\u003d\"/contest/482/submission/8394944\" title\u003d\"Submission 8394944 by gridnevvvit\"\u003e8394944\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["editorial","codeforces","round","275"]}}