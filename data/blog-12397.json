{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1400923185,"rating":66,"authorHandle":"huzecong","modificationTimeSeconds":1405583440,"id":12397,"title":"\u003cp\u003eCodeforces Round #248 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eIf you have any questions or suggestions, or if you have a solution different to ours that you want to share with us, feel free to comment below :)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAuthor solutions are added.\u003c/strong\u003e\u003c/p\u003e \u003chr /\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/433/problem/A\"\u003eDiv. 2 A — Kitahara Haruki\u0027s Gift\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eDenote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/span\u003e as the sum of the weight of the apples. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e / 100\u003c/span\u003e is not an even number, then the answer is obviously \u0026quot;NO\u0026quot;. Otherwise, we need to check if there is a way of choosing apples, so that the sum of the weight of the chosen apples is exactly \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e0/95/e0957be4f2297f056c298eb30bfd4ccea4ee9fb0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eA simple \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e approach would be to enumerate how many 200-gram apples do we choose, and check if we can fill the rest with 100-gram apples. We can also solve this problem using a classic knapsack DP.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e \u003ca href\u003d\"/contest/433/submission/6712942\" title\u003d\"Посылка 6712942 от huzecong\"\u003e6712942\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/433/problem/B\"\u003eDiv. 2 B — Kuriyama Mirai\u0027s Stones\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSort sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e to obtain sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e. Sorting can be done in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5d/1f/5d1f29f648247e77966a5b1703590aea2a6a75b6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e using quicksort. Now we are interested in the sum of a interval of a given sequence. This can be done by calculating the prefix sum of the sequence beforehand. That is, let \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f1/b3/f1b374906287d433dbe9f3d1069c6751f196ecd7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. The sum of numbers in the interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e would then be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esv\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003esv\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e. We can deal with sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e likewise.\u003c/p\u003e\u003cp\u003ePreprocessing takes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e time, and answering a query is only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e. The total complexity would be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/44/8a/448aaf5b909c5c10fe6445b3910f716a1a237cd1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e \u003ca href\u003d\"/contest/433/submission/6713020\" title\u003d\"Посылка 6713020 от zhonghaoxi\"\u003e6713020\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/433/problem/C\"\u003eDiv. 2 C\u003c/a\u003e / \u003ca href\u003d\"//codeforces.com/contest/434/problem/A\"\u003eDiv. 1 A — Ryouko\u0027s Memory Note\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSuppose we\u0027re merging page \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to page \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. Obviously page \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e should be an element of sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, otherwise merging would have no effect. Enumerate all possible values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, and denote sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e as the elements of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e that are adjacent to an element with value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. If one element is adjacent to two elements with value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, it should appear twice in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. However, if one element itself is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, it should not appear in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor example, suppose we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d {2, 2, 4, 1, 2, 1, 2, 3, 1}\u003c/span\u003e, then sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d 2\u003c/span\u003e would be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d {4, 1, 1, 1, 3}\u003c/span\u003e, where the 6-th element appears twice.\u003c/p\u003e\u003cp\u003eProblem remains for finding a optimum value for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e be the length of sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. When merging \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, the change in answer would be\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6d/94/6d947e4485e0636dd91eca7755bce4084871ecaf.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWe only care about the left part, as the right part has nothing to do with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. We can change our problem to the following:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cem\u003eGiven \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e numbers on the number axis, find a number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e so that the sum of the distance between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e given numbers is minimum.\u003c/em\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThis is, however, a classic problem. We have the following conclusion:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cem\u003eThe number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in the problem should be the median of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e numbers.\u003c/em\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eProof:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eConsider the case where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is odd. Proof is similar for cases where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is even.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eWe choose an arbitary number as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Suppose there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e numbers on the left of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e numbers on the right of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is the median, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e \u003d \u003ci\u003er\u003c/i\u003e\u003c/span\u003e, so what we\u0027re going to prove is that optimal answer cannot be achieved when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e ≠ \u003ci\u003er\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eSuppose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e \u0026lt; \u003ci\u003er\u003c/i\u003e\u003c/span\u003e, consider what would happen to the answer if we add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ed\u003c/i\u003e \u0026gt; 0)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e (Here we assume that adding \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e does not affect the values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e). The distance between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and all the numbers on the right would decrease by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, while the distance between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and all numbers on the left would increase by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. So the answer would decrease by \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003er\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e)\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, which is a positive value, since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e \u0026lt; \u003ci\u003er\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eSo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e would keep increasing until \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e \u003d \u003ci\u003er\u003c/i\u003e\u003c/span\u003e, when optimal answer can be achieved. Thus \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is the median of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e numbers.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThis brings us to our solution. Simply sort sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and find its median, then calculate the answer. The final answer would be the optimal one from all possible values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. The complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5d/1f/5d1f29f648247e77966a5b1703590aea2a6a75b6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, as the sum of the length of all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e sequences does not exceed \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAbout the pretests:\u003c/strong\u003e Pretests for this problem are deliberately made weak, in order to make hacking more fun. None of the pretests contains adjacent numbers with the same value.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e \u003ca href\u003d\"/contest/433/submission/6712939\" title\u003d\"Посылка 6712939 от huzecong\"\u003e6712939\u003c/a\u003e, \u003ca href\u003d\"/contest/433/submission/6713018\" title\u003d\"Посылка 6713018 от zhonghaoxi\"\u003e6713018\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/433/problem/D\"\u003eDiv. 2 D\u003c/a\u003e / \u003ca href\u003d\"//codeforces.com/contest/434/problem/B\"\u003eDiv. 1 B — Nanami\u0027s Digital Board\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eConsider a similar problem: find the maximum light-block of the whole board. Constraints to this problem are the same as the original problem, but with no further operations.\u003c/p\u003e\u003cp\u003eA brute-force idea would be to enumerate all four edges of the block, checking can be done with two-dimensional prefix sums, so the time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e)\u003c/span\u003e. Obviously it would receive a TLE verdict.\u003c/p\u003e\u003cp\u003eWhy should we enumerate all four edges? Let\u0027s enumerate the lower- and upper-edge, and now our problem is only one-dimensional, which can be easily solved in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e time. Now our complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e, still not fast enough.\u003c/p\u003e\u003cp\u003eLet\u0027s try to enumerate the lower-edge only, and now what we have is an array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eup\u003c/i\u003e[]\u003c/span\u003e, denoting the maximum \u0026quot;height\u0026quot; of each column. To be specific, suppose the lower-edge is row \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eup\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e is the maximum value such that \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e), (\u003ci\u003ex\u003c/i\u003e - 1, \u003ci\u003ei\u003c/i\u003e), ..., (\u003ci\u003ex\u003c/i\u003e - \u003ci\u003eup\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] + 1, \u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e are all light. If we choose columns \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e as the left- and right-edge, then the area of the maximum light-block with these three sides fixed would be\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/92/38/9238c17938cbf1603e278d7acadfbf81142bc065.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/82/97/829751d9ae65912fbb1b7cbbc29a42ee2c260a28.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, what if we enumerate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e, and find the leftmost \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and the rightmost \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e? To be more specific, we enumerate a column \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, and let the height of this column be the height of the block. Now we want to \u0026quot;stretch\u0026quot; the left and right sides of the block, so we\u0027re looking for the leftmost column \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e such that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8f/64/8f64230f345d0646b413bd7aece8b3206034a70c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Similarly look for the rightmost column \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, then the maximum light block with its lower-edge and a point in the upper-edge fixed would be \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003er\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e + 1)·\u003ci\u003eup\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThis approach can be optimized with disjoint-set unions (abbr. DSU). Imagine that initially the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eup\u003c/i\u003e[]\u003c/span\u003e array is empty. Let\u0027s add the elements of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eup\u003c/i\u003e[]\u003c/span\u003e one by one, from the largest to the smallest. Maintain two DSUs, and denote them as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e.When we add an element \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eup\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, set the father of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e, so that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e will be \u0026quot;skipped\u0026quot; during the \u0026quot;find\u0026quot; operation of DSU. Similarly set the father of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e. Simply find the root of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e, and we would have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow this problem can be solved in quasi-quadratic time. We can actually further optimize it to quadratic time using monotonic queues, but we\u0027ll not talk about it here. Let\u0027s go back to the original problem.\u003c/p\u003e\u003cp\u003eSuppose there are no modifications, operations only contain queries. Then we could simply maintain the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eup\u003c/i\u003e[]\u003c/span\u003e array of every row, and similarly maintain \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edown\u003c/i\u003e[]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eleft\u003c/i\u003e[]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eright\u003c/i\u003e[]\u003c/span\u003e arrays. Use the approach described above to achieve quasi-linear time for the answering of a query.\u003c/p\u003e\u003cp\u003eNow consider modifications. Modification of a single pixel only changes the values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e positions of the arrays. So modifications can be handled in linear time.\u003c/p\u003e\u003cp\u003eThe total complexity for the algorithm is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + \u003ci\u003eqn\u003c/i\u003e·α(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003eα(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e is the inverse of the Ackermann function, which is often seen in the analysis of the time complexity of DSUs.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e \u003ca href\u003d\"/contest/433/submission/6712937\" title\u003d\"Посылка 6712937 от huzecong\"\u003e6712937\u003c/a\u003e, \u003ca href\u003d\"/contest/433/submission/6713016\" title\u003d\"Посылка 6713016 от zhonghaoxi\"\u003e6713016\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/433/problem/E\"\u003eDiv. 2 E\u003c/a\u003e / \u003ca href\u003d\"//codeforces.com/contest/434/problem/C\"\u003eDiv. 1 C — Tachibana Kanade\u0027s Tofu\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eA straightforward brute-force idea would be to enumerate all numbers in the interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e, and count how many of them have a value greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. This approach is way too slow, but nevertheless let\u0027s try optimizing it first.\u003c/p\u003e\u003cp\u003eThe enumeration part seems hard to optimize, so let\u0027s consider what is the fastest way of calculating the value of a string. This is a classic problem that can be solved using an Aho-Corasick automaton (abbr. ACA). Build an ACA with the given number strings, and simply \u0026quot;walk\u0026quot; in the automaton according to the string to be calculated.\u003c/p\u003e\u003cp\u003eConsider a common method when dealing with digits — split the interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e into two, \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e minus \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003el\u003c/i\u003e - 1]\u003c/span\u003e. Then use DP to solve an interval, take \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e for instance. Consider filling in the numbers one by one, we need to record in the states of the DP the position in the string, and a flag denoting whether we\u0027re \u0026quot;walking on the edge of the upper bound\u0026quot;, that is, whether the numbers we\u0027ve filled are the prefix of the upper-bound \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eHow can we use the approach above in this problem? Can we combine this approach with our ACA? The answer is yes, further record in the states of the DP the ID of the node we\u0027re currently \u0026quot;standing on\u0026quot; in the ACA. Consider the transfer of this DP, enumerate which number we\u0027re going to fill in, and check using our flag if the current number will be greater than the upper-bound. Appending a number to the end of our string would result in a change of the ID of the node in our ACA, so \u0026quot;walk\u0026quot; along the transferring edge in the ACA.\u003c/p\u003e\u003cp\u003eWhat about the limit of values? Simply record the current value in our DP state, during transfer, add the value stored in the ACA\u0027s node to the value stored in our state.\u003c/p\u003e\u003cp\u003eThe tricky bit is the leading zeros. Numbers can\u0027t have leading zeros, but number strings can. How can we distinguish leading zeros from zeros in the middle of the number? We keep another flag, denoting whether we\u0027re still dealing with leading zeros.\u003c/p\u003e\u003cp\u003eSo finally our state looks like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003elen\u003c/i\u003e][\u003ci\u003enode\u003c/i\u003e][\u003ci\u003eval\u003c/i\u003e][\u003ci\u003eupper\u003c/i\u003e_\u003ci\u003ebound\u003c/i\u003e_\u003ci\u003eflag\u003c/i\u003e][\u003ci\u003eleading\u003c/i\u003e_\u003ci\u003ezero\u003c/i\u003e_\u003ci\u003eflag\u003c/i\u003e]\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elen\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eval\u003c/i\u003e\u003c/span\u003e are current length of number, ID of current node in ACA, and current value of number respectively. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e be the total length of all number string, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e be the length of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, the total complexity would be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eNLkm\u003c/i\u003e)\u003c/span\u003e, since the number of states is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eNLk\u003c/i\u003e)\u003c/span\u003e and transfer takes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e)\u003c/span\u003e time.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution for the approach above:\u003c/strong\u003e \u003ca href\u003d\"/contest/433/submission/6712934\" title\u003d\"Посылка 6712934 от huzecong\"\u003e6712934\u003c/a\u003e \u003cstrong\u003eSolution for a different approach:\u003c/strong\u003e \u003ca href\u003d\"/contest/433/submission/6713013\" title\u003d\"Посылка 6713013 от zhonghaoxi\"\u003e6713013\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/434/problem/D\"\u003eDiv. 1 D — Nanami\u0027s Power Plant\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe can use a flow network to solve the problem.\u003c/p\u003e\u003cp\u003eFor each variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, create \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 2\u003c/span\u003e points, and denote them as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. Edges are as follows:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eLink \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esource\u003c/i\u003e\u003c/span\u003e to each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1)\u003c/span\u003e with capacity of infinity.\u003c/li\u003e   \u003cli\u003eLink each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esink\u003c/i\u003e\u003c/span\u003e with capacity of infinity.\u003c/li\u003e   \u003cli\u003eLink each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e - 1)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e with capacity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMAX\u003c/i\u003e - \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e. Here \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMAX\u003c/i\u003e\u003c/span\u003e is a number greater than every possible value of the variables.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e be the value of the minimum cut of this network. If there are no further restrictions, it is obvious that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMAX\u003c/i\u003e·\u003ci\u003en\u003c/i\u003e - \u003ci\u003eC\u003c/i\u003e\u003c/span\u003e is the maximum profit.\u003c/p\u003e\u003cp\u003eNow consider the restrictions. Suppose a restriction is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, then for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e, link it to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e - \u003ci\u003ed\u003c/i\u003e)\u003c/span\u003e (if exists) with a capacity of infinity. If there exists a solution, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMAX\u003c/i\u003e·\u003ci\u003en\u003c/i\u003e - \u003ci\u003eC\u003c/i\u003e\u003c/span\u003e will be the optimal profit.\u003c/p\u003e\u003cp\u003eWe want to prove that the edges with infinite capacity can really restrict our choice of values for variables. Note that a valid solution is correspondent to a cut of the graph. It can be proved that if a restriction is not satisfied, there will be a augmenting path in the graph. You can verify this by drawing the graphs. And because we are looking for the minimum cut, in this case the maximum sum, there can be no valid solution with a greater sum.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAbout the time limit:\u003c/strong\u003e The time limit for this problem is 5 seconds, which is by far greater than this solution actually need. We set the time limit to 5 seconds because of possible worst-case complexity of the maximum flow algorithm, although in \u0026quot;real-life\u0026quot; cases that complexity is never achieved.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAbout the solution:\u003c/strong\u003e This solution takes advantage of the fact that there are few possible values for the variables. And also the fact that functions are all quadratic is no use here, so statements may be quite misleading. If you have any ideas on how to solve the problem with a larger range for variables, or a solution using the fact that functions are quadratic, please share it in the comments :)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e \u003ca href\u003d\"/contest/434/submission/6712933\" title\u003d\"Посылка 6712933 от huzecong\"\u003e6712933\u003c/a\u003e, \u003ca href\u003d\"/contest/434/submission/6713009\" title\u003d\"Посылка 6713009 от zhonghaoxi\"\u003e6713009\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/434/problem/E\"\u003eDiv. 1 E — Furukawa Nagisa\u0027s Tree\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003cem\u003eIn order not to mess things up, we use capital letters \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eY\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e to denote the values in the original problem.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eFirst, we can build a directed graph with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e edges. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e be the edge from node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. If path \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e is good, the color of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, otherwise it is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWe want to calculate the number of triplets \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e that satisfies \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ej\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e are all good or all not good. It equals the number of directed triangles, the color of whose three edges are the same. (The triangle is like: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1d/f0/1df0807174648d2be72cc4acad1e3a1028ae18f1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e)\u003c/p\u003e\u003cp\u003eCalculating this is difficult, so let us calculate the number of directed triangles whose three edges are not all the same.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ein\u003c/i\u003e0[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e be the number of in-edges of node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e whose color is \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. Similarly define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ein\u003c/i\u003e1[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eout\u003c/i\u003e0[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eout\u003c/i\u003e1[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. Let\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8d/b3/8db38d1cce07eb0135a5516f20309fdbeead8026.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWe can see that the answer is twice the number of triangles whose three edges are not all the same. So we can see the answer of the original problem is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e - \u003ci\u003ep\u003c/i\u003e / 2\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIt\u0027s certain that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eout\u003c/i\u003e0[\u003ci\u003ei\u003c/i\u003e] + \u003ci\u003eout\u003c/i\u003e1[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003ein\u003c/i\u003e0[\u003ci\u003ei\u003c/i\u003e] + \u003ci\u003ein\u003c/i\u003e1[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, so we only need to calculate out0 and in0.\u003c/p\u003e\u003cp\u003eLet us calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eout\u003c/i\u003e0\u003c/span\u003e first. We can use the \u0026quot;Divide and Conquer on trees\u0026quot; algorithm to solve this in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c2/ad/c2ad502f529e204f26553c07a4f89107f0f7dda8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time. Choose a root \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and get its subtree, we can get all the values of the paths from a node in the subtree to node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. We save the values and the lengths of the paths.\u003c/p\u003e\u003cp\u003eFor a path from node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e with value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e and length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e, we want to find a node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e which makes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)) ≡ \u003ci\u003eX\u003c/i\u003e (\u003ci\u003emod\u003c/i\u003e \u003ci\u003eY\u003c/i\u003e)\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e be the sequence of the value of nodes on \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e except node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, then\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)) \u003d \u003ci\u003eG\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e)) + \u003ci\u003eG\u003c/i\u003e(\u003ci\u003eH\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e))·\u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sup\u003e \u003d \u003ci\u003ev\u003c/i\u003e + \u003ci\u003eG\u003c/i\u003e(\u003ci\u003eH\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e))·\u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eAs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ev\u003c/i\u003e + \u003ci\u003eG\u003c/i\u003e(\u003ci\u003eH\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e))·\u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sup\u003e) ≡ \u003ci\u003eX\u003c/i\u003e (\u003ci\u003emod\u003c/i\u003e \u003ci\u003eY\u003c/i\u003e)\u003c/span\u003e, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e(\u003ci\u003eH\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)) \u003d (\u003ci\u003eX\u003c/i\u003e - \u003ci\u003ev\u003c/i\u003e) / \u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. As \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eY\u003c/i\u003e\u003c/span\u003e is a prime number, we can get \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ev\u003c/i\u003e) / \u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e easily. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e \u003d (\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ev\u003c/i\u003e) / \u003ci\u003eK\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e, then the problem becomes that we need to calculate how many paths from node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to a node in the subtree except node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, whose value is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e, this can be done by doing binary search on a sorted array. So we can get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eout\u003c/i\u003e0\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ein\u003c/i\u003e0\u003c/span\u003e likewise.\u003c/p\u003e\u003cp\u003eWith these two arrays we can calculate the answer. The total complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c2/ad/c2ad502f529e204f26553c07a4f89107f0f7dda8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e \u003ca href\u003d\"/contest/434/submission/6707988\" title\u003d\"Посылка 6707988 от zhonghaoxi\"\u003e6707988\u003c/a\u003e, \u003ca href\u003d\"/contest/434/submission/6712931\" title\u003d\"Посылка 6712931 от huzecong\"\u003e6712931\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["codeforces","round 248","editorial"]}}