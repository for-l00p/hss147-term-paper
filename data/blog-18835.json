{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1435136622,"rating":13,"authorHandle":"dev_il","modificationTimeSeconds":1435136864,"id":18835,"title":"\u003cp\u003eJava for programming contests\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThere is a lot of information about programming in C++ for competitions as well as almost all algorithm implementations are written in C++ language (e.g. \u003ca href\u003d\"http://e-maxx.ru/\"\u003ee-maxx site\u003c/a\u003e, \u003ca href\u003d\"https://www.topcoder.com/community/data-science/data-science-tutorials/\"\u003eTopcoder tutorials\u003c/a\u003e etc.). So from there we can take some best practices of what to use or not to use when writing problem solutions.\u003c/p\u003e\u003cp\u003eFor Java there is no such resources as I know. If not I would be really thankful to obtain links to them.\u003c/p\u003e\u003cp\u003eIt\u0027s good to read codes in Java of target coders like \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/Petr\" title\u003d\"Legendary grandmaster Petr\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003eP\u003c/span\u003eetr\u003c/a\u003e or \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Egor\" title\u003d\"International Grandmaster Egor\"\u003eEgor\u003c/a\u003e but it would be better to have it in one place (like e-maxx site).\u003c/p\u003e\u003cp\u003eAdditionally I want to ask some questions interesting for me.\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eHow do you know that some problem need to be written in C++ instead of Java? For example \u003ca href\u003d\"/contest/524/problem/F\" title\u003d\"VK Cup 2015 - Round 1\"\u003e524F - And Yet Another Bracket Sequence\u003c/a\u003e that \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/Petr\" title\u003d\"Legendary grandmaster Petr\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003eP\u003c/span\u003eetr\u003c/a\u003e wrote in C++ not Java. I don\u0027t see any specific data structure like \u003ccode\u003estd::bitset\u003c/code\u003e that Java don\u0027t have.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eWhich tricks are not recommended to use in Java (like you need to pay attention to autoboxing, that may do your solution more slow unexpectedly) ?\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eI like very much C++\u0027s \u003ccode\u003estd::pair\u0026lt;T1, T2\u0026gt;\u003c/code\u003e and it seems that it\u0027s much more efficient that self-written Java analog (e.g. \u003ca\u003ehttps://github.com/EgorKulikov/yaal/blob/master/lib/main/net/egork/collections/Pair.java)\u003c/a\u003e. Is it true or not? I think so because of creation of Object for each element of Pair (that need to be done because generics in Java cannot be declared as \u003ccode\u003ePair\u0026lt;int, int\u0026gt;\u003c/code\u003e but must be \u003ccode\u003ePair\u0026lt;Integer, Integer\u0026gt;\u003c/code\u003e). So would be the implementation of Pair for each case \u003ccode\u003eint first, second\u003c/code\u003e, \u003ccode\u003eint first; long second;\u003c/code\u003e etc more efficient than such of Egor?\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003c/div\u003e","tags":["java","best practices"]}}