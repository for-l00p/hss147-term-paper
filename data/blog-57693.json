{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1518354564,"rating":0,"authorHandle":"Ahmad_Elsagheer","modificationTimeSeconds":1518354798,"id":57693,"title":"\u003cp\u003e[Editorial] PA_1: Problem C. File Counter\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThe tree structure of the initial version should look like the image below. \u003c/p\u003e \u003cul\u003e   \u003cli\u003eEach cyan circle represents a folder.\u003c/li\u003e   \u003cli\u003eLetters are folder names.\u003c/li\u003e   \u003cli\u003eBlack numbers are the number of files inside the corresponding folders.\u003c/li\u003e   \u003cli\u003eOrange numbers are the total number of files (files in the folder or subfolders) inside the corresponding folders.\u003c/li\u003e   \u003cli\u003eNode A is the root of version 0. We expect to have different roots; one root for each version. \u003cimg alt\u003d\" \" src\u003d\"/predownloaded/4d/f1/4df1a494c9820580cb6af2959f569cd808a4472e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eNow, the task is to add one file to folder D. Assume that we know the path A/B/C/D. We can recursively follow the path from the root till we reach folder D. Then, we can make a clone of folder D and modify only the total number of files (i.e. increment it by 1) and return this cloned node. After that, we have to backtrack and clone each node we visited on the path from the root and modify 2 things:\u003c/p\u003e \u003cul\u003e   \u003cli\u003emodify the total number of files (i.e. increment it by 1)\u003c/li\u003e   \u003cli\u003echange the link that we followed to go down so it will point to the returned cloned node.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eWhen we finish the main call of the recursive function, the returned value will be the root of the new version.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/80/48/8048f7a49c659cc2a6b379d2a89f0eed32848846.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eNote that when we traverse the project folder using a specific version root, we will only see folders that are relevant to this specific version. The implementation of the recursive function will be very similar to \u003ccode\u003ePersistentLinkedList\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eHow can we know the path A/B/C/D given only D? Since there is no creation for new folders. the parent folder of folder D will be folder C across all versions. So, we can make a \u003ccode\u003eTreemap\u0026lt;String, String\u0026gt;\u003c/code\u003e to map each folder name to its parent folder. Then we can use this map to get the path A/B/C/D and use it to traverse deterministically starting by the root of the current version. \u003c/p\u003e\u003c/div\u003e","tags":[]}}