{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1418774294,"rating":336,"authorHandle":"Endagorion","modificationTimeSeconds":1418914107,"id":15208,"title":"\u003cp\u003eCodeforces Round #283: editorial (with bonuses!)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eEach problem comes with a challenge — a bonus task somehow related to the problem; you may tackle at the challenges for fun and practice, also feel free to discuss them at the comments. \u003d)\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/496/problem/A\" title\u003d\"Codeforces Round 283 (Div. 2)\"\u003e496A - Minimum Difficulty\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFor every option of removing an element we run through the remaining elements and find the maximal difference between adjacent ones; print the smallest found answer. The solution has complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e. It can be noticed that after removing an element the difficulty either stays the same or becomes equal to the difference between the neighbours of the removed element (whatever is larger); thus, the difficulty for every option of removing an element can be found in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e, for the total complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. Any of these solutions (or even less efficient ones) could pass the tests.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: suppose we now have to remove exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e arbitrary elements (but the first and the last elements have to stay in their places). How small the maximal difference between adjacent elements can become? Solve this problem assuming the limitations are as follows: \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ek\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e - 2\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/496/problem/B\" title\u003d\"Codeforces Round 283 (Div. 2)\"\u003e496B - Secret Combination\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe observe that the order of operations is not important: we may first perform all the shifts, and after that all the additions. Note that after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e shifts the sequence returns to its original state, therefore it is sufficient to consider only the options with less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e shifts. Also, after 10 times of adding 1 to all digits the sequence does not change; we may consider only options with less than 10 additions. Thus, there are overall \u003cspan class\u003d\"tex-span\"\u003e10\u003ci\u003en\u003c/i\u003e\u003c/span\u003e reasonable options for performing the operations; for every option perform the operations and find the smallest answer among all the options. As performing the operations for every option and comparing two answers to choose the best takes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e operations, this solution performs about \u003cspan class\u003d\"tex-span\"\u003e10\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e elementary operations. The multiple of \u003cspan class\u003d\"tex-span\"\u003e10\u003c/span\u003e can be get rid of, if we note that after all shifts are made the best choice is to make the first digit equal to zero, and this leaves us but a single option for the number of additions. However, implementing this optimization is not necessary to get accepted.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: can you solve the problem in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time? in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e time?\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/496/problem/C\" title\u003d\"Codeforces Round 283 (Div. 2)\"\u003e496C - Removing Columns\u003c/a\u003e/\u003ca href\u003d\"/contest/497/problem/A\" title\u003d\"Codeforces Round 283 (Div. 1)\"\u003e497A - Removing Columns\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s look at the first column of the table. If its letters are not sorted alphabetically, then in any valid choice of removing some columns it has to be removed. However, if its letters are sorted, then for every valid choice that has this column removed it can be restored back to the table; it is clear that the new choice is valid (that is, the rows of the new table are sorted lexicographically) and the answer (that is, the number of removed columns) has just became smaller.\u003c/p\u003e\u003cp\u003eConsider all columns from left to right. We have already chosen which columns to remove among all the columns to the left of the current one; if leaving the current column in place breaks the lexicographical order of rows, then we have to remove it; otherwise, we may leave it in place to no harm. Arguing in the way of the previous paragraph we can prove that this greedy method yields an optimal (moreover, the only optimal) solution. The complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: compute how many (say, modulo \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e + 7\u003c/span\u003e) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003ci\u003em\u003c/i\u003e\u003c/span\u003e tables are there for which the answer for this problem is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e? The more efficient solution you come up with, the better.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/496/problem/D\" title\u003d\"Codeforces Round 283 (Div. 2)\"\u003e496D - Tennis Game\u003c/a\u003e/\u003ca href\u003d\"/contest/497/problem/B\" title\u003d\"Codeforces Round 283 (Div. 1)\"\u003e497B - Tennis Game\u003c/a\u003e\u003c/p\u003e\u003cp\u003eChoose some \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e; now emulate how the match will go, ensure that the record is valid for this \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and by the way find the corresponding value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. Print all valid options for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. This solution works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e time, which is not good enough, but we will try to optimize it.\u003c/p\u003e\u003cp\u003eSuppose the current set if finished and we have processed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e serves by now. Let us process the next set as follows: find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e-th \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e-th \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e after position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e-th \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e occurs earlier, then the first player wins the set, and the set concludes right after the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e-th \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e; the other case is handled symmetrically. If the match is not over yet, and in the rest of the record there are no \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e ones nor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e twos, then the record is clearly invalid. This way, every single set in the record can be processed in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time using binary search, or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e time using precomputed arrays of positions for each player.\u003c/p\u003e\u003cp\u003eNow observe that for any \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e a match of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e serves can not contain more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e / \u003ci\u003et\u003c/i\u003e\u003c/span\u003e sets, as each set contains at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e serves. If we sum up the upper limits for the number of sets for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, we obtain the total upper limit for the number of sets we may need to process: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/14/c8/14c893e6c2db09d223b683a74db168665ed83078.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (which is the famous harmonic sum). Using one of the approaches discussed above, one obtains a solution with complexity of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ca/4c/ca4c38da7d143fc87534d50aa6d551dd861caae9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e or \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e; each of these solutions fits the limit nicely.\u003c/p\u003e\u003cp\u003eObviously, for every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e there is no more than one valid choice for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e; however, maybe a bit unexpected, for a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e there may exist more than one valid choice of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. The first test where this takes place is pretest 12. The statement requires that the pairs are printed lexicographically ordered; it is possible to make a mistake here and print the pairs with equal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e by descending \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e (if we fill the array by increasing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e and then simply reverse the array).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: while preparing this problem I discovered that it\u0027s quite hard to find a test such that the number of pairs in the answer is large; in the actual tests the maximal number is 128, which is the number of divisors of the number 83160. Can you beat this record? If you have a test with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e that has larger number of pairs in the answer, feel free to brag in the comments; also don\u0027t hesitate to share any insights on how one could bound the maximal number analytically.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/496/problem/E\" title\u003d\"Codeforces Round 283 (Div. 2)\"\u003e496E - Distributing Parts \u003c/a\u003e/\u003ca href\u003d\"/contest/497/problem/C\" title\u003d\"Codeforces Round 283 (Div. 1)\"\u003e497C - Distributing Parts \u003c/a\u003e\u003c/p\u003e\u003cp\u003eSort all the parts and actors altogether by increasing lower bounds (if equal, actors precede parts); process all the enitities in this order. We maintain a set of actors which have already occured in the order; if we meet an entry for an actor, add it to the set. If we currently process a part, we have to assign it to an actor; from the current set of actors we have to choose one such that his \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≥ \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e constraint is provided by the fact that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th actor has occured earlier than the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th part); if there are no such actors in the set, no answer can be obtained; if there are several actors satisftying this requirement, we should choose one with minimal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (intuitively, he will be less useful in the future). Assign the chosen actor with the current part and decrement his \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e; if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is now zero, the actor can not be used anymore, thus we remove him from the set.\u003c/p\u003e\u003cp\u003eTo fit the limits we should implement the set of current actors as some efficient data structure (e.g., an std::set or a treap). The resulting complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/59/db/59dbbe467d688cdab0b98096be744d215fb632ec.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: suppose that now there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e copies of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th part (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e), and each copy must be separately assigned with an actor in a valid way. Can you solve this new problem with all the old constraints (as the actual distribution now has too much entries, it is sufficient to check whether an answer exists)?\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/497/problem/D\" title\u003d\"Codeforces Round 283 (Div. 1)\"\u003e497D - Gears\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWhen a collision happens, a vertex of one polygon lands on a side of the other polygon. Consider a reference system such that the polygon \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e is not moving. In this system the polygon \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e preserves its orientation (that is, does not rotate), and each of its vertices moves on some circle. Intersect all the circles for vertices of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e with all the sides of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e; if any of them intersect, then some vertex of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e collides with a side of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e. Symmetrically, take a reference system associated with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e and check whether some vertex of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e collides with a side of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. The constraints for the points\u0027 coordinates are small enough for a solution with absolute precision to be possible (using built-in integer types).\u003c/p\u003e\u003cp\u003eAnother approach (which is, in fact, basically the same) is such: suppose there is a collision in a reference system associated with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e. Then the following equality for vectors holds: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003ez\u003c/i\u003e\u003c/span\u003e; here \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e is a vector that starts at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e and ends somewhere on the bound of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is a vector that starts at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e and ends somewhere on the bound of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e is a vector that starts at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e and ends somewhere on the circle centered at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e that passes through \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e. Rewrite the equality as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003ez\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e; now observe that the set of all possible values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e forms the Minkowski sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and reflection of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e (up to some shift), and the set of all possible values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e is a circle with known parameters. The Minkowski sum can be represented as a union of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enm\u003c/i\u003e\u003c/span\u003e parallelograms, each of which is the Minkowski sum of a pair of sides of different polygons; finally, intersect all parallelograms with the circle.\u003c/p\u003e\u003cp\u003eBoth solutions have complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enm\u003c/i\u003e)\u003c/span\u003e. As noted above, it is possible to solve the problem using integer arithemetics (that is, with absolute precision); however, the fact that the points\u0027 coordinates are small lets most of the solutions with floating point arithmetics pass. It was tempting to write an approximate numerical solution; we struggled hard not to let such solutions pass, and eventually none of them did. \u003d)\u003c/p\u003e\u003cp\u003eMany participants had troubles with pretest 8. It looks as follows (the left spiral revolves around the left point, and the right spiral revolves around the right point):\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/3f/9b/3f9b08b959e8541c0b9147bb9c66317be8ae101d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: suppose we want a solution that uses floating point arithmetics to fail. In order to do that, we want to construct a test such that the polygons don\u0027t collide but pass really close to each other. How small a (positive) distance we can achieve, given the same constraints for the number of points and the points\u0027 coordinates?\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/497/problem/E\" title\u003d\"Codeforces Round 283 (Div. 1)\"\u003e497E - Subsequences Return\u003c/a\u003e\u003c/p\u003e\u003cp\u003eConsider some string; how does one count the number of its distinct subsequences? Let us append symbols to the string consequently and each time count the number of subsequences that were not present before. Let\u0027s append a symbol \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e to a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e; in the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e + \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e there are as many subsequences that end in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e as there were subsequences in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e overall. Add all these subsequences to the number of subsequnces of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e; now each subsequence is counted once, except for the subsequences that end in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e but were already present in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e before; these are counted twice. Thus, the total number of subsequences in the new string is twice the total number of subsequences in the old string minus the number of subsequences in the old string which end in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThis leads us to the following solution: for each symbol \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e store how many subsequences end in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, denote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Append symbol \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e; now \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e becomes equal to the sum of all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e\u0027s plus one (for the empty subsequence), and all the other \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e\u0027s do not change.\u003c/p\u003e\u003cp\u003eFor example, consider the first few symbols of the Thue-Morse sequence:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003eε\u003c/span\u003e — (0, 0)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e — ( \u003cstrong\u003e0 + 0 + 1 \u003d 1\u003c/strong\u003e, 0)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e01\u003c/span\u003e — (1, \u003cstrong\u003e1 + 0 + 1 \u003d 2\u003c/strong\u003e)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e011\u003c/span\u003e — (1, \u003cstrong\u003e1 + 2 + 1 \u003d 4\u003c/strong\u003e)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e0110\u003c/span\u003e — ( \u003cstrong\u003e1 + 4 + 1 \u003d 6\u003c/strong\u003e, 4)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e...\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eLet us put the values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e in the coordinates of a vector, and also append a coordinate which is always equal to 1. It is now clear that appending a symbol to the string alters the vector as a multiplication by some matrix. Let us assign a matrix for each symbol, and also for each string as a product of matrices for the symbols of the strings in that order.\u003c/p\u003e\u003cp\u003eNow, consider the prefix of the sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. Divide it into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e parts of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1\u003c/sup\u003e\u003c/span\u003e; \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e-th (\u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e-based) of these parts can be obtained from the \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e-th one by adding \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to all elements of the part. Let us count the matrices (see above) for the prefixes of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e, and also for all strings that are obtained by adding \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to all of the prefixes\u0027 elements; denote such matrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIt is easy to see that if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e \u0026gt; 0\u003c/span\u003e, then \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b8/31/b831a53c05a77484329e83dd763505efb7481313.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. This formula allows us to count \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for all \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5f/b5/5fb56aa5f120e78e13f4e37ceba55c512570c678.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e from 0 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/67/67/6767bc1256a799d52adf3d09a63161b9e68b9c2b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time. Now, upon having all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e we can multiply some of them in the right order to obtain the matrix for the prefix of the sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eUnfortunately, this is not quite enough as the solution doesn\u0027t fit the time limit yet. Here is one way to speed up sufficiently: note that the product in the formula \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b8/31/b831a53c05a77484329e83dd763505efb7481313.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e can be divided as shown: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e... \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1, \u003ci\u003ek\u003c/i\u003e - 1\u003c/sub\u003e × \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1, 0\u003c/sub\u003e... \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1, \u003ci\u003ex\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e (if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d 0\u003c/span\u003e, take the second part to be empty). Count all the \u0026quot;prefixes\u0026quot; and \u0026quot;suffixes\u0026quot; products of the set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, 0\u003c/sub\u003e... \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e... \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e. Now \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Thus, the computation of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e can be done as computing all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e matrix multiplications, and each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is now can be found using one matrix multiplication. Finally, the solution now works in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/70/7e/707ee579f681daa1cb73b269b0d75740af37cbc9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time, which fits the limits by a margin.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge\u003c/strong\u003e: solve the problem for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≤ 100\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}