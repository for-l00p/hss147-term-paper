{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1518886329,"rating":84,"authorHandle":"BledDest","modificationTimeSeconds":1518944278,"id":57840,"title":"\u003cp\u003eEducational Codeforces Round 38 — Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eA. Word Correction\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eHint: When does some vowel stay in string?\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eIterate over the string, output only consonants and vowels which don\u0027t have a vowel before them.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://pastebin.com/J0py2Gef\"\u003eModel solution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eB. Run For Your Prize\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eHint \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e: It\u0027s never profitable to go back. No prizes left where you have already gone.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHint 2\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eHint \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e: The optimal collecting order will be: some prefix of prizes to you and the other prizes to your friend (some suffix).\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eYou can find the total time with the knowledge of the prefix length. The final formula is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/36/9a/369a1cdd461999bf6f115f99e0e6946f2ef83c2d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://pastebin.com/mKhxYUxK\"\u003eModel solution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC. Constructing Tests\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eHint: At first we will solve the problem mentioned in the statement. The formula is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/91/01/91019e7613a8b66217f8bbd015bff73f41a053b0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Firstly, each submatrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e × \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e should have at least one row with zero in it. Exactly \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/22/c3/22c3a46b1bf8218a135a7cdc3e2867f958f1f3a5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e non-intersecting submatrices fit in matrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. The same with the columns. So you should have at least this amount squared zeros.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eNow that you know the formula, you can iterate over \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and find the correct value. The lowest non-zero value you can get for some \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is having \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 2\u003c/span\u003e. So you can estimate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e as about \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/06/29/06295b5afba074e3e1425e032c0b42d592e16dea.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eNow let\u0027s get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e for some fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/00/a4/00a4c39ac17aa7512d2bad171f05b070b4e1ea3d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9e/58/9e58594e343ae98e6885aaa282186965f4b9653b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1f/4f/1f4fb0016386d8cde898f501f3d6e3a2e37f11bf.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9e/58/9e58594e343ae98e6885aaa282186965f4b9653b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/30/15/301545a903ced599387dc50797a06a54f4fee742.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9e/58/9e58594e343ae98e6885aaa282186965f4b9653b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/63/85/638537dbcad676d8ba2f1051e76175f80a578346.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Due to rounding down, it\u0027s enough to check only this value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://pastebin.com/rfiC1Abp\"\u003eModel solution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eD. Buy a Ticket\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThe function of the path length is not that different from the usual one. You can multiply edge weights by two and run Dijkstra in the following manner. Set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for all \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e6/aa/e6aa139d54fafb298b2d569825276fb29bf98eb6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and push these values to heap. When finished, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e will be equal to the shortest path.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://pastebin.com/z11zpAWA\"\u003eModel solution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eE. Max History\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eHint \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e: Count the number of times each number appears in the sum of all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eHint \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e: Try to find a sufficient and necessary condition that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e appears in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of a permutation.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eMore hints\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eHint \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e: Prove that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e appears if and only if all elements appearing before it are strictly less than it (other than the largest element). And then try to solve the problem first in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow try to solve to simplify your solution with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eIt is easy to see that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th element appears in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e if and only if all elements appearing before it in the array are less than it, so if we define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as the number of elements less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e the answer will be equal to:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/41/fb/41fb18ba7b4dac701236416fe3d021873ab5d430.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eBy determining the index of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, if it is on the index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e then we have to choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e - 1\u003c/span\u003e of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e elements smaller than it and then permuting them and then permuting the other elements. We can find all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e with complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e \u003ci\u003elog\u003c/i\u003e \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. If we were to implement this, the complexity would equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow let\u0027s make our formula better. So let\u0027s open it like so:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/82/f4/82f4b18c99a3efa7e8e50bca2ada0a72ef313d0f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eand then it equals to:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2f/d4/2fd48d43db78d5666008acd18d2a1544227f3240.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eand now let\u0027s take out the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e!\u003c/span\u003e ,\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c3/f8/c3f8d61c1e1adf902df09ae54658ff015092b8ff.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003enow let\u0027s multiply the inside the first sigma by \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/78/99/7899425a70462c56de42aa5f73827d717667f257.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and the second sigma by \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1)!\u003c/span\u003e and it gets equal to:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7e/83/7e835e641e8653ebcc03b49043833abc0199378d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eand it is easy to see it equals to:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/00/ca/00cafb0f41c55b79bbf71e75bad879dc1843f236.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eand using the fact that\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8f/b1/8fb1f15b32583d9753da72819ba269c69ba5308f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eit will equal to:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/24/95/2495de76a01ab4e4a4b26a9acc04f867f6124507.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eSo the final answer will equal to:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c4/50/c4508b27a57e7991479cf75429503187362a17f6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eof which can be easily implemented in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e \u003ci\u003elog\u003c/i\u003e \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. Make sure to not add the answer for maximum number in the sequence.\u003c/p\u003e\u003cp\u003eThere is also another solution that you can read \u003ca href\u003d\"//codeforces.com/blog/entry/57783?#comment-414657\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://pastebin.com/892Hp9jP\"\u003eModel solution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eF. Erasing Substrings\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eLet\u0027s denote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d |\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eHint: There is a simple \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c3/d4/c3d45760fb77660f9decc24f2337ca8908f7e91b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003em\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e]\u003c/span\u003e — best answer if we considered first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e characters of the string and a mask of erased substrings. However, storing a string as a result of each state won\u0027t fit neither into time limit nor into memory limit. Can we make it faster?\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eLet\u0027s try to apply some greedy observations. Since each state represents a possible prefix of the resulting string, then among two states \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e][\u003ci\u003emask\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e][\u003ci\u003emask\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e]\u003c/span\u003e such that the lenghts of corresponding prefixes are equal, but the best answers for states are not equal, we don\u0027t have to consider the state with lexicographically greater answer. So actually for every length of prefix there exists only one best prefix we will get, and we may store a boolean in each state instead of a string. The boolean will denote if it is possible to get to corresponding state with minimum possible prefix.\u003c/p\u003e\u003cp\u003eTo calculate this, we iterate on the lengths of prefixes of the resulting string. When we fix the length of prefix, we firstly consider dynamic programming transitions that denote deleting a substring (since they don\u0027t add any character). Then among all states \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003em\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e]\u003c/span\u003e that allow us to reach some fixed length of prefix and have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003em\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e] \u003d \u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e we pick the best character we can use to proceed to next prefix (and for a fixed state that\u0027s actually \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003em\u003c/i\u003e + 1)\u003c/span\u003e-th character of the string).\u003c/p\u003e\u003cp\u003eThis is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/72/30/7230f4eaf59a69a03c16cd0bc0dada6b3daaf9c0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, but in fact it\u0027s pretty fast.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://pastebin.com/K5cHmbgs\"\u003eModel solution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eG. Shortest Path Queries\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eThis is a more complex version of problem G from Educational Round 27. You can find its editorial \u003ca href\u003d\"//codeforces.com/blog/entry/53986\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eTo solve the problem we consider now, you have to use a technique known as dynamic connectivity. Let\u0027s build a segment tree over queries: each vertex of the segment tree will contain a list of all edges existing in the graph on the corresponding segment of queries. If some edge exists from query \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e to query \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, then it\u0027s like an addition operation on segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e in segment tree (but instead of addition, we insert this edge into the list of edges on a segment, and we make no pushes). Then if we write some data structure that will allow to add an edge and rollback operations we applied to the structure, then we will be able to solve the problem by DFS on segment tree: when we enter a vertex, we add all edges in the list of this vertex; when we are in a leaf, we calculate the required answer for the corresponding moment of time; and when we leave a vertex, we rollback all changes we made there.\u003c/p\u003e\u003cp\u003eWhat data structure do we need? Firstly, we will have to use DSU maintaining the distance to the leader (to maintain the length of \u003cem\u003esome\u003c/em\u003e path between two vertices). Don\u0027t use path compression, this won\u0027t work well since we have to do rollbacks.\u003c/p\u003e\u003cp\u003eSecondly, we have to maintain the base of all cycles in the graph (since the graph is always connected, it doesn\u0027t matter that some cycles may be unreachable: by the time we get to leaves of the segment tree, these cycles will become reachable, so there\u0027s no need to store a separate base for each component). A convenient way to store the base is to make an array of \u003cspan class\u003d\"tex-span\"\u003e30\u003c/span\u003e elements, initially filled with zeroes (we denote this array as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e). \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th element of the array will denote some number in a base such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th bit is largest in the number. Adding some number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to this base is really easy: we iterate on bits from \u003cspan class\u003d\"tex-span\"\u003e29\u003c/span\u003e-th to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e-th, and if some bit \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] ≠ 0\u003c/span\u003e, then we just set \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/77/d5/77d586ca4bbb9d4203b0cf266fb6715726817585.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (let\u0027s call this process \u003cstrong\u003ereduction\u003c/strong\u003e, we will need it later). If we get \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e after doing these operations, then the number we tried to add won\u0027t affect the base, and we don\u0027t need to do anything; otherwise, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e be the highmost bit equal to \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, and then we set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e]:  \u003d \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThis method of handling the base of cycles also allows us to answer queries of type \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e easily: firstly, we pick the length of some path from DSU (let it be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e), and secondly, we just apply \u003cstrong\u003ereduction\u003c/strong\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, and this will be our answer.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://pastebin.com/C8v3YiEM\"\u003eModel solution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}