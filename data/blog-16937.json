{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1426277505,"rating":8,"authorHandle":"freepvps","modificationTimeSeconds":1426277563,"id":16937,"title":"\u003cp\u003e[C#] — testlib.cs\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eПредыстория\u003c/h2\u003e\u003cp\u003eНе так давно мне потребовалось запустить несколько контестов, да вот беда: пишу я преимущественно на C#, а каждый раз писать уйму кода для генератора тестов, чекера и валидатора под каждую задачу — идея так себе. \u003c/p\u003e\u003cp\u003eУ проблемы я видел два решения: писать все на C++ или писать свой testlib. Первый вариант я решил не использовать(хотя и знаю C++), так как не нравится мне идея перепрыгивать на другой язык ради всего-лишь одной библиотеки. Вообщем, было решено изобрести велосипед, но из другого материала. Написано все было за пару вечеров, но в итоге библиотека свою задачу выполняла, а мне этого на тот момент хватало за глаза.\u003c/p\u003e\u003cp\u003eЗатем хорошие люди меня поддержали меня и порекомендовали опубликовать этот проект на Codeforces.\u003c/p\u003e\u003ch2\u003eОписание библиотеки\u003c/h2\u003e\u003cp\u003eБиблиотеку можно разбить на три раздела:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eDelegates\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIO\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eTesting\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eDelegates\u003c/strong\u003e содержит в себе множество, вообщем-то, делегатов, используемых для всяких разных целей. Ничего примечательного в этом разделе нет, разве что можно выделить CompactReadDelegate\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epublic delegate CompactReadDelegate\u0026lt;T\u0026gt; CompactReadDelegate\u0026lt;T\u0026gt;(out T value);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eЭто универсальный делегат, добавленный ради эксперимента. Он используется в единственной функции\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epublic CompactReadDelegate\u0026lt;T\u0026gt; r\u0026lt;T\u0026gt;(out T value)\n{\n    // r(out a)(out b)(out c) - читаем данные в переменные одного типа a, b, c\n    value \u003d ReadData\u0026lt;T\u0026gt;();\n    return r;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eIO\u003c/strong\u003e — наверное наиболее интересный раздел, в располагаются классы Input и Output. Эти классы — надстройка над TextReader и TextWriter, позволяющая читать не только текст, но и любые другие данные, пропуская при этом белое пространство(white space — пробелы, переносы строк и прочие невидимые символы). Вообщем-то ради них все и затевалось.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTesting\u003c/strong\u003e — все, что связано с тестами и тестированием. Тут я хочу выделить такие классы, как TestChecker, TestGenerator и Checkers\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eTestChecker\u003c/em\u003e\u003c/strong\u003e — небольшая обертка над функцией-чекером-валидатором. Да-да, я решил не использовать валидатор отдельно от чекера, ведь можно просто в процессе проверки ответа перехватить исключение и вернуть PE в по завершению(хотя из-за этого возник небольшой костыль, который в будущем планирую исправить)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eTestGenerator\u003c/em\u003e\u003c/strong\u003e — принимает функцию-генератор тесты и функцию-решение. Затем генерирует тест по каким-то входным данным, генерирует на основе теста решение и записывает по заданному заранее паттерну в соответствующие файлы.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eCheckers\u003c/em\u003e\u003c/strong\u003e — шаблоны для сравнения пары данных какого-либо типа, а так же пары массивов данных какого-либо типа.\u003c/p\u003e\u003ch2\u003eПланы на будущее\u003c/h2\u003e\u003cp\u003eБольших планов пока нет, хочу лишь переписать TestGenerator и избавиться от концепции \u0026quot;одна программа — множество тестов\u0026quot;. Так же хочу услышать рекомендации и советы сообщества.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://github.com/FreePVPs/testlib\"\u003eGitHub\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["testlib","c#","csharp"]}}