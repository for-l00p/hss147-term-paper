{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1465379058,"rating":293,"authorHandle":"MikeMirzayanov","modificationTimeSeconds":1465395812,"id":45307,"title":"\u003cp\u003eInteractive Problems: Guide for Participants\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSometimes you can meet \u003cem\u003einteractive problems\u003c/em\u003e on programming contests (including Codeforces).\u003c/p\u003e\u003cp\u003eIn problems of this type, the input data given to your program may be not predetermined but is built specifically for your solution. Jury writes a special program — \u003cem\u003einteractor\u003c/em\u003e, such that its output is tranferred to the input of your solution, and the output of your program is sent to interactor’s input. In the other words, your solution and the interactor exchange the data and my decide what to print based on the \u0026quot;history of communication\u0026quot;.\u003c/p\u003e\u003cp\u003eWhen you write the solution for the interactive problem it is important to keep in mind that if you output some data it is possible that this data is first placed to some internal buffer and may be not directly transferred to the interactor. In order to avoid such situation you have to use special \u003ccode\u003eflush\u003c/code\u003e operation \u003cem\u003eeach time\u003c/em\u003e you output some data. There are these \u003ccode\u003eflush\u003c/code\u003e operations in standard libraries of almost all languages. For example, in C++ you may use \u003ccode\u003efflush(stdout)\u003c/code\u003e or \u003ccode\u003ecout \u0026lt;\u0026lt; flush\u003c/code\u003e (it depends on what do you use for output data — \u003ccode\u003escanf/printf\u003c/code\u003e or \u003ccode\u003ecout\u003c/code\u003e). In Java you can use method \u003ccode\u003eflush\u003c/code\u003e for output stream, for example, \u003ccode\u003eSystem.out.flush()\u003c/code\u003e. In Python you can use \u003ccode\u003estdout.flush()\u003c/code\u003e. In Pascal you can use \u003ccode\u003eflush(output)\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eThere are some features for interactive problems:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eInput/output in interactive problems works much slower than in usual problems — try to use scanf/printf instead of cin/cout in С++, BufferedReader/PrintWriter in Java and etc.\u003c/li\u003e   \u003cli\u003eUsually, manual testing of the solutions for interactive problems much more difficult, because the participant needed to be in the role of interactor during testing.\u003c/li\u003e   \u003cli\u003eThe \u0026quot;Custom invocation\u0026quot; tab does not know about the interactor for the problem, so you can\u0027t fully testing your solution.\u003c/li\u003e   \u003cli\u003eSometimes on the Codeforces Rounds interactive problems will use. In this case the fromat of tests for hacks will described in the statements of the problems.\u003c/li\u003e   \u003cli\u003eOutput endl in cout in C++ performs flush operation automatically.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eLet\u0027s consider the following interactive problem. You can try to solve it here \u003ca href\u003d\"//codeforces.com/gym/101021/problem/A\"\u003ehttp://codeforces.com/gym/101021/problem/A\u003c/a\u003e\u003c/p\u003e\u003ch2\u003eProblem\u003c/h2\u003e\u003cp\u003eGuess the number\u003c/p\u003e\u003ch5\u003eStatement\u003c/h5\u003e\u003cp\u003eIn this problem there is some hidden number and you have to interactively guess it. The hidden number is always an integer from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and to \u003cspan class\u003d\"tex-span\"\u003e1 000 000\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eYou can make queries to the testing system. Each query is one integer from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e1 000 000\u003c/span\u003e. Flush output stream after printing each query. There are two different responses testing program can provide:\u003c/p\u003e \u003cul\u003e   \u003cli\u003estring \u003ccode\u003e\u0026lt;\u003c/code\u003e (without quotes), if the hidden number is less than the integer in your query;\u003c/li\u003e   \u003cli\u003estring \u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e (without quotes), if the hidden number is greater than or equal to the integer in your query.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eWhen your program wants to guess the hidden number, print string \u003ccode\u003e! x\u003c/code\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is the answer, and \u003cstrong\u003eterminate your program\u003c/strong\u003e immediately after flushing the output stream.\u003c/p\u003e\u003cp\u003eYour program is allowed to make no more than \u003cspan class\u003d\"tex-span\"\u003e25\u003c/span\u003e queries (not including printing the answer) to the testing system.\u003c/p\u003e\u003ch5\u003eInput\u003c/h5\u003e\u003cp\u003eUse standard input to read the responses to the queries.\u003c/p\u003e\u003cp\u003eThe input will contain responses to your queries — strings \u003ccode\u003e\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e. The \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th string is a response to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th your query. When your program will guess the number print \u003ccode\u003e! x\u003c/code\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is the answer and terminate your program.\u003c/p\u003e\u003cp\u003eThe testing system will allow you to read the response on the query only after your program print the query for the system and perform \u003ccode\u003eflush\u003c/code\u003e operation.\u003c/p\u003e\u003ch5\u003eOutput\u003c/h5\u003e\u003cp\u003eTo make the queries your program must use standard output.\u003c/p\u003e\u003cp\u003eYour program must print the queries — integer numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e), one query per line. After printing each line your program must perform operation \u003ccode\u003eflush\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eEach of the values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e mean the query to the testing system. The response to the query will be given in the input file after you flush output. In case your program guessed the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, print string \u003ccode\u003e! x\u003c/code\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e — is the answer, and terminate your program.\u003c/p\u003e\u003ch2\u003eSolution\u003c/h2\u003e\u003cp\u003eOf course, this problem can be solved using binary search. Here is an example of the C++ solution:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;cstdio\u0026gt;\n#include \u0026lt;cstring\u0026gt;\n\nusing namespace std;\n\nint main() {\n    int l \u003d 1, r \u003d 1000000;\n    while (l !\u003d r) {\n        int mid \u003d (l + r + 1) / 2;\n        printf(\u0026quot;%d\\n\u0026quot;, mid);\n        fflush(stdout);\n\n        char response[3];\n        scanf(\u0026quot;%s\u0026quot;, response);\n        if (strcmp(response, \u0026quot;\u0026lt;\u0026quot;) \u003d\u003d 0)\n            r \u003d mid - 1;\n        else\n            l \u003d mid;\n    }\n\n    printf(\u0026quot;! %d\\n\u0026quot;, l);\n    fflush(stdout);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe wish you accepted solutions. Once again, you can solve simple interactive problem here \u003ca href\u003d\"//codeforces.com/gym/101021/problem/A\"\u003ehttp://codeforces.com/gym/101021/problem/A\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["interactive"]}}