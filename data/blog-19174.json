{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1436648006,"rating":28,"authorHandle":"Semarapura","modificationTimeSeconds":1436659373,"id":19174,"title":"\u003cp\u003eIs this maxflow problem? [Let\u0027s discuss interesting hard(?) problem]\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello great codeforces community, I was trying to solve \u003ca href\u003d\"http://codechillout.sphere-contest.com/problems/onlineround/LADYBUGS\"\u003ethis problem\u003c/a\u003e, the core problem is simple: Given n lines, find maximum number line segments such that no two line segments intersect.\u003c/p\u003e\u003cp\u003eFormally: Given set A containing n line segments from point (Xs[i],0) to point (Xf[i],Yf[i]) inclusive for each integer (1 ≤ i ≤ n), with satisfy this condition: (1 ≤ n ≤ 200, -40000 ≤ Xs[i], Xf[i] ≤ 40000, 0 ≤ Yf[i] ≤ 40000; all n,Xs[i],Xf[i],Yf[i] are integers), let set B containing all subset of set A such that no pair of line segments in that set intersect. The problem is to find an element from set B with maximum length.\u003c/p\u003e \u003chr /\u003e\u003cp\u003eOne valid example:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/0e/c5/0ec54a088449ddc8e2342d176be5efa18741b1d7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003ein the picture above there are 12 line segments: A\u003d{AB,BC,CD,EF,GH,IJ,KL,MN,OP,QR,ST,UV}\u003c/p\u003e\u003cp\u003eOne of the solution (maximum subset of set A such that no two line segments intersect):\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/4d/a8/4da851ab8059bfc489aa9b0a017dafc42d74cdb1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eHere is informal explanation about the solution above:\u003c/p\u003e\u003cp\u003eBecause AB intersect with BC \u0026quot;at point (1,2)\u0026quot;, and BC intersect with CD \u0026quot;at point (2,0)\u0026quot; so if we select segment BC we can\u0027t select segment AB and CD, but if we select AB we can selecy CD, so the optimal one is not to select BC.\u003c/p\u003e\u003cp\u003eBecause EF intersect with GH \u0026quot;at point (3.5,1)\u0026quot;, so we must choose one of them, in this case I select GH (it\u0027s correct too if we select EF instead, so the solution isn\u0027t unique, but the size of solution must be unique).\u003c/p\u003e\u003cp\u003eBecause IJ not intersect with any other line so obviously we must select it.\u003c/p\u003e\u003cp\u003eFor group {KL,MN,UV} is similar to group {AB,BC,CD}, the optimal one is not to select MN.\u003c/p\u003e\u003cp\u003eFor group {OP,QR,ST} because all segment intersect each other we can only choose one of them.\u003c/p\u003e\u003cp\u003eso the maximum size of subset from set A with no two intersecting segments is 7.\u003c/p\u003e \u003chr /\u003e\u003cp\u003eAfter I read this problem, I think it\u0027s maxflow problem, so I model the graph with rule like this:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eadd edge from \u0026quot;source\u0026quot; to vertex (Xs[i],0) for each (1 ≤ i ≤ n) with capacity\u003d1\u003c/li\u003e   \u003cli\u003eadd edge from vertex (Xf[i],Yf[i]) to \u0026quot;snk\u0026quot; for each (1 ≤ i ≤ n) with capacity\u003d1\u003c/li\u003e   \u003cli\u003efor each intersection: make new vertex, add capacity of that vertex with capacity\u003d1 (I\u0027ll not explain how to add capacity to vertex here, it\u0027s a bit complicated, of course you can google it :) )\u003c/li\u003e   \u003cli\u003efor each segment when traveling from (Xs[i],0) to (Xf[i],Yf[i]) if found some intersection vertex:\u003c/li\u003e   \u003cli\u003e   \u003cul\u003e     \u003cli\u003eif there is no previous intersection vertex add edge from vertex (Xs[i],0) to this intersection vertex with capacity\u003d1\u003c/li\u003e   \u003c/ul\u003e\u003c/li\u003e   \u003cli\u003e   \u003cul\u003e     \u003cli\u003eelse add edge from previous intersection vertex to this intersection vertex with capacity\u003d1\u003c/li\u003e   \u003c/ul\u003e\u003c/li\u003e   \u003cli\u003e   \u003cul\u003e     \u003cli\u003efinally add edge from previous intersection vertex (or vertex (Xs[i],0) if there is no previous intersection vertex) to vertex (Xf[i],Yf[i]) with capacity\u003d1\u003c/li\u003e   \u003c/ul\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eAfter implementing it, I submit my solution but surprisingly it only pass sample case (1 of 10 given case)\u003c/p\u003e\u003cp\u003eAfter long time debugging (at first I think the problem is with my maxflow implementation), finally build some random case (the example case given here), and here is the result of my maxflow:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/5a/fb/5afbd7b8310436684fadf8abc0728cd59cf80ded.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003efffffffuuuuuuu!! The maxflow is 8 instead of 7 (the correct answer).\u003c/p\u003e\u003cp\u003eI\u0027m very surprised, I should re-design the graph modeling rule, but I have no idea how to handle this troll case.\u003c/p\u003e\u003cp\u003eFinally I give up with maxflow, and change strategy to backtracking (of course it\u0027s very slow) and it just AC on 2 of 10 given case, after heavy pruning it just AC on 4 of 10 given case, after time cut (if close to the time limit, stop process and return best so far) it AC on 6 of 10 given case, and finally add some greedy on backtracking part it AC on 7 of 10 given case.\u003c/p\u003e\u003cp\u003eI wonder how to get full score. Is maxflow possible for this problem?\u003c/p\u003e\u003cp\u003eI\u0027m very curious, hope someone can give me a hand :)\u003c/p\u003e\u003c/div\u003e","tags":["maxflow","geometry","backtracking","greedy"]}}