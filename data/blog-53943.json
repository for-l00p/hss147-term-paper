{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1503085027,"rating":66,"authorHandle":"Z38","modificationTimeSeconds":1503518422,"id":53943,"title":"\u003cp\u003eCodeforces Round #429 [Editorial]\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eGenerous Kefa — Adiv2\u003c/strong\u003e \u003cbr /\u003e \u003cstrong\u003e(Authors: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Fedosik\" title\u003d\"Candidate Master Fedosik\"\u003eFedosik\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ZZzzZZzzzZzzzZZzz38\" title\u003d\"Candidate Master ZZzzZZzzzZzzzZZzz38\"\u003eZZzzZZzzzZzzzZZzz38\u003c/a\u003e)\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e Consider each balloon color separately. For some color \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, we can only assign all balloons of this color to Kefa\u0027s friends if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Because otherwise, by pigeonhole principle, at least one of the friends will end up with at least two balloons of the same color. \u003cbr /\u003e This leads us to a fairly simple solution: calculate number of occurrences for each color, like, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. \u003cbr /\u003e Then just check that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e for each possible \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e \u003cstrong\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e + \u003ci\u003eK\u003c/i\u003e)\u003c/span\u003e\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eGodsend — Bdiv2\u003c/strong\u003e \u003cbr /\u003e \u003cstrong\u003e(Author: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Fedosik\" title\u003d\"Candidate Master Fedosik\"\u003eFedosik\u003c/a\u003e)\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e First player wins if there is at least one odd number in the array. Let\u0027s prove this. \u003cbr /\u003e Let\u0027s denote total count of odd numbers at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e There are two cases to consider: \u003cbr /\u003e 1) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e is odd. First player takes whole array and wins. \u003cbr /\u003e 2) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e is even. Suppose that position of the rightmost odd number is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e. Then the strategy for the first player is as follows: in his first move, pick subarray \u003cspan class\u003d\"tex-span\"\u003e[1;\u003ci\u003epos\u003c/i\u003e - 1]\u003c/span\u003e. The remaining suffix of the array will have exactly one odd number that second player won\u0027t be able to include in his subarray. So, regardless of his move, first player will take the remaining numbers and win. \u003cbr /\u003e \u003cstrong\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e\u003c/strong\u003e \u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLeha and function — Adiv1\u003c/strong\u003e \u003cbr /\u003e \u003cstrong\u003e(Author: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Fedosik\" title\u003d\"Candidate Master Fedosik\"\u003eFedosik\u003c/a\u003e)\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e First of all, let\u0027s understand what is the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e, \u003ci\u003eK\u003c/i\u003e)\u003c/span\u003e. \u003cbr /\u003e For any subset of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e, say, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e...\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, we can represent it as a sequence of numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e...\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eK\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e, so that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, ..., \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/18/da/18da6377769b1b4e302e9fdc5d13665bd9f6af8e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003cbr /\u003e We\u0027re interested in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e[\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e]\u003c/span\u003e, expected value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e. Knowing some basic facts about expected values, we can derive the following: \u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e[\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + ... + \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eK\u003c/i\u003e + 1\u003c/sub\u003e] \u003d \u003ci\u003eN\u003c/i\u003e + 1\u003c/span\u003e \u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e[\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e] + ... + \u003ci\u003eE\u003c/i\u003e[\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eK\u003c/i\u003e + 1\u003c/sub\u003e] \u003d (\u003ci\u003eK\u003c/i\u003e + 1)·\u003ci\u003eE\u003c/i\u003e[\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e]\u003c/span\u003e \u003cbr /\u003e And we immediately get that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/07/1d/071de40ccbf08664276754442c5bf3fb27b7c663.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003cbr /\u003e We could also get the formula by using the Hockey Stick Identity, as \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Benq\" title\u003d\"Grandmaster Benq\"\u003eBenq\u003c/a\u003e stated in his comment. \u003cbr /\u003e Now, according to rearrangement inequality, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3a/f6/3af649a231381c0ff86a509533ae2bdb40c3eb70.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is maximized when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e is increasing and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e is decreasing. \u003cbr /\u003e \u003cstrong\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eNlogN\u003c/i\u003e)\u003c/span\u003e\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLeha and another game about graph — Bdiv1\u003c/strong\u003e \u003cbr /\u003e \u003cstrong\u003e(Authors: \u003ca class\u003d\"rated-user user-black\" href\u003d\"/profile/progmatic\" title\u003d\"Unrated, progmatic\"\u003eprogmatic\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ZZzzZZzzzZzzzZZzz38\" title\u003d\"Candidate Master ZZzzZZzzzZzzzZZzz38\"\u003eZZzzZZzzzZzzzZZzz38\u003c/a\u003e)\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e Model solution uses the fact that the graph is connected. \u003cbr /\u003e We\u0027ll prove that \u0026quot;good\u0026quot; subset exists iff \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e values among \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can be changed to \u003cspan class\u003d\"tex-span\"\u003e0 / 1\u003c/span\u003e so that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/40/6f/406f4172da66b9b6d094d5841aeaa042e5e47035.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is even. If the sum can only be odd, there is no solution obviously (every single valid graph has even sum of degrees). Now we\u0027ll show how to build the answer for any case with even sum. \u003cbr /\u003e First of all, change all \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e values so that the sum becomes even. \u003cbr /\u003e Then let\u0027s find any spanning tree and denote any vertex as the root. The problem is actually much easier now. \u003cbr /\u003e Let\u0027s process vertices one by one, by depth: from leaves to root. Let\u0027s denote current vertex as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e There are two cases: \u003cbr /\u003e 1) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e \u003cbr /\u003e In this case we ignore the edge from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eparent\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and forget about \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e. Sum remains even. \u003cbr /\u003e 2) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/sub\u003e \u003d 1\u003c/span\u003e \u003cbr /\u003e In this case we add the edge from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eparent\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to the answer, change \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eparent\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e to the opposite value and forget about \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e. As you can see, sum changed its parity when we changed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eparent\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e, but then it changed back when we discarded \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e. So, again, sum remains even. \u003cbr /\u003e Using this simple manipulations we come up with final answer. \u003cbr /\u003e \u003cstrong\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e + \u003ci\u003eM\u003c/i\u003e)\u003c/span\u003e\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eOn the bench — Cdiv1\u003c/strong\u003e \u003cbr /\u003e \u003cstrong\u003e(Authors: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Fedosik\" title\u003d\"Candidate Master Fedosik\"\u003eFedosik\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ZZzzZZzzzZzzzZZzz38\" title\u003d\"Candidate Master ZZzzZZzzzZzzzZZzz38\"\u003eZZzzZZzzzZzzzZZzz38\u003c/a\u003e)\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e Let\u0027s divide all numbers into groups. Scan all numbers from left to right. Suppose that current position is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egroup\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is not calculated yet, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e forms a new group. Assign unique number to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egroup\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Then for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u0026gt; \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]·\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e is a perfect square, make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egroup\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egroup\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Now we can use dynamic programming to calculate the answer. \u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e will denote the number of ways to place first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e groups having \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e \u0026quot;bad\u0026quot; pairs of neighbors. \u003cbr /\u003e Suppose we want to make a transition from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e. Let\u0027s denote size of group \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esize\u003c/i\u003e\u003c/span\u003e, and total count of numbers placed before as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etotal\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e We will iterate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003esize\u003c/i\u003e, \u003ci\u003etotal\u003c/i\u003e + 1)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e, \u003ci\u003eS\u003c/i\u003e)\u003c/span\u003e. \u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e is the number of subsegments we will break the next group in, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e is the number of currently existing \u0026quot;bad\u0026quot; pairs we will eliminate. \u003cbr /\u003e This transition will add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ej\u003c/i\u003e - \u003ci\u003eD\u003c/i\u003e + \u003ci\u003esize\u003c/i\u003e - \u003ci\u003eS\u003c/i\u003e)\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e \u0026quot;pairs\u0026quot; eliminated, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esize\u003c/i\u003e - \u003ci\u003eS\u003c/i\u003e\u003c/span\u003e new pairs appeared after placing new group). \u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e is the number of ways to place the new group according to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e values. \u003cbr /\u003e Actually it\u0027s \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7d/93/7d93cfa953efe95753b900b4e3507cb4fb77087b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Why? Because there are \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/96/68/9668a87d93acf2bd9579c2a285677eb2922c428c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ways to break group of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esize\u003c/i\u003e\u003c/span\u003e into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e subsegments. \u003cbr /\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/15/c1/15c1cfacc9e3e79b17aec6a28db2a76b003a1757.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ways to select those \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e \u0026quot;bad\u0026quot; pairs out of existing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e we will eliminate. \u003cbr /\u003e And \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9f/db/9fdb66a445adc232ea5f813567e3f57f6efc1a54.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ways to choose placements for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e - \u003ci\u003eD\u003c/i\u003e\u003c/span\u003e subsegment (other \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e are breaking some pairs so their positions are predefined). \u003cbr /\u003e After all calculations, the answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003eg\u003c/i\u003e, 0)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e is the total number of groups. \u003cbr /\u003e \u003cstrong\u003eComplexity: O(N^3)\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eDestiny — Ddiv1\u003c/strong\u003e \u003cbr /\u003e \u003cstrong\u003e(Authors: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Fedosik\" title\u003d\"Candidate Master Fedosik\"\u003eFedosik\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ZZzzZZzzzZzzzZZzz38\" title\u003d\"Candidate Master ZZzzZZzzzZzzzZZzz38\"\u003eZZzzZZzzzZzzzZZzz38\u003c/a\u003e)\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e We will use classical divide and conquer approach to answer each query. \u003cbr /\u003e Suppose current query is at subsegment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eL\u003c/i\u003e;\u003ci\u003eR\u003c/i\u003e]\u003c/span\u003e. Divide the original array into two parts: \u003cspan class\u003d\"tex-span\"\u003e[1;\u003ci\u003emid\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003emid\u003c/i\u003e + 1;\u003ci\u003eN\u003c/i\u003e]\u003c/span\u003e, where \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/13/7d/137d39b66d908832e8217ddfd0ded389580cbcc0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. If our whole query belongs to the first or the second part only, discard the other part and repeat the process of division. Otherwise, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e ≤ \u003ci\u003emid\u003c/i\u003e ≤ \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e. We claim that if we form a set of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e most frequent values on \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eL\u003c/i\u003e;\u003ci\u003emid\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e most frequent values on \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003emid\u003c/i\u003e + 1;\u003ci\u003eR\u003c/i\u003e]\u003c/span\u003e, one of the values from this set will be the answer, or there is no suitable value. \u003cbr /\u003e \u003cbr /\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e most frequent values thing can be precalculated. Run recursive function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebuild\u003c/i\u003e(\u003ci\u003enode\u003c/i\u003e, \u003ci\u003eL\u003c/i\u003e, \u003ci\u003eR\u003c/i\u003e)\u003c/span\u003e. First, like in a segment tree, we\u0027ll run this function from left and right son of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enode\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e Then we need \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e most frequent values to be precalculated for all subsegments \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eL\u003c/i\u003e1;\u003ci\u003eR\u003c/i\u003e1]\u003c/span\u003e, such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e ≤ \u003ci\u003eL\u003c/i\u003e1 ≤ \u003ci\u003eR\u003c/i\u003e1 ≤ \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e and at least one of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e1\u003c/span\u003e is equal to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/61/21/6121a117f9df2a8b2f86cb299bf127803f24f409.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eWe will consider segments such that their left border is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emid\u003c/i\u003e\u003c/span\u003e in the following order: \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003emid\u003c/i\u003e;\u003ci\u003emid\u003c/i\u003e], [\u003ci\u003emid\u003c/i\u003e;\u003ci\u003emid\u003c/i\u003e + 1], ...[\u003ci\u003emid\u003c/i\u003e;\u003ci\u003eR\u003c/i\u003e]\u003c/span\u003e. If we already have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e most frequent values and their counts for \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003emid\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, it\u0027s rather easy to calculate them for \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003emid\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e + 1]\u003c/span\u003e. We update the count of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e and see if anything should be updated for the new list of most frequent values. \u003cbr /\u003e \u003cbr /\u003e Exactly the same process happens to the left side of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emid\u003c/i\u003e\u003c/span\u003e: we are working with the subsegments in order \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003emid\u003c/i\u003e;\u003ci\u003emid\u003c/i\u003e], [\u003ci\u003emid\u003c/i\u003e - 1;\u003ci\u003emid\u003c/i\u003e], ..., [\u003ci\u003eL\u003c/i\u003e;\u003ci\u003emid\u003c/i\u003e]\u003c/span\u003e. \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eNow, having all this data precalculated, we can easily run divide and conquer and get the candidates for being the solution at any \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eL\u003c/i\u003e;\u003ci\u003eR\u003c/i\u003e]\u003c/span\u003e segment. Checking a candidate is not a problem as well: we can save all occurrences in the array for each number and then, using binary search, easily answer the following questions: \u0026quot;How many times \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e appears from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e?\u0026quot;. \u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(KNlogN)\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eIn a trap — Ediv1\u003c/strong\u003e \u003cbr /\u003e \u003cstrong\u003e(Author: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Fedosik\" title\u003d\"Candidate Master Fedosik\"\u003eFedosik\u003c/a\u003e)\u003c/strong\u003e \u003cbr /\u003e \u003cbr /\u003e The path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e can be divided into blocks of \u003cspan class\u003d\"tex-span\"\u003e256\u003c/span\u003e nodes and (possibly) a single block with less than \u003cspan class\u003d\"tex-span\"\u003e256\u003c/span\u003e nodes. We can consider this last block separately, by iterating all of its nodes. \u003cbr /\u003e Now we need to deal with the blocks with length exactly \u003cspan class\u003d\"tex-span\"\u003e256\u003c/span\u003e. They are determined by two numbers: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e — last node in the block, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e — \u003cspan class\u003d\"tex-span\"\u003e8\u003c/span\u003e highest bits. We can precalculate this values and then use them to answer the queries. \u003cbr /\u003e Let\u0027s now talk about precalculating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eanswer\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ed\u003c/i\u003e)\u003c/span\u003e. Let\u0027s fix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e255\u003c/span\u003e nodes after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. It\u0027s easy to notice that lowest \u003cspan class\u003d\"tex-span\"\u003e8\u003c/span\u003e bits will always be as following: \u003cspan class\u003d\"tex-span\"\u003e0, 1, ..., 255\u003c/span\u003e. We can xor this values: \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003enext\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e and so on, and store the results in a trie. Now we can iterate all possible values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e (from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e255\u003c/span\u003e) and the only thing left is to find a number stored in a trie, say \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e, such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e xor \u003cspan class\u003d\"tex-span\"\u003e255·\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e is maximized. \u003cbr /\u003e \u003cbr /\u003e \u003cstrong\u003eComplexity: O(NsqrtNlogN)\u003c/strong\u003e \u003c/p\u003e\u003c/div\u003e","tags":[]}}