{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1517075870,"rating":11,"authorHandle":"supernova.","modificationTimeSeconds":1517075870,"id":57375,"title":"\u003cp\u003eNeural Networks and Polynomial Interpolation\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello everyone!\u003c/p\u003e\u003cp\u003eI know this topic is a little bit far from usual competitive programming, but I was wondering if anyone here could help me in understanding this little concept.\u003c/p\u003e\u003cp\u003eI\u0027ve been into machine learning lately, and I was wondering about the difference between a \u0026quot;Learning Function\u0026quot; and \u0026quot;Polynomial Interpolation\u0026quot;. Consider a dataset where we have a set of points \u003ccode\u003e(x0, x1, ..., xn)\u003c/code\u003e and their corresponding images \u003ccode\u003e(y0, y1, ..., yn)\u003c/code\u003e. Now if we want to have a neural network that learns the function \u003ccode\u003ef(x) \u003d y\u003c/code\u003e, isn\u0027t that the same as constructing an interpolating polynomial that fits the points? Or is there a hidden difference between the two concepts?\u003c/p\u003e\u003c/div\u003e","tags":["machine learning","polynomial interpolation","neural networks"]}}