{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1431547400,"rating":11,"authorHandle":"hippie","modificationTimeSeconds":1431547400,"id":17873,"title":"\u003cp\u003eMatrix Exponentiation for TWO-Dimensional Dynamic Programming\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThe only resource available on the internet regarding the application of matrix exponentiation to \u003cstrong\u003eTWO-DIMENSIONAL\u003c/strong\u003e dynamic programming problems is this :- \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://threads-iiith.quora.com/Solving-Dynamic-Programming-with-Matrix-Exponentiation\"\u003ehttp://threads-iiith.quora.com/Solving-Dynamic-Programming-with-Matrix-Exponentiation\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThough the author has covered the topic with nice examples, I have some doubts:-\u003c/p\u003e\u003cp\u003e1) Unlike solving linear recurrences (using matrix exponentiation), I cannot find any solid mathematics behind the steps (or how does it work mathematically) involved in this technique.\u003c/p\u003e\u003cp\u003e2) How are the base-states taken into account in this technique? After building the adjacency-matrix (as is explained in the quora-article), and exponentiating it, what all values do we have to sum up to get the final answer?\u003c/p\u003e\u003cp\u003eI am pretty vague about all these details so any help will be much appreciated.\u003c/p\u003e\u003c/div\u003e","tags":["dynamic programming","matrix exponentiation","recurrence"]}}