{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1525968467,"rating":59,"authorHandle":"sam721","modificationTimeSeconds":1526004523,"id":59386,"title":"\u003cp\u003eInteresting problem involving convolutions\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eThe objective of this post is NOT understanding FFT or Karatsuba, or any algorithm that performs fast convolutions, it\u0027s about understanding one of its uses\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eHi Codeforces community! I wanted to write this blog entry to help coders who would like to see a nice example of convolutions used in a problem which, at first sight, has little to no relation with polynomial multiplication (of course it has, it\u0027s a convolution after all)\u003c/p\u003e\u003cp\u003eThe problem is as follows: You are given two strings \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e, with lengths \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e respectively, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eFor each substring \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e, we have to find the one that maximizes the number of positions with the same character, i. e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003eP\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e\u003c/p\u003e\u003cp\u003eFor the sake of simplicity, let us assume that our strings consists only of letters \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. For example, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e \u003d \u003ci\u003ebaabab\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e \u003d \u003ci\u003ebba\u003c/i\u003e\u003c/span\u003e, let\u0027s calculate the \u0026quot;similarity\u0026quot; between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e and each substring of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e of length 3.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e(\u003ci\u003ebaa\u003c/i\u003e, \u003ci\u003ebba\u003c/i\u003e) \u003d 2\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e(\u003ci\u003eaab\u003c/i\u003e, \u003ci\u003ebba\u003c/i\u003e) \u003d 0\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e(\u003ci\u003eaba\u003c/i\u003e, \u003ci\u003ebba\u003c/i\u003e) \u003d 2\u003c/span\u003e \u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e(\u003ci\u003ebab\u003c/i\u003e, \u003ci\u003ebba\u003c/i\u003e) \u003d 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003eWe can see that there are two substrings which maximize the similarity (any answer will be fine)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eA naive approach has a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e·\u003ci\u003em\u003c/i\u003e)\u003c/span\u003e time complexity and uses \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e memory\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThis should be OK if \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e ≤ 1000\u003c/span\u003e. What about \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e? We have to find a faster way to apply \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/46/7d/467d217567cfe122dfdd6a4f65646c071c138fcd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for every substring \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eFirst, let\u0027s try to change the formula above with a more mathematical approach. If we map each character {a,b}\u003d{0,1}, we can apply the next formula:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/39/87/398764fe1e4951e62bf5d924fddd35532c560d8e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. This will give us the number of \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e\u0027s (originally, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e\u0027s) that match.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e be the complement of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e (0 becomes 1, and viceversa). To compute the number of \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e\u0027s that match, we apply \u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6f/8d/6f8df31982519afa1ab6a80141e17c294d814033.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNow what? This doesn\u0027t improve the complexity at all\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s remember how the convolution \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e of two discrete functions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e is defined:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cd/81/cd81bdbd1212d6d9be864b106012cb712a9ce77f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNow we\u0027re talking! This looks pretty similar to the formulas previously explained.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eNext we will try to change our formulas to a simple convolution. First we will say that our array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e are two functions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e whose domain is \u003cspan class\u003d\"tex-span\"\u003e[0, \u003ci\u003en\u003c/i\u003e - 1]\u003c/span\u003e and range is {0,1}.\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b1/e6/b1e69d6c911bde6dcfdf733d2cf86a9b7bd7a9e3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBut the formula is incorrect, this convolution, for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e applies the similarity formula, but reversing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e!\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThis is our first issue, which we can easily solve by reversing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e ourselves. Let\u0027s call \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e the reversed version of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e. We can see that\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/82/79/827915083c142f6c4f195bbc41f056c58e87ef56.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is equivalent to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/13/be/13be328c0768a0f701ce0afc2a0e85090e508b6f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eOur second issue is, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. We can easily solve this issue (again) by adding some trailing zerores to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, which is equivalent to add leading zeroes to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e until \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBut, what is f(x) exactly, and how can this help us to improve the time complexity?\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eWe saw that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/13/be/13be328c0768a0f701ce0afc2a0e85090e508b6f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, which is the same as taking a preffix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e and \u003cstrong\u003e(this is the tricky part)\u003c/strong\u003e a suffix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e, each of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003eIf we take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003em\u003c/i\u003e - 1\u003c/span\u003e, we can see that this applies the similarity function to the whole pattern \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e and the first substring of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e which starts at \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. If we take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u0026gt; \u003ci\u003em\u003c/i\u003e - 1\u003c/span\u003e then we apply the function to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e and the \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e + 1) - \u003ci\u003eth\u003c/i\u003e\u003c/span\u003e substring of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e. And if we take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u0026lt; \u003ci\u003em\u003c/i\u003e - 1\u003c/span\u003e we apply the function to a substring which goes out of the bounds of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s check our example \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e \u003d \u003ci\u003ebaabab\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e \u003d \u003ci\u003ebba\u003c/i\u003e\u003c/span\u003e. First, let\u0027s map each character \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e \u003d 100101\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e \u003d 110\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen,\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e \u003d 011\u003c/span\u003e and let\u0027s add some trailing zeroes: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e \u003d 011000\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s calculate the convolution \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(0) \u003d 0\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(1) \u003d 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(2) \u003d 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(3) \u003d 0\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(4) \u003d 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(5) \u003d 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003eGreat! \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e computes the number of \u003cspan class\u003d\"tex-span\"\u003e1\u0027\u003ci\u003es\u003c/i\u003e\u003c/span\u003e that match. What about the number of \u003cspan class\u003d\"tex-span\"\u003e0\u0027\u003ci\u003es\u003c/i\u003e\u003c/span\u003e? Let\u0027s apply the same procedure to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e \u003d 011010\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e \u003d 001\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e \u003d 100000\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e(0) \u003d 0\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e(1) \u003d 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e(2) \u003d 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e(3) \u003d 0\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e(4) \u003d 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e(5) \u003d 0\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eFine! Now, the answer should be\u003c/strong\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e) + \u003ci\u003ef\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/sup\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e \u003cstrong\u003ewhere\u003c/strong\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e \u003cstrong\u003eis in\u003c/strong\u003e \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003em\u003c/i\u003e - 1, \u003ci\u003en\u003c/i\u003e - 1]\u003c/span\u003e\u003c/p\u003e\u003cp\u003eWith this approach, we can solve the problem with a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlogn\u003c/i\u003e)\u003c/span\u003e time complexity using an algorithm like FFT to perform the convolution, or maybe Karatsuba algorithm\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAnd what if the alphabet size is not 2?\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eFor each character on the alphabet, we apply the convolution. Suppose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e is the convolution between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e where, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d  \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 1\u003c/span\u003e, else \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 0\u003c/span\u003e (the same applies for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e), for every character \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e on the alphabet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eThe answer should be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/span\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7b/11/7b116c606b835b15e4ef346e5e279c11270feba2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003em\u003c/i\u003e - 1, \u003ci\u003en\u003c/i\u003e - 1]\u003c/span\u003e\u003c/p\u003e\u003cp\u003eThis solution has a \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003ea\u003c/i\u003e|·\u003ci\u003enlogn\u003c/i\u003e)\u003c/span\u003e time complexity, where |a| is the size of the alphabet\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAnd what now?\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eHere are some problems which can be solved using this approach\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://www.spoj.com/problems/ADAMATCH/\"\u003eADAMATCH\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://www.spoj.com/problems/MAXMATCH/\"\u003eMAXMATCH\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://naipc16.kattis.com/problems/kinversions\"\u003eK inversions\u003c/a\u003e\u003c/p\u003e\u003cp\u003eHope you like this post, and helps you solving some convolution problems!\u003c/p\u003e\u003c/div\u003e","tags":[]}}