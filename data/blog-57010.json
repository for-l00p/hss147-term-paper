{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1515507884,"rating":41,"authorHandle":"abcdef6199","modificationTimeSeconds":1515507884,"id":57010,"title":"\u003cp\u003eA math problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eProblem C3 from IMO13 shortlist (\u003ca href\u003d\"https://artofproblemsolving.com/community/c6h597130p3543398\"\u003eAoPS link\u003c/a\u003e):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eGiven an undirected graph. You can perform these 2 operations, one at a time:\n\n1. Remove a vertex with odd degree.\n\n2. Double the graph: for each u, create a copy u\u0027; create edge (u\u0027, v\u0027) if there is edge (u, v); create edge (u, u\u0027) for all u.\n\nProve that there exists a sequence of these 2 operations such that after performing it, the graph will have no edge.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere\u0027s this greedy solution that seems to work really well, that is to remove the odd vertex with largest degree until there\u0027s no more odd vertices, then double the graph, then do the same over and over again.\u003c/p\u003e\u003cp\u003eIt seems to work for all graphs with \u0026lt;\u003d 7 vertices and for random large graphs. Moreover, the number of operations needed doesn\u0027t exceed 3N for all graphs I tested on.\u003c/p\u003e\u003cp\u003eIs it possible to prove that it will work for all graphs? And if it does, what is the upper bound of the number of operations?\u003c/p\u003e\u003cp\u003eThank in advance.\u003c/p\u003e\u003c/div\u003e","tags":["who","reads","tags","anyway"]}}