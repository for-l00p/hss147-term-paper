{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1517278356,"rating":0,"authorHandle":"brdy","modificationTimeSeconds":1517336270,"id":57426,"title":"\u003cp\u003eFinding bridges with an added condition in O(V+E)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello,\u003c/p\u003e\u003cp\u003eI have recently been doing this problem \u003ca href\u003d\"/contest/701/problem/F\" title\u003d\"Codeforces Round 364 (Div. 2)\"\u003e701F - Break Up\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWhile it does not have an explanation in the \u003ca href\u003d\"//codeforces.com/blog/entry/46283\"\u003eofficial editorial\u003c/a\u003e, some user made an \u003ca href\u003d\"//codeforces.com/blog/entry/46248\"\u003einformal editorial\u003c/a\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eThe solution goes like this\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eFirst,find a way from s to t.\u003c/p\u003e\u003cp\u003eIf there is no such way,the answer is 0.\u003c/p\u003e\u003cp\u003eIf there is such way,try to stop every edge on it and try to find bridges and upuate the answer.\u003c/p\u003e\u003cp\u003eHow to find a bridge?\u003c/p\u003e\u003cp\u003eDFS it with root s,record the depth of every vertex and the least depth it can reach without passing its father.\u003c/p\u003e\u003cp\u003eIf the least depth x can reach without passing x\u0027s father \u0026gt; the depth of y then (x,y) is a bridge.\u003c/p\u003e\u003cp\u003eTry to stop edges o(n),and finding bridges o(m).\u003c/p\u003e\u003cp\u003eIt\u0027s o(nm).\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eI wrote Tarjan\u0027s for finding bridges, but then realized such a solution doesn\u0027t even pass the samples because a bridge is only guaranteed to split the graph into two components, but not necessarily separating the vertex s from t. How can I modify the algorithm to only consider bridges that split s and t?\u003c/p\u003e\u003cp\u003eUPD: Ok. The \u003ca href\u003d\"//codeforces.com/contest/701/submission/34717590\"\u003esolution\u003c/a\u003e I tried was to dfs rooted at s, and for each dfs call update where t is reachable from the current vertex. It gets WA on 98. Is the thought process behind this correct? (Or is different solution intended) I want to make sure I\u0027m not looking for nonexistent bug. \u003c/p\u003e\u003c/div\u003e","tags":["bridges","graphs","tarjan"]}}