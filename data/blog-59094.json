{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1524639155,"rating":0,"authorHandle":"strawberrry","modificationTimeSeconds":1524639155,"id":59094,"title":"\u003cp\u003eRound #242 solution\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cblockquote\u003e\u003cp\u003eProblem E 正解是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e + \u003ci\u003ehash\u003c/i\u003e\u003c/span\u003e 暂时没想法，写不动，留个坑\u003c/p\u003e \u003c/blockquote\u003e\u003ch3\u003eA. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/424/problem/A\"\u003eSquats\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e分类：\u003c/strong\u003e \u003ccode\u003ebrute force\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e直接 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e 扫一遍统计\u003ccode\u003eX\u003c/code\u003e 个数，如果大于 \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/39/fd/39fdaa6f330f6afe718c8e14bc2d862f48999d59.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e 则贪心让前面的\u003ccode\u003eX\u003c/code\u003e变成\u003ccode\u003ex\u003c/code\u003e，否则相反。\u003c/p\u003e\u003ch3\u003eB. \u003ca href\u003d\"//codeforces.com/contest/963/problem/B\"\u003eDestruction of a Tree\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e分类：\u003c/strong\u003e \u003ccode\u003esorts\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e因为是求最小半径，答案的圆一定是恰好包含某个点上，直接枚举半径最终在哪个点上 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e 的算一遍答案是否大于 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e 就好了，最终复杂度 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e 。\u003c/p\u003e\u003ch3\u003eC. \u003ca href\u003d\"//codeforces.com/contest/424/problem/C\"\u003eMagic Formulas\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e分类：\u003c/strong\u003e \u003ccode\u003emath\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e开始想到的方法是对于某个 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e 去取模 \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003en\u003c/i\u003e]\u003c/span\u003e 这一段答案就不变，因此异或结果仅仅取决于 \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e 的奇偶性，而对于前 \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - 1)\u003c/span\u003e 段，考虑去枚举小于它且不是它的因子的那些数，暴力算贡献，这样复杂度是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlogn\u003c/i\u003e)\u003c/span\u003e ，对于 \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e 级别的数还是\u003ccode\u003eTime limited exceed\u003c/code\u003e 了。\u003c/p\u003e\u003cp\u003e后来意识到了，异或满足交换律和结合律，而且和取模运算满足分配率（即 \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/77/10/7710b3cdf13a91d968b3a8c6c0169280132e39e4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ），把 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e 写出来就是 \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5a/b2/5ab279dc2f7b111020a39b35dda9321c8eef3b3e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e对于取模一个数 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e 的贡献有 \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/39/2b/392b7cb24010c6c25db4f7eca54605d5f0219657.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e 它是在一个循环里面的，这个循环的阶数就是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e ，那么只要找到 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e 在循环的哪个位置，循环次数的奇偶性就能 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e 知道每个 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e 的答案！因此预处理出来 \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ff/0c/ff0ce9a2c0de1d09e2ff5043312a0e2eb5004f42.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e 就好了，复杂度是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e ！\u003c/p\u003e\u003ch3\u003eD. \u003ca href\u003d\"//codeforces.com/contest/424/problem/D\"\u003eBiathlon Track\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e分类：\u003c/strong\u003e \u003ccode\u003edp\u003c/code\u003e \u003ccode\u003ebinary search\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e先想到的是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e)\u003c/span\u003e 枚举四个边界，考虑怎么 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e 算答案。发现对于某一行/一列可以预处理出往右扫和往左扫/往上扫和往下扫的贡献，那么已知矩形四个顶点，就可以利用前缀和性质 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e 计算答案，这样复杂度是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e)\u003c/span\u003e 能够通过。\u003c/p\u003e\u003cp\u003e正解优化是，还是枚举上下边界，对于确定了上下边界，构造一个凹形的求和（上边界前缀和、下边界后缀和减去横穿边界的前缀和），枚举右边界的同时，边用\u003ccode\u003eset\u003c/code\u003e维护构造的这个求和东西（如图），二分地去找最贴近 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e 的左边界。这样复杂度是 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e\u003ci\u003elogn\u003c/i\u003e)\u003c/span\u003e 。 \u003cimg alt\u003d\"img\" src\u003d\"/predownloaded/f7/d6/f7d6cc1bd7f5777af86716f509525020f54a5ecc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e看见二维矩形，首先想到的是容斥、前后缀性质，这点很重要。\u003c/p\u003e\u003c/div\u003e","tags":[]}}