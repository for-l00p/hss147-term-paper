{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1434751858,"rating":288,"authorHandle":"FerranAlet","modificationTimeSeconds":1434900282,"id":18734,"title":"\u003cp\u003eAnalyzing rating formulas\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eIn this post I\u0027ll try to expose the results of my research regarding the rating formula. More specifically, I\u0027ll show a graph that gives you a match rating according to your performance in a contest and some aspects of how ratings are updated. \u003cstrong\u003eThis post is quite large, if you are only interested in the results you can easily skim through it :)\u003c/strong\u003e \u003cem\u003eDisclaimer\u003c/em\u003e: I\u0027ll try to support my assumptions and assertions with data but, altough I have done the analysis carefully, I may have done a mistake :) Moreover, take into account that some of my formulas are approximations.\u003c/p\u003e\u003ch1\u003eMotivation\u003c/h1\u003e\u003cp\u003eAlmost two years ago I started to participate in contests more actively, aiming to be red one day. To increase my motivation I tried to find a formula that evaluated how well I did during a competition. At that time there were no API nor \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/DmitriyH\" title\u003d\"Expert DmitriyH\"\u003eDmitriyH\u003c/a\u003e\u0027s statistics so I manually looked at a lot of profiles to try to find \u0027stable\u0027 points: users that didn\u0027t change their rating after a competition. Supposing that meant they had performed as they were expected I obtained two \u003cem\u003eapproximate\u003c/em\u003e linear formulas \u003cem\u003efor Div-1 contests\u003c/em\u003e:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/72/0e/720e32bb92b05ac78ea700caf0e816f166f93114.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/22/6b/226bf7ee0816001d08571a58c1e7860466d5fad0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eThe 1st formula was a good approximation, but started to fail roughly for red performances and the second one worked pretty bad; but they gave a good idea of how the match had gone. With this I did an Excel like this one:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/6e/c0/6ec065d44bb91467e6694ca9c81f2c393b92e1d3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eAs you can see, while my rating (right coloured column) stayed pretty boring being always yellow, my performance (left coloured column) was much more variable going from 1400 to 2500; these variations added a lot of motivation. Moreover, this gave a clear feedback in Virtual Rounds, making them more useful and motivating.\u003c/p\u003e\u003cp\u003eAs months progressed I saw that this formula was helping me and could help others as well, so, as an extra motivation, I promised myself that when I first turned red I would do a serious post about it. I may not be red when you read this post; but,anyway, here it goes!\u003c/p\u003e\u003ch1\u003eTheoretical analysis\u003c/h1\u003e\u003ch2\u003eELO system and expected rank\u003c/h2\u003e\u003cp\u003eThe basis of my work is \u003ca class\u003d\"rated-user user-admin\" href\u003d\"/profile/MikeMirzayanov\" title\u003d\"Headquarters, MikeMirzayanov\"\u003eMikeMirzayanov\u003c/a\u003e\u0027s \u003ca href\u003d\"//codeforces.com/blog/entry/102\"\u003eblog\u003c/a\u003e, along with some others. In CF, the probability that A wins B in terms of their rating is:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/42/ad/42adae7eeb4fb80820eac76bf3c01d7a781d03ed.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eNow, if we run all the possible matches between the contestants and add the probabilities of winning against every competitor we get the expected rank (+0.5 because ranks start with 1 and the probability of winning against yourself is 0.5):\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d1/ac/d1ac2ce2ca37212bd2c0f8d7758bf2fd448b0c3e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eThis formula also shows that (obviously) your expected rank does not only depend on your rating, but also on your competitors. However, as I\u0027ll later show, for most participants this will not matter. Another thing that can be observed is that the relative position of your competitors will not affect your rating: in other words, it doesn\u0027t matter if you beat a red and a blue beats you or you beat a blue and the red beats you. Finally notice that expected percentile is a very similar formula, we will use it later.\u003c/p\u003e\u003cp\u003eThe theory of the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Elo_rating_system\"\u003eELO system\u003c/a\u003e suggests that, after a match, ratings of A and B should be updated by a constant multiplied by the difference between the expected result and the actual result. For instance, if the constant is 14 and the guy with the probability of winning of 0.7 looses, his rating will decrease by 14*(0-0.7) \u003d -9.8. We can\u0027t do this in CF because competing against 600 coders in a single contest isn\u0027t the same as competing in 600 individual contests with each one of them: results are much more variable in the former case. Thus, we\u0027ll have to think of another update rule that takes this into account; more on this at the end of the blog.\u003c/p\u003e\u003ch2\u003eVolatility and other assumptions\u003c/h2\u003e\u003cp\u003e\u003ca href\u003d\"https://community.topcoder.com/tc?module\u003dStatic\u0026amp;d1\u003dfeatures\u0026amp;d2\u003d070506\"\u003eTopcoder\u003c/a\u003e uses similar ideas, but also assigns a volatility to each user. Looking at \u003ca class\u003d\"rated-user user-gray\" href\u003d\"/profile/worse\" title\u003d\"Newbie worse\"\u003eworse\u003c/a\u003e\u0027s or \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/dreamoon\" title\u003d\"International Grandmaster dreamoon\"\u003edreamoon\u003c/a\u003e\u0027s profiles made me think there was no such thing in CF (because their ratings movements have no acceleration). Topcoder also takes into account the number of contests done, I believe CFs doesn\u0027t do it either. I\u0027ll try to show more evidence of this below.\u003c/p\u003e\u003cp\u003eIn my analysis I\u0027ll also assume that the rating formulas didn\u0027t change (which probably did, but not much).\u003c/p\u003e\u003ch1\u003eResults\u003c/h1\u003e\u003ch2\u003eCodeforces API\u003c/h2\u003e\u003cp\u003eTo obtain the exact formulas I needed to obtain much more data; thus, I turned to Codeforces API (thanks a lot Codeforces admins for creating it!) I had no idea about APIs and almost no idea about python, but I found \u003ca class\u003d\"rated-user user-green\" href\u003d\"/profile/soon\" title\u003d\"Pupil soon\"\u003esoon\u003c/a\u003e\u0027s \u003ca href\u003d\"//codeforces.com/blog/entry/13515\"\u003eblog\u003c/a\u003e, which was incredibly useful; you should check it out!\u003c/p\u003e\u003cp\u003eWith this I wrote a code to obtain the Rank, OldRating, NewRating (and other data) for every user competing in a contest and then analyzed the results on Matlab.\u003c/p\u003e\u003cp\u003eOne of my objectives was to find the formula to update ratings. I used slightly old (contests 350 to 450, we\u0027re at 550 now) data to obtain the models and reserved the recent data for testing if the models were correct. Some things may have changed slightly, but not much.\u003c/p\u003e\u003ch2\u003eRating distribution of users in a contest\u003c/h2\u003e\u003cp\u003eHere are the rating distributions for the 3 types of contests. Rating 0 is for new participants. I have averaged several contest, but they don\u0027t change much from contest to contests. Finally note that they are not equivalent to rating distributions of all users in CodeForces since some users with some ratings participate more often than others.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/76/65/7665750a4edd8de749863960f37304208522a5c8.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/18/3b/183bc774468f38f2e844b2152917b98fa6e8bad8.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/28/9b/289b88e6a17bd21f21e87fd7b840f263f5ef4867.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch3\u003eRating Inflation\u003c/h3\u003e\u003cp\u003eAccidentally I also found what I believe to be evidence of rating inflation. Notice that it\u0027s slightly old data, it\u0027s probably better now :) This is the mean rating of participants in Div1-contests:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/bd/be/bdbe5239b22373d5867d9eb978c77929deae2da9.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch2\u003eEvaluating the performance in a contest\u003c/h2\u003e\u003cp\u003eNow that we have the rating distributions, and we know they don\u0027t change much, we can relate percentile to an equivalent rating using the formulas from theory. For a given percentile p, its equivalent rating R is such that expected percentile(R) \u003d p.\u003c/p\u003e\u003cp\u003eThe following graphs are very exact for the linear section in the middle (where the Law of big numbers applies and every contest is roughly the same); there, the line width of the graph is bigger than the variations between contests. Variations are larger on the extremes: for instance, the equivalent rating of the first places is greatly affected by \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/tourist\" title\u003d\"Legendary grandmaster tourist\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003et\u003c/span\u003eourist\u003c/a\u003e\u0027s or \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/Petr\" title\u003d\"Legendary grandmaster Petr\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003eP\u003c/span\u003eetr\u003c/a\u003e\u0027s presence.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/47/dc/47dc645007debbad14c3cc7318d614aeb1c59d5a.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eBetween percentiles \u003cspan class\u003d\"tex-span\"\u003e0.15\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e0.85\u003c/span\u003e you can use the formula \u003cspan class\u003d\"tex-span\"\u003e1147·\u003ci\u003ep\u003c/i\u003e + 1053\u003c/span\u003e with \u0026lt;3% error.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/b1/2f/b12fd44a5053a2c418cea994da9ab11d8329d908.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eBetween percentiles \u003cspan class\u003d\"tex-span\"\u003e0.10\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e0.85\u003c/span\u003e you can use the formula \u003cspan class\u003d\"tex-span\"\u003e970.2·\u003ci\u003ep\u003c/i\u003e + 1410\u003c/span\u003e with \u0026lt;3% error.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/99/30/9930fc808231d7fd8bfae87ffd6c1aaf65c7374e.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eBetween percentiles \u003cspan class\u003d\"tex-span\"\u003e0.15\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e0.85\u003c/span\u003e you can use the formula \u003cspan class\u003d\"tex-span\"\u003e913.3·\u003ci\u003ep\u003c/i\u003e + 953.3\u003c/span\u003e with \u0026lt;3% error.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eIf you want to check particular percentiles with more detail, you can take a look at this Google Docs\u003c/strong\u003e \u003ca href\u003d\"https://docs.google.com/spreadsheets/d/1LTq70T7UZFoXRiRBtOT4FxSEoSivyMni8i9YLrlQFYU/edit?usp\u003dsharing\"\u003eexcel\u003c/a\u003e.\u003c/p\u003e\u003ch2\u003eRating updates\u003c/h2\u003e\u003cp\u003eThe formula for rating updates turned out to be a nightmare to reverse-engineer and, in fact, I failed to do so. Luckily, my wonderful girlfriend \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/mariabauza\" title\u003d\"Expert mariabauza\"\u003emariabauza\u003c/a\u003e helped me find patterns and observations that we believe are insightful and useful!\u003c/p\u003e\u003cp\u003eWe can make a 3-D scatter plot of Rating Increase vs Old Rating and Perfomance (\u003d MatchRating-OldRating); where MatchRating is what we calculated in the previous section. This turns out to be a surface (it could have been a cloud/volume); therefore, we can be sure that we only need those 2 parameters to make the update! (This confirms the fact that volatility nor number of contests are taken into account). The updates for all contests have roughly the same form; though the parameters of these forms vary slightly from contest to contest(probably due to the number of participants and number of new participants). As an example, here\u0027s the surface for Looksery cup:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/8c/47/8c47d9e34473ff8b022fbf47d0556ea65d90d194.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eMaking the 2-D plots separately gives a clearer idea:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/9e/73/9e7377966dd473431c527c0d76076953d3ac94da.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIn this graph we observe that rating increase correlates negatively with OldRating; which actually makes sense; it makes the whole system stable. We don\u0027t know if this is somehow directly helped from the design of the rating formulas or a consequence of \u003ca href\u003d\"https://en.wikipedia.org/?title\u003dRegression_toward_the_mean://\"\u003eregression towards the mean\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/85/b5/85b54d31fcd636d9ce4a7ac10ae4ba222b4915c1.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIn this plot we see that rating increase almost only depends on the difference between what\u0027s expected from you and what you actually did. This difference is calculated in terms of rating, not positions (the difference between 1st and 2nd is much more important than 439 vs 440).\u003c/p\u003e\u003cp\u003eNotice that if you perform as you are expected, your rating actually decreases; which we already knew it was done to prevent rating inflation. Moreover, this point separates two regions: above it your rating change rapidly increases while below it the fall is slower. When performance is roughly 0 changes are quite linear (as ELO theory suggested), but after some point they start to curve and converge. We\u0027ve tried to fit them both with powerlaws and rational functions; both fittings work pretty well (however, when we try to fit everything with a function depending on both coordinates it doesn\u0027t work so well). Finally, if you perform really bad there\u0027s a maximum fall, which is usually around -100 (and it depends on your rating, as we saw in the previous graph).\u003c/p\u003e\u003cp\u003eFor a given OldRating, the relationship between RatingIncrease and MatchPerformance always has these three regions, but for highly rated coders the curves are more curved. That\u0027s why RatingIncrease doesn\u0027t only depend on MatchPerformance.\u003c/p\u003e\u003cp\u003eI hope you enjoyed the analysis!\u003c/p\u003e\u003c/div\u003e","tags":["rating","rating graph","codeforces api"]}}