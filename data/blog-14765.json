{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1416420248,"rating":3,"authorHandle":"Enchom","modificationTimeSeconds":1416420248,"id":14765,"title":"\u003cp\u003eGeneralized Suffix Tree\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello everybody,\u003c/p\u003e\u003cp\u003eRecently I faced yet another problem and I thought asking the codeforces community is the best decision.\u003c/p\u003e\u003cp\u003eLately I\u0027ve been learning \u003ca\u003eUkkonen\u0027s algorithm\u003c/a\u003e for linear building of \u003ca href\u003d\"http://en.wikipedia.org/wiki/Suffix_tree\"\u003esuffix trees\u003c/a\u003e. However as I was reading some applications I noticed that often you have to build a generalized suffix tree of usually 2, but sometimes more strings. In the papers about Ukkonen\u0027s algorithm I managed to find only how to build a single suffix tree.\u003c/p\u003e\u003cp\u003eNow my initial thought was to build a suffix tree for each string and then try to merge them in linear time, but that seemed like a very annoying to implement idea and looking around the web many people said that Ukkonen\u0027s algorithm can be used to produce generalized suffix tree.\u003c/p\u003e\u003cp\u003eI was wondering if someone could outline a solution that keeps the structure and suffix links correct and builds a generalized suffix tree based on Ukkonen\u0027s algorithm.\u003c/p\u003e\u003cp\u003eThanks in advance! :)\u003c/p\u003e\u003c/div\u003e","tags":[]}}