{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1514474544,"rating":0,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1514474544,"id":56688,"title":"\u003cp\u003eNotes on Codeforces Beta Round #104, Div2- A, B, C, D , E, and Div1- E (Segment Tree with lazy propagation)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/146/problem/A\" title\u003d\"Codeforces Round 104 (Div. 2)\"\u003e146A - Lucky Ticket\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe read in the integer as a string and the left work is straightforward implementation.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/146/problem/B\" title\u003d\"Codeforces Round 104 (Div. 2)\"\u003e146B - Lucky Mask\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, the answer is obviously \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≥ \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, note that \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e + \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is always a potential answer except that it might not be the minimum one. Therefore, we can enumerate integers from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + 1\u003c/span\u003e and immediately terminate the loop if we find the first integer that satisfies the requirement (the loop will surely be terminated since \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e + \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e provides an upper bound).\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/146/problem/C\" title\u003d\"Codeforces Round 104 (Div. 2)\"\u003e146C - Lucky Conversion\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet us compare the two strings position by position, and denote the total number of indices which lead to difference as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e. For the first string, its \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e indices must “contain” \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e 4s and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e 7s, while for the second string, it becomes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e 7s and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e 4s. To achieve the minimum number of operations, we should swap \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e 4s and 7s while changing the left \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e) - \u003ci\u003emin\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e from 4s to 7s (or from 7s to 4s). Thus, the final answer is in fact \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/146/problem/D\" title\u003d\"Codeforces Round 104 (Div. 2)\"\u003e146D - Lucky Number 2\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet us first consider what happens when we try to write a sequence. Suppose that we write a 4 first. Then, no 47 or 74 appears until we write a 7 (since one can keep writing 4, which gives 444...). Right now, we have one 47 and zero 74. Next, no more 47 or 74 appears until we write a 4, and now we have one 47 and one 74. By some simple induction, one can find that we always have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e 47s and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e 74s, i.e., the number of 74s is either equal to that of 47s or one less than that of 47s. Similarly, if we write a 7 first, we either have one more 74 than 47 or equal number of 47s and 74s.\u003c/p\u003e\u003cp\u003eWith the above arguments, no reasonable sequence exists if \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e| \u0026gt; 1\u003c/span\u003e. Thus, we can solve the problem based on the following three cases.\u003c/p\u003e\u003cp\u003e1) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e \u003d 1\u003c/span\u003e: the pattern must be like (44..444)(4747..47)(77..77). The middle \u0027( )\u0027 contains \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e 47s, while the left and right \u0027( )\u0027 contains the remaining 4s and 7s. The reason is that if we insert more 4s into the middle \u0027( )\u0027, it is still a reasonable sequence but not the minimum one (obviously we should put as many 4s in the front as possible). The reason is similar why we should not insert more 7s into the middle \u0027( )\u0027.\u003c/p\u003e\u003cp\u003e2) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u003d 1\u003c/span\u003e: the pattern should be like (77..777)(7474...7474)(44..44). The middle \u0027( )\u0027 should have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e\u003c/span\u003e 74s and the remaining 7s and 4s are put into the left and right \u0027( )\u0027, respectively.\u003c/p\u003e\u003cp\u003e3) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e\u003c/span\u003e: the pattern can be either (74)(44..44)(74..74)(77..77)(7) or (44..44)(4747..47)(77..77)(4). For the first one, the first \u0027( )\u0027 contains exactly one 74, and the last \u0027( )\u0027 should contain exactly one 7, and the third \u0027( )\u0027 should contain \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e - 1\u003c/span\u003e 74s, while the remaining 4s and 7s are inserted into the other two \u0027( )\u0027. For the second pattern, the last \u0027( )\u0027 has exactly one 4, and the second \u0027( )\u0027 has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e 47s while the remaining 4s and 7s are put into the other \u0027( )\u0027.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/146/problem/E\" title\u003d\"Codeforces Round 104 (Div. 2)\"\u003e146E - Lucky Subsequence\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis problem involves several wonderful techniques.\u003c/p\u003e\u003cp\u003eThe main idea is to divide the given integers into two sets, one consisting of unlucky integers while the other one containing lucky integers. We use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e to denote the number of different ways to select \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e integers from the two sets, respectively. Thus, to select totally \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e integers, we have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/eb/d8/ebd8959ee11ebe8d432eba98a97551c4f758449f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ways. \u003c/p\u003e\u003cp\u003eLet us first consider how to compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e. It is obvious that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e is just equal to the conventional \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2d/f9/2df95ac0505e134a3b6d9ce45f3fd2387da39fa4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. There is a standard algorithm to compute formula like \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9a/70/9a7048bdc90760b95792cfaea17972dbcff6b240.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. By using Fermat\u0027s theorem, we can transfer it into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eab\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ep\u003c/i\u003e - 2\u003c/sup\u003e%\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e. Furthermore, one can adopt fast exponentiation to calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sup\u003e%\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e (note that we can calculate all the values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e!%\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e in previous).\u003c/p\u003e\u003cp\u003eThen, we focus on how to compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e. Suppose that there are totally \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e different lucky integers and the number of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th lucky integer is denoted as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enum\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e (there may exist multiple same lucky integers). Then, we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e to denote the number of ways to choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e different lucky integers among the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e ones. The recursive formula is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e] + \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e - 1] × \u003ci\u003enum\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e, which is similar to pascal triangle, and thus \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e) \u003d \u003ci\u003edp\u003c/i\u003e[\u003ci\u003em\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. To obtain \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enum\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, one should implement data compression first, since the data range is huge but the number of lucky integers is less than 1024.\u003c/p\u003e\u003cp\u003eAs a summary, the involved techniques are prefix idea, fermat\u0027s theorem, fast exponetiation, dp and data compression. This is a delicately designed problem.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/145/problem/E\" title\u003d\"Codeforces Round 104 (Div. 1)\"\u003e145E - Lucky Queries\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI read the tutorials and learned an advanced version of segment tree there. One could find a large number of materials about various segment trees and their implementation, either on the internet, or in many blogs posted in codeforces. Here I recommend this solution \u003ca href\u003d\"/contest/145/submission/1115215\" title\u003d\"Submission 1115215 by edward_mj\"\u003e1115215\u003c/a\u003e, and I think the overall framework is written in a very clear, systematic and standard manner.\u003c/p\u003e\u003c/div\u003e","tags":[]}}