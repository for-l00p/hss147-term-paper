{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1433084211,"rating":34,"authorHandle":"marat.snowbear","modificationTimeSeconds":1497004404,"id":18252,"title":"\u003cp\u003eAndrew Stankevich Contest 1 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch4\u003eContest Link: \u003ca href\u003d\"//codeforces.com/gym/100199\"\u003ehttp://codeforces.com/gym/100199\u003c/a\u003e\u003c/h4\u003e\u003cp\u003e    \u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/problem/A\" title\u003d\"2002-2003 Winter Petrozavodsk Camp, Andrew Stankevich Contest 1 (ASC 1)\"\u003e100199A - Chinese Girls\u0027 Amusement\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe can rephrase the problem a bit. Given integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e we need to find maximum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e no greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e / 2\u003c/span\u003e such that starting with \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e and adding \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e we will get a cycle which will have length equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e and hence will include all numbers \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f4/db/f4dbca449d7cc4d0dce7fdbe660be7c06d81d2d6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. In order for this condition to hold we need \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e to be relatively prime, i.e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eGCD\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e, \u003ci\u003eN\u003c/i\u003e) \u003d 1\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eSince we know the upperbound for the value we are looking for and we need the maximum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e which satisfies our condition we could start iterating from \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/95/a7/95a7939a7f83322f2ffc09df70db93cd830822d5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and decrement the iteration value unless we find a number which satisfies the relative primality condition. But we will show below for which exact number this would happen for any given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e so we won\u0027t need to iterate at all. We need to consider the following cases: \u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is odd. In this case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e can be rewritten as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 2·\u003ci\u003eX\u003c/i\u003e + 1\u003c/span\u003e for some integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e and it will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e the first integer we would need to check. We can see that in this case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is relatively coprime to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e:\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eGCD\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e, \u003ci\u003eX\u003c/i\u003e) \u003d \u003ci\u003eGCD\u003c/i\u003e(2\u003ci\u003eX\u003c/i\u003e + 1, \u003ci\u003eX\u003c/i\u003e) \u003d  \u003d \u003ci\u003eGCD\u003c/i\u003e(1, \u003ci\u003eX\u003c/i\u003e) \u003d 1\u003c/span\u003e\u003cbr /\u003eThis means that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e already satisfies our condition which means that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c7/85/c7852fa4a6f6a15ec66d3881e6a327afdd2b2a2a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e in this case.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eOtherwise \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is even. Let\u0027s again denote \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a4/86/a486442d3ff283f359823204fe4a05c39ec6c280.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. We start again with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e but in this case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eGCD\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e, \u003ci\u003eX\u003c/i\u003e) \u003d \u003ci\u003eX\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e \u0026gt; 1\u003c/span\u003e so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e cannot be the answer. Next number we check is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e - 1\u003c/span\u003e:\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eGCD\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e, \u003ci\u003eX\u003c/i\u003e - 1) \u003d \u003ci\u003eGCD\u003c/i\u003e(2\u003ci\u003eX\u003c/i\u003e, \u003ci\u003eX\u003c/i\u003e - 1) \u003d \u003ci\u003eGCD\u003c/i\u003e(2, \u003ci\u003eX\u003c/i\u003e - 1)\u003c/span\u003e\u003cbr /\u003ewhich brings us two following cases: \u003c/p\u003e   \u003col\u003e     \u003cli\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e - 1\u003c/span\u003e is odd (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e is even) then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e - 1\u003c/span\u003e is coprime with \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e and consequently is coprime with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e because of the expression above. So in this case we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e \u003d \u003ci\u003eX\u003c/i\u003e - 1\u003c/span\u003e.\u003c/li\u003e     \u003cli\u003eOtherwise remaining case is when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is even and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e is odd. In this case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eGDC\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e, \u003ci\u003eX\u003c/i\u003e - 1) \u003d 2\u003c/span\u003e so we check the next number which is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e - 2\u003c/span\u003e:\u003cbr /\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eGCD\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e, \u003ci\u003eX\u003c/i\u003e - 2) \u003d \u003ci\u003eGCD\u003c/i\u003e(2\u003ci\u003eX\u003c/i\u003e, \u003ci\u003eX\u003c/i\u003e - 2) \u003d \u003ci\u003eGCD\u003c/i\u003e(4, \u003ci\u003eX\u003c/i\u003e - 2)\u003c/span\u003e\u003cbr /\u003eTheir GCD equals to 1 because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e is odd in this case. And that means that for the last case the answer would be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e - 2\u003c/span\u003e.\u003c/li\u003e   \u003c/ol\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eWe can also double check that for all cases the result will be no less than \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e which matches the allowed range for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eThe last issue in this problem is that we will need to do calculations with big integers, so using a language with BigInteger support out-of-the-box makes most sense here. \u003c/p\u003e\u003cp\u003eC++ solution with ad-hoc BigNumber code: \u003ca href\u003d\"//codeforces.com/gym/100199/submission/11415365\"\u003esumbission\u003c/a\u003e, \u003ca href\u003d\"http://pastebin.com/krM86f9f\"\u003ecode\u003c/a\u003e\u003cbr /\u003ePython solution with built-in arithmetics: \u003ca href\u003d\"//codeforces.com/gym/100199/submission/11383446\"\u003esubmission\u003c/a\u003e, \u003ca href\u003d\"http://pastebin.com/6uf7J7UM\"\u003ecode\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/problem/B\" title\u003d\"2002-2003 Winter Petrozavodsk Camp, Andrew Stankevich Contest 1 (ASC 1)\"\u003e100199B - Reactor Cooling\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThis task is a direct aplication of a well knowed problem , circulation problem.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Circulation_problem\"\u003eCirculation Problem\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn order to solve a circulation problem we can transform the given circulation problem with lower bounds and upper bounds on flows into a classical max flow problem. \u003c/p\u003e\u003cp\u003eYou can read a nice explanation about it in this pdf , i recommend first read about Circulation with demands , and then about Circulation with demands and lower-upper bounds.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://www.win.tue.nl/~nikhil/courses/2013/2WO08/max-flow-applications-4up.pdf\"\u003eMax Flow Aplications\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn order to do that firstly we introduce two additional nodes — \u003cstrong\u003eSource\u003c/strong\u003e and \u003cstrong\u003eSink\u003c/strong\u003e. Then we break each edge of the original edge directed from \u003cstrong\u003eu\u003c/strong\u003e to \u003cstrong\u003ev\u003c/strong\u003e which has \u003cstrong\u003elowerFlow\u003c/strong\u003e and \u003cstrong\u003eupperFlow\u003c/strong\u003e parameters into three edges: \u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e -  \u0026gt; \u003ci\u003eSink\u003c/i\u003e\u003c/span\u003e edge with capacity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowerFlow\u003c/i\u003e\u003c/span\u003e\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSource\u003c/i\u003e -  \u0026gt; \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e edge with capacity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowerFlow\u003c/i\u003e\u003c/span\u003e\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e -  \u0026gt; \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e edge with capacity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eupperFlow\u003c/i\u003e - \u003ci\u003elowerFlow\u003c/i\u003e\u003c/span\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eThis way we have changed our constraints, we have no lower bounds on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e -  \u0026gt; \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e flow anymore, we only require that all edges adjacent to \u003cstrong\u003eSource\u003c/strong\u003e and \u003cstrong\u003eSink\u003c/strong\u003e have flow equal to their capacity (note that this capacity was taken from some edge\u0027s \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowerFlow\u003c/i\u003e\u003c/span\u003e originally). So we calcualate maximum flow from \u003cstrong\u003eSource\u003c/strong\u003e to \u003cstrong\u003eSink\u003c/strong\u003e in the transformed network and check if this flow equals to the sum of all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowerFlow\u003c/i\u003e\u003c/span\u003e values across all edges in the original graph. \u003c/p\u003e\u003cp\u003eIf solution exists we will also need to output the flow which satisfies the original conditions. So we transform our graph back and add the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowerFlow\u003c/i\u003e\u003c/span\u003e values from the edges we created previously back to their original edges.\u003c/p\u003e\u003cp\u003eC++ solution: \u003ca href\u003d\"http://pastebin.com/PUVSeH4R\"\u003esubmision\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/problem/C\" title\u003d\"2002-2003 Winter Petrozavodsk Camp, Andrew Stankevich Contest 1 (ASC 1)\"\u003e100199C - New Year Bonus Grant\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThere are several different solutions for this problem. We will describe here one DP and one greedy solution. \u003c/p\u003e\u003ch1\u003eDP solution\u003c/h1\u003e\u003cp\u003eFirst of all let me introduce the DP values: \u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e_\u003ci\u003eassignned\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e — maximum answer for the subtree rooted in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e such that a reward is assigned to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. In this case we cannot assign any reward to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e\u0027s children. \u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e_\u003ci\u003efree\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e — maximum answer for the subtree rooted in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e such that \u003cstrong\u003eno reward\u003c/strong\u003e is assigned to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. In this case we can still assign a reward to at most one of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e\u0027s children. \u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ef/6e/ef6e9f81b13f22996a3e214b57bc785c1e158aa2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003c/p\u003e\u003cp\u003eThen we can calculate these values as follows: \u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e_\u003ci\u003eassignned\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e) \u003d 1 + \u003ci\u003eall\u003c/i\u003e_\u003ci\u003echildren\u003c/i\u003e_\u003ci\u003efree\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e \u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f1/2b/f12bc496fe5ad997975fe00007f40e45834e969f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWe can calculate these DP values traversing the tree from the leaves to the root, later we can use these values to get the chosen nodes as well. \u003c/p\u003e\u003cp\u003eDP submission: \u003ca href\u003d\"//codeforces.com/gym/100199/submission/11502667\"\u003e11502667\u003c/a\u003e, \u003ca href\u003d\"http://pastebin.com/N4prDPJK\"\u003ecode\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eGreedy solution\u003c/h1\u003e\u003cp\u003eLet\u0027s take a look at some leaf of our tree and check what will happen if we assign a reward to it. In this case we won\u0027t be able to assign a reward to its parent and siblings. Now we want to prove that we can assign a reward to this leaf and it won\u0027t stop us from getting the maximum result overall. Let\u0027s assume the opposite — assigning a reward to this leaf doesn\u0027t let us to get maximum result. This means that in optimal assignment a reward was assigned either to the parent or to one of the siblings of the given leaf, otherwise we would still be able to get even better result after assigning a reward to the leaf itself. But if we assign a reward to the parent or any sibling of the given leaf then we can reassign this reward from the optimal solution to our leaf, because there is no leaf which might be assigned given the leaf\u0027s parent or sibling assigned and which will not allow us to assign reward to our leaf directly. And by this single reassignment we make our result no worse than optimal which proves that we can assign reward to the leaf greedily, mark the leaf and its parent as being \u0026quot;used\u0026quot; and move on. \u003c/p\u003e\u003cp\u003eGreedy submission: \u003ca href\u003d\"//codeforces.com/gym/100199/submission/11502453\"\u003e11502453\u003c/a\u003e, \u003ca href\u003d\"http://pastebin.com/vbkePv8S\"\u003ecode\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/problem/D\" title\u003d\"2002-2003 Winter Petrozavodsk Camp, Andrew Stankevich Contest 1 (ASC 1)\"\u003e100199D - Matrix Multiplication\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe have a matrix of dimension N*M. For each edge i, column i gets filled at exactly two rows, {u,v}. So each column of the matrix A has 1 at two distinct rows, and 0 at all other places.\u003c/p\u003e\u003cp\u003eSo, each row of AT ( transposition of matrix A ) contains 1 at exactly two position and 0 at all other places. When we multiply AT with A, we iterate over rows of AT and column of A. For each {row,col} pair, we get 1 only when AT[row][k] and A[k][col] equals to 1. \u003c/p\u003e\u003cp\u003eThere are only two values of k for which AT[row][k] \u003d\u003d 1. Let those values of k be {p,q}. Now for each row of AT, there will be M columns from A. At each column, only two positions of row will have one. Out of all those position, how many equals to p or q? Add that amount to answer. Repeat that for each row.\u003c/p\u003e\u003cp\u003eThough repeating would have given the correct result, I took it one step further. For AT i recorded {p,q} for each row. For A, I recorded {r,s} for each column. Now lets say I am processing a certain row, and the first value is 2. I will add count of instances of 2 in records of A. Let this count be x. I noticed I will be adding x each time I encountered 2 in records of AT. And how many times does 2 occurs in AT? x times.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint res \u003d 0;\nfor ( i \u003d 0; i \u0026lt; n; i++ ) res +\u003d cnt[i]*cnt[i];\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eC++ Solution: \u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/submission/11354168\" title\u003d\"Submission 11354168 by NSU Shinobis\"\u003e11354168\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/problem/E\" title\u003d\"2002-2003 Winter Petrozavodsk Camp, Andrew Stankevich Contest 1 (ASC 1)\"\u003e100199E - Nice Patterns Strike Back\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eLets say we are building the pattern with N rows and M columns. Now we have already build all possible valid patterns with dimension (N-1)*M. How many different pattern a single row have? Since there are M columns, a single row can have 2^M pattern. Let us assign unique id to each single row pattern from 0 to (2^M)-1.\u003c/p\u003e\u003cp\u003eNow another thing we have to precalculate, whether we can stack Single Row Pattern (SRP) i with SRP j. If stacking SRP i with SRP j form 2*2 square, then it is not possible to stack them.\u003c/p\u003e\u003cp\u003eNow lets say, we know how many patterns are possible for dimension (N-1)*M that ends with SRP i on last row. Lets say that we have those result nicely formatted into a matrix with dimension (2^M)-1 * 1. Where row i contains number of patterns that ends with SRP i. \u003c/p\u003e\u003cp\u003eNow how can we extend the result for N-1 rows to N rows? For N rows that end with SRP i, we can add result of N-1 row that ends with SRP j, such that, stacking SRP j with SRP i is valid. Using this we build the coefficient matrix and then perform Matrix Expo. Since row is huge, we use Bigint.\u003c/p\u003e\u003cp\u003eMore on Matrix Expo: \u003ca href\u003d\"http://zobayer.blogspot.com/2010/11/matrix-exponentiation.html\"\u003ehttp://zobayer.blogspot.com/2010/11/matrix-exponentiation.html\u003c/a\u003e\u003c/p\u003e\u003cp\u003eC++ Solution: \u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/submission/11355520\" title\u003d\"Submission 11355520 by NSU Shinobis\"\u003e11355520\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/problem/F\" title\u003d\"2002-2003 Winter Petrozavodsk Camp, Andrew Stankevich Contest 1 (ASC 1)\"\u003e100199F - Get Out!\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe have circular islands of different radius and a circular ship or radius r. Notice that if we shrink the ship into a point by decreasing its radius by r and increase all the islands\u0027 radius by r, the problem doesn\u0027t change.\u003c/p\u003e\u003cp\u003eNow, after altering the radius of islands, if two islands intersect, then it is not possible to go between them (two circles touching allows ship to pass through ). So if we imagine each of the center of islands as nodes, and add a line between two nodes only if the corresponding circles intersect, then we get a planer graph. The ship cannot pass through any edges of this graph.\u003c/p\u003e\u003cp\u003eSo, if the ship is inside any polygon, then it cannot escape. Otherwise it can. How do we check if a point is inside a polygon? We can use circular line sweep and dfs to solve the sub-problem. Start from a node and imagine that there is a special line, SweepLine, connecting the ship and the current node. We are going to track how much SweepLine has rotated when visiting each node.\u003c/p\u003e\u003cp\u003eAssign the starting node angle 0. Now move to its neighbors that are not visited yet and and while moving from i-\u0026gt;j assign, visit[j] \u003d visit[i] + angle[i][j]. angle[i][j] is the directed angle between the vector (i-ship) and (j-ship). And when moving to a node that has already been visited, simply check the difference between the current angle SweepLine and when the node was visited the first time. Let d \u003d CurAngle-visit[target]. If d is 2*pi\u0026lt;\u003dd or d\u0026lt;\u003d-2*pi, then the SweepLine has rotated completely when traversing a cycle, and ship is trapped. \u003c/p\u003e\u003cp\u003eC++ Solution: \u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/submission/11408474\" title\u003d\"Submission 11408474 by forthright48\"\u003e11408474\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/problem/G\" title\u003d\"2002-2003 Winter Petrozavodsk Camp, Andrew Stankevich Contest 1 (ASC 1)\"\u003e100199G - Beautiful People\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSpecial Thanks to \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/logic_max\" title\u003d\"Candidate Master logic_max\"\u003elogic_max\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLets say we invite X people in the party. For any two person a and b, either a respects b or a ignores b. That is, either a \u0026lt; b or a \u0026gt; b. Hence, it will be possible to sort all the people in the party such that they form a chain, where ai \u0026lt; ai+1. So given a list of \u003ca href\u003d\"http://en.wikipedia.org/wiki/Partially_ordered_set\"\u003eposet\u003c/a\u003e, our task is to find the longest chain.\u003c/p\u003e\u003cp\u003eThe problem can be reduced to standard LIS. Sort in \u003cstrong\u003enon-decreasing\u003c/strong\u003e order by S and for people with same S, sort them in \u003cstrong\u003enon-increasing\u003c/strong\u003e order by B. Now, the answer is Longest Strictly Increasing Sequence of sequence B.\u003c/p\u003e\u003cp\u003eThere is an algorithm for finding LIS in O(NlogK). Here is a tutorial on \u003ca href\u003d\"http://lightoj.com/article_show.php?article\u003d1000\"\u003elightoj.com\u003c/a\u003e. Modify it to print path.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/problem/H\" title\u003d\"2002-2003 Winter Petrozavodsk Camp, Andrew Stankevich Contest 1 (ASC 1)\"\u003e100199H - Cracking\u0027 RSA\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe have to find all subsets, whose product forms a perfect square. A number is perfects square, if each of the prime factors of the number has an even power.\u003c/p\u003e\u003cp\u003eFor each prime number, p, we can write an equation. For example, when p \u003d 2, let us find for each element of the array Ai, what is the power of p in Ai. Let the power of p in Ai be bi. \u003c/p\u003e\u003cp\u003eNow, lets introduce another variable xi. If xi \u003d 1, then element Ai has been taken in the subset, otherwise it has been excluded.\u003c/p\u003e\u003cp\u003eSo for each p, we are looking for solution to the following equation:\u003c/p\u003e\u003cp\u003e( x1 * b1 + x2 * b2 + x3 * b3 ... xn * bn ) % 2 \u003d 0\u003c/p\u003e\u003cp\u003eAs I said before, in a perfect square, power of each prime factor is even. So we need to build a subset such that when we add the powers ( multiplying numbers add powers ) it becomes even.\u003c/p\u003e\u003cp\u003eThe equation above is equivalent to:\u003c/p\u003e\u003cp\u003e(x1*(b1%2) + x2(b2%2) + x3(b3%2)...xn(bn%2)) % 2 \u003d 0\u003c/p\u003e\u003cp\u003eor x1b1 ^ x2b2 ^ x3b3 ^ ...^ xnbn \u003d 0\u003c/p\u003e\u003cp\u003eSo we form one equation for each prime. So we get T equations. So how many solutions exist for {x1,x2,x3...xn} where xi is 0/1? This is solved using Gaussian Elimination.\u003c/p\u003e\u003cp\u003eRun Gaussian Elimination and find rank. Number of free variable \u003d total variable — rank. Result is ( 2 ^ free variable ) — 1. We are subtracting 1 cause problem asked for non-empty subsets only.\u003c/p\u003e\u003cp\u003eC++ Solution: \u003ca href\u003d\"/group/qo1icaI3vI/contest/100199/submission/11355755\" title\u003d\"Submission 11355755 by NSU Shinobis\"\u003e11355755\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}