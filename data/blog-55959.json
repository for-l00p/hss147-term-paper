{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1511429904,"rating":0,"authorHandle":"acmASCIS","modificationTimeSeconds":1511431587,"id":55959,"title":"\u003cp\u003eWeek05 — Loops \u0026amp; Binary Search\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eLoops:\u003c/h2\u003e\u003cp\u003eWhat if you want to display all the numbers from 1 to 10?\u003c/p\u003e\u003cp\u003eWell, that’s easy you just have to write a code and print the numbers like this.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecout \u0026lt;\u0026lt; 1 \u0026lt;\u0026lt; \u0027 \u0027 \u0026lt;\u0026lt; 2 \u0026lt;\u0026lt; \u0027 \u0027 \u0026lt;\u0026lt; 3 \u0026lt;\u0026lt; \u0027 \u0027 \u0026lt;\u0026lt; 4 \u0026lt;\u0026lt; \u0027 \u0027 \n     \u0026lt;\u0026lt; 5 \u0026lt;\u0026lt; \u0027 \u0027 \u0026lt;\u0026lt; 6 \u0026lt;\u0026lt; \u0027 \u0027 \u0026lt;\u0026lt; 7 \u0026lt;\u0026lt; \u0027 \u0027 \u0026lt;\u0026lt; 8 \u0026lt;\u0026lt; \u0027 \u0027 \u0026lt;\u0026lt; 9 \u0026lt;\u0026lt; \u0027 \u0027 \u0026lt;\u0026lt; 10 \u0026lt;\u0026lt; endl;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow if I add a little twist to the problem and tell you to display the numbers from 1 to 100!\u003c/p\u003e\u003cp\u003eThen you’ll have to write the print part 100 times…\u003c/p\u003e\u003cp\u003eTolerable but life sucking … \u003c/p\u003e\u003cp\u003eWhat about 1000!\u003c/p\u003e\u003cp\u003e10000!!\u003c/p\u003e\u003cp\u003eA million!!\u003c/p\u003e\u003cp\u003eShall I continue …!\u003c/p\u003e\u003cp\u003eSo as we previously agreed that the purpose of computers and the whole coding aspect is to make our lives easier. So for the previous problem in coding, we can use loops.\u003c/p\u003e\u003cp\u003eNow there are different types of loops, for an example:\u003c/p\u003e\u003cp\u003eFor loop, while loop and do while loop.\u003c/p\u003e\u003cp\u003eAll of them serve the same purpose of repetition, with different syntax and different uses.\u003c/p\u003e\u003cp\u003eLet’s first explain each type separately.\u003c/p\u003e\u003ch2\u003eFor loops:\u003c/h2\u003e\u003cp\u003eIf you consider the previous problem you’ll find that it requires a predefined number of repetition, as I want you to display the numbers from 1 to 100 only, so you have to repeat the print operation just 100 times and you already know where to start and where to finish.\u003c/p\u003e\u003cp\u003eSame goes for “For loops”. You see for loops must have an initialization “starting position”, an ending condition “as long as it’s true the loop goes on” and the form of change you’ll be doing.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor((data_type) variable_name \u0026lt;initial value\u0026gt;; \u0026lt;condition\u0026gt; ; \u0026lt;decrement or increment\u0026gt;)\n{\n     // Execute these statements if \u0026lt;condition\u0026gt; is TRUE (body of the for loop)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow let’s try this on our problem. We’re going to start displaying numbers starting from 1 “initial state”, then we’re going to increment the initial value by one every time to go from 1 to 100 ”the change” as long as the value is less than or equal to 100 the loop goes on.\u003c/p\u003e\u003cp\u003eLike this …\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor(int i \u003d 0; i \u0026lt;\u003d 100; i++)\n{\n    cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl ;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2\u003eWhile loops:\u003c/h2\u003e\u003cp\u003eFor loop needs an initialization, condition and an update in its syntax. While loops have only a condition in its syntax “while the condition is true, go in the loop\u0026quot;.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile( \u0026lt;condition\u0026gt; )\n{\n    // Execute these statements if \u0026lt;condition\u0026gt; is TRUE\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen if I give you a problem that says display the numbers from 100 to 1 in a decreasing order.\u003c/p\u003e\u003cp\u003eYou either use a for loop that starts with an initial value equal 100 and decrements each time until it reaches 1, or you can use a while loop.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint i \u003d 100;\nwhile(i \u0026gt;\u003d 1)\n{\n    cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl;\n    i--;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that: In loops, whatever inside the condition is a boolean (True or False).\u003c/p\u003e\u003ch3\u003eScopes and branching:\u003c/h3\u003e\u003cp\u003eWe’ve learned about the importance of scoops while dealing with if conditions, same goes for loops.\u003c/p\u003e\u003cp\u003eWithout scopes, loops consider the first line after it is its only body that ends with a semicolon.\u003c/p\u003e\u003cp\u003eConsider the difference in the following examples:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor(int i \u003d 0; i \u0026lt; 4; i++)\n{\n   cout \u0026lt;\u0026lt; \u0026quot;number is : \u0026quot;;\n   cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eoutput:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/9c/ac/9cac25e17b57520a016da6c4c95784258c262b5c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eNow this code\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor(int i \u003d 0; i \u0026lt; 4; i++)\n   cout \u0026lt;\u0026lt; \u0026quot;number is : \u0026quot;;\n   cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewill produce an error.\u003c/p\u003e\u003cp\u003eIn the previous example, the program detected an error cause the variable i wasn’t declared in the scoop as it was in the loop’s body that ended with the previous ‘;’.\u003c/p\u003e\u003cp\u003eNow, what if you want to print the square of asterisks?\u003c/p\u003e\u003cp\u003eIf the size is too large you won’t be able to use simple methods.\u003c/p\u003e\u003cp\u003eYou will have to repeat the action of print to every asterisk in one row and then you need to repeat that row until you have formed the square, so you need nested loops.\u003c/p\u003e\u003cp\u003eLet’s explain how nested loops work:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor(  ; \u0026lt;1st condition\u0026gt; ;  )//first loop\n{   \n    //For each repetition of the first loop the second loop is repeated\n    for(  ; \u0026lt;2nd condition\u0026gt; ;  )//second loop\n    {        \n          //Executes the second loop\u0027s body as long as the 2nd condition is true.   \n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOur Square code will look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint side;\ncout \u0026lt;\u0026lt; \u0026quot;enter the square\u0027s side : \u0026quot;;\ncin \u0026gt;\u0026gt; side;\nfor(int i \u003d 0; i \u0026lt; side; i++)\n{\n  for(int j \u003d 0; j \u0026lt; side; j++)\n  {\n     cout \u0026lt;\u0026lt; \u0027*\u0027;\n  }\n  cout \u0026lt;\u0026lt; endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eoutput:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/b6/35/b63533103a2b00d6060b2d29d1c339d4970b1655.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch2\u003eBinary search:\u003c/h2\u003e\u003cp\u003eIf you recall the first session then you’ll remember that we ‘ve explained the concept of binary search and how it works, now let’s try implementing it as a code.\u003c/p\u003e\u003cp\u003eSo binary search basically has an initial value “L”, the end value “H” and the “mid value” used for the search.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint l , h , mid ;\nwhile(l \u0026lt;\u003d h)\n{\n    mid \u003d (l+h)/2;\n    //check for the following range of search\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0027s use binary search in something very interesting... Square root!\u003c/p\u003e\u003cp\u003eThe definition of the square root is basically a number that we multiply it by itself to return the root\u003c/p\u003e\u003cp\u003eSo we are basically going to use binary search to try and find that number.\u003c/p\u003e\u003cp\u003eFirst of all, construct our while loop\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elong double l \u003d 0, h \u003d 1000000000, mid, target;\ncin \u0026gt;\u0026gt; target;\nwhile(l \u0026lt;\u003d h)\n{\n    \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe set our boundaries to be non-integers because the square root isn\u0027t always an integer.\u003c/p\u003e\u003cp\u003eNow, let\u0027s calculate the mid\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elong double l \u003d 0, h \u003d 1000000000, mid, target;\ncin \u0026gt;\u0026gt; target;\nwhile(l \u0026lt;\u003d h)\n{\n    mid \u003d (l + h)/2;   \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe multiply mid by itself to get it\u0027s square\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elong double l \u003d 0, h \u003d 1000000000, mid, target;\ncin \u0026gt;\u0026gt; target;\nwhile(l \u0026lt;\u003d h)\n{\n    mid \u003d (l + h)/2;   \n    long double Square \u003d mid * mid;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe check if Square is our target, as we have previously set our precision to be 7 digits, by checking if subtracting Square from target will give us a value that is smaller than 0.0000001 and bigger than 0.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif(Square - target \u0026lt; 0.0000001 \u0026amp;\u0026amp; Square - target \u0026gt; 0)\n{\n    \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat is our target! Display it and break out of the loop.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif(Square - target \u0026lt; 0.0000001 \u0026amp;\u0026amp; Square - target \u0026gt; 0)\n{\n    cout \u0026lt;\u0026lt; fixed \u0026lt;\u0026lt; setprecision(7) \u0026lt;\u0026lt; mid \u0026lt;\u0026lt; endl;\n    break;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eContinuing on with our binary search, if it is bigger than or equal 0.00001 then mid is bigger than the answer, therefore we need to look for something smaller.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif(Square - target \u0026lt; 0.0000001 \u0026amp;\u0026amp; Square - target \u0026gt; 0)\n{\n    cout \u0026lt;\u0026lt; mid \u0026lt;\u0026lt; endl;\n    break;\n}\nelse if(Square - target \u0026gt;\u003d 0.00001)\n{\n    r \u003d mid - 0.00000001;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNotice that when we were resetting r, we didn\u0027t write \u003ccode\u003emid - 1\u003c/code\u003e , instead we wrote \u003ccode\u003emid - 0.00000001\u003c/code\u003e, that is because 0.00000001 is bigger than our precision, so when we subtract it from mid we get to the number right before mid that is within our precision range, it would also work if we just said \u003ccode\u003er \u003d mid\u003c/code\u003e.\u003c/p\u003e\u003cp\u003enote that \u003ccode\u003emid - 0.00000001\u003c/code\u003e is one zero bigger than it\u0027s counterpart in the condition.\u003c/p\u003e\u003cp\u003eif it isn\u0027t equal nor bigger, then it is smaller, we would then need to look for something bigger.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif(Square - target \u0026lt; 0.00001 \u0026amp;\u0026amp; Square - target \u0026gt; 0)\n{\n    cout \u0026lt;\u0026lt; mid \u0026lt;\u0026lt; endl;\n    break;\n}\nelse if(Square - target \u0026gt;\u003d 0.00001)\n{\n    r \u003d mid - 0.00000001;\n}\nelse\n{\n    l \u003d mid + 0.00000001;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinally, our code would be something like this.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elong double l \u003d 0, h \u003d 1000000000, mid, target, res;\ncin \u0026gt;\u0026gt; target;\nwhile(l \u0026lt;\u003d h)\n{\n   mid \u003d (l + h)/2;\n   long double Square \u003d mid * mid;\n   if(Square - target \u0026lt; 0.0000001 \u0026amp;\u0026amp; Square - target \u0026gt; 0)\n   {\n       cout \u0026lt;\u0026lt; fixed \u0026lt;\u0026lt; setprecision(7) \u0026lt;\u0026lt; mid \u0026lt;\u0026lt; endl;\n       break;\n   }\n   else if(Square - target \u0026gt;\u003d 0.0000001)\n   {\n       h \u003d mid - 0.00000001;\n   }\n   else\n   {\n       l \u003d mid + 0.00000001;\n   }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":[]}}