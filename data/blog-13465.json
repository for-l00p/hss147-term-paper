{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1408557018,"rating":93,"authorHandle":"vitux","modificationTimeSeconds":1408602725,"id":13465,"title":"\u003cp\u003eCodeforces Round #262 (Div. 2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/460/problem/A\" title\u003d\"Codeforces Round 262 (Div. 2)\"\u003e460A - Vasya and Socks\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAt this problem you need to model what written in statements. Also, it can be proved, that answer can be calculated using formula: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7b/88/7b88f164e87b95cb0134647e4d3390c797fdd793.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e , where \u003cspan class\u003d\"tex-span\"\u003e⌊ \u003ci\u003ex\u003c/i\u003e⌋\u003c/span\u003e is the integer part of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/460/submission/7536107\" title\u003d\"Submission 7536107 by vitux\"\u003e7536107\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/460/problem/B\" title\u003d\"Codeforces Round 262 (Div. 2)\"\u003e460B - Little Dima and Equation\u003c/a\u003e\u003c/p\u003e\u003cp\u003eObviously \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e can take only integer values and \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003eS\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) ≤ 81\u003c/span\u003e. Let\u0027s check \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e81\u003c/span\u003e, and calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e * \u003ci\u003eS\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sup\u003e + \u003ci\u003eC\u003c/i\u003e\u003c/span\u003e. After that if sum of digits of this number is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e, it is positive and less than \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e\u003c/span\u003e, than it is a solution.\u003c/p\u003e\u003cp\u003eThere could be bug because of using C++ pow() function.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/460/submission/7536153\" title\u003d\"Submission 7536153 by vitux\"\u003e7536153\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/460/problem/C\" title\u003d\"Codeforces Round 262 (Div. 2)\"\u003e460C - Present\u003c/a\u003e\u003c/p\u003e\u003cp\u003eNote,that answer is positive integer not greater than \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e + 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e. Using binary search on answer, we will find answer. Really, we can check in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e if some height is achievable. We go from left to right. For current flower we calculate how much times it need to be watered to stand not lower than checking value. If cuurent flower need to be watered for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e times, we will star \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e segments in current flower. We would keep array, in which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003est\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e — number of segments, which starts in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th flower. Also, we will keep variable, in which we will keep number of segments, which cover current flower. This variable could be updated at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e. Really, to get new value we just need to subtract \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003est\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e  -  \u003ci\u003ew\u003c/i\u003e]\u003c/span\u003e, and, if we create new segments, to add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003est\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e\u003c/p\u003e\u003cp\u003eAlso, it can be proved that simple greedy algorithm works. At every of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e iterations we can find the leftmost flower with the smallest height and water the segment, which begins in it. Primitive realisation works at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enm\u003c/i\u003e)\u003c/span\u003e, so you need to use data structure, which can add on segment and find minimum at segment. For example, you can use segment tree with lazy updation or sqrt-decomposition. Such solutions works longer, but faster than TL\u003c/p\u003e\u003cp\u003eProve: Consider any optimal sequence of moves (using which max. answer reachs). Consider initially the leftmost smallest flower, and suppose all segments which covers it.(suppose, there are at least \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e segment, because else answer is initial height of this flower, so we can put a segment to start in this flower, and answer would not change). Suppose that there are no segments, which starts from current flower. Consider the rightests of segments.(If there are more than one, than any of them). Than, we can move this segment to start in the initially leftmost smallest flower, and the answer would not change. Really, flowers, which earlier was at this segments were higher, than leftmost smallest, and were watered not least times. So, after we moved the answer had not decreased. So, new sequence is also optimal. So, there is sequence of moves, which consists the segment, which starts at the initially leftmost smallest flower. So, let use this. Similary to other of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e days, and it would be optimally. \u003ca href\u003d\"/contest/460/submission/7536171\" title\u003d\"Submission 7536171 by vitux\"\u003e7536171\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/460/problem/D\" title\u003d\"Codeforces Round 262 (Div. 2)\"\u003e460D - Little Victor and Set\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e ≤ 4\u003c/span\u003e we can all subsets of size not greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Else, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 1\u003c/span\u003e, obviously that answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 2\u003c/span\u003e, answer is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exor\u003c/i\u003e\u003c/span\u003e of numbers \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ex\u003c/i\u003e + 1\u003c/span\u003e equls \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≥ 4\u003c/span\u003e answer is \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exor\u003c/i\u003e\u003c/span\u003e of to pairs with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exor\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 3\u003c/span\u003e, we can choose numbers \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ex\u003c/i\u003e + 1\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exor\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. So we need to know, if we can get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exor\u003c/i\u003e\u003c/span\u003e equals \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. Suppose that there are 3 such numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e ≥ \u003ci\u003ex\u003c/i\u003e \u0026gt; \u003ci\u003ey\u003c/i\u003e \u0026gt; \u003ci\u003ez\u003c/i\u003e ≥ \u003ci\u003el\u003c/i\u003e\u003c/span\u003e) with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exor\u003c/i\u003e\u003c/span\u003e equals \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. Consider the most non-zero bit of number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. At the same bit of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e it\u0027s also \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exor\u003c/i\u003e\u003c/span\u003e equls 0, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e \u0026gt; \u003ci\u003ez\u003c/i\u003e\u003c/span\u003e. Consider the next bit of numbers. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e have \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e there, we have to do next: set the previous bit of numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e equals \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, and set current bit equals \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. Obviously \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exor\u003c/i\u003e\u003c/span\u003e still equals 0, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e hadn\u0027t changed and numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e stood closer to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e, so they are still at \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e.And \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u0026gt; \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e.Consider the next bit of numbers. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e has zero here than we will change most bits of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e at the same way and so on. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e \u0026gt; 0\u003c/span\u003e, so somewhen we will get to bit in which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e has \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. Since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exor\u003c/i\u003e\u003c/span\u003e equals \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, the same bit of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e would be \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u0026gt; \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e would have \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e there. At the next bits we will change bit in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, and in numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e.Finally \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e would be greater or equal than before, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e would be less or greater than before, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u0026gt; \u003ci\u003ey\u003c/i\u003e \u0026gt; \u003ci\u003ez\u003c/i\u003e\u003c/span\u003e would be correct. So, we have the next: if such numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e exist than also exist numbers:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e1100…000\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e1011…111\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e0111…111\u003c/span\u003e\u003c/p\u003e\u003cp\u003ewith \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exor\u003c/i\u003e\u003c/span\u003e equals \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. There are not much such triples, so we can check them.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/460/submission/7536186\" title\u003d\"Submission 7536186 by vitux\"\u003e7536186\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/460/problem/E\" title\u003d\"Codeforces Round 262 (Div. 2)\"\u003e460E - Roland and Rose\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFormal statement: 2 natural numbers are given: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e — radii, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e — number of points. You have to choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e unnesessarily distinct points \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ...\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e which are lying inside or on side of circle, such that \u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/67/39/67397d91798cf930a841f01dfc7fd016c426c35f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003etakes its maximal value.\u003c/p\u003e\u003cp\u003eAt first let \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/32/44/3244beb2589d3202f224de559dea03a3df290d03.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e be a vector from \u003cspan class\u003d\"tex-span\"\u003e(0, 0)\u003c/span\u003e to point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Value of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/67/39/67397d91798cf930a841f01dfc7fd016c426c35f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is equal \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ad/9b/ad9bb752cf16de1475027f4a9791196b8fe4a2a2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, what is equal to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/15/8d/158d97077f66950fb17c963f50010765914eab9c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and it can be rewritten as \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/54/a4/54a4e36a1e20d374bd57896cb5ca6a91caa8c240.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. It makes us think that it is more profitable take point which are close to circle, such that \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e|\u003c/span\u003e would be as big as can, but value of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/51/4b/514ba5b69ec6b6c564df084d7390c56eaeea5015.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e as little as can. After that it becomes obvious, that if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is even, than it\u0027s enough to take any diameter and place half of points to the start and another half to the finish of it. Now we\u0027re trying to formulate our guessians strictly. Let\u0027s take an optimal set of points. Let\u0027s mark coordinats as \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e), (\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e), ..., (\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e.Let\u0027s first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e - 1\u003c/span\u003e points are fixed, and we can move last point — \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e. In terms of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e we\u0027d like to maximize\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e9/74/e974366cb8d1f822a0da1b9ff41d2e4b3901c457.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eWe left out all squares without \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. Maximization of this \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e function is equivalent to maximization of \u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/38/e6/38e6a3f0dd333ec78bf6fcd3c03ab95d5f228817.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/00/81/0081ced6ea4e430ab7c215b28555df290ec1fb7d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7e/1e/7e1edeb3e10fe71369b748df88e1b6dc097f52c8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eSo, we\u0027ve reduced our problem to finding the furthest integer point from \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5b/d2/5bd29ea6934fbf3c8c3a88a5b21f90d511df1922.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Now we can declare: the furthest point is placed at one vertex of convex hull of all integer points inside the circle. \u003c/p\u003e\u003cp\u003eProof. Let \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5b/d2/5bd29ea6934fbf3c8c3a88a5b21f90d511df1922.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e be a point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e, and the furthest integer point inside \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e (convex hull) is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e(obviously, it placed somewhere in convex hull). Lets extend \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eTX\u003c/i\u003e\u003c/span\u003e beyond \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e to intersection with one side of polygon — let it be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eAB\u003c/i\u003e\u003c/span\u003e, and lets mark point of intersection as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u0027\u003c/span\u003e. Clearly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eTX\u003c/i\u003e\u0027 ≥ \u003ci\u003eTX\u003c/i\u003e\u003c/span\u003e. It\u0027s easy to see, that one of angles \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/13/50/1350252fbd013b9cccc49a4baafae599ec4b4104.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/40/80/408041545b4ab131733e182623094ce5276e030a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is obtuse, so, according to properties of obtuse triangles on of inequalities holds: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eTA\u003c/i\u003e ≥ \u003ci\u003eTX\u003c/i\u003e\u0027 ≥ \u003ci\u003eTX\u003c/i\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eTB\u003c/i\u003e ≥ \u003ci\u003eTX\u003c/i\u003e\u0027 ≥ \u003ci\u003eTX\u003c/i\u003e\u003c/span\u003e, so, we can replace \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e, and distanse \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eTX\u003c/i\u003e\u003c/span\u003e will increase. \u003c/p\u003e\u003cp\u003eSo, we can assume, that every point in optimal set belongs to the convex hull. So, solution is check all sets of points from convex hull and check values on this sets. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e ≤ 30\u003c/span\u003e, then convex hull contains no more than 36 points — it\u0027s easy to check with computer. So, brute force will take \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/26/50/26502422c1d83eca6a04a46534b9a7864452f620.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time, and it passes TL easily (depending on realizations and optimizations).\u003c/p\u003e\u003cp\u003eFor those, who interested in realization of algorithm: at first we place convex hull to some vector(and points become ordered). After that we build recursion function with the next parameters:1) how many points in the set on this iteration 2) vector with points 3) sum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e-coordinats of points from set 4) sum of squares of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e- coordinates 5) sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e-coordinates 6) sum of squares of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e-coordinates.\u003c/p\u003e\u003cp\u003eOn each iteration we take last point from set, and trying to add all points, starting with this, and finishing on the end of convex hull — it starts new iteration of recursion. Also, we recalculate meaning of cur value in fast way using parameters 3, 4, 5 and 6.\u003c/p\u003e\u003cp\u003eOn the last iteration, when we took \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e points, we are comparing value on this set with maximal value. If maximal value is less, than cur value, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxvalue\u003c/i\u003e \u003d \u003ci\u003ecurvalue\u003c/i\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebestvector\u003c/i\u003e \u003d \u003ci\u003ecursetofpoints\u003c/i\u003e\u003c/span\u003e. After recursion we output \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxvalue\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebestvector\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/460/submission/7536206\" title\u003d\"Submission 7536206 by vitux\"\u003e7536206\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD\u003c/strong\u003e Editorial of problem C was expanded\u003c/p\u003e\u003c/div\u003e","tags":["262","editorial"]}}