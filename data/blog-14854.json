{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1416844075,"rating":100,"authorHandle":"adamant","modificationTimeSeconds":1417193808,"id":14854,"title":"\u003cp\u003eAho-Corasick algorithm. Construction\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi everyone!\u003c/p\u003e\u003cp\u003eThis time I would like to write about the Aho-Corasick algorithm. This structure is very well documented and many of you may already know it. However, I still would try to describe some of the applications that are not so well known. \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eThis algorithm was proposed by Alfred Aho and Margaret Corasick. Its is optimal string pattern matching algorithm. e.g. given the string set \u003cspan class\u003d\"tex-span\"\u003e{\u0026quot;\u003ci\u003ea\u003c/i\u003e\u0026quot;, \u0026quot;\u003ci\u003eabba\u003c/i\u003e\u0026quot;, \u0026quot;\u003ci\u003eacb\u003c/i\u003e\u0026quot;}\u003c/span\u003e and given text, say, \u003cspan class\u003d\"tex-span\"\u003e\u0026quot;\u003ci\u003eabacabba\u003c/i\u003e\u0026quot;\u003c/span\u003e. With Aho-Corasick algorithm we can for each string from the set say whether it occurs in the text and, for example, indicate the first occurrence of a string in the text in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d7/a3/d7a39f3ce6af2897aef5fa6e025ccdd9c1b6fd81.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eT\u003c/i\u003e|\u003c/span\u003e is the total length of the text, and \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eS\u003c/i\u003e|\u003c/span\u003e is the total length of the pattern. But in fact it is a drop in the ocean compared to what this algorithm allows.\u003c/p\u003e\u003cp\u003eTo understand how all this should be done let\u0027s turn to the prefix-function and KMP. Let me remind you, the prefix function is called array \u003cspan class\u003d\"tex-span\"\u003eπ[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e): \u003ci\u003es\u003c/i\u003e[0..\u003ci\u003ek\u003c/i\u003e) \u003d \u003ci\u003es\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e..\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, ie, \u003cspan class\u003d\"tex-span\"\u003eπ[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e is the length of the longest own suffix that matches the prefix of the substring \u003cspan class\u003d\"tex-span\"\u003e[0..\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. Consider the simplest algorithm to obtain it. Suppose we have counted all the \u003cspan class\u003d\"tex-span\"\u003eπ\u003c/span\u003e values on the interval from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e. In this case, we can repeatedly \u0026quot;jump\u0026quot; to positions \u003cspan class\u003d\"tex-span\"\u003eπ[\u003ci\u003ei\u003c/i\u003e - 1], π[π[\u003ci\u003ei\u003c/i\u003e - 1] - 1], π[π[π[\u003ci\u003ei\u003c/i\u003e - 1] - 1] - 1]\u003c/span\u003e... and so on. Let the moment after a series of jumps, we are in a position of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003et\u003c/i\u003e + 1] \u003d \u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e is maximum possible, then \u003cspan class\u003d\"tex-span\"\u003eπ[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003et\u003c/i\u003e + 1\u003c/span\u003e. If we will count the \u003cspan class\u003d\"tex-span\"\u003eπ\u003c/span\u003e as described above, we will get it in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/72/58/72586b0a63e260f84ef51e7564e30c32ed111e49.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eNow, let\u0027s build \u003cem\u003eautomaton\u003c/em\u003e that will allow us to know what is the length of the longest suffix of some text \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e which is also the prefix of string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e and in addition add characters to the end of the text, quickly recounting this information. So, let\u0027s \u0026quot;feed\u0026quot; the automaton with text, ie, add characters to it one by one. If we can make transition now, then all is OK. Otherwise, we go through \u003cem\u003esuffix link\u003c/em\u003e until we find the desired transition and continue. Let\u0027s say suffix link is a pointer to the state corresponding to the longest own suffix of the current state. It is easy to see that suffix links in such automatons is the same as \u003cspan class\u003d\"tex-span\"\u003eπ\u003c/span\u003e from KMP. So now for given string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e we can answer the queries whether it is a substring of text \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eFinally, let us return to the general string patterns matching. Firstly may seem that this is just the beginning of a long and tedious description of the algorithm, but in fact the algorithm has already been described, and if you understand everything stated above, you\u0027ll understand what I write now.\u003c/p\u003e\u003cp\u003eSo let\u0027s generalize automaton obtained earlier (let\u0027s call it a prefix automaton) Uniting our pattern set in \u003ca href\u003d\"https://wikipedia.org/wiki/trie\"\u003etrie\u003c/a\u003e. Now let\u0027s turn it into automaton — at each vertex of trie will be stored suffix link to the state corresponding to the largest suffix of the path to the given vertex, which is present in the trie. You can see that it is absolutely the same way as it is done in the prefix automaton. It remains only to learn how to obtain these links.\u003c/p\u003e\u003cp\u003eI suggest doing it this way: run a breadth-first search from the root. Then we \u0026quot;push\u0026quot; suffix links to all its descendants in trie with the same principle, as it\u0027s done in the prefix automaton. This solution is appropriate because if we are in the vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e in a bfs, we already counted the answer for all vertices whose height is less than one for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, and it is exactly requirement we used in KMP. There are also some other methods, as \u0026quot;lazy\u0026quot; dynamics, they can be seen, for example, at \u003ca href\u003d\"http://e-maxx.ru\"\u003ee-maxx.ru\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eBasic implementation: \u003ca href\u003d\"http://ideone.com/J1XjX6\"\u003ehttp://ideone.com/J1XjX6\u003c/a\u003e \u003cbr /\u003e Alternative one: \u003ca href\u003d\"http://ideone.com/0cMjZJ\"\u003ehttp://ideone.com/0cMjZJ\u003c/a\u003e \u003cbr /\u003e You can easily see the KMP in the \u003ccode\u003epush_links()\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eRecommended problems:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003ca href\u003d\"http://uva.onlinejudge.org/index.php?option\u003donlinejudge\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d1620\"\u003eUVA — I love strings!!\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1269\"\u003eTimus 1269 — Obscene Words Filter\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1158\"\u003eTimus 1158 — Censored!\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"http://acm.mipt.ru/judge/problems.pl?problem\u003d014\"\u003eMIPT El Judge 014 — War-cry\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"http://www.spoj.com/problems/MORSE/\"\u003eSPOJ — Morse\u003c/a\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eLater, I would like to tell about some of the more advanced tricks with this structure, as well as an about interesting related structure. So stay tuned :)\u003c/p\u003e\u003c/div\u003e","tags":["strings","aho-corasick","pattern_matching"]}}