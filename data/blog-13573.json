{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1409085984,"rating":6,"authorHandle":"retuor89","modificationTimeSeconds":1409086158,"id":13573,"title":"\u003cp\u003eUndone by strlen()\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eGreetings !\u003c/p\u003e\u003cp\u003eAnother day , another opportunity to thank the brilliant minds out here for teaching me something valuable. I am a novice in competitive programming , as evident from my graph and the kind of mistakes I make. But today was an all new low.\u003c/p\u003e\u003cp\u003eProblem B for Div 2 had pretty simple logic using a Greedy approach. To mention two of my submissions:\u003c/p\u003e\u003ch1\u003e7587946 : Timed out on TC 21\u003c/h1\u003e\u003ch1\u003e7599421 : Accepted.\u003c/h1\u003e\u003cp\u003eThe only difference b/w the submissions is that earlier,while fetching the character frequencies, I had used strlen() to find the loop boundaries. Yes , it was extremely stupid since the length of the string was already provided in the input. Another classic rookie mistake !! When I ran some tests on my local machine , I could find a 5x increase in the execution times with strlen().\u003c/p\u003e\u003cp\u003eAfter reading a bit on strlen() , I learnt about it\u0027s iterative nature in calculating the length of the string. What I cannot help wonder is the reason for such an implementation. Since strings are stored contiguously in the thread stack, wouldn\u0027t it better to simply calculate the total memory occupied by the string. That itself would give its length.\u003c/p\u003e\u003cp\u003eCan anyone shed some light on this?\u003c/p\u003e\u003cp\u003eThanks!!\u003c/p\u003e\u003c/div\u003e","tags":["#strings"]}}