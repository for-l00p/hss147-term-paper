{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1411159910,"rating":17,"authorHandle":"Yury_Bandarchuk","modificationTimeSeconds":1411226844,"id":13870,"title":"\u003cp\u003eРазбор задач Codeforces Round #267 (Div. 2)\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/467/problem/A\" title\u003d\"Codeforces Round 267 (Div. 2)\"\u003e467A - Юра и заселение\u003c/a\u003e\u003c/p\u003e\u003cp\u003eВ этой задаче нужно было просто посчитать количество пар, у которых \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ 2\u003c/span\u003e\u003c/p\u003e\u003cp\u003eАсимптотика: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/467/problem/B\" title\u003d\"Codeforces Round 267 (Div. 2)\"\u003e467B - Федя и новая игра\u003c/a\u003e\u003c/p\u003e\u003cp\u003eВ этой задаче нужно было уметь считать количество различных битов в двух числах. Как вариант, можно просто побежать по битам и посчитать количество различных. Ещё, как вариант, если исходные два числа \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eY\u003c/i\u003e\u003c/span\u003e, то количество различных битов равнялось бы количеству единиц в числе \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e \u003ci\u003exor\u003c/i\u003e \u003ci\u003eY\u003c/i\u003e\u003c/span\u003e, где \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exor\u003c/i\u003e\u003c/span\u003e — операция исключающего или.\u003c/p\u003e\u003cp\u003eАсимптотика \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e·\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/467/problem/C\" title\u003d\"Codeforces Round 267 (Div. 2)\"\u003e467C - Юра и работа\u003c/a\u003e\u003c/p\u003e\u003cp\u003eРешение этой задачи — динамическое программирование. Изначально нужно посчитать \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epsum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, где \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epsum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — сумма на префиксе массива \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e длиной \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eОбозначим \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — максимальная прибыль которую может получить Юра, если мы уже выбрали \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e последовательностей и последний элемент в \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-ой последовательности имеет индекс \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eОчевидно, что если \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e·\u003ci\u003em\u003c/i\u003e \u0026gt; \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, то \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e. Иначе \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e - 1\u003c/sub\u003e, \u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1, \u003ci\u003ej\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003epsum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003epsum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e Ответом будет \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eЕщё нужно было не забыть использовать \u003cstrong\u003elong long\u003c/strong\u003e при вычислениях.\u003c/p\u003e\u003cp\u003eАсимптотика: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e·\u003ci\u003eK\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/467/problem/D\" title\u003d\"Codeforces Round 267 (Div. 2)\"\u003e467D - Федя и реферат\u003c/a\u003e\u003c/p\u003e\u003cp\u003eПервое, что нужно сделать, чтобы облегчить себе работу — перевести все строки в нижний регистр. Затем словам дать номера. Различным словам дать различные номера, а одинаковым — одинаковые.\u003c/p\u003e\u003cp\u003eЗатем, из всех строк нужно построить граф. Пусть каждое слово — просто вершина. А пара слов синонимов \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eY\u003c/i\u003e\u003c/span\u003e — ребро между вершинами, которые отвечают за данные слова. Ребра ориентированные. Также, для каждого слова мы должны хранить его длину и количество букв \u003cspan class\u003d\"tex-span\"\u003e«\u003ci\u003eR\u003c/i\u003e»\u003c/span\u003e. Будем использовать номера, данные словам, для построения графа.\u003c/p\u003e\u003cp\u003eПосле создания графа, у нас мог быть петли, кратные ребра, циклы. Поэтому нужно сжать все сильно связные компоненты в одну вершину. После чего задача состоит в том, чтобы посчитать \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ever\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — пара, отвечающая за минимальное количество букв \u003cspan class\u003d\"tex-span\"\u003e«\u003ci\u003eR\u003c/i\u003e»\u003c/span\u003e и минимальную длину слова с минимальным количеством букв \u003cspan class\u003d\"tex-span\"\u003e«\u003ci\u003eR\u003c/i\u003e»\u003c/span\u003e, которым можно заменить слово, за которое отвечает вершина \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ever\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eПересчет очевиден — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ever\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003enextVev\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ever\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, где \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enextVer\u003c/i\u003e\u003c/span\u003e — все вершины, в которые можно пойти из \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ever\u003c/i\u003e\u003c/span\u003e. Максимум из двух пар берется как у pair в C++.\u003c/p\u003e\u003cp\u003eЗатем нужно пройти по всем словам текста, получить номер вершины, который соответствует нужному слову. Пусть это \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ever\u003c/i\u003e\u003c/span\u003e. Тогда к ответу нужно прибавить \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ever\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eТакже, важно было не забыть использовать \u003cstrong\u003elong long\u003c/strong\u003e при вычислениях.\u003c/p\u003e\u003cp\u003eАсимптотика: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/98/ca/98cacbbb32ad8567bd1878d8201dc2b3a6a376a9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, где \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e — множество всех слов, которые есть в тексте и в словаре.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/467/problem/E\" title\u003d\"Codeforces Round 267 (Div. 2)\"\u003e467E - Леша и сложная задача\u003c/a\u003e\u003c/p\u003e\u003cp\u003eДанная задача решалась жадно. \u003c/p\u003e\u003cp\u003eАлгоритм решения такой: \u003c/p\u003e\u003cp\u003eНабираем числа из массива \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e по очереди, пока в последовательности набранных чисел(далее \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/span\u003e) не найдется нужная нам четверка. Напоминаю, что нужная четверка чисел имеет вид: \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e] \u003d [\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e]\u003c/span\u003e. Если набрали такую четверку чисел, то добавляем в ответ. Очищаем \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e (далее будет описано, что такое \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eОчевидно, что этот алгоритм оптимален.\u003c/p\u003e\u003cp\u003eДля удобности сжимаем числа в массиве \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. То есть каждому числу присваиваем его порядковый номер в отсортированном списке всех уникальных чисел из массива \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. Это делается, потому что в дальнейшем нам удобнее использовать числа порядка \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e. Теперь как быстро узнать, что в \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/span\u003e найдется нужная нам четверка.\u003c/p\u003e\u003cp\u003eДавайте для каждого уникального числа \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e хранить список его позиций в \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/span\u003e. Назовем этот список \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Теперь просто можно обработать операцию добавления числа в \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/span\u003e. Пусть добавляемое число — это \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e. Добавим число \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e в список \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/span\u003e. Пусть \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e — позиция добавленного числа в список \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eТеперь давайте добавим позицию \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e в список \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eМожно заметить такой факт:\u003c/p\u003e\u003cp\u003eЕсли размер списка \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e равен 4, то мы нашли нужную нам четверку.\u003c/p\u003e\u003cp\u003eМожно заметить ещё один факт: \u003c/p\u003e\u003cp\u003eЕсли до добавления мы не нашли нужную четверку чисел, а после добавления нашли, то последнее добавленное число является последним в четверке. То есть наше последнее добавленное число равно \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e\u003c/span\u003e. Значит мы знаем позицию последнего числа из четверки. Давайте переберем позицию числа \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e. Всего возможных позиций числа \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e не больше двух, так как всего позиций, на которых стоит число \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, не больше трех (смотреть предыдущий факт). Одна позиция уже занята числом \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e\u003c/span\u003e. Итого остается максимум две позиции. Пусть мы проверяем, то что \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e имеет позицию \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e, а \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e\u003c/span\u003e имеет позицию \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e. Остается только проверить существование таких \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e, что \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e и их позиции \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e соответственно. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e должны удовлетворять следующим условиям: \u003cspan class\u003d\"tex-span\"\u003e1 \u0026lt; \u003ci\u003eP\u003c/i\u003e \u0026lt; \u003ci\u003eL\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e \u0026lt; \u003ci\u003eQ\u003c/i\u003e \u0026lt; \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e. Это очень легко проверить. Давайте заведем массив \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003c/span\u003e максимальное \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, что \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eG\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Поддерживать такой массив не составляет труда. Теперь проверка будет требовать только одного запроса: Максимум на отрезке \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003eL\u003c/i\u003e - 1]\u003c/span\u003e в массиве \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e. Пусть результат запроса равен \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eZ\u003c/i\u003e\u003c/span\u003e. Если он удовлетворяет условию \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e \u0026lt; \u003ci\u003eZ\u003c/i\u003e \u0026lt; \u003ci\u003eR\u003c/i\u003e\u003c/span\u003e, то четверка существует. Этим запросом мы нашли позицию числа \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e в списке \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/span\u003e. По этим данным мы можем восстановить четверку.\u003c/p\u003e\u003cp\u003eЧтобы найти максимум на отрезке за \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/66/6c/666cc239bd9595b8818555e063d8d8b69ad0cda0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, можно воспользоваться деревом отрезков или деревом Фенвика.\u003c/p\u003e\u003cp\u003eИтоговая асимптотика: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e9/82/e9824f6612c4b83669d669fe6fd4d9e558305dfd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["разбор задач","cf #267"]}}