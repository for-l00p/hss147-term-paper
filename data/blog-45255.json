{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1465140252,"rating":12,"authorHandle":"0xA28","modificationTimeSeconds":1465141240,"id":45255,"title":"\u003cp\u003eAmbiguity in Data Structures with Amortized Analysis O(1) Operations\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eAs I managed to understand, When we are dealing with some dynamic data structure which has an average cost of O(1) Amortized Analysis in push and pop operations like vector in c++, the vector takes constant time per each push till it reaches to the Nth push (N \u003d current size reserved), in the Nth push it takes linear time to allocate a new space typically with double the old size, and pretty the same done in pop operations.\u003c/p\u003e\u003cp\u003eNow assume that we have a vector of N current reserved space with N â€” 1 elements, every time we push a new element into the vector then pop it again, is this done in a linear time to change the allocated space ? it seems not, but why ?\u003c/p\u003e\u003c/div\u003e","tags":[]}}