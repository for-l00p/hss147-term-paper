{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1427648005,"rating":52,"authorHandle":"fushar","modificationTimeSeconds":1427650314,"id":17194,"title":"\u003cp\u003eIntroducing tcframe: A New Test Cases Generator Framework\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello!\u003c/p\u003e\u003cp\u003eI have been writing a new test cases generator framework for IOI-style problems for several months. It should be quite stable now, so I would like to share it to you.\u003c/p\u003e\u003cp\u003eFirst of all, let me tell the source of inspiration of this new framework.\u003c/p\u003e\u003ch4\u003etestlib\u003c/h4\u003e\u003cp\u003e(\u003ca href\u003d\"https://code.google.com/p/testlib/\"\u003ehttps://code.google.com/p/testlib/\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eI discovered \u003ca class\u003d\"rated-user user-admin\" href\u003d\"/profile/MikeMirzayanov\" title\u003d\"Headquarters, MikeMirzayanov\"\u003eMikeMirzayanov\u003c/a\u003e\u0027s testlib library when I prepared Codeforces Round #192 (a.k.a. Trollforces round). It is a nice library (thank you Mike!). I wanted to use it for generating test cases for our national training camps, but it seems that it is not quite suitable for IOI-style problems which have subtasks etc. So, I created a wrapper on top of it.\u003c/p\u003e\u003ch4\u003etokilib\u003c/h4\u003e\u003cp\u003e(\u003ca href\u003d\"https://github.com/fushar/tokilib\"\u003ehttps://github.com/fushar/tokilib\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eIt is a wrapper on top of testlib. I actually wrote about it in a \u003ca href\u003d\"//codeforces.com/blog/entry/11149\"\u003eblog post\u003c/a\u003e. It essentially will call testlib\u0027s generation many times for generating multiple test cases, and testlib\u0027s validation many times for supporting subtasks.\u003c/p\u003e\u003cp\u003eIt has been very useful and quite easy to use. We have been using it for ~ 1 year for our training camps and real national OI. It really helped the problem setters to collaborate on writing test cases for the whole problemset. Their feedbacks are always positive.\u003c/p\u003e\u003ch4\u003etcframe 0.3.0 (NEW)\u003c/h4\u003e\u003cp\u003e(\u003ca href\u003d\"https://github.com/ia-toki/tcframe\"\u003ehttps://github.com/ia-toki/tcframe\u003c/a\u003e, \u003ca href\u003d\"https://tcframe.readthedocs.org/en/latest/\"\u003ehttps://tcframe.readthedocs.org/en/latest/\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eUsing the previous two solutions, we still need to write two files: a generator, and a validator. Can we somehow just merge them and only write a single file?\u003c/p\u003e\u003cp\u003eAfter brainstorming and designing for several months, I came up with a solution that I think is quite clean and neat! I completely rewrote it from scratc. It now does not depend on testlib anymore. I gave it a new name: \u003cstrong\u003etcframe\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s consider a very simple A + B problem:\u003c/p\u003e \u003chr /\u003e\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eYou are given two integers A and B. Compute A + B!\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eInput Format\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe first line contains two space-separated integers A and B.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eOutput Format\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eA single line contains the answer.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample Input\u003c/strong\u003e\u003c/p\u003e \u003cpre\u003e7 42\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eSample Output\u003c/strong\u003e\u003c/p\u003e \u003cpre\u003e49\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eSubtask 1\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e1 \u0026lt;\u003d A, B \u0026lt;\u003d 1000\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eSubtask 2\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e1 \u0026lt;\u003d A, B \u0026lt;\u003d 1000000\u003c/li\u003e \u003c/ul\u003e \u003chr /\u003e\u003cp\u003eThis is a sample generator program using \u003cstrong\u003etcframe\u003c/strong\u003e framework that generates test cases for the above problem.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026quot;tcframe/tcframe.hpp\u0026quot;\nusing namespace tcframe;\n\nclass Problem : public BaseProblem {\nprotected:\n    int A;\n    int B;\n\n    int result;\n\n    void Config() {\n        setSlug(\u0026quot;aplusb\u0026quot;);\n    }\n\n    void InputFormat() {\n        LINE(A, B);\n    }\n\n    void OutputFormat() {\n        LINE(result);\n    }\n\n    void Subtask1() {\n        CONS(1 \u0026lt;\u003d A \u0026amp;\u0026amp; A \u0026lt;\u003d 1000);\n        CONS(1 \u0026lt;\u003d B \u0026amp;\u0026amp; B \u0026lt;\u003d 1000);\n    }\n\n    void Subtask2() {\n        CONS(1 \u0026lt;\u003d A \u0026amp;\u0026amp; A \u0026lt;\u003d 1000000);\n        CONS(1 \u0026lt;\u003d B \u0026amp;\u0026amp; B \u0026lt;\u003d 1000000);\n    }\n};\n\nclass Generator : public BaseGenerator\u0026lt;Problem\u0026gt; {\nprotected:\n    void Config() {\n        setBaseDir(\u0026quot;tc\u0026quot;);\n        setSolution(\u0026quot;./solution\u0026quot;);\n    }\n\n    void SampleTestCases() {\n        SAMPLE_CASE({\n            \u0026quot;7 42\u0026quot;\n        }, {1, 2});\n    }\n\n    void TestGroup1() {\n        assignToSubtasks({1, 2});\n\n        CASE(A \u003d 1, B \u003d 1);\n        CASE(A \u003d 5, B \u003d 7);\n        CASE(A \u003d 10, B \u003d 100);\n        CASE(A \u003d 1000, B \u003d 1000);\n    }\n\n    void TestGroup2() {\n        assignToSubtasks({2});\n\n        CASE(A \u003d 1001, B \u003d 1001);\n        CASE(A \u003d 2000, B \u003d 1500);\n        CASE(A \u003d 41728, B \u003d 771823);\n        CASE(A \u003d 1000000, B \u003d 1000000);\n    }\n};\n\nint main() {\n    Generator gen;\n    return gen.generate();\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOne cool feature of this framework is that the problem specification class is really similar to the problem statement! I have brainstormed several possibilities for the syntax, and I think this is the best so far.\u003c/p\u003e\u003cp\u003eWhen run, the above program will produce the following output:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eGenerating test cases...\n\n[ SAMPLE TEST CASES ]\n  aplusb_sample_1: OK\n\n[ TEST GROUP 1 ]\n  aplusb_1_1: OK\n  aplusb_1_2: OK\n  aplusb_1_3: OK\n  aplusb_1_4: OK\n\n[ TEST GROUP 2 ]\n  aplusb_2_1: OK\n  aplusb_2_2: OK\n  aplusb_2_3: OK\n  aplusb_2_4: OK\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd all generated test case pairs will be available in \u003cstrong\u003etc\u003c/strong\u003e directory.\u003c/p\u003e\u003cp\u003eNow suppose that we made some mistakes in the generator class: instead of CASE(A \u003d 1000, B \u003d 1000), we accidentally wrote CASE(A \u003d 1000, B \u003d 10000). When the program is run, it will output a nice error message:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eGenerating test cases...\n\n[ SAMPLE TEST CASES ]\n  aplusb_sample_1: OK\n\n[ TEST GROUP 1 ]\n  aplusb_1_1: OK\n  aplusb_1_2: OK\n  aplusb_1_3: OK\n  aplusb_1_4: FAILED\n    Description: A \u003d 1000, B \u003d 10000\n    Reasons:\n    * Does not satisfy subtask 1, on constraints:\n      - 1 \u0026lt;\u003d B \u0026amp;\u0026amp; B \u0026lt;\u003d 1000\n\n[ TEST GROUP 2 ]\n  aplusb_2_1: OK\n  aplusb_2_2: OK\n  aplusb_2_3: OK\n  aplusb_2_4: OK\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat\u0027s it. You can find more complex examples on the documentation.\u003c/p\u003e\u003cp\u003eAnyway, please do try it yourself for creating test cases for your problems! I really need feedbacks from you, whether as bug reports or feature suggestions. Note that this still not a 1.0 version yet, so some syntaxes may change in the future.\u003c/p\u003e\u003cp\u003eI released this framework as open source, under MIT license. You can use it for whatever you want.\u003c/p\u003e\u003cp\u003eIf you have any questions or feedback, please post a comment on this thread\u003c/p\u003e\u003cp\u003eThanks! I hope this framework will be useful for you :)\u003c/p\u003e\u003c/div\u003e","tags":["testcase"]}}