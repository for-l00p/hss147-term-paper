{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1498720186,"rating":46,"authorHandle":"kadoban","modificationTimeSeconds":1498720289,"id":52977,"title":"\u003cp\u003eCodeforces\u0027s Haskell setup is bad (with respect to \u0026quot;Safe Haskell\u0026quot;)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThe way codeforces is using GHC\u0027s \u0026quot;Safe Haskell\u0026quot; extension is disabling the use of very common and useful modules and extensions, for no benefit that I can figure out.\u003c/p\u003e\u003cp\u003eImporting any of these:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eControl.Monad.ST\u003c/li\u003e   \u003cli\u003eData.Array.ST\u003c/li\u003e   \u003cli\u003eData.Array.MArray\u003c/li\u003e   \u003cli\u003eData.Array.IO\u003c/li\u003e   \u003cli\u003eData.Vector\u003c/li\u003e   \u003cli\u003eData.Vector.Unboxed\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e(and probably more, but these are the ones I tried) gives an error of the form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e    Control.Monad.ST: Can\u0027t be safely imported!\n    The module itself isn\u0027t safe.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAdditionally, the \u003ccode\u003eGeneralizedNewtypeDeriving\u003c/code\u003e (GND) and \u003ccode\u003eTemplateHaskell\u003c/code\u003e (TH) language extensions are disabled. (compiling with them turned on doesn\u0027t error, but they\u0027re ignored, so if you try to use them you then get errors).\u003c/p\u003e\u003cp\u003eAll of these disabled things are very useful. As-is the Haskell setup on codeforces has \u003cstrong\u003eno performant mutable arrays available at all\u003c/strong\u003e, which it\u0027s hard to overstate how wacky that is in competitive programming.\u003c/p\u003e\u003cp\u003eThe GND extension is quite useful as well since it avoids having to tediously reimplement typeclasses when you wrap a type.\u003c/p\u003e\u003cp\u003eTH is Haskell\u0027s metaprogramming facility, like templates in C++ or macros in C. It doesn\u0027t get used as much as those features do in their respective languages, but it\u0027s still handy now and then.\u003c/p\u003e\u003cp\u003eI\u0027m not really sure why all of this is disabled or exactly what switches are being used to GHC, though it\u0027s obviously related to Safe Haskell.\u003c/p\u003e\u003cp\u003eTo make it clear, the sense in which \u0026quot;Safe Haskell\u0026quot; is safe is not useful for codeforces. In the programs we write, we\u0027re allowed to do unrestricted IO (at the language level at least, I assume there\u0027s a VM wrapper or restrictions on I/O at the OS level) in the standard \u003ccode\u003emain\u003c/code\u003e entry point to haskell programs. And since we\u0027re not writing a library, this is just an executable and used for nothing else, it doesn\u0027t make sense to judge the safety of the API we\u0027re exporting. There is no safety, you\u0027re running the IO action that we specify anyway and that\u0027s the only interface.\u003c/p\u003e\u003cp\u003eI would be interested what the motivation is for turning on safe haskell, especially in this way that disallows the use of very common modules and data structures. Even if safe haskell is somehow required (maybe TH would be a risk at compile time the way CF is set up?), there are still ways to whitelist certain modules/packages so we could use them, and this would have no risk that I can imagine.\u003c/p\u003e\u003cp\u003eWhile I\u0027m at it, the version of GHC allowed is getting pretty old too. Something in the 8.x family, or even 7.10.x would be nice; there have been a couple of nice language changes since 7.8.3. Also 7.8.3 is kind of a uniquely annoying version because one of the common ways to get GHC is via the \u0027stack\u0027 tool, which doesn\u0027t support that version. The oldest it knows about is GHC 7.8.4. This makes it a bit uncertain trying to develop and test code locally for CF use.\u003c/p\u003e\u003c/div\u003e","tags":["haskell","ghc","safe haskell","array"]}}