{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1516351219,"rating":293,"authorHandle":"TooNewbie","modificationTimeSeconds":1517411767,"id":57216,"title":"\u003cp\u003e[Tutorial] Invariants and Monovariants\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello Codeforces! Some months ago I wrote tutorial about \u003ca href\u003d\"//codeforces.com/blog/entry/54154\"\u003ebasics of recurrent sequences\u003c/a\u003e. This blog, my second tutorial is about mine another favorite topic — Invariants and Monovariants. These are useful concepts which will help you solving problems, especially, constructive ones. Even if you are not familiar with this topics, I\u0027m sure that you solved problems with use of invariants and monovariants without knowing it, continue reading, you will understand my point :) There will be hard problems which are based on old IMO problems, so I will try my best to explain solutions of examples.\u003c/p\u003e\u003cp\u003eSo, what are Invariants and Monovariants? An invariant is a quantity that doesn\u0027t change. A monovariant is a quantity that changes monotically (that is, non-decreasing or non-increasing). Seems simple, yes?\u003c/p\u003e\u003cp\u003eLet\u0027s start with a few easy examples which you will better understand its point. I suggest you to try solving problems by your own before reading solution. \u003cstrong\u003eExample 0.1:\u003c/strong\u003e All numbers from 1 to 100000 are listed in the board. For each number in this board, we replace that number with its sum of digits while resulting number is bigger than 9. At the end, obviously, all numbers will be in range of [1, 9]. Determine which is bigger, number of 1\u0027s in new sequence or number of 2\u0027s?\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution 0.1:\u003c/strong\u003e It is a standard and easy problem, maybe you solved this type of problem before. We will use one well known fact to solve problem — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) - \u003ci\u003en\u003c/i\u003e\u003c/span\u003e is invariant in modulo 9, it is always 0 (where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e donates sum of digits of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e). So, resulting number will be old number modulo 9 (if this value is 0, it will be 9). For example, take number 1234, if we do given operation, resulting number will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(1234) \u003d \u003ci\u003ef\u003c/i\u003e(1 + 2 + 3 + 4) \u003d \u003ci\u003ef\u003c/i\u003e(10) \u003d \u003ci\u003ef\u003c/i\u003e(1) \u003d 1\u003c/span\u003e, which is indeed equal to 1234 modulo 9 (let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e show given operation). Finally, new sequence will be like this: 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...., 1, 2, 3, 4, 5, 6, 7, 8, 9, 1. You can see that count of 1\u0027s here is one greater than count of 2\u0027s, finding count of them is easy from this sequence also.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExample 0.2:\u003c/strong\u003e You are given 20 cards which all numbers from 0 to 9 appears in these cards exactly 2 times. Can you rearrange this cards such that, there will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e cards between cards which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is written on them (that is, cards of 0\u0027s will be adjacent, there will be 1 card between cards of 1\u0027s and so on).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution 0.2:\u003c/strong\u003e This problem is a little trickier. Let the first position of card of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (position of first card is 1 and last card is 20) (that is, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e is first position of card of 0, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e is first position of card of 1 and so on). Therefore, second position of card of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e. Sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ei\u003c/i\u003e + 1)\u003c/span\u003e would be equal to sum of all numbers from 1 to 20, because there are all positions in union of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u0027s and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e\u0027s. That sum is, \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + 0 + 1) + (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + 1 + 1) + ... + (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e9\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e9\u003c/sub\u003e + 9 + 1) \u003d 2 * (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e9\u003c/sub\u003e) + (1 + 2 + ... + 10) \u003d 2 * (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e9\u003c/sub\u003e) + 55 \u003d 1 + 2 + ... + 20 \u003d 210\u003c/span\u003e. From there, \u003cspan class\u003d\"tex-span\"\u003e2 * (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e9\u003c/sub\u003e) \u003d 155\u003c/span\u003e which is impossible, since 155 is odd number.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eRemark:\u003c/strong\u003e As you can see from this problem, there is no very special things in invariant. We used being even of \u003cspan class\u003d\"tex-span\"\u003e2 * \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e as invariant. In next example, we will solve harder problem, which it can be used as competitive programming problem.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExample 0.3:\u003c/strong\u003e There are \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e people (let them be 1, 2, 3, ..., \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e) and some of them are enemy to each other. It is guaranteed that, each of \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e people have at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e enemies. Initially, they sat on circular table in given order (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is neighbor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e2 ≤ \u003ci\u003ei\u003c/i\u003e ≤ 2\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e and 1 is neighbor of \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/span\u003e). Print finite list of moves which will rearrange people such that enemies will not be neighbor, or determine rearranging them is not possible. Here move is printed like: \u0026quot;1 l r\u0026quot; which means reverse places of people in segment [l, r] taken clockwise and \u0026quot;2 l r\u0026quot; which means reverse places of people in segment [l, r] takes counter-clockwise. Here is an sample for understanding problem better: Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 2\u003c/span\u003e and enemies are {1, 2}, {3, 4} (that means 1 and 2 are enemy to each other, also 3 and 4 are enemy to each other). Order of sitting is {1, 2, 3, 4} shown as in the picture:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"tut1\" border\u003d\"0\" src\u003d\"/predownloaded/ce/45/ce451d08f5666262c3a9950eb94da3c4842d424f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWe want to rearrange that positions with moves such that people with same color will not be neighbor. For that, we simply reverse [2, 3] taken clockwise order. New positions will be:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"tut1\" border\u003d\"0\" src\u003d\"/predownloaded/3d/ad/3dad95fb22a19c55a760bc0939f879d8736c11ff.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWhich satisfies our condition.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution 0.3:\u003c/strong\u003e We will prove that that finite list of moves are always exists. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e be enemies who are neighbor, for simplicity, consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e is on the left side of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e (in aspect of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"image\" border\u003d\"0\" src\u003d\"/predownloaded/1c/a5/1ca56ca4d6327d26fbed6b8b370f749dcd129bb6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThere are at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e enemy of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, so there will be at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e people who is not enemy of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, let them be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. For each \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, mark \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as right neighbor if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (from aspect of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e). Enemy count of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e is at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e, so all of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u0027s can\u0027t be enemy of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e \u003d \u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be one of them. Say that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e \u003d \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eX\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eX\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be persons who is sitting between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e. Now, reverse [B, C] taken counter-clockwise, shown in the picture:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"tut2\" border\u003d\"0\" src\u003d\"/predownloaded/8a/27/8a278a202e97f5bb25ffc0125b821548323c1266.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSee, nobody expect \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e, \u003ci\u003eC\u003c/i\u003e, \u003ci\u003eD\u003c/i\u003e\u003c/span\u003e changed neighbors. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e are not enemy, neither are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e, so number of neighbor enemy pairs decreased at least one and it is our monovariant in this problem. Obviously, after finite moves, count of neighbor enemy pairs will be 0 as wanted in statement.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eRemark:\u003c/strong\u003e Did you see that problem on any judge before? If yes, please write it in comments, otherwise I\u0027m planning to put this problem in SPOJ. Now, we have one more interesting problem, but without solution :) Try to solve it and share your solution with us in the comments.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExample 0.4:\u003c/strong\u003e Equilateral triangle with side \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e divided into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e little equilateral triangles of sides 1 with parallel line to big triangle\u0027s sides. For better understanding, see the picture for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 3\u003c/span\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"image\" border\u003d\"0\" src\u003d\"/predownloaded/cd/0b/cd0bf013f40d561ce1b038491768d3fc00f36315.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIn the given one of the vertices of little triangles, there is written -1, and 1 to all other vertices. For example, we write -1 to point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e in the picture, and 1 to all other vertices. Or, we write -1 to point in the middle of picture, and 1 to all others. Check if we can make all numbers 1 with limited number of moves. Here, move is selecting one little triangle and changing signs of numbers on its vertices (that is, -1\u0027s will be 1, and 1\u0027s will be -1).\u003c/p\u003e\u003cp\u003eNow, we will move to more advanced problems. Next problem is one of the my favorite problems in this topic.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExample 1.1 [Based on IMO shortlist 1989]:\u003c/strong\u003e A natural number is written in each square of an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emxn\u003c/i\u003e\u003c/span\u003e chessboard. The allowed move is to add an integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to each of two adjacent numbers in such way that non-negative numbers are obtained (two squares are adjacent if they share a common side). Check if we can make all numbers 0 after finitely many moves (Numbers written on chessboard are given, and we can choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e any number which will not violate given rules).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution 1.1:\u003c/strong\u003e In our problem, it gives us \u0026quot;chessboard\u0026quot; word which is very big hint as chessboard is colored in 2 colors. It could say just board, and it would be harder problem as we would color board in 2 colors (it is called Coloring technique in combinatorics). So, why it is big hint? Let\u0027s see. In each move, we are adding the same number to 2 squares, one of which is white and one of which is black. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e denote the sum of numbers on black and white squares, respectively, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is an invariant, because change of both \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is same. Thus if all numbers are 0 at the end, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e at the end and hence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e in the beginning as well. This condition is thus necessary; now we will prove it is also sufficient which will solve problem. Suppose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e are numbers in cells \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e, \u003ci\u003eC\u003c/i\u003e\u003c/span\u003e respectively, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e, \u003ci\u003eC\u003c/i\u003e\u003c/span\u003e are cells such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e are both adjacent to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e we can add \u003cspan class\u003d\"tex-span\"\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e to both \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, making \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e 0. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≥ \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, then add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e - \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. Then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e becomes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, and now we can add \u003cspan class\u003d\"tex-span\"\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e to both of them, making them 0. Thus we have an algorithm for reducing a positive integer to 0. Apply this in each row, making all but the last 2 entries 0. Now all columns have only zeroes expect the last two. Now apply the algorithm starting from the top of these columns, until only two adjacent non-zero numbers remain. These last numbers must be equal since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Thus we can reduce them to 0 as well. Also, we can print list of moves with this algorithm.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExample 1.2 [Based on IMO shortlist 1994, C3]:\u003c/strong\u003e Peter has 3 accounts in a bank, each with an integral number of dollars. He is only allowed to transfer money from one account to another so that the amount of money in the second one is doubled. Check if Peter can transfer all his money into two accounts. If so, print list of transfer.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution 1.2:\u003c/strong\u003e We will prove it is always possible and provide algorithm for transferring money. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e, \u003ci\u003eC\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e ≤ \u003ci\u003eB\u003c/i\u003e ≤ \u003ci\u003eC\u003c/i\u003e\u003c/span\u003e be the number of dollars in the account 1, account 2 and account 3 respectively at a particular point of time. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e \u003d 0\u003c/span\u003e initially, we are done so assume \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e \u0026gt; 0\u003c/span\u003e. As we perform any algorithm, the values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e keep changing. Our aim is to monotonically strictly decrease the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e, \u003ci\u003eC\u003c/i\u003e)\u003c/span\u003e. This will ensure that we eventually end up with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e, \u003ci\u003eC\u003c/i\u003e) \u003d 0\u003c/span\u003e and we will be done. Now, we know a very simple and useful algorithm that monotonically reduces a number — the Euclidean algorithm. So let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e \u003d \u003ci\u003eqA\u003c/i\u003e + \u003ci\u003er\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003er\u003c/i\u003e \u0026lt; \u003ci\u003eA\u003c/i\u003e\u003c/span\u003e. Our aim now is reduce the number of dollars in the second account from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e. Since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e \u0026lt; \u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, we would have reduced \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e, \u003ci\u003eC\u003c/i\u003e)\u003c/span\u003e, which was our aim. Now, since the question involves doubling certain numbers, it is a good idea to consider binary representations of numbers. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e \u003d \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + 2\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + …. + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the binary representation of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e or 1. To reduce \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, in step \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e of our algorithm, we transfer money to account 1. The transfer is from account 2 if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e \u003d 1\u003c/span\u003e and from account 3 if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e \u003d 0\u003c/span\u003e. The number of dollars in the first account starts with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and keeps doubling in each step. Thus we end up transferring \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + 2\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + …. + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e) \u003d \u003ci\u003eAq\u003c/i\u003e\u003c/span\u003e dollars from account 2 to account 1, and we are left with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e–\u003ci\u003eAq\u003c/i\u003e \u003d \u003ci\u003er\u003c/i\u003e\u003c/span\u003e dollars in account 2. We have thus succeeded in reducing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e, \u003ci\u003eC\u003c/i\u003e)\u003c/span\u003e and so we are done.\u003c/p\u003e\u003cp\u003eI have one more interesting problem, again without solution. It is easier than \u003cspan class\u003d\"tex-span\"\u003e1.1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e1.2\u003c/span\u003e, so I believe you can solve it by yourself! Anyway, I added hint in spoiler :)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExample 1.3:\u003c/strong\u003e Several positive integers are written in a row. Iteratively, Alice chooses two adjacent numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u0026gt; \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is to the left of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, and replaces the pair \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e by either \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ey\u003c/i\u003e + 1, \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e - 1, \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e. Prove that she can perform only finitely many such iterations.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHint\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eProve that maximum of the numbers written is invariant.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThanks for \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Kerim.K\" title\u003d\"Candidate Master Kerim.K\"\u003eKerim.K\u003c/a\u003e for providing us following problem and solution with invariant. I let you to solve this problem by your own.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD Example 1.4:\u003c/strong\u003e There are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e numbers on the board. In each move, Kerim selects two numbers (let them be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e) and writes \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2c/4c/2c4cf6a3039f9915ee8a3fc2aca43e68fe79181b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e instead of them (that is, he deletes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and writes given number). After \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e moves, there will remain just one number. If all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e numbers were \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e in the beginning, prove that last number will remain after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e moves is greater or equal than 1/n.\u003c/p\u003e\u003cp\u003eSo, it is end of tutorial. Hope you learned many things from this. If you have and doubts or suggestion, please declare it on comments. Thanks to \u003ca href\u003d\"https://artofproblemsolving.com/\"\u003eAoPS\u003c/a\u003e for containing IMO shortlists and Pranav A. Sriram for his book \u0026quot;Olympiad Combinatorics\u0026quot;.\u003c/p\u003e\u003c/div\u003e","tags":["combinatorics","invariants","monovariants","#tutorial"]}}