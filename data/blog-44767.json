{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1462730760,"rating":6,"authorHandle":"RussianCodeCup","modificationTimeSeconds":1462730791,"id":44767,"title":"\u003cp\u003eRussian Code Cup 2016 — Разбор задач\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eA. Binary String\u003c/h2\u003e\u003cp\u003eFirst notice that there is no solution in one of the following two cases: \u003c/p\u003e\u003cul\u003e \u003cli\u003e Either |\u003ci\u003eb\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e| \u0026gt; 1 \u003c/li\u003e\u003cli\u003e Or \u003ci\u003eb\u003c/i\u003e \u003d 0, \u003ci\u003ec\u003c/i\u003e \u003d 0, and both \u003ci\u003ea\u003c/i\u003e ≠ 0 and \u003ci\u003ed\u003c/i\u003e ≠ 0 \u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFor other cases there are two steps in the solution. First, construct the minimal string that satisfies conditions for 01 and 10 pairs. After that add \u003ci\u003ea\u003c/i\u003e - 1 zeroes after the first zero, and \u003ci\u003ed\u003c/i\u003e - 1 ones after the first one.\u003c/p\u003e\u003ch2\u003eB. Train in a Tunnel\u003c/h2\u003e \u003cp\u003eThe solution is greedy.\u003c/p\u003e\u003cp\u003eFirst let\u0027s turn the light on in the first and in the last car. Then divide the train to one or more segments of continuous cars with light off. Сonsider one such segment. Iterate over cars and when you the sum of lengths of such cars would exceed \u003ci\u003eh\u003c/i\u003e if we didn\u0027t turn the light on in the current car. Then turn the light in that car on, and continue from the next car.\u003c/p\u003e\u003ch2\u003eC. Beautiful Partition\u003c/h2\u003e \u003cp\u003eConsider \u003ci\u003ea\u003c/i\u003e[1], it is either in \u003ci\u003eM\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e, or in \u003ci\u003eM\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e. Since it doesn\u0027t matter, let it be in \u003ci\u003eM\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e. Then \u003ci\u003ea\u003c/i\u003e[1] divides \u003ci\u003egcd\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e), therefore \u003ci\u003egcd\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e) — is the divisor of \u003ci\u003ea\u003c/i\u003e[1]. \u003c/p\u003e\u003cp\u003eConsider all divisors of \u003ci\u003ea\u003c/i\u003e[1] (there are at most 1344 for numbers not exceeding 10\u003csup\u003e9\u003c/sup\u003e). For each each divisor \u003ci\u003ed\u003c/i\u003e all elements of the array that are divisible by \u003ci\u003ed\u003c/i\u003ecan be put to \u003ci\u003eM\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e (in this case \u003ci\u003egcd\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e) would not be less then \u003ci\u003ed\u003c/i\u003e, and the fewer elements are there in \u003ci\u003eM\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e — the greater \u003ci\u003egcd\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e) is), all the other elements can be put to \u003ci\u003eM\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e. The answer can be relaxed with the value \u003ci\u003emin\u003c/i\u003e(\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e), \u003ci\u003egcd\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e)). For the purpose of relaxation we can ignore that \u003ci\u003eM\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e is empty and consider \u003ci\u003egcd\u003c/i\u003e for an empty set be equal to infinity. If we put any element to \u003ci\u003eM\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e the value of \u003ci\u003egcd\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e) will not be less then \u003ci\u003ed\u003c/i\u003e in this case since all elements are divisible by \u003ci\u003ed\u003c/i\u003e.\u003c/p\u003e\u003cp\u003eThe time estimation is \u003ci\u003eO\u003c/i\u003e(\u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e[1] + \u003ci\u003ed\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e[1])·\u003ci\u003en\u003c/i\u003e) where \u003ci\u003ed\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e[1]) ≤ 1344.\u003c/p\u003e\u003ch2\u003eD. Problem Preparation\u003c/h2\u003e \u003cp\u003eFirst let us solve the problem if there are no changes in \u003ci\u003et\u003c/i\u003e\u003csub\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e. Let us generate new array \u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] equal to the count of \u003ci\u003ei\u003c/i\u003e such that \u003ci\u003et\u003c/i\u003e\u003csub\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ej\u003c/i\u003e. Also calculate the array of prefix sums for \u003ci\u003ecnt\u003c/i\u003e. Then for each \u003ci\u003ek\u003c/i\u003e we can find the time for each friend in \u003ci\u003eO\u003c/i\u003e(\u003ci\u003eMAX\u003c/i\u003e / \u003ci\u003ek\u003c/i\u003e) where \u003ci\u003eMAX\u003c/i\u003e is the maximal time needed for one problem. We just iterate over all \u003ci\u003ej\u003c/i\u003e and find the number of problems that require exactly \u003ci\u003ej\u003c/i\u003e minutes for each friend using prefix sums array. The sum for all valid \u003ci\u003ek\u003c/i\u003e of \u003ci\u003eO\u003c/i\u003e(\u003ci\u003eMAX\u003c/i\u003e / \u003ci\u003ek\u003c/i\u003e) is \u003ci\u003eO\u003c/i\u003e(\u003ci\u003eMAXlogMAX\u003c/i\u003e).\u003c/p\u003e\u003cp\u003eNow let us see what happens if we change the time needed for the problem from \u003ci\u003et\u003c/i\u003e to \u003ci\u003et\u003c/i\u003e + 1. Note that only values for \u003ci\u003ek\u003c/i\u003e which are divisors of \u003ci\u003et\u003c/i\u003e change. Since the number of divisors is small, we can just iterate over all divisors and change the answer just for them.\u003c/p\u003e\u003cp\u003eSimilar idea works when \u003ci\u003et\u003c/i\u003e changes to \u003ci\u003et\u003c/i\u003e - 1, the answer changes only for such \u003ci\u003ek\u003c/i\u003e that are divisors of \u003ci\u003et\u003c/i\u003e - 1.\u003c/p\u003e\u003ch2\u003eE. Similar Subways\u003c/h2\u003e \u003cp\u003eYou have to find isomorphic connected subtrees of the two given trees with maximal number of vertices. Let us use dynamic programming to solve the problem.\u003c/p\u003e\u003cp\u003eConsider two directed edges (\u003ci\u003eu\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e, \u003ci\u003ev\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e) in the first tree and (\u003ci\u003eu\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e, \u003ci\u003ev\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e) in the second tree. Let the value dp[\u003ci\u003eu\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e][\u003ci\u003ev\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e][\u003ci\u003eu\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e][\u003ci\u003ev\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e] be equal to the maximal size of isomorphic subtrees, such that \u003ci\u003eu\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e is corresponding to \u003ci\u003eu\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e and vertices \u003ci\u003ev\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e and \u003ci\u003ev\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e are not included into the corresponding subtrees. Additionally, let us also calculate such value for \u003ci\u003ev\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e \u003d  - 1 or \u003ci\u003ev\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e \u003d  - 1, which means that any vertex from the first/second tree can be in a subtree. Then the answer to the problem is maximum over all \u003ci\u003eu\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e, \u003ci\u003eu\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e of the values dp[\u003ci\u003eu\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e][-1][\u003ci\u003eu\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e][-1].\u003c/p\u003e\u003cp\u003eTo calculate dp[\u003ci\u003eu\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e][\u003ci\u003ev\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e][\u003ci\u003eu\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e][\u003ci\u003ev\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e] we have to make correspondence between subtrees of \u003ci\u003eu\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e in the first tree and \u003ci\u003eu\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e in the second tree. Let us note that if \u003ci\u003ee\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e is the child of \u003ci\u003eu\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e not equal to \u003ci\u003ev\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e, subtree of \u003ci\u003ee\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e contains fewer vertices then subtree of \u003ci\u003eu\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e. So if we find the values in increasing order of sizes of subtrees, we can use values for all child subtrees. The value dp[\u003ci\u003ee\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e][\u003ci\u003eu\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e][\u003ci\u003ee\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e][\u003ci\u003eu\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e] gives us the maximal number we can get if we put correspondence between \u003ci\u003ee\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e and \u003ci\u003ee\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e. So we can get the matrix \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ee\u003c/i\u003e1][\u003ci\u003ee\u003c/i\u003e2] which contains maximal values for each pair of adjacent vertices to \u003ci\u003eu\u003c/i\u003e\u003csub\u003e1\u003c/sub\u003e and \u003ci\u003eu\u003c/i\u003e\u003csub\u003e2\u003c/sub\u003e, correspondingly. Now we have to find the maximal weight matching in this matrix which can be done by mincost flow, or Hungarian algorithm. \u003c/p\u003e\u003cp\u003eThe complexity is \u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup\u003e5\u003c/sup\u003e).\u003c/p\u003e\u003c/div\u003e","tags":[]}}