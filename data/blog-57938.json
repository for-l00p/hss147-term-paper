{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1519224792,"rating":1,"authorHandle":"murugappan_s","modificationTimeSeconds":1519268919,"id":57938,"title":"\u003cp\u003eSSN CPC Contest ( 2018 ) — 2 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/group/957fuDQyd8/contest/220702/problem/A\"\u003eA. T-primes\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe can see that only prime squares are T-Primes.So the laziest way is to check whether a number is perfect square or not.If its a perfect square then by root N factorisation method check whether the root of the original number is prime or not.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity — O( n*val^(1/4) )\u003c/strong\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/group/957fuDQyd8/contest/220702/problem/B\"\u003eB. Arpa’s hard exam and Mehrdad’s naive cheat\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe question demands to find last digit of 1378^n. Now since we have to find only the last digit, the others don’t matter as they do not influence the last digit.\u003c/p\u003e\u003cp\u003eNow, for n\u003d1 , the last digit is 8.\u003c/p\u003e\u003cp\u003eFor n\u003d2, the last digit will be last digit of 8*8 which is 4.\u003c/p\u003e\u003cp\u003eFor n\u003d3, the last digit will be the last digit of 4*8 which is 2.\u003c/p\u003e\u003cp\u003eFor n\u003d4, the last digit will be the last digit of 2*8 which is 6.\u003c/p\u003e\u003cp\u003eNow 6*8’s last digit is 8 and hence the cycle repeats.\u003c/p\u003e\u003cp\u003eWe can see if n%4 is:\u003c/p\u003e\u003cp\u003e1 – Answer is 8\u003c/p\u003e\u003cp\u003e2 – Answer is 4\u003c/p\u003e\u003cp\u003e3 – Answer is 2\u003c/p\u003e\u003cp\u003e0 – Answer is 6\u003c/p\u003e\u003cp\u003eThe corner case is for n\u003d0 the last digit is 1.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity – O(1)\u003c/strong\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/group/957fuDQyd8/contest/220702/problem/C\"\u003eC. Bear and Poker\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe question asks us to find out whether we can multiply some or all of the the numbers by 2 or 3 any number of times and make them equal.\u003c/p\u003e\u003cp\u003eThe main thing to note here is that the number of 2 and 3 factors are alone changed by the above operation,which means other factors must be equal in the given set of numbers.So the easiest way to solve the problem is to divide all the numbers by 2 and 3 until they become not divisible by 2 and 3.\u003c/p\u003e\u003cp\u003eNow if they are equal then the answer exists else the answer doesn\u0027t exist.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity — O( nlog(val) )\u003c/strong\u003e \u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/group/957fuDQyd8/contest/220702/problem/D\"\u003eD. Factory\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFind the first m elements(mod values) of the sequence.If it doesn\u0027t reach 0 then there is a loop in the sequence and it goes on infinitely( this is just an intuition,for better clarity check out PigeonHolePrinciple ).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity — O( m )\u003c/strong\u003e \u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/group/957fuDQyd8/contest/220702/problem/E\"\u003eE. Reducing Fractions\u003c/a\u003e\u003c/h3\u003e\u003cp\u003ePrecompute the prime factors for all numbers between 2 and 10^7.Have a frequency table to indicate the final occurances of each of the prime factors.\u003c/p\u003e\u003cp\u003eNow for each number in the numerator increment its corresponding prime factors frequency and for each number in the denominator decrement the corresponding prime factors frequency.If the final value of the frequency is \u0026gt;0 then its in the numerator else if it is \u0026lt;0 then its in the denominator.\u003c/p\u003e\u003cp\u003eNote : It requires optimized sieve( nloglogn instead of nlogn ) for better performance.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity — O( sieve + (n+m)log(a) )\u003c/strong\u003e \u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/group/957fuDQyd8/contest/220702/problem/F\"\u003eF. Prime Matrix\u003c/a\u003e\u003c/h3\u003e\u003cp\u003ePrecompute the prime numbers upto 2e5 and store them.Now the cost of converting an element to a prime number is the difference between the element and first prime number greater than or equal to the element.\u003c/p\u003e\u003cp\u003eFor each row and each column compute the total cost by summing up all the costs of the particular row or column and answer is the minimum cost.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity — O( n*m + sieve-computation )\u003c/strong\u003e \u003c/p\u003e\u003c/div\u003e","tags":[]}}