{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1440395117,"rating":5,"authorHandle":"Mohammad_Ali","modificationTimeSeconds":1440395117,"id":19946,"title":"\u003cp\u003eFactorization Sieve\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThere\u0027s a popular blog on CodeForces that lays out a lot of important Sieves (The Divisor Sieve, the Euler Phi Function Sieve, the Sieve of Eratosthenes, etc...). There\u0027s one important augmentation to the Sieve of Eratosthenes that was missing however. It\u0027s possible to speed-up factorization of integers with a sieve.\u003c/p\u003e\u003cp\u003eLet \u003ccode\u003esmf[i]\u003c/code\u003e denote the smallest prime factor of \u003ccode\u003ei\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# Initialize sequences.\nsmf[1 .. N] :\u003d {N, ..., N}\ncomposite[1 .. N] :\u003d {false, ..., false}\n\n# The empty product\nsmf[1] :\u003d 1\n\n# Optimized Sieve of Eratosthenes\n# First Handle the even integers\nsmf[2] :\u003d 2\nfor i in [4, 6, ..., N]:\n    composite[i] :\u003d true\n    smf[i] :\u003d 2\n\n# Handle the odd numbers now.\nfor i in [3, 5, ..., N]:\n    if not composite[i]:\n        smf[i] :\u003d i\n        for j in [i*i, i*i + 2*i, i*i + 4*i, ..., N]:\n            composite[j] :\u003d true\n            smf[j] :\u003d min(smf[j], i)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that since we\u0027re doing \u003ccode\u003ei*i\u003c/code\u003e in the inner loop, we have to be cautious about overflow. After this sieve is done, factoring an integer in \u003ccode\u003e[1 .. N]\u003c/code\u003e is straightforward:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efactor(n):\n    while n \u0026gt; 1:\n        print smf[n]\n        n :\u003d n / smf[n]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf \u003ccode\u003eN ~ 10^9\u003c/code\u003e, the worst case is \u003ccode\u003e29\u003c/code\u003e steps corresponding to the factorization of \u003ccode\u003e2^29\u003c/code\u003e. Usually, this kind of factor sieve is beneficial when \u003ccode\u003eN\u003c/code\u003e is no more than \u003ccode\u003e10^8\u003c/code\u003e. On CodeForces, sieving up to a billion within the typical 2 second time limit isn\u0027t as feasible as it is when solving problems on Project Euler within the One Minute Rule.\u003c/p\u003e\u003cp\u003eThere are a lot of more important sieves, like the \u003ca href\u003d\"https://en.wikipedia.org/wiki/M%C3%B6bius_function\"\u003eMÃ¶bius function\u003c/a\u003e sieve. That one\u0027s pretty useful when you want to solve problems like \u003ca href\u003d\"https://projecteuler.net/problem\u003d193\"\u003eProject Euler #193\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAnyway, I hope someone would find this useful.\u003c/p\u003e\u003c/div\u003e","tags":["sieve of eratosthenes","primes","factorisation"]}}