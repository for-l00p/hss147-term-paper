{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1469786721,"rating":-7,"authorHandle":"hiddentesla","modificationTimeSeconds":1469786721,"id":46320,"title":"\u003cp\u003esaving visited 3D coordinates?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eproblem:\u003c/p\u003e\u003cp\u003egiven a block with with bottom corner at (1,1,1) and uppper corner at (P,L,T) (2\u0026lt;\u003dP,L,T\u0026lt;\u003d400), a starting coordinate (x1,y1,z1) and target coordinate (x2,y2,z2)\u003c/p\u003e\u003cp\u003efind the shortest distance needed to get from (x1,y1,z1) to (x2,y2,z2) by only moving in the sides of the block\u003c/p\u003e\u003cp\u003eit is guaranteed that the starting and ending coordinates are located in the sides of the block (meaning atleast one of x,y,z is either 1 or P,L,T)\u003c/p\u003e\u003cp\u003ei know there is a math solution (with lots of if\u0027s), but given the constraints, and me wanting to learn something new, i wanted to solve this problem with BFS\u003c/p\u003e\u003cp\u003eso max test is where P\u003dL\u003dT\u003d400, and we needed to get from (1,1,1) to (400,400,400) there should be only 6*400*400 \u003d 960000 states. so my bfs algo is as follows:\u003c/p\u003e\u003cp\u003e//make struct node to save the x,y,z coordinate\u003c/p\u003e\u003cp\u003equeue q; while(!q.empty()) node t\u003dq.front(); q.pop(); if(t is the target coordinate) print how many steps else if(t is not visited yet) visit all neighbours of t\u003c/p\u003e\u003cp\u003ethe problem is the part if(t is not visited yet)\u003c/p\u003e\u003cp\u003eim having troubles finding a data structure/method that can save visited coordinates efficiently\u003c/p\u003e\u003cp\u003ei made comparing struct to compare based on x, then y, then z\u003c/p\u003e\u003cp\u003ei tried std::set but it got TLE\u0027d\u003c/p\u003e\u003cp\u003ei also tried std::map\u0026lt;node,bool\u0026gt; but it also got TLE\u003c/p\u003e\u003cp\u003eso im asking, is there a method/data structure that can save visited 3D coordinates?\u003c/p\u003e\u003c/div\u003e","tags":["data structures","bfs"]}}