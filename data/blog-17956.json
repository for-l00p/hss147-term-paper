{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1431961959,"rating":238,"authorHandle":"MikhailRubinchik.ru","modificationTimeSeconds":1431976266,"id":17956,"title":"\u003cp\u003eSuffix tree that is two times shorter than Ukkonen’s algorithm?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThis text is for you!\u003c/p\u003e\u003cp\u003eThe short history:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003e\u003cstrong\u003eP. Weiner. “Linear pattern matching algorithms” 1973\u003c/strong\u003e – the first paper, where Weiner defined a suffix tree and provided a linear time construction algorithm.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cstrong\u003eE. McCreight. “A space economical suffix tree construction algorithm” 1976\u003c/strong\u003e – a more lightweight algorithm for the construction of suffix tree. \u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cstrong\u003eE. Ukkonen. “On-line construction of suffix trees” 1995\u003c/strong\u003e – a modification of McCreight’s approach, the most popular algorithm nowaday.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cstrong\u003eD. Breslauer, G. Italiano. “Near real-time suffix tree construction via the fringe marked ancestor problem” 2013 (the first version is in 2011)\u003c/strong\u003e – they simplified the Weiner’s algorithm. This new algorithm is described in the remark on the page 10 (all other text is about another related problem).\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cstrong\u003e2014\u003c/strong\u003e. Dima Kosolobov, my friend, read the paper of Breslauer and Italiano. He implemented this simplified Weiner’s algorithm and had a talk in our ACM-seminar.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eToday Dima \u003ca href\u003d\"http://habrahabr.ru/post/258121/\"\u003epublished\u003c/a\u003e this algorithm on the IT site habrahabr.ru. \u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eUnfortunately, the post is in Russian. But you can read the code \u003ca href\u003d\"http://pastebin.com/qE1iQA1g\"\u003ehere\u003c/a\u003e. The algorithm has two drawbacks:\u003c/p\u003e\u003cp\u003e1)It is online from right to left but not from left to right. This is not an issue if the problem you solve is offline. Moreover, online problems often can be solved using reversed strings.\u003c/p\u003e\u003cp\u003e2)The algorithm is 1.2 times slower than Ukkonen’s algorithm in our tests.\u003c/p\u003e\u003cp\u003eP.S. You can ask about the idea and the code of the algorithm in comments.\u003c/p\u003e\u003c/div\u003e","tags":["suffix tree","suffix structures","ukkonen","weiner"]}}