{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1467735047,"rating":61,"authorHandle":"skavurskaa","modificationTimeSeconds":1467738143,"id":45897,"title":"\u003cp\u003eShortest Path Modelling Tutorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eShortest path problems are really common. There are uncountable problems that can be reduced to some shortest path problem on graph. In this post i will show some different problems that require some extra thinking because they are not the usual shortest path problems (there are additional constraints to the problem). For most high rated coders this is still common stuff but i hope i can help some newcomers out there.\u003c/p\u003e\u003ch2\u003eAbout Graph Modelling\u003c/h2\u003e\u003cp\u003eSometimes we face a problem that asks us to find some shortest path in a graph, but there are additional constraints to the problem. If we are not used to this kind of problem, we may come up with the idea of changing Dijkstra\u0027s algorithm so it will work in the specified problem. But usually this will not work. Instead, we must change our graph so that the traditional shortest path algorithm will solve the problem with added constraints. This is called graph modelling.\u003c/p\u003e\u003ch2\u003eState Graphs\u003c/h2\u003e\u003cp\u003eWhat we want to build is a state graph. In this graph, every vertex will store additional information, representing some state of the problem, and the edges represent transitions between states. We can see it like a finite state machine and we are going to compute the shortest path from the initial state to some final state. The construction of the state graph is usually the challenge in this kind of problem, and after the graph is built we will have a good time using Dijkstra\u0027s algorithm. Now we are going to see some examples of shortest path modelling problems and how to build the state graphs.\u003c/p\u003e\u003ch2\u003eProblem 1\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eStatement:\u003c/strong\u003e You want to travel from city A to city B. There are N cities and M bidirectional roads connecting cities. Your car can store up to C liters of fuel and the tank is initially full. each road \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e has a value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e that represents the amount of liters of fuel to cross this road. Also, in every city you can buy fuel, at a price of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e dollars per liter. You must compute the minimum amount of dollars spent with fuel to travel from A to B.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e The first thing we must do is to build the state graph. In this problem, a state represents a pair \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ecity\u003c/i\u003e, \u003ci\u003ecurrentFuel\u003c/i\u003e)\u003c/span\u003e. So, we are going to have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eNC\u003c/i\u003e\u003c/span\u003e states. There are two kinds of edges in our state graph: at any moment we can charge a liter of fuel (unless the tank is full), so we can go from state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e)\u003c/span\u003e to state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e + 1)\u003c/span\u003e with cost \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, or we can go to another city, so we can go from state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e)\u003c/span\u003e to state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ej\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e - \u003ci\u003eW\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e for every city \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e that is adjacent to city \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. This second type of edge has cost 0, because remember that we want to compute the amount of dollars spent, not the amount of liters. Now that our graph is done, we can model our problem as finding the shortest path from vertex (A,C) to any vertex (B,*), which can be done with usual Dijkstra\u0027s algorithm.\u003c/p\u003e\u003cp\u003eThe image below is an example of what is said above. It\u0027s a small test case just to show how the state graph is built. The graph on the left is the original graph, and the graph on the right is the state graph. The max fuel capacity C is 3. The gray edges represent recharging the fuel tank. Edge costs are omitted because the drawing is messed up enough (love paint!)\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/60/16/60164eb8bce0bbd635dd8bfcbf78aecb3beb60c6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMy code for reference:\u003c/strong\u003e \u003ca href\u003d\"http://pastebin.com/Kv9XdAfq\"\u003ehttp://pastebin.com/Kv9XdAfq\u003c/a\u003e\u003c/p\u003e\u003cp\u003eNow if you look at the code, there is a catch. You don\u0027t need to explicitly build the state graph! You can build the adjacency list for the original graph, and model the state graph using the distance array computed in Dijkstra\u0027s algorithm. The idea is that you only need the transitions of the original graph in order to be able to traverse in the state graph, so you can build the original graph but instead of traversing the adjacency list in Dijkstra\u0027s you will traverse the state graph transitions. The time complexity will not change but we are going to save a lot of memory and the coding will also become easier. This trick will be used in all modelling problems.\u003c/p\u003e\u003ch2\u003eProblem 2\u003c/h2\u003e\u003cp\u003eThis one appeared in a regional contest here in Brazil last year. Unfortunately my team wasn\u0027t able to solve it during the contest even though it was an easy problem, and this was my initial motivation to study about graph modelling.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eStatement:\u003c/strong\u003e You are given an usual undirected graph, and you want to find the shortest path from A to B, but there is an additional constraint: you must use an even amount of edges.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e We are going to build the state graph for this problem. Now each state will represent a pair \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003evertex\u003c/i\u003e, \u003ci\u003eparity\u003c/i\u003e)\u003c/span\u003e, meaning we will have \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e states. The transitions are really simple: for every vertex v adjacent to vertex u, we can go from state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003eeven\u003c/i\u003e)\u003c/span\u003e to state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ev\u003c/i\u003e, \u003ci\u003eodd\u003c/i\u003e)\u003c/span\u003e and from state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003eodd\u003c/i\u003e)\u003c/span\u003e to state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ev\u003c/i\u003e, \u003ci\u003eeven\u003c/i\u003e)\u003c/span\u003e. Now we can simply find the shortest path from state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eeven\u003c/i\u003e)\u003c/span\u003e (because we start with a path of length 0) to state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eB\u003c/i\u003e, \u003ci\u003eeven\u003c/i\u003e)\u003c/span\u003e, and once again this is done with usual Dijkstra\u0027s algorithm.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMy code for reference:\u003c/strong\u003e \u003ca href\u003d\"http://pastebin.com/gqNJk9yN\"\u003ehttp://pastebin.com/gqNJk9yN\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAnother cool trick that you might not know: if you look at the code i don\u0027t do any fancy conditionals to go from an even state to an odd state. We can represent even as 0 and odd as 1, and if you XOR current state with 1, you get to the opposite state! Just look at the XOR truth table and you will see that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f2/99/f29901fbed502559b66e1db886366f3a071454fc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3e/b2/3eb217aa5538076a823f40cfe47e4a86a9be6786.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. This trick is really useful and is used in a lot of algorithms like binary heap and iterative segment tree.\u003c/p\u003e\u003ch2\u003ePractice\u003c/h2\u003e\u003cp\u003eUVA 10269 is another problem in which you have to compute shortest paths in some state graph : \u003ca href\u003d\"https://uva.onlinejudge.org/index.php?option\u003donlinejudge\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d1210\"\u003ehttps://uva.onlinejudge.org/index.php?option\u003donlinejudge\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d1210\u003c/a\u003e\u003c/p\u003e\u003cp\u003eUVA 11492 is a problem from a past ACM ICPC Latin America, a really beautiful problem on this topic : \u003ca href\u003d\"https://uva.onlinejudge.org/index.php?option\u003donlinejudge\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d2487\"\u003ehttps://uva.onlinejudge.org/index.php?option\u003donlinejudge\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d2487\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIf you know more problems on this topic i will be really grateful if you can post them here!\u003c/p\u003e\u003c/div\u003e","tags":["graph","shortest path","graph theory"]}}