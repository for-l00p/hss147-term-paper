{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1502978078,"rating":7,"authorHandle":"Lance_HAOH","modificationTimeSeconds":1502978126,"id":53916,"title":"\u003cp\u003eWhat is your method of learning about algorithms?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi. I have always been curious about learning styles. Since this is a competitive programming site, I\u0027ll discuss purely about my learning in algorithms/programming. No, this is not another post about how to become red in 1 year or how to become as good as _________ (fill in the blank). I just wish to understand how people comprehend(difficult) stuff.\u003c/p\u003e\u003cp\u003eI have been dabbling with algorithms/competitive programming for almost a year. Some algorithms like binary search, sliding window, trivial DP are so easy to understand that simply anyone could learn it. However, there are also topics like complexity theory, max flow, DP optimizations, etc. that are really complicated. Any attempts to understand the copious mathematical proofs in topcoder articles, university lecture slides, etc. would make my head hurt. After many hours of trying to internalize those difficult concepts, I feel that I don\u0027t understand anything. When I run into this deadlock, I will just forgo the proof and learn about how the algorithm works. This makes me feel really uncertain as I didn\u0027t understand why it works (Maybe I am just stupid).\u003c/p\u003e\u003cp\u003eI was wondering, how do people even understand these complicated algorithms and proofs? Surely memorizing the algorithm isn\u0027t the right way to go? Would anyone care to share about how they learn algorithms? What would you do if you ran into the same situation as me?\u003c/p\u003e\u003c/div\u003e","tags":["#learning","#algorithms"]}}