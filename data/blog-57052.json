{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1515740928,"rating":57,"authorHandle":"Bugman","modificationTimeSeconds":1515740928,"id":57052,"title":"\u003cp\u003eIs vector \u0026lt; bool \u0026gt; really so bad?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI\u0027ve heard more about how \u003ccode\u003evector\u0026lt;bool\u0026gt;\u003c/code\u003e is slow, and we need to dodge him or use \u003ccode\u003evector\u0026lt;char\u0026gt;\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eBut today I ran some tests in \u0026quot;Codeforces custom test\u0026quot; with GNU G++.\u003c/p\u003e\u003cp\u003eFirst simple erato sieve\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e//N \u003d 3e7\nfor(int i\u003d2;i\u0026lt;N;++i) if(!u[i]) for(int j\u003di*2;j\u0026lt;N;j+\u003di) u[j] \u003d 1;\nint cnt \u003d 0;\nfor(int i\u003d0;i\u0026lt;N;++i) if(u[i]) ++cnt;\ncout\u0026lt;\u0026lt;cnt\u0026lt;\u0026lt;endl;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eDepends on \u003ccode\u003eu\u003c/code\u003e:\u003c/p\u003e\u003cp\u003e\u003ccode\u003ebool u[N] : 420 ms, 31204 KB\u003c/code\u003e\u003c/p\u003e\u003cp\u003e\u003ccode\u003evector\u0026lt;bool\u0026gt; u(N): 218 ms, 5484 KB\u003c/code\u003e\u003c/p\u003e\u003cp\u003e\u003ccode\u003evector\u0026lt;char\u0026gt; u(N): 451 ms, 31164 KB\u003c/code\u003e\u003c/p\u003e\u003cp\u003eYou can say like \u0026quot;memory constant speed up this code\u0026quot;\u003c/p\u003e\u003cp\u003eSecond.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e//N \u003d 1e4\ndouble total \u003d 0;\nfor(int it\u003d0;it\u0026lt;N;++it){\n\tfor(int i\u003d0;i\u0026lt;N;++i){\n\t\tint x \u003d rand()%N;\n\t\tu[x] \u003d 1;\n\t}\n\tfor(int i\u003d0;i\u0026lt;N;++i){\n\t\tint x \u003d rand()%N;\n\t\tu[x] \u003d 0;\n\t}\n\tfor(int i\u003d0;i\u0026lt;N;++i){\n\t\ttotal+\u003du[i];\n\t\tu[i] \u003d 0;\n\t}\n}\ncout\u0026lt;\u0026lt;total/N\u0026lt;\u0026lt;endl;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003ebool u[N] : 2683 ms, 1860 KB\u003c/code\u003e\u003c/p\u003e\u003cp\u003e\u003ccode\u003evector\u0026lt;bool\u0026gt; u(N): 2667 ms, 1832 KB\u003c/code\u003e\u003c/p\u003e\u003cp\u003e\u003ccode\u003evector\u0026lt;char\u0026gt; u(N): 2620 ms, 1868 KB\u003c/code\u003e\u003c/p\u003e\u003cp\u003eWe see its equal!\u003c/p\u003e\u003cp\u003eSo maybe its not so bad? Or you have examples where \u003ccode\u003evector\u0026lt;bool\u0026gt;\u003c/code\u003e is really slower than alternatives?\u003c/p\u003e\u003c/div\u003e","tags":["c++","vector","bool"]}}