{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1461528975,"rating":25,"authorHandle":"ariel.nowik","modificationTimeSeconds":1461552218,"id":44534,"title":"\u003cp\u003eHow to solve IOI 2015 \u0027Sorting\u0027\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"http://wcipeg.com/problem/ioi1522\"\u003eIOI 2015 — Sorting\u003c/a\u003e\u003c/p\u003e\u003ch4\u003eStatement\u003c/h4\u003e\u003cp\u003eIf we \u003cstrong\u003eresume\u003c/strong\u003e, then it says: \u0026quot;We\u0027ve got an \u003cstrong\u003earray \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e\u003c/strong\u003e (with \u003cstrong\u003edistinct\u003c/strong\u003e values) and two arrays \u003cstrong\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eJx\u003c/i\u003e\u003c/span\u003e , \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eJy\u003c/i\u003e\u003c/span\u003e of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e\u003c/strong\u003e (all arrays filled with values \u003cstrong\u003efrom 0 to N-1\u003c/strong\u003e). Then the game starts and it consist of \u003cstrong\u003eM turns\u003c/strong\u003e, each turn \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e goes this way:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eA: We \u003cstrong\u003eswap\u003c/strong\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e[\u003ci\u003eJx\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]]\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e[\u003ci\u003eJy\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]]\u003c/span\u003e (Jx[i] \u003cstrong\u003ecan be equal\u003c/strong\u003e to Jy[i])\u003c/li\u003e   \u003cli\u003eB: Then we\u0027re allowed to do \u003cstrong\u003eany swap\u003c/strong\u003e (we can swap a value with \u003cstrong\u003eitself\u003c/strong\u003e). I will call this \u003cstrong\u003ecustom moves\u003c/strong\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThe objective of the game is to make the \u003cstrong\u003earray \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e sorted\u003c/strong\u003e with the \u003cstrong\u003elower amount of turns\u003c/strong\u003e. We\u0027re \u003cstrong\u003eguaranteed\u003c/strong\u003e that there is a solution with an amount of turns \u003cstrong\u003elower or equal than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLimits:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e ≤ 200000\u003c/span\u003e\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e ≤ 600000\u003c/span\u003e\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e \u003d 3\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e \u0026gt; \u003ci\u003eN\u003c/i\u003e\u003c/span\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003eFirst Procedure\u003c/h4\u003e\u003cp\u003eWe\u0027ll first to solve the problem without trying to get the lower amount of turns. This solution (that is pretty) hard, will then make us solve the harder sub-task with a simple binary search with no modifications of the algorithm.\u003c/p\u003e\u003cp\u003eThis solution points to \u003cstrong\u003emake the array to be sorted\u003c/strong\u003e when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e \u003cstrong\u003eturns\u003c/strong\u003e have passed. Not \u003cstrong\u003eafter\u003c/strong\u003e, not \u003cstrong\u003ebefore\u003c/strong\u003e. \u003c/p\u003e\u003cp\u003eNote that the sorted array must be \u003cspan class\u003d\"tex-span\"\u003e[0, 1, 2, ...\u003ci\u003eN\u003c/i\u003e - 1]\u003c/span\u003e, or, in other words \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7e/14/7e1401990280aa45bc9957ebae2c8fe9e42a23d5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. We need all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e to be equal to its index.\u003c/p\u003e\u003cp\u003eWe know that we make the array sorted when M turns passed. This \u003cstrong\u003emust happen\u003c/strong\u003e. So, we can predict \u003cstrong\u003ehow items will move until the M turns have passed\u003c/strong\u003e. We can answer for each item i, where its \u003cstrong\u003evalue will be when all M moves have passed\u003c/strong\u003e. Also we can answer \u0026quot;where the item \u003cstrong\u003ei\u003c/strong\u003e in the final sequence \u003cstrong\u003eis\u003c/strong\u003e in the \u003cstrong\u003eactual sequence\u003c/strong\u003e\u0026quot; if we don\u0027t make more additional moves of course. We know that the item \u003cstrong\u003ei\u003c/strong\u003e in the final sequence must be equal to i! And we know where this item in the final sequence is in the current sequence. So we\u0027ll only need to swap (in the first turn), the sequence with value \u003cstrong\u003ei\u003c/strong\u003e to the place that will go to the index \u003cstrong\u003ei\u003c/strong\u003e in the final sequence. \u003c/p\u003e\u003cp\u003eWe\u0027ll need to repeat this process in each of the M turns. And in each turn we\u0027ll update two arrays \u003c/p\u003e \u003col\u003e   \u003cli\u003eF \u003d \u0026quot;where the item \u003cstrong\u003ei\u003c/strong\u003e in the final sequence \u003cstrong\u003eis\u003c/strong\u003e in the \u003cstrong\u003eactual sequence\u003c/strong\u003e\u003c/li\u003e   \u003cli\u003eE \u003d \u0026quot;where is the item with value \u003cstrong\u003ei\u003c/strong\u003e in the actual sequence\u0026quot;\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eThis way we will in each turn swap \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, this means, \u0026quot;the place where i value is\u0026quot; to \u0026quot;the place that will be in the final array in i\u0026quot;. Of course in the case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]! \u003d \u003ci\u003eF\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, otherwise we increase i and try to swap the next one. The idea is that in each turn we\u0027ll have \u0026quot;up to i-1\u0026quot; values already in its right position, and \u003cstrong\u003ein case all i values are in its right position\u003c/strong\u003e, then we only need to wait \u003cstrong\u003euntil M moves happened\u003c/strong\u003e (and until then we don\u0027t swap anything (swap 0,0))\u003c/p\u003e\u003ch4\u003eThe final approach: Binary Search\u003c/h4\u003e\u003cp\u003eWe will need to consider trying to solve the problem \u0026quot;If there only were \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e ≤ \u003ci\u003eM\u003c/i\u003e\u003c/span\u003e turns\u0026quot;. We the algorithm of above with can answer to solve the answer \u0026quot;Can we solve the problem on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e\u003c/span\u003e turns?\u0026quot;. So with a \u003cstrong\u003ebinary search\u003c/strong\u003e we will test to get the lower \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e\u003c/span\u003e that makes it possible to solve the problem. That will be the answer with a total algorithm complexity of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e) * (\u003ci\u003eM\u003c/i\u003e + \u003ci\u003eN\u003c/i\u003e))\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003eConclusion\u003c/h4\u003e\u003cp\u003eThis is an extremely hard task, Although no special algorithm is needed, you need some observations and to not get lost while thinking things because there is a good amount of \u003cstrong\u003edeep thinking\u003c/strong\u003e needed. Good Luck. \u003c/p\u003e\u003cp\u003eCode: \u003ca href\u003d\"https://github.com/newtonis/proyectos/blob/master/sorting.cpp\"\u003eHere\u003c/a\u003e Code v2: \u003ca href\u003d\"https://github.com/newtonis/proyectos/blob/master/sorting2.cpp\"\u003eHere\u003c/a\u003e \u003c/p\u003e\u003c/div\u003e","tags":[]}}