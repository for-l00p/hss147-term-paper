{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1492100789,"rating":9,"authorHandle":"arman_ferdous","modificationTimeSeconds":1492100789,"id":51561,"title":"\u003cp\u003eWhat is the time complexity?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eRecently I wrote this code to find the sum of all the digits of the number until the number turns into a one digit number. For example: number 567, we add all the digits and we get 5+6+7 \u003d 18, now we add all the digits of 18 and we get 1+8 \u003d 9. We can\u0027t add anymore digits because there is only one left and thus the result is 9.\u003c/p\u003e\u003cp\u003eNow I am having trouble figuring out the time complexity of this recursive code. Can anyone help?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint digSum(int n)\n{\n    if(n \u0026lt; 10) return n;\n    return digSum(digSum(n/10) + n%10);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":[]}}