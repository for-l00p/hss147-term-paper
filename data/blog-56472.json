{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1513697162,"rating":2,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1513697162,"id":56472,"title":"\u003cp\u003eNotes on Codeforces Beta Round #102, A, B, C, D (Knight tour problem), E (branch and bound)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/143/problem/A\" title\u003d\"Codeforces Round 102 (Div. 2)\"\u003e143A - Help Vasilisa the Wise 2\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can enumerate the feasible integers (in fact from 1 to 9) at the left upper corner. Once this value is determined, we can immediately calculate the other three integers. Finally, we only need check whether the four integers meet all the requirements or not.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/143/problem/B\" title\u003d\"Codeforces Round 102 (Div. 2)\"\u003e143B - Help Kingdom of Far Far Away 2\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is a straightforward implememtation problem but one needs take care of some corner cases.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/143/problem/C\" title\u003d\"Codeforces Round 102 (Div. 2)\"\u003e143C - Help Farmer\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e - 1\u003c/span\u003e must be a divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, we can previously compute all the divisors of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and store them in an array. Then, we adopt the first loop to enumerate these divisors, and for each divisor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, we adopt a second loop to enumerate the divisors of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e / \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. Thus, we can test all the feasible combination of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e, \u003ci\u003eC\u003c/i\u003e\u003c/span\u003e, and find out the maximum and minimum values.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/143/problem/D\" title\u003d\"Codeforces Round 102 (Div. 2)\"\u003e143D - Help General\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIt turns out to be a famous problem, referred to as Knight Tour problem. One can find some simple introduction in Wiki.\u003c/p\u003e\u003cp\u003eWithout loss of generality, we assume that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ \u003ci\u003em\u003c/i\u003e\u003c/span\u003e (otherwise we can swap their values). The solution consists of three cases:\u003c/p\u003e\u003cp\u003e1) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e, the answer is always \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e2) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 2\u003c/span\u003e, we can put knights on columns \u003cspan class\u003d\"tex-span\"\u003e0, 1, 4, 5, 8, 9, ...\u003c/span\u003e, i.e., \u003cspan class\u003d\"tex-span\"\u003e4\u003ci\u003ej\u003c/i\u003e + 0, 4\u003ci\u003ej\u003c/i\u003e + 1\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u003d 1, 2, ...\u003c/span\u003e. After some simple calculation, one can check that we can put at most \u003cspan class\u003d\"tex-span\"\u003e2×(\u003ci\u003em\u003c/i\u003e / 4 + \u003ci\u003emin\u003c/i\u003e(2, \u003ci\u003em\u003c/i\u003e%4))\u003c/span\u003e knights.\u003c/p\u003e\u003cp\u003e3) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026gt; 2\u003c/span\u003e: as there exists a simple knight tour path, we can color the nodes along the path with black and white, in an alternative manner. Then, it is obvious that the answer should be \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003enm\u003c/i\u003e + 1) / 2\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/143/problem/E\" title\u003d\"Codeforces Round 102 (Div. 2)\"\u003e143E - Help Caretaker\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe general idea is using DFS. We focus on the crossing point of “T” and enumerate each cell of the board to check whether this special point can be put there or not. Note that we should also check all the possible rotation (in fact four).\u003c/p\u003e\u003cp\u003eHowever trivial DFS leads to TLE since the search space is extremely huge. Here are two tricks that can avoid TLE.\u003c/p\u003e\u003cp\u003e1) record the starting position for each recursive call of DFS function: for instance, suppose that we have successfully put a “T” at the current position, and thus for the next recursive call, we should start from the next column (assuming that the enumeration is implemented first row by row and then column by column) or the first column but next row.\u003c/p\u003e\u003cp\u003e2) adopt branch and bound: as we have recorded the starting position for each recursive call, we can immediately calculate how many cells are still not tested, and obtain a trivial upper bound which indicates how many “T”s we can put at most. For instance, suppose that we have put \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e “T”s and there are still \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e cells to test. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e + \u003ci\u003ep\u003c/i\u003e / 5\u003c/span\u003e is not larger than the current maximum value, the call of function can be immediately terminated (or returned).\u003c/p\u003e\u003c/div\u003e","tags":[]}}