{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1401462547,"rating":0,"authorHandle":"Fcdkbear","modificationTimeSeconds":1401472839,"id":12476,"title":"\u003cp\u003eРазбор Тренировки 26.05.2014\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eЗадача А\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eЗадача на динамику. Давайте заведем динамику по моей позиции и номеру хода. Динамика будет возвращать 1 если находясь в текущей позиции и сделав определенное количество ходов, мы сможем найти маршрут и 0 иначе. Переходы — пробуем пойти во все клеточки.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/bHP4rN0P\"\u003eКод\u003c/a\u003eэ\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача B\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eБудем поддерживать две структуры данных: очередь добавления машин и хеш-таблицу (или любой другой словарь), в котором мы будем держать количество машин каждой цены. Еще будем поддерживать сумму цен всех машин и их количество. Тепер — как обрабатвать запросы:\u003c/p\u003e\u003cp\u003e1) Запрос +. Добавляем машину в очередь, в словарь, увеличиваем сумму цен и количество машин.\u003c/p\u003e\u003cp\u003e2) Запрос -. Удаляем машину из очереди, из словаря, уменьшаем сумму цен и количество машин.\u003c/p\u003e\u003cp\u003e3) Запрос ?. Сначала посмотрим, правда ли, что среднее арифметическое целочисленно. Если нет — ответ 0. Иначе достаем ответ из словаря.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/4m5h5vRD\"\u003eКод\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача C\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eВ задаче нужно сделать ровно то, что написано в условии — просто реализовать то, что там написано.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/D6kUweSc\"\u003eКод\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача D\u003c/strong\u003e Идея решения такая. Давайте сразу сделаем так, что первая точка в нашем обходе — самая левая точка, а если таких точек несколько — самая нижняя из них. Теперь у нас есть 4 типа преобразований — относительно оси Ox, Oy, прямых y\u003dx, y\u003d-x. Переберем, какие из этих 4 преобразований мы используем для первого многоугольника (всего есть \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e\u003c/span\u003e \u003d 16 преобразований) и сравним многоугольники как пары точек. Если хоть раз у нас вышли одинаковые многоугольники — ответ YES, иначе NO.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/ntSEw26d\"\u003eКод\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача E\u003c/strong\u003e Не самая простая задача. Давайте для каждого роста отметим позицию, на которой он встречается. Еще для каждого чувака посчитаем позицию ближайшего слева к нему чувака с нечетным ростом.\u003c/p\u003e\u003cp\u003eТеперь давайте перебирать чуваков с четным ростом в порядке уменьшения их роста. Пусть v — позиция болижайшего слева к нему чувака с нечетным ростом. Тогда нам нужно добавить к ответу количество уже рассмотренных чуваков с четным ростом с позицией меньше v. После этого нужно сказать, что наш элемент стоит на своей позиции (это понадобится для дальнейших вычислений).\u003c/p\u003e\u003cp\u003eИ того, нам нужна структура данных, умеющя икать чумму на отрезке и обновлять элемент. Подойдет, например, дерево Фенвика (смотрим на емаксе)\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/RmuADQda\"\u003eКод\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача F\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eЗадача на графы. Давайте для каждого типа поезда построим граф, вершинами которого являются станции, через которые курсируют поезда данного типа, а ребра — соответствующие переезды. Найдем в этом графе количество компонент связности. Это и будет ответом. Важно заметить, что наша сложность — линейная от количества ребер, так как каждое реро добавит вершины не более чем одного типа.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/Sgsc5RG3\"\u003eКод\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача G\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eДавайте смотреть на пары символов, которые должны быть равны. Если они уже равны — пропустим эту пару. Иначе посмотрим, возможно ли сделать их равными за 1 операцию (это возможно, если существует правило по преобразованию одного символа во второй или наоборот). Если это невозможно — давайте посмотрим, возможно ли это сделать за 2 операции (превратив оба наших символа в любой третий). Если и это невозможно — ответ -1.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/eGpxNcEa\"\u003eКод\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЗадача H\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eОтвет на задачу — \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1\u003c/sup\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eДокажем этот факт. Пусть цифра 1 стоит на позиции i, 0\u0026lt;\u003di\u0026lt;n. Все числа слева от 1 должны идти в убывающем порядке, справа от 1 — в вовзрастающем. То есть если мы выбрали какой-то набор чисел, которые будут стоять слева от 1, то мы однозначно выбираем порядок, в котором эти числа будут следовать. Вариантов выбора у нас \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e. Просуммировав эти числа по каждой из позиций, мы получим ровно \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1\u003c/sup\u003e\u003c/span\u003e. Это известный факт, а доказать его можно, например, расписав при помощи бинома Ньютона сумму \u003cspan class\u003d\"tex-span\"\u003e(1 + 1)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e - 1\u003c/sup\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eИ так, все что нам нужно — реализовать двоичное возведение в степень\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/M4GfwnX3\"\u003eКод\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["тренировка","разбор"]}}