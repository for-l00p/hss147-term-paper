{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1420078426,"rating":108,"authorHandle":"socketnaut","modificationTimeSeconds":1420144110,"id":15513,"title":"\u003cp\u003eGood Bye 2014 Tutorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/500/problem/A\"\u003e500A — New Year Transportation\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eIn this problem we are given a directed graph, and asked whether a particular vertex is reachable from vertex 1. It is possible to solve this by running a depth-first search starting from vertex 1.\u003c/p\u003e\u003cp\u003eSince every vertex has at most one outgoing edge, it is possible to write the DFS as a simple loop. Some people used this to make \u003ca href\u003d\"//codeforces.com/contest/500/submission/9307130\"\u003every short\u003c/a\u003e submissions.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/500/problem/B\"\u003e500B — New Year Permutation\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eImagine a graph with one vertex for each entry in the permutation, and edges between pairs of swappable entries. It is easy to see that no matter how many swaps we make, no entry can end up in a location that is not in its connected component. We can also show that within any connected component, we can achieve any rearrangement of the entries that we wish.\u003c/p\u003e\u003cp\u003eSince we want to make the lexicographically smallest permutation, we should greedily rearrange the entries within each connected component so that they are in increasing order.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e ≤ 300\u003c/span\u003e, so we are not concerned with runtime. One can determine the connected components using a number of standard algorithms (Floyd-Warshall, Union Find, etc.).\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/500/problem/C\"\u003e500C — New Year Book Reading\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eConsider an arbitrary day \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, on which we must read book \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u0027\u003c/span\u003e be the last day before \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e on which book \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e was read (if there is no previous day, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u0027 \u003d  - ∞\u003c/span\u003e). Observe that, on day \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, we cannot avoid lifting all of the books read on any day between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u0027\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. If we add up all the weights of these required liftings, we will have a lower bound on the answer.\u003c/p\u003e\u003cp\u003eThis lower bound can be computed with two loops, in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eM\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e time. We must be sure not to add a book\u0027s weight multiple times, if it was read multiple times in the interval \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ed\u003c/i\u003e\u0027, \u003ci\u003ed\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf we initially arrange the books in order of the first day on which they are read, we will achieve the described lower bound. So, we have our answer.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/500/problem/D\"\u003e500D — New Year Santa Network\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eBy linearity of expectation, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e(\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e) + \u003ci\u003ed\u003c/i\u003e(\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e) + \u003ci\u003ed\u003c/i\u003e(\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e)) \u003d \u003ci\u003eE\u003c/i\u003e(\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)) + \u003ci\u003eE\u003c/i\u003e(\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e)) + \u003ci\u003eE\u003c/i\u003e(\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e))\u003c/span\u003e. By symmetry, those three values are all equal. So, we need only compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e(\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e))\u003c/span\u003e. We can multiply it by 3 to find the answer.\u003c/p\u003e\u003cp\u003eLet us imagine that a random selection \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ec\u003c/i\u003e1, \u003ci\u003ec\u003c/i\u003e2, \u003ci\u003ec\u003c/i\u003e3)\u003c/span\u003e is made. We\u0027ll define a function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e, for each edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, so that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e) \u003d \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e is part of the shortest path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e) \u003d 0\u003c/span\u003e otherwise. Observe that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b6/2d/b62d0dc4a46696e159c06ffe50e8dfe6176fba8a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Again by linearity, we have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/66/83/6683545cdd25b73ca41ddc6d77b06602eaaea3e6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eWe can write \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e)) \u003d \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003eP\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e is the probability that edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e is included in the path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e. If we compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, we can then compute \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f7/20/f720ee3e5a6dd42707df6f1cccab3a2cfda0fef4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e. Also, we can handle updates in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e; if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e changes to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u0027\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, we subtract \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003eP\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e from the answer, and add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u0027\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003eP\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eSo, let\u0027s figure out \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Any edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, if removed from the tree, separates the graph into two separate connected components \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e will be included in the shortest path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e if and only if one of them is in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, and the other is in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. So, we want the number of ways to select \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e)\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e are on opposite sides of edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, divided by the total number of ways to select \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e)\u003c/span\u003e. Let\u0027s have \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ea\u003c/i\u003e|\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eb\u003c/i\u003e|\u003c/span\u003e denote the number of vertices in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, respectively. Then \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1c/c1/1cc12dca5a2d64a7abdd535ec48d09bf1cc84463.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eTo figure out \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ea\u003c/i\u003e|\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eb\u003c/i\u003e|\u003c/span\u003e for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, we can root the tree arbitrarily and compute the depth and subtree size for each vertex in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e time. Then for an edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the deeper vertex incident to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, we know one component has size equal to the subtree size of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. For the other component, we use the fact that \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eb\u003c/i\u003e| \u003d \u003ci\u003eN\u003c/i\u003e - |\u003ci\u003ea\u003c/i\u003e|\u003c/span\u003e. \u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/500/problem/E\"\u003e500E — New Year Domino\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWhen domino \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is knocked over, it covers the interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e. If we see a query \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, it is equivalent to the question \u0026quot;If we knock over all dominoes with index \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a5/a9/a5a93c4f149d8dbb18425396f5a974d43d4e4f03.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, how much of the interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e, \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e]\u003c/span\u003e won\u0027t be covered?\u0026quot; We can modify that question a little more, to say that we knock over all dominoes with index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≥ \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, without changing its answer. \u003c/p\u003e\u003cp\u003eNow, consider knocking over the dominoes from right to left. As soon as we knock over domino \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, we will immediately process all of the queries with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, and record their answers. What we need is a data structure that supports two operations: \u0026quot;cover range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e\u0026quot; (when we knock over a domino) and \u0026quot;compute how much of the range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e, \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e]\u003c/span\u003e is not covered\u0026quot; (when we wish to answer a query). This can be done using coordinate compression and a segment tree. \u003c/p\u003e\u003cp\u003eIt\u0027s worth noting there are a lot of other ways to solve this problem. The other tutorial uses a completely different approach. Also, the approach described here may be implemented using different data structures. For example, here is \u003ca href\u003d\"//codeforces.com/contest/500/submission/9331215\"\u003emy implementation\u003c/a\u003e using BBSTs and a Binary Indexed Tree.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/500/problem/F\"\u003e500F — New Year Shopping\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe will use the standard dynamic programming approach for 0/1 knapsack. To summarize what it does for us, imagine we are given an ordered list of items \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e be the maximum happiness we can buy, if we consider only the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e items in the list, and have a budget of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e is the size of the list, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e is the maximum possible budget, we can compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e for all possible \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eKB\u003c/i\u003e)\u003c/span\u003e time.\u003c/p\u003e\u003cp\u003eLet us sort all of the items by their display time. Suppose that we focus on the queries \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/67/86/6786f36bf13cd0af5393ded0de452ef8b0b7be89.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, for some particular \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e be a list of the items with display time in \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003et\u003c/i\u003e - \u003ci\u003eP\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e]\u003c/span\u003e, and let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e be a list of the items with display time in \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003et\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e + \u003ci\u003eP\u003c/i\u003e)\u003c/span\u003e. Let both lists be sorted in order of display time.\u003c/p\u003e\u003cp\u003eEvery query with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/67/86/6786f36bf13cd0af5393ded0de452ef8b0b7be89.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e will have available to it some suffix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, along with some prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. We\u0027ll do a knapsack DP on the elements of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, in reverse order, and another on the elements of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e, in normal order. Finally, to answer any query \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/67/86/6786f36bf13cd0af5393ded0de452ef8b0b7be89.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we can consider all possible ways to split the budget \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e between the items in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and the items in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e, in linear time. For each possible way to split the budget, we need simply look up one value from each DP table to know the maximum possible happiness.\u003c/p\u003e\u003cp\u003eIf we perform the process above on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d 1, 1 + \u003ci\u003eP\u003c/i\u003e, 1 + 2\u003ci\u003eP\u003c/i\u003e, 1 + 3\u003ci\u003eP\u003c/i\u003e, ...\u003c/span\u003e until \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e exceeds the maximum possible day \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e, we\u0027ll be able to answer all of the queries. Let\u0027s think about the runtime of this solution. For each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, the described process takes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eKB\u003c/i\u003e)\u003c/span\u003e time, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e is the number of items whose display time is in \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003et\u003c/i\u003e - \u003ci\u003eP\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e + \u003ci\u003eP\u003c/i\u003e)\u003c/span\u003e. Each object can only appear in up to two of these intervals. So, the overall runtime for all of the knapsack DP\u0027s we perform is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enB\u003c/i\u003e)\u003c/span\u003e. Computing the final answer takes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eB\u003c/i\u003e)\u003c/span\u003e per query, or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eqB\u003c/i\u003e)\u003c/span\u003e overall.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//codeforces.com/contest/500/problem/G\"\u003e500G — New Year Running\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eDon\u0027t know how to solve this yet. Maybe someone who is not gray can provide the solution. :)\u003c/p\u003e\u003c/div\u003e","tags":["codeforces","editorial","goodbye2014"]}}