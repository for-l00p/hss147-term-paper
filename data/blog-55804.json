{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1510787136,"rating":0,"authorHandle":"platypus179","modificationTimeSeconds":1510788338,"id":55804,"title":"\u003cp\u003eРазбор нерешённого\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eИзвиняюсь за отсутствие контеста. Когда я брался делать их тебе, я не предполагал, что может возникнуть ситуация, в которой мне нужно пересдавать коллоквиумы, до сих пор я учился на пятёрки и очень редкие четвёрки. Кажется, случившееся можно приписать в разряд форс-мажоров.\u003c/p\u003e\u003cp\u003eС небольшой (относительно) задержкой выкладываю разбор ещё нерешённых тобой задач. Кстати, мой код по любой задаче ты можешь найти \u003ca href\u003d\"http://vasalf.net/cosh/07-greed/\"\u003eздесь\u003c/a\u003e, сейчас там выложено всё.\u003c/p\u003e\u003ch3\u003eAndrey Ishutin Grand Contest 001 — E: Цикл минимального среднего веса\u003c/h3\u003e\u003cp\u003eУ нас есть алгоритм Форда-Беллмана, умеющий искать отрицательный цикл (или говорить, что такого нет). Идея: вычтем из всех рёбер значение \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Тогда из любого цикла длины \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e вычтется суммарно \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e·\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, а его средний вес уменьшится как раз на \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Значит, мы умеем теперь проверять, есть ли в графе цикл среднего веса не более чем \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e -- это ровно отрицательный цикл в графе, из веса каждого ребра которого вычли \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Значит, можно применить бинпоиск по ответу.\u003c/p\u003e\u003cp\u003eЭто \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/28/d0/28d0601e45dd63525a7c6915a4385494bad1790c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eКод, выложенный на сайте, принадлежит Серёже Копелиовичу -- разработчику этой ЛКШатской задачи.\u003c/p\u003e\u003cp\u003eИнтересно, что есть алгоритм Карпа, решающий ту же задачу за \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eVE\u003c/i\u003e)\u003c/span\u003e. Он просто рассчитывает ответ (средний вес ребра на цикле) по формулке, а потом восстанавливает цикл Фордом-Беллманом. Подробнее про него можно почитать в АУшном конспекте по алгоритмам за второй семестр. Это \u003ca href\u003d\"http://acm.math.spbu.ru/~sk1/courses/1617s_au/conspect/conspect.pdf\"\u003eздесь\u003c/a\u003e, страница 21.\u003c/p\u003e\u003ch3\u003eВпрок пойдёт — C: Санта-Клаус и палиндром\u003c/h3\u003e\u003cp\u003eРазбор случаев. Либо мы склеиваем чётное число строк, либо нечётное. В первом случае если мы слева приклеили строку \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e, то справа должны были приклеить \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ereverse\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e)\u003c/span\u003e (как минимум, это должно означать, что такая строка у нас должна быть). Очевидно, выгодно взять все такие пары строк с положительным весом. Во втором случае то же самое, но мы берём ещё одну строку-палиндром посередине.\u003c/p\u003e\u003cp\u003eНепалиндромы понятно какие мы возьмём, на них уже можно забить. Интереснее вопрос, что делать с палиндромами. Возьмём любой палиндром и отсортируем веса его вхождений. Будем брать его вхождения парами, пока суммарный вес верхней пары неотрицателен. В конце пройдёмся по оставшимся палиндромам, и если остался хотя бы один палиндром положительного веса, возьмём его. Либо же вместо последнего действия можно пройтись по всем взятым палиндромам и выкинуть из этого набора минимальный отрицательного веса.\u003c/p\u003e\u003cp\u003eПочему работает? Мы имеем право взять нечётное число вхождений не более чем одного палиндрома. Если у него было чётное число положительных вхождений, мы точно возьмём их все и не возьмём ничего больше (а зачем?). Иначе же мы возьмём нечётное число раз именно что самый выгодный из оставшихся палиндромов.\u003c/p\u003e\u003cp\u003eЧтобы это работало за что-то линейно-логарифмическое, можно использовать любую структуру. У меня, например, \u003ccode\u003emap\u0026lt;string, vector\u0026lt;int\u0026gt; \u0026gt;\u003c/code\u003e.\u003c/p\u003e\u003ch3\u003eПожадничал на задачи — A: Дело о беглеце\u003c/h3\u003e\u003cp\u003eМы можем воткнуть мост длины \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e между \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-тым и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e-ым островами, если \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e - \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e - \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. На каждую пару соседних островов нам нужно взять по точке \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eСканлайн. Отрезки у нас будут вида \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e - \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e;\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e - \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e, события: отрезок закрылся, возникла новая точка \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Каждому отрезку нужно сопоставить по точке. Жадность: каждому отрезку (в порядке сканлайна) сопоставляем самую левую точку из возможных (\u003ccode\u003elower_bound\u003c/code\u003e в сете). Если не получилось, то ответ \u003ccode\u003e\u0026quot;No\u0026quot;\u003c/code\u003e. Работает, как и любая жадность, из соображений \u0026quot;возьмём любое решение — сделаем как предложено — получится не хуже\u0026quot;.\u003c/p\u003e\u003ch3\u003eПожадничал на задачи — E: Игрушечная сумма\u003c/h3\u003e\u003cp\u003eКрасивый и немного жадный конструктив.\u003c/p\u003e\u003cp\u003eРазобьём кубики на пары \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/78/b1/78b11559097e5d2862d1cfaceb89b666a1eab055.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (у нас получится, так как \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e чётное). Заметим, что кубики в одной дают равный вклад в суммы, если их берут разные игроки (вклад равен \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e - 1\u003c/span\u003e). Кроме того, заметим, что если один игрок взял оба кубика, то их вклад в его сумму равен \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eПройдёмся по таким парам. Если из такой пары в множество \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e взят ровно один кубик, то возьмём второй кубик в \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eY\u003c/i\u003e\u003c/span\u003e. Если в множестве \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e нет ни одного кубика этой пары, запомним, что мы их ещё можем взять. Если же лежат оба, запомним, сколько таких пар было.\u003c/p\u003e\u003cp\u003eВклад по одиночным кубикам мы уравновесили. Если же в множестве \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e лежат \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e пар кубиков, то их суммарный вклад равен \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eks\u003c/i\u003e\u003c/span\u003e. Возьмём тогда \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e пар кубиков, ещё не лежащих ни в одном множестве, в \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eY\u003c/i\u003e\u003c/span\u003e, и скажем, что это и есть ответ.\u003c/p\u003e\u003cp\u003eЗаметим, что так мы всегда ответ найдём. Не найти могли только если во втором пункте нам не хватило свободных пар кубиков. Но учитель взял не более \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e / 2\u003c/span\u003e кубиков и для уравновешения нам достаточно столько же кубиков, сколько он взял. \u003c/p\u003e\u003c/div\u003e","tags":[]}}