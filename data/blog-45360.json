{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1465625338,"rating":1,"authorHandle":"decoder123","modificationTimeSeconds":1465633745,"id":45360,"title":"\u003cp\u003eCodeforces #110 Div 2 C / Div 1 A [Editorial]\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/157/problem/C\"\u003e\u003ch1\u003eMessage\u003c/h1\u003e\u003ch1\u003e\u003c/h1\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003eYou are given 2 strings :- S and t.\u003c/p\u003e\u003cp\u003eYou have to convert any \u003cstrong\u003esub-string\u003c/strong\u003e of S to t with 3 operations\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e1.  Delete char from sub-string of S (from the endpoints only).\n2.  Add char to sub-string of S (at endpoints only)\n3.  Change any char of S.\n\u003c/code\u003e\u003c/pre\u003e \u003chr /\u003e\u003cp\u003eThere are few ideas that help you solve this problem:-\u003c/p\u003e\u003cp\u003e\u003d\u003d\u003d First of all there always exist an answer. Using |t| operation we can always have string t.\u003c/p\u003e\u003cp\u003eSo the first question is do we have to consider those sub-strings of s that are greater than |t| in length? Well you might think you have to but let\u0027s analyze the situation a bit:-\u003c/p\u003e\u003cp\u003e\u003d\u003d\u003d (a) No matter what we do we have to end in string t.  But this sub-string of S [we call it SS from now on] has length \u0026gt; |t|  That means we have to delete few characters.  |---\u0026gt; Characters can only be deleted from both the end points. So we have to delete few from end points. Now the thing is those that we are going to delete, is there any meaning for considering in the first place?  For example: Then we could have just considered the stripped string and then we have saved few delete operations. So we will never need a delete operation.\u003c/p\u003e\u003cp\u003e\u003d\u003d\u003d What is the case for addition?\u003c/p\u003e\u003cp\u003eThere are two possibilities:-\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eWe have sub-string SS. Then we add at beginning some character which was actually at the beginning of sub-string SS in the original string S. It\u0027s similar to the previous case will not be necessary as we can avoid this operation by adding to the sub-string originally.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eWe have added a completely different character. Now that does not match that of original string. so it will be added. But if we think carefully...isn\u0027t it an change operation?\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eS \u003d ABBCBA\u003c/p\u003e\u003cp\u003et \u003d BBCD\u003c/p\u003e\u003cp\u003eNow in case of sub-string \u0026quot;BB\u0026quot; we will add \u0027C\u0027 but it is already in the string immediate next to the end of the string..so why don\u0027t we consider sub-string \u0026quot;BBC\u0026quot;\u003c/p\u003e\u003cp\u003eNow when considering \u0026quot;BBC\u0026quot; we will try to add \u0027D\u0027 and there is no match with the immediate next of that \u0027C\u0027 in string S. So we will add it. But this add is equivalent to a change if we consider sub-string \u0026quot;BBCB\u0026quot;.\u003c/p\u003e\u003cp\u003eAnd also we don\u0027t need to consider any string \u0026lt; |t|.  So we have to check all |t| length sub-strings.\u003c/p\u003e\u003cp\u003eNow it indicates we use |t| length sub-strings and then compare with the target t. Is this ok? Ah we have missed a small case.\u003c/p\u003e\u003cp\u003efor example:-  S \u003d ABCD  T \u003d XA How we will check?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e   [AB]CD   A[BC]D   AB[CD]\n    XA        XA        XA  ANS \u003d 2 ---\u0026gt;WRONG\n   But we can do it in 1.\n    [A]BCD  --\u0026gt; prepned X..[XA]. \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo why does this happen? We have to check whether A matches with or not with every position in the array. We were not doing it earlier.  How to do that?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  ##ABCD##\n  XA\n  ##ABCD##\n   XA\n  ##ABCD##\n    XA\n  ##ABCD##\n     XA\n  ##ABCD##\n      XA\n  ##ABCD##\n       XA\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWell this way we checked every character against every character. So by this we are sure that we won\u0027t miss anything. \u003c/p\u003e\u003cp\u003eThis is what I got from the problem..anybody is suggested to clarify or modify this idea to have a better explanation. Thanks.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eEDIT:\u003c/strong\u003e \u003cstrong\u003e1. I dont care about upvote but I wrote this so that I can verify my understanding and also to provide with a English version of the editorial on my own words. Whatever it is just point out if there is any error on what I said? Thanks.\u003c/strong\u003e ****\u003c/p\u003e\u003c/div\u003e","tags":["#110 (div. 2) c","edirorial","explanation","bruteforce"]}}