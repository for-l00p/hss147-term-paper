{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1521645830,"rating":1,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1521645830,"id":58492,"title":"\u003cp\u003eNotes on Codeforces Beta Round #125, Div2- A, B, C, D, E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/199/problem/A\" title\u003d\"Codeforces Round 125 (Div. 2)\"\u003e199A - Hexadecimal\u0027s theorem\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e to denote the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e-th Fibonacci integer, and thus \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e] \u003d \u003ci\u003ef\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e - 1] + \u003ci\u003ef\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e - 2] \u003d \u003ci\u003ef\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e - 2] + \u003ci\u003ef\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e - 3] + \u003ci\u003ef\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e - 2]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/199/problem/B\" title\u003d\"Codeforces Round 125 (Div. 2)\"\u003e199B - Special Olympics\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThere are four circles, and we are going to check each of them to see whether it forms a “full” circle or not. We use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e to denote the current circle that we are considering, and use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e2\u003c/span\u003e to denote the other two circles that form a ring, with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e1 \u0026lt; \u003ci\u003eR\u003c/i\u003e2\u003c/span\u003e. Then, the circle \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e forms a “full” one if any of the three conditions are satisfied.\u003c/p\u003e\u003cp\u003e1) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e is completely outside \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e2\u003c/span\u003e;\u003c/p\u003e\u003cp\u003e2) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e is completely inside \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e1\u003c/span\u003e;\u003c/p\u003e\u003cp\u003e3) \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e2\u003c/span\u003e is completely inside \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/199/problem/C\" title\u003d\"Codeforces Round 125 (Div. 2)\"\u003e199C - About Bacteria\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can find that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/06/29068fb97a4cf6fcc8291dd072388f84b66c858d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Then, we can construct an inequality, and compute the answer.\u003c/p\u003e\u003cp\u003eAnother solution is that suppose we substitute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d 1\u003c/span\u003e to the function, and calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, 1)\u003c/span\u003e. Then, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e forms an increasing sequence, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e \u003d \u003ci\u003eka\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Assume that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003et\u003c/i\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e, then we need \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e steps to obtain a value that is no less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ez\u003c/i\u003e\u003c/span\u003e. The reason is simple, since this is an increasing function. For an intuitive understanding, we can generate another sequence starting with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, ..., \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u003d \u003ci\u003et\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e \u003d \u003ci\u003ekb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, and one can check that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e ≤ \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 2\u003c/sub\u003e ≤ \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e...\u003c/span\u003e. Therefore, we only need check that which segment does \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e fall into.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/199/problem/D\" title\u003d\"Codeforces Round 125 (Div. 2)\"\u003e199D - Jumping on Walls\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is in fact a shortest path problem. We can simply adopt the SPFA (shortest path faster algorithm) framework, and calculate the minimum distance (in fact it is “minimum time”) from the starting point to any other one. Be careful that when we update the minimum distance, we should consider the current “water level” as an extra condition, i.e., we can only update the minimum distance if all the corresponding positions are still safe. The player can escape successfully if he can reach any position that is larger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/199/problem/E\" title\u003d\"Codeforces Round 125 (Div. 2)\"\u003e199E - Delivering Carcinogen\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe main idea is to implement binary search to calculate the time, and the remaining work is to determine whether one can catch the other one within the time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, which we are currently testing.\u003c/p\u003e\u003cp\u003eWe first compute for player 1 the position that he can reach after time \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. Then, we check whether the second player can catch him at that position or not. Then, we will face the following problem. Given two points A and B strictly outside the circle, what is the shortest distance between them? \u003c/p\u003e\u003cp\u003eIf the straight line connecting them has no common points with the circle, then their distance is just the length of line. Otherwise, we draw their tangent lines starting from A and B to the circle, respectively, with intersecting points a and b. Then, the answer is the length of Aa, plus the length of Bb, plus the length of bow \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/45/da/45da220d568ad099d57130fc1c0f2e49a2ed405a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}