{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1433758690,"rating":-45,"authorHandle":"starius","modificationTimeSeconds":1433762509,"id":18408,"title":"\u003cp\u003escanf instead of std::cin for large inputs\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eMany people use std::cin to input numbers. cin is known to be slower, than scanf, however until now I did not realize how much slower it is.\u003c/p\u003e\u003cp\u003eThe problem: \u003ca href\u003d\"/contest/472/problem/D\" title\u003d\"Codeforces Round 270\"\u003e472D - Design Tutorial: Inverse the Problem\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe solution using cin exceeds time limit: \u003ca href\u003d\"/contest/472/submission/11495679\" title\u003d\"Submission 11495679 by starius\"\u003e11495679\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe solution using scanf satisfies time limit more than enough: \u003ca href\u003d\"/contest/472/submission/11495791\" title\u003d\"Submission 11495791 by starius\"\u003e11495791\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe only difference between these solutions is using cin or scanf. I spent lot of time looking for a problem with algorithm itself, but slow io turned out to be the reason. \u003c/p\u003e\u003cp\u003eThen I found \u003ca href\u003d\"//codeforces.com/blog/entry/10\"\u003ehow to speen up cin\u003c/a\u003e (and cout): turn off synchronization with cstdio streams. However it is not sufficient for this problem. test 9 was passed, but test 10 failed: \u003ca href\u003d\"/contest/472/submission/11495880\" title\u003d\"Submission 11495880 by starius\"\u003e11495880\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUse scanf for large inputs\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eBy the way, why the output is shown in the time limit is exceeded? \u003ca href\u003d\"/contest/472/submission/11495679\" title\u003d\"Submission 11495679 by starius\"\u003e11495679\u003c/a\u003e, test 9. The program prints the answer immediately before exiting, so if the time limit is exceeded (especially if it happens when it reads input data), it must not be having time to print the answer.\u003c/p\u003e\u003cp\u003eThe solution.\u003c/p\u003e \u003col\u003e   \u003cli\u003eCheck diagonal elements of the matrix are equal to 0 and other elements are not.\u003c/li\u003e   \u003cli\u003eCheck that matrix is symmetrical.\u003c/li\u003e   \u003cli\u003eSet root to the first vertex.\u003c/li\u003e   \u003cli\u003eFind a vertex nearest to the root (or one of such possible vertices) and set it to \u0026quot;nearest neighbour\u0026quot; (variable cmp in the code).\u003c/li\u003e   \u003cli\u003eFor each vertex i not equal to the root and to the nearest neighbour, check that at least one of the following conditions is satisfied: (1) path from the root to i includes the nearest neighbour: D[root][cmp] + D[cmp][i] \u003d\u003d D[root][i] and (2) path from the i to the nearest neighbour includes the root: D[i][root] + D[root][cmp] \u003d\u003d D[i][cmp]\u003c/li\u003e   \u003cli\u003eSet root to next vertex and go to 4.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003ePS. How to make nested list in this markdown?\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD\u003c/strong\u003e. Additional speed up of cin: use cin.tie(NULL) in addition to ios_base::sync_with_stdio(0). \u003ca href\u003d\"/contest/472/submission/11496401\" title\u003d\"Submission 11496401 by P_Nyagolov\"\u003e11496401\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD2\u003c/strong\u003e. Reading bytes with fread are manual parsing is even faster than scanf. \u003ca href\u003d\"/contest/472/submission/11496768\" title\u003d\"Submission 11496768 by enot110\"\u003e11496768\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}