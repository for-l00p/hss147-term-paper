{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1523828702,"rating":16,"authorHandle":"marcorubini301","modificationTimeSeconds":1523883834,"id":58953,"title":"\u003cp\u003eMinimum cost problem, only 1MiB\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello this is my first blog post, could you please help me with this problem? You are given a stack of \u003cem\u003eN\u003c/em\u003e elements, you want to pop all the elements performing one of the three operations: Pop 1 element, Pop 2 elements, Pop half elements. Every operations has a cost in money, based on the number of elements in the stack. You are given 3 arrays, array \u003cem\u003eU\u003c/em\u003e, \u003cem\u003eD\u003c/em\u003e and \u003cem\u003eM\u003c/em\u003e. The i-th element of the array is the cost (in money) of performing the operation when the stack has i+1 elements in it. Every operation has also a cost in energy: Pop 1 restores 1 energy, Pop 2 doesn\u0027t change your energy, Pop half costs 1 energy. You start with \u003cem\u003eE\u003c/em\u003e energy, and can never go under 0 energy. Find the minimum cost in money you need to pop all the stack, while remaining with non-negative energy. Input limits: N \u0026lt;\u003d E \u0026lt;\u003d 1000000, Ui and Di and Mi \u0026lt;\u003d 10^9, memory limit 1MiB, time limit 1s.\u003c/p\u003e\u003cp\u003eThe 3 arrays are given in the form of 4 integers each, V0, A, B, C. Every element i-th of each array can be generated using the formula Vi \u003d (Vi-1 *A + B)%C\u003c/p\u003e\u003cp\u003eFor example the integers:\u003c/p\u003e\u003cp\u003e13 4 7 17\u003c/p\u003e\u003cp\u003e1 3 9 19\u003c/p\u003e\u003cp\u003e7 9 9 13\u003c/p\u003e\u003cp\u003ewith N \u003d 5 generate the arrays U \u003d [ 13,8,5,0,13 ] D \u003d [ 1,12,7,11,4 ] M \u003d [ 7,7,7,7,7 ]\u003c/p\u003e\u003cp\u003eI tried to use dynamic programming to solve this problem. If the only operations possible were pop1 and pop2, i could keep only 2 rows of the dp table at a time, and it would be fine, but since there is the pop half operation, i need to remember N/2 states and it goes out of memory.\u003c/p\u003e\u003c/div\u003e","tags":["#dp"]}}