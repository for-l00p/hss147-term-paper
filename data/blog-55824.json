{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1510877323,"rating":8,"authorHandle":"pabloskimg","modificationTimeSeconds":1510883377,"id":55824,"title":"\u003cp\u003eFind an odd-length cycle in an undirected graph?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi everyone,\u003c/p\u003e\u003cp\u003eI\u0027m struggling to come up with a correct and efficient algorithm that is able to find an odd-length cycle in an undirected graph. Any odd-length cycle is fine. I already know that a graph has an odd-length cycle if and only if it\u0027s not bipartite, but the problem is that this only tells you whether there is an odd-length cycle or not, but it doesn\u0027t find you an actual cycle in case there is one. One possible approach I came up with is to run DFS and every time there is a back-edge check if the cycle formed by the back-edge has an odd length, but the problem with this strategy is that it would only test a subset of the cycles, but not all possible cycles (think of complex cycles using many back edges in complex ways). Does any one know how to solve this problem?\u003c/p\u003e\u003cp\u003eThank you guys in advance.\u003c/p\u003e\u003c/div\u003e","tags":["odd cycle","graph","dfs and similar"]}}