{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1422124836,"rating":30,"authorHandle":"Betlista","modificationTimeSeconds":1422171070,"id":15996,"title":"\u003cp\u003eBetlista\u0027s TopCoder SRM 647 editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eIn SRM there were 1413 registered participants — DIV1 570, DIV2 698 + 145 newcomers\u003c/p\u003e\u003ch3\u003eDIV2 — easy (250)\u003c/h3\u003e\u003cp\u003e\u003ca href\u003d\"http://community.topcoder.com/stat?c\u003dproblem_statement\u0026amp;pm\u003d13632\u0026amp;rd\u003d16279\"\u003e(link)\u003c/a\u003e\u003c/p\u003e\u003cp\u003eNot so difficult, max number of children with same age can be at most half (rounded up, so for example 2 for 3 chidren) of the count of all — \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/64/06/64062efd85bacbb60dcd03b5a3ade28e5c09b6f8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Len say that max age is 1, for even count of children we will arrange the line as \u003ccode\u003e1 a 1 b 1 c ... 1 z\u003c/code\u003e for odd number of children \u003ccode\u003e1 a 1 b ... 1 z 1\u003c/code\u003e where a-z are different ages... \u003c/p\u003e\u003cp\u003eTo find max number of children we can use array, while the age is at most 25, or in general \u003ca href\u003d\"//codeforces.com/blog/entry/3976\"\u003eCounting Map\u003c/a\u003e.\u003c/p\u003e\u003ch3\u003eDIV2 — medium (500)\u003c/h3\u003e\u003cp\u003e\u003ca href\u003d\"http://community.topcoder.com/stat?c\u003dproblem_statement\u0026amp;pm\u003d13631\u0026amp;rd\u003d16279\"\u003e(link)\u003c/a\u003e\u003c/p\u003e\u003cp\u003eGreedy is fine. Everytime we visit the city, we remove the item with max profit we can still sell in such city. I maintained heap (one per city) and removed the sold item (if heap is empty simply do nothing).\u003c/p\u003e\u003ch3\u003eDIV2 — hard (1000)\u003c/h3\u003e\u003cp\u003e\u003ca href\u003d\"http://community.topcoder.com/stat?c\u003dproblem_statement\u0026amp;pm\u003d13606\u0026amp;rd\u003d16279\"\u003elink\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst step is to find the real possible max height of the buildings. We can see that in test case #2, where in input there were values \u003ccode\u003e{8,22,1,55,42}\u003c/code\u003e, but height of the second building can be at most 17 (height of the previous building is 8, and distance is 3 \u003d\u0026gt; 8+3*3 \u003d 17). One can do that in while loop, checking whether heights are reachable, if not, decreasing the height for most reachable at the moment and run the check again...\u003c/p\u003e\u003cp\u003eWhen we have this, we have to find for each pair of the buildings the max height between those two, using for example binary search (described in deeper detail in \u003ca href\u003d\"//codeforces.com/blog/entry/15996#comment-208981\"\u003ecomment\u003c/a\u003e).\u003c/p\u003e\u003c/div\u003e","tags":["topcoder","srm","srm647","647"]}}