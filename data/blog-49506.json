{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1483347785,"rating":30,"authorHandle":"tmt514","modificationTimeSeconds":1483536399,"id":49506,"title":"\u003cp\u003eWeekly Training Farm 19 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi everyone!\u003c/p\u003e\u003cp\u003eThank you for joining \u003ca href\u003d\"//codeforces.com/group/gRkn7bDfsN/contest/210950\"\u003eWeekly Training Farm 19\u003c/a\u003e. The solution codes will be uploaded later.\u003c/p\u003e\u003cp\u003eCongratulations to:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eThe winner: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/zscoder\" title\u003d\"Master zscoder\"\u003ezscoder\u003c/a\u003e\u003c/li\u003e   \u003cli\u003eThe runner up: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/eddy1021\" title\u003d\"Grandmaster eddy1021\"\u003eeddy1021\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e3rd place: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/arosusti\" title\u003d\"Master arosusti\"\u003earosusti\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/gRkn7bDfsN/contest/210950/problem/A\"\u003eProblem A. Aligned Text\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThis problem is equivalent to finding the longest arithmetic progression of a given set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e. We can always enumerate the common difference \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e and use another loop to find the maximum length.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/gRkn7bDfsN/contest/210950/problem/B\"\u003eProblem B. Bitcount\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIf we want to count something that can be represented as a sum of values taken within an interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e, we can always translate them as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecount\u003c/i\u003e([\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e]) \u003d \u003ci\u003ecount\u003c/i\u003e([0, \u003ci\u003eb\u003c/i\u003e]) - \u003ci\u003ecount\u003c/i\u003e([0, \u003ci\u003ea\u003c/i\u003e - 1])\u003c/span\u003e. Usually this will make the implementation easier (and safer).\u003c/p\u003e\u003cp\u003eMoreover, in this problem, we can even deal with each binary digit separately. Hence, given an upper bound \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e \u003d \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e \u003d \u003ci\u003ea\u003c/i\u003e - 1\u003c/span\u003e) and a position \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/20/0a/200a17e23f6def632fbae9756eaf214370206769.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we can focus on counting the number of \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e-bits in the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th position between \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/gRkn7bDfsN/contest/210950/problem/C\"\u003eProblem C. Crossing River\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThere are \u0026quot;forward\u0026quot; methods and \u0026quot;reversed\u0026quot; methods. The \u0026quot;forward\u0026quot; idea is to identify \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e to be the smallest possible jumping gap from the left river bank to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th rock. However, the table is not easy to build in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5d/1f/5d1f29f648247e77966a5b1703590aea2a6a75b6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time. Although I believe it is achievable using \u003ccode\u003eset\u003c/code\u003e iterators, but no one use it during the contest \u003d)\u003c/p\u003e\u003cp\u003eThe key to this problem is to use the \u0026quot;reversed\u0026quot; idea: binary search. We first guess an answer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e and then decide if the frog can cross the river with jumping distance no more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e. There are several way to do this. The first idea (coincident to the author\u0027s solution) is to use the sliding window technique: keeping all reachable rocks within the range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ei\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e - 1]\u003c/span\u003e. If any of these rocks has value less or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, then the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th stone is reachable. We can use a deque to achieve linear time testing given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe second idea is to first sort the rocks according to their values: we don\u0027t need sliding windows anymore! \u003cs\u003eWe use sliding ubuntu!\u003c/s\u003e Then, we greedily consider each rock in the order of their values, if we can jump furtherer, we jump. This solution is simpler and looks elegant to me.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eThere are other solutions uses BIT or sets, make acceptable \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7e/ff/7eff5f175186cf1a51a4d3d4b13d1c408fa3d011.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solutions.\u003c/li\u003e \u003c/ul\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/gRkn7bDfsN/contest/210950/problem/D\"\u003eProblem D. Dice Rolling\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTricky case-study problem. Define the opposite faces as a \u0026quot;set\u0026quot;. The key to this problem is the following lemma:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLemma:\u003c/strong\u003e Let \u003cspan class\u003d\"tex-span\"\u003e{\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e}\u003c/span\u003e be a \u0026quot;set\u0026quot;. In any dice rolling sequence, between two occurrence of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e there must exist an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSo, let the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e\u003c/span\u003e be the sum of two numbers in a \u0026quot;set\u0026quot;, the answer must be a multiple of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e\u003c/span\u003e plus some remaining extra (at most three) larger number in some sets. So the special cases started by studying \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e \u003d 1\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 2\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e \u003d 2\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≥ 3\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e ≥ 3\u003c/span\u003e. The very special case is when \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e) \u003d (2, 4)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e(4, 2)\u003c/span\u003e.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/gRkn7bDfsN/contest/210950/problem/E\"\u003eProblem E. Escaped String\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eAt first glance, it seems to be a classical \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e dynamic programming: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e is defined to be the shortest possible length of subsequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[0..\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e and the \u003cstrong\u003efirst\u003c/strong\u003e occurrence in string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e as a subsequence ending at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th character. Then we have the following:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] ≠ \u003ci\u003eB\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e.\u003c/li\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u003d \u003ci\u003emin\u003c/i\u003e{\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e], \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003eprev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ej\u003c/i\u003e - 1, \u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1])]}\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003eB\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ej\u003c/i\u003e - 1, \u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1])\u003c/span\u003e is the previous occurrence of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1]\u003c/span\u003e appear in string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e before index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e - 1\u003c/span\u003e.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eHowever, this needs an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e size memory, which is unaffordable. By observing that the dynamic programming state is meaningful only when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003eB\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e, we can use a memory efficient encoding for storing these DP states. Please refer to \u003ca href\u003d\"https://gist.github.com/tmt514/ab9a5d4e02796beb7fd1514b39449352\"\u003eMy code\u003c/a\u003e for implementation.\u003c/p\u003e\u003cp\u003eThe second solution is to notice that the answer is always less or equal to \u003cspan class\u003d\"tex-span\"\u003e1 + \u003c/span\u003e the maximum occurrence of any single letter (i.e., \u003cspan class\u003d\"tex-span\"\u003e ≤ 501\u003c/span\u003e). This is because one can greedily choose the character \u003cspan class\u003d\"tex-span\"\u003eα\u003c/span\u003e such that the index that the \u0026quot;next \u003cspan class\u003d\"tex-span\"\u003eα\u003c/span\u003e\u0026quot; occurring in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e ≤ \u003c/span\u003e the index of the \u0026quot;next \u003cspan class\u003d\"tex-span\"\u003eα\u003c/span\u003e\u0026quot; occurring in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e, among these character we choose the largest indexed \u003cspan class\u003d\"tex-span\"\u003eα\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. It gives us a solution of length no more than \u003cspan class\u003d\"tex-span\"\u003e501\u003c/span\u003e. Now, we can use the LIS idea: let \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/24/74/2474702ae0176bd5875850a336909059b45de884.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e to be the largest index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e such that there exists a subsequence of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e[0..\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e of length \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/86/84/8684977e56e9f2b9817d0c41d8143796eef18e29.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e occurs in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e[0..\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e (or set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e if this sequence is not a subsequence of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e) but not \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e[0..\u003ci\u003ej\u003c/i\u003e - 1]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen the recurrence relation is: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/73/4d/734d603dec83327bf9e2fc4244f5f2db9f7b2806.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}