{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1456199404,"rating":32,"authorHandle":"zxqfl","modificationTimeSeconds":1456200193,"id":43296,"title":"\u003cp\u003eSRM 682 Unofficial Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003eDiv2 Easy\u003c/h3\u003e\u003cp\u003eThe size of the input string is small, so we can iterate over all the substrings and find the largest substring consisting of the characters A, C, G, and T. The complexity of this approach is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e. You could solve it in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e using the two-pointers method.\u003c/p\u003e\u003ch3\u003eDiv2 Medium\u003c/h3\u003e\u003cp\u003eI claim that the answer will always have at most 6 characters. There are at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e substrings of length 6 of a string of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. The length of the input string is at most 2000. But there are \u003cspan class\u003d\"tex-span\"\u003e4\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e \u003d 4096\u003c/span\u003e possible DNA sequences of length 6, so at least one of them isn\u0027t contained in the string.\u003c/p\u003e\u003cp\u003eThat means that we can afford to iterate over all possible answers, in increasing order of length. We will try at most \u003cspan class\u003d\"tex-span\"\u003e2000 + 1024 + 256 + 16 + 4\u003c/span\u003e strings, and checking each string will take \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5d/1f/5d1f29f648247e77966a5b1703590aea2a6a75b6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time, so the algorithm is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/57/4a/574a36db668e0413e5bf150b9c40044cb6e3aba1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eI think this algorithm is actually \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e because it is hard to induce worst-case behaviour in the string-checking algorithm, but I haven\u0027t proved it.\u003c/p\u003e\u003ch3\u003eDiv2 Hard\u003c/h3\u003e\u003cp\u003eWe will use dynamic programming. The state is: suppose we are at position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in the string, we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e changes available, and the robot is currently at (0, 0). Then, we iterate over how many moves it will take for the robot to return to (0, 0). If we know it will take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e moves, then it\u0027s computationally easy to find the minimum number of changes to make this happen: suppose that if we made no changes, the robot would end up at distance \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. Then by making \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e / 2\u003c/span\u003e changes we can ensure that the robot reaches cell (0, 0).\u003c/p\u003e\u003cp\u003eThe complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e: there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e states and each state has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e possible transitions.\u003c/p\u003e\u003ch3\u003eDiv1 Easy\u003c/h3\u003e\u003cp\u003eThere are a few ways to solve this problem.\u003c/p\u003e\u003cp\u003eOne way is this: not hard to code, but difficult to prove. It turns out there are only 3 cases where the answer is no. Here they are, crudely drawn in paint.NET by yours truly about 20 minutes ago:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/42/e7/42e71947a6733b25c1f082adca59e3a4c9d71acf.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo, you could manually check these cases.\u003c/p\u003e\u003cp\u003eYou are probably interested in a provable solution. We can use the following lemma:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eIn any graph of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e vertices where every vertex has degree at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, there is a simple path of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1, 2\u003ci\u003ed\u003c/i\u003e)\u003c/span\u003e.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThis is pretty hard, so I asked someone else to prove it. Here is a proof written by my friend Sina Abbasi:\u003c/p\u003e\u003cp\u003eTake the longest path P in the graph, suppose it is length L. Out of the vertices not in P, take the one v which is connected to a vertex closest to one of the endpoints of P (distance measured on path). Suppose this distance is a\u0026gt;\u003d1. Then each vertex not in P can only be connected to L-2a possible vertices, but it can\u0027t be connected to two consecutive ones on the path otherwise there\u0027s a longer path, so L/2-a. So if we take the subgraph H by removing P, each vertex has degree at least d+a-L/2. Now follow one end of P until you get to the vertex v is connected to, then follow a path from v for as long as you can outside of P. By a greedy argument this path has length at least L-a+d+a-(L)/2 \u003d (L)/2 +d. Since L was maximal we get d \u0026lt;\u003dL/2 which implies the desired result. I don\u0027t know if I did the calculations are completely correct but I think this idea gives the desired bound.\u003c/p\u003e\u003cp\u003eAnyway, once we have this lemma you can reduce the leaves (just mark the remaining vertex with the associated path length). Then you\u0027re left with a graph, and if it has a lot of vertices then the answer is immediately yes. Otherwise, there aren\u0027t very many vertices left, so you can brute force.\u003c/p\u003e\u003ch3\u003eDiv1 Medium\u003c/h3\u003e\u003cp\u003eThe answer is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d7/a1/d7a1dd7079d098733429427e97c0a1a234f158db.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Wait, that fails the sample case with a cycle of length 4. We have to subtract 1 if there is a vertex on the cycle with exactly 2 neighbours.\u003c/p\u003e\u003cp\u003eThis is actually just the maximum connected dominating set problem asked on a pseudotree. Problem authors are getting lazy these days.\u003c/p\u003e\u003ch3\u003eDiv1 Hard\u003c/h3\u003e\u003cp\u003eChallenge phase ends in 5 minutes as I write this so let\u0027s make this quick. Let\u0027s pretend Bob knows the probability distribution, and the game show picked the worst-case distribution knowing that Bob would know it. The answer to this problem will be the same as the answer to the given problem. Wait, what?\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Minimax_theorem\"\u003ehttps://en.wikipedia.org/wiki/Minimax_theorem\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSo, we\u0027ve switched the problem. How does this make it easier?\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e be the chance of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e being equal to \u003cspan class\u003d\"tex-span\"\u003e0, ..., \u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e be Bob\u0027s expected score. Then:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/18/1b/181b4e480b658723138ca83516b97ead02ed5276.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003ei\u003c/i\u003e / \u003ci\u003en\u003c/i\u003e\u003c/span\u003e\u003c/center\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≥ 0\u003c/span\u003e\u003c/center\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e ≥ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eiv\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/sub\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u003c/center\u003e\u003cp\u003eWe can find the minimal value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e with the simplex algorithm.\u003c/p\u003e\u003cp\u003eThere\u0027s also a solution using binary search that the round tester created. It is pretty cool, but I am not confident that I can explain it.\u003c/p\u003e\u003c/div\u003e","tags":["srm","editorial"]}}