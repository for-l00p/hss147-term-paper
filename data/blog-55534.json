{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1509610821,"rating":0,"authorHandle":"haleyk100198","modificationTimeSeconds":1509610821,"id":55534,"title":"\u003cp\u003e2017 ACM-ICPC Xi\u0027An Regionals problem E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI am keenly interested knowing the solution for a problem that our team didn\u0027t found a solution even when we are reviewing the questions, would like to hear from others thoughts on this question. :)\u003c/p\u003e \u003chr /\u003e\u003cp\u003eProblem E — Naomi with the graph\u003c/p\u003e\u003cp\u003eTime limit: 1~3s, I forgot the exact time limit. Memory Limit: 512 MB\u003c/p\u003e\u003cp\u003eAs we know, Naomi is poor at math. But she practices math problems every day. The following problem is one which she met.\u003c/p\u003e\u003cp\u003eNaomi has a non-directed connected graph with n nodes, labeled from 1 to n, and m edges. The length of each edge is exactly 1. Each node in the graph has a special value and the value of the i-th node is denoted by A[i]. She defines dist[i] as the length of the shortest path bewteen the i-th node and the first node and especially dist[1] \u003d 0.\u003c/p\u003e\u003cp\u003eThen she defines the cost of the graph as Sum( (A[i] — dist[i])^2 | for all 1 \u0026lt;\u003d i \u0026lt;\u003d n ).\u003c/p\u003e\u003cp\u003eNaomi wants to MINIMIZE the cost of the graphby inserting some new edges (the lengths of which should be 1 as well) into the graph. She could insert nothing or insert any number of new edges in her mind.\u003c/p\u003e\u003cp\u003eCan you help her?\u003c/p\u003e\u003cp\u003eInput\u003c/p\u003e\u003cp\u003eThe input contains several test cases which is no more than 10.\u003c/p\u003e\u003cp\u003eIn each test case, the first line contains two integers n and m ( 1 \u0026lt;\u003d n \u0026lt;\u003d 40, 0 \u0026lt;\u003d m \u0026lt;\u003d 1600). \u003c/p\u003e\u003cp\u003eEach of the following m lines contains two integers x and y ( 1 \u0026lt;\u003d x, y \u0026lt;\u003d n ) indicating an edge between the x-th node and the y-th node.\u003c/p\u003e\u003cp\u003eThe last line of the test case contains n integers describing the array A and each element A[i] satisfies 0 \u0026lt;\u003d A{i] \u0026lt;\u003d 1000. \u003c/p\u003e\u003cp\u003eOutput\u003c/p\u003e\u003cp\u003eFor each test case, print the minimum cost of the graph in a single line.\u003c/p\u003e\u003cp\u003eSample input\u003c/p\u003e\u003cp\u003e4 3\u003c/p\u003e\u003cp\u003e1 2\u003c/p\u003e\u003cp\u003e2 3\u003c/p\u003e\u003cp\u003e3 4\u003c/p\u003e\u003cp\u003e0 3 3 3\u003c/p\u003e\u003cp\u003eSample Output\u003c/p\u003e\u003cp\u003e5\u003c/p\u003e \u003chr /\u003e\u003cp\u003eSo far the best algorithm our team have came up with is a min-cut algorithm with nodes (a[i], dist[i]), but we are worried that having O(V^2) nodes will result in O(V^6) runtime per test case thus a brutal TLE. \u003c/p\u003e\u003cp\u003eI am grateful if someone could shed some light on this problem, I wonder if we are on a completely wrong path — It seems to be impossible to solve the problem with flow related algorithms without constructing O(V^2) nodes.\u003c/p\u003e\u003c/div\u003e","tags":["xian regionals","naomi with the graph"]}}