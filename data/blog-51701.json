{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1493060814,"rating":0,"authorHandle":"1am","modificationTimeSeconds":1493060814,"id":51701,"title":"\u003cp\u003eDay 6\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch1\u003eSet\u003c/h1\u003e\u003cp\u003eFirst we solved how to get the number of unique words in a list of words Here is the code: \u003ca href\u003d\"http://ideone.com/8poO6y\"\u003ehttp://ideone.com/8poO6y\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe solved this using set data structure. Sets have the following features:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003ealways ordered from smallest to largest (either alphabetically or numerically; depending on data type)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003econtain only unique elements, no repetitions\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003einclude a built in member function for lowerbound accessed by set_name.lower_bound (element) \u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eare accessed through an iterator, to get the element that the iterator is pointing at, you must do *(iterator_name)\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eFor more information on its member functions and syntax, take a look at here: \u003ca href\u003d\"http://www.cplusplus.com/reference/set/set/\"\u003ehttp://www.cplusplus.com/reference/set/set/\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eMap\u003c/h1\u003e\u003cp\u003eWe said that the map data structure is quite similar to the set data structure, other than the fact that maps help us to connect a key with a value. For example, the key could be name of grocery item, and the value could be its price. Here is a code that shows some features of it. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/8Z4iSL\"\u003ehttp://ideone.com/8Z4iSL\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLike sets, it also has the same features listed above, search and erase are in log (n) complexity, where n is the number of elements in the map. They are ordered based on first element from smallest to largest also.\u003c/p\u003e\u003c/div\u003e","tags":[]}}