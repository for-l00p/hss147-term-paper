{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1528564381,"rating":-5,"authorHandle":"Shahwat","modificationTimeSeconds":1528564381,"id":59926,"title":"\u003cp\u003eSherlock and Inversion (with merge sort tree)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eProblem Link: \u003ca href\u003d\"https://www.hackerearth.com/practice/data-structures/advanced-data-structures/fenwick-binary-indexed-trees/practice-problems/algorithm/sherlock-and-inversions/description/\"\u003ehttps://www.hackerearth.com/practice/data-structures/advanced-data-structures/fenwick-binary-indexed-trees/practice-problems/algorithm/sherlock-and-inversions/description/\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe problem is about counting the number of inversion in a particular range(from L to R).\u003c/p\u003e\u003cp\u003eMy approach: I used Mo\u0027s Algorithm here. And to calculate the add and remove function I used Merge Sort Tree. I was pretty sure it will pass the dataset of 5s. But somehow it gave TLE. Maybe miscalculated the complexity.\u003c/p\u003e\u003cp\u003eThere is few solution available in the internet where I saw every of them solved it using Binary Indexed Tree. So, my question here is, if the problem will be solved using Merge Sort Tree or not after any kind of optimization. Or should I definitely use BIT. And if i do have to use BIT, then why?\u003c/p\u003e\u003cp\u003eMy code: \u003ca href\u003d\"https://ideone.com/wPb0AC\"\u003ehttps://ideone.com/wPb0AC\u003c/a\u003e (You can skip the code though)\u003c/p\u003e\u003c/div\u003e","tags":[]}}