{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1514399994,"rating":125,"authorHandle":"Nickolas","modificationTimeSeconds":1514747618,"id":56666,"title":"\u003cp\u003eCodeforces Round #455 (Div. 2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/909/problem/A\" title\u003d\"Codeforces Round 455 (Div. 2)\"\u003e909A - Generate Login\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eThe most straightforward solution is to generate all possible logins (by trying all non-empty prefixes of first and last names and combining them) and find the alphabetically earliest of them.\u003c/p\u003e\u003cp\u003eTo get a faster solution, several observations are required. First, in the alphabetically earliest login the prefix of the last name is always one letter long; whatever login is generated using two or more letter of the last name, can be shortened further by removing extra letter to get an alphabetically earlier login.\u003c/p\u003e\u003cp\u003eSecond, the prefix of the first name should not contain any letter greater than or equal to the first letter of the last name, other than the first letter.\u003c/p\u003e\u003cp\u003eThus, a better solution is: iterate over letter of the first name, starting with the second one. Once a letter which is greater than or equal to the first letter of the last name is found, stop, and return all letter until this one plus the first letter of the last name. If such a letter is not found, return the whole first name plus the first letter of the last name.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/909/problem/B\" title\u003d\"Codeforces Round 455 (Div. 2)\"\u003e909B - Segments\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eConsider a segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e + 1]\u003c/span\u003e of length 1. Clearly, all segments that cover this segment must belong to different layers. To cover it, the left end of the segment must be at one of the points \u003cspan class\u003d\"tex-span\"\u003e0, 1, ..., \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e options), and the right end — at one of the points \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ei\u003c/i\u003e + 2, ..., \u003ci\u003eN\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e options). So the number of segments covering \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e + 1]\u003c/span\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d (\u003ci\u003ei\u003c/i\u003e + 1)(\u003ci\u003eN\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e. The maximum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e over all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 0, ..., \u003ci\u003eN\u003c/i\u003e - 1\u003c/span\u003e gives us a lower bound on the number of layers.\u003c/p\u003e\u003cp\u003eBecause the problem doesn\u0027t require explicit construction, we can make a guess that this bound is exact. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e \u003ci\u003eM\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can be found in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e; alternatively, it can be seen that the maximum is reached for \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e4/59/e45992f0cb5344d67ec60dcd518510f1c7fea7c0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (for a central segment for odd \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e or for one of two central segments for even \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eThe answer is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/ca/90caaaa5dd767d8a95b584ae92e6ea180dccecf0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eWe can also prove this by an explicit construction. Sort all segments in non-decreasing order of their left ends and then in increasing order of their right ends. Try to find a place for each next segment greedily: if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is the left end of current segment, and segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e + 1]\u003c/span\u003e is free in some layer, add the current segment to that layer; otherwise, start a new layer with the current segment.\u003c/p\u003e\u003cp\u003e\u003cem\u003eand yes, this is our \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e problem! :-)\u003c/em\u003e\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/909/problem/C\" title\u003d\"Codeforces Round 455 (Div. 2)\"\u003e909C - Python Indentation\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eThis problem can be solved using dynamic programming. \u003c/p\u003e\u003cp\u003eLet\u0027s consider all possible programs which end with a certain statement at a certain indent. Dynamic programming state will be an array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e which stores the number of such programs ending with statement \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e at indent \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe starting state is a one-dimensional array for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 0\u003c/span\u003e: there is exactly one program which consists of the first statement only, and its last statement has indent 0.\u003c/p\u003e\u003cp\u003eThe recurrent formula can be figured out from the description of the statements. When we add command \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e, its possible indents depend on the possible indents of command \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and on the type of command \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. If command \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is a for loop, command \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e must have indent one greater than the indent of command \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][0] \u003d 0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e] \u003d \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e - 1]\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u0026gt; 0\u003c/span\u003e. If command \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is a simple statement, command \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e can belong to the body of any loop before it, and have any indent from 0 to the indent of command \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. If we denote the indent of command \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e (simple statement) as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, the indent of command \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, we need to sum over all cases where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≥ \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b9/f6/b9f61a8b531337f12ba288137cb12216b63197ef.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eThe answer to the task is the total number of programs which end with the last command at any indent: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/45/9c/459c316806b2242379ea46d27861e0f1a8cf6847.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eThe complexity of this solution is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/909/problem/D\" title\u003d\"Codeforces Round 455 (Div. 2)\"\u003e909D - Colorful Points\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eWe can simulate the process described in the problem step by step, but this is too slow — a straightforward simulation (iterate over all points when deciding which ones to delete) has an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e complexity and takes too long. A solution with better complexity is required.\u003c/p\u003e\u003cp\u003eLet\u0027s consider continuous groups of points of same color. Any points inside a group are safe during the operation; only points at the border of a group are deleted (except for the leftmost point of the leftmost group and the rightmost point of the rightmost group, if these groups have more than one point). So, if current group sizes are, from left to right, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eG\u003c/i\u003e - 1\u003c/sub\u003e, \u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, group sizes after performing the first operation are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - 1, \u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - 2, ..., \u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eG\u003c/i\u003e - 1\u003c/sub\u003e - 2, \u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/sub\u003e - 1\u003c/span\u003e, after the second operation — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e - 2, \u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - 4, ..., \u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eG\u003c/i\u003e - 1\u003c/sub\u003e - 4, \u003ci\u003eN\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eG\u003c/i\u003e\u003c/sub\u003e - 2\u003c/span\u003e and so on. This process continues until at least one of the groups disappears completely, at which point its adjacent groups may get merged if they are of the same color.\u003c/p\u003e\u003cp\u003eThis way, multiple operations can be simulated at once:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eFind the number of operations that are required for at least one group to disappear.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eUpdate group sizes after this number of operations.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eRemove empty groups.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eMerge adjacent groups of the same color.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eOne update done this way requires \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eG\u003c/i\u003e)\u003c/span\u003e time. During such an update at least one point from each group is deleted, so at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eG\u003c/i\u003e)\u003c/span\u003e points are removed. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is the initial number of points, we can remove at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e points in total. Therefore, running time of the algorithm is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/909/problem/E\" title\u003d\"Codeforces Round 455 (Div. 2)\"\u003e909E - Coprocessor\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eWe want to minimize the number of communications between main processor and the coprocessor. Thus, we need to always act greedily: while there are tasks that can be executed on the main processor right away, execute them; then switch to the coprocessor and execute all tasks that can be executed there; then switch back to the main processor and so on. This can be done using breadth-first search. To run reasonably fast, this solution has to be implemented carefully: instead of searching for available tasks at each step, we want to maintain two queues of available tasks (for main processor and coprocessor) and add a task to a corresponding queue once all tasks it depends on has been executed.\u003c/p\u003e\u003cp\u003eAlternatively, we can define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as the lowest number of coprocessor calls required to execute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th task, and derive a recurrent formula for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e is a task and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, ..., \u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e are its dependencies, then clearly for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/sub\u003e ≥ \u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e must be executed after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Moreover, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is executed on the main processor and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e — on the coprocessor, then executing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e will require an additional coprocessor call. Therefore, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e + \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 1\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e is executed on the coprocessor and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — on the main processor; otherwise, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e. Now all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can be calculated by recursive traversal of the dependency graph (or traversing the tasks in topological order). The answer to the problem is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e \u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/909/problem/F\" title\u003d\"Codeforces Round 455 (Div. 2)\"\u003e909F - AND-permutations\u003c/a\u003e\u003c/h4\u003e\u003ch5\u003ePermutation \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026amp; \u003ci\u003ei\u003c/i\u003e \u003d 0\u003c/span\u003e)\u003c/h5\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is odd, the answer is NO. Indeed, any number in odd-numbered position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e must be even, otherwise the last bit of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u0026amp;\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is 1. For odd \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e there are less even numbers than odd-numbered positions, so at least one of the positions will hold an odd number, thus it\u0027s impossible to construct a required permutation.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is even, the required permutation exists. To build it, first observe that \u003cspan class\u003d\"tex-span\"\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e - \u003ci\u003ei\u003c/i\u003e)\u0026amp;(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e + \u003ci\u003ei\u003c/i\u003e - 1) \u003d 0\u003c/span\u003e. For example, for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 5\u003c/span\u003e:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e100000 \u003d 2\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e011111 \u003d 2\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e - 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e100001 \u003d 2\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e + 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e011110 \u003d 2\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e - 2\u003c/span\u003e\u003c/p\u003e\u003cp\u003eand so on.\u003c/p\u003e\u003cp\u003eWe can use this fact to always match \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e + \u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e with each other, that is, set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e + \u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e + \u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eThe full procedure for constructing the required permutation is as follows. For a given even \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e, find the maximum power of two that is less than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. Match pairs of numbers \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e - \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e + \u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 1..\u003ci\u003eN\u003c/i\u003e - 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e + 1\u003c/span\u003e. If we are not done yet, numbers from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e - (\u003ci\u003eN\u003c/i\u003e - 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e + 1) - 1 \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/sup\u003e - \u003ci\u003eN\u003c/i\u003e - 2\u003c/span\u003e are still unmatched. Repeat the process for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u0027 \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e + 1\u003c/sup\u003e - \u003ci\u003eN\u003c/i\u003e - 2\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor example, for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 18\u003c/span\u003e on the first step we set \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e \u003d 16\u003c/span\u003e and match numbers 15-16, 14-17 and 13-18. On the second step unmatched numbers are from 1 to 12, so we set \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e \u003d 8\u003c/span\u003e and match numbers 7-8, 6-9, 5-10, 4-11 and 3-12. On the third and the last step the remaining unmatched numbers are 1 and 2, so we set \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e \u003d 2\u003c/span\u003e and match numbers 1 and 2 with each other. After this no unmatched numbers are left, and we are done.\u003c/p\u003e\u003ch5\u003ePermutation \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026amp; \u003ci\u003ei\u003c/i\u003e ≠ 0\u003c/span\u003e)\u003c/h5\u003e\u003cp\u003eWe can do a simple case analysis for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 1..7\u003c/span\u003e manually, noticing that the answer is NO for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 1..5\u003c/span\u003e, a possible answer for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 6\u003c/span\u003e is \\textbf{3 6 2 5 1 4} as given in problem statement, and a possible answer for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 7\u003c/span\u003e is \\textbf{7 3 6 5 1 2 4}. \u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is a power of two, then it is represented in binary as \u003cspan class\u003d\"tex-span\"\u003e10..0\u003c/span\u003e. We must have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sub\u003e ≠ \u003ci\u003eN\u003c/i\u003e\u003c/span\u003e, therefore \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003eN\u003c/i\u003e\u003c/span\u003e, so the binary representation of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is shorter than that of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e. It follows that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sub\u003e\u0026amp;\u003ci\u003eN\u003c/i\u003e \u003d 0\u003c/span\u003e, so the answer is NO in this case.\u003c/p\u003e\u003cp\u003eFinally, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u0026gt; 7\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e is not a power of two, the required permutation always exists, and can be built in the following way. Split all numbers from 1 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e into the following groups (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is the largest power of two which is still less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e):\u003c/p\u003e\u003cp\u003e1..7\u003c/p\u003e\u003cp\u003e8..15\u003c/p\u003e\u003cp\u003e16..31\u003c/p\u003e\u003cp\u003e\\ldots\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e - 1\u003c/sup\u003e..2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e..\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eFor the first group use the permutation that we found manually. For each of the remaining groups, use any permutation of numbers in this group (for example, a cyclic permutation). The numbers in each group have leading non-zero bit at the same position (which corresponds to the power of two at the beginning of the group), so it is guaranteed that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u0026amp;\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e contains a non-zero bit at least in that position.\u003c/p\u003e\u003c/div\u003e","tags":["editorial"]}}