{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1400695203,"rating":77,"authorHandle":"KaiZeR","modificationTimeSeconds":1401532096,"id":12369,"title":"\u003cp\u003eEditorial Codeforces Round #247 (Div. 2)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/431/problem/A\" title\u003d\"Codeforces Round 247 (Div. 2)\"\u003e431A - Black Square\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTo solve this problem, you must only do the process described in statement.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor i \u003d 1 .. s.size()\n if (s[i] \u003d \u00271\u0027) ans +\u003d a[1];\n else ...\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eComplexity\u003c/strong\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e\u003cbr /\u003e \u003cstrong\u003eSolution\u003c/strong\u003e: \u003ca href\u003d\"/contest/431/submission/6676675\" title\u003d\"Submission 6676675 by KaiZeR\"\u003e6676675\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/431/problem/B\" title\u003d\"Codeforces Round 247 (Div. 2)\"\u003e431B - Shower Line\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIn this problem, according to the small limits, we can brute all permutations and choose the best answer of all. The easeast way to do this — use standart C++ function \u003cem\u003enext_permutation\u003c/em\u003e, or simply write 5 \u003cem\u003efor\u003c/em\u003e. For each permutation we can simulate the process, which was described in a statement, or notice that first with second student, and second with the third will communicate one time, and third with fourth student, and fourth with fifth — will communicate two times. Another pairs of students will never communicate to each other during they stay in queue.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity\u003c/strong\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e!)\u003c/span\u003e\u003cbr /\u003e \u003cstrong\u003eSolution\u003c/strong\u003e: \u003ca href\u003d\"/contest/431/submission/6676695\" title\u003d\"Submission 6676695 by KaiZeR\"\u003e6676695\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/431/problem/C\" title\u003d\"Codeforces Round 247 (Div. 2)\"\u003e431C - k-Tree\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThis problem can be solved by dinamic programming.\u003cbr /\u003e Let\u0027s \u003ccode\u003eDp[n][is]\u003c/code\u003e — number of ways with length equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e in k-tree, where if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eis\u003c/i\u003e \u003d 1\u003c/span\u003e — there is exists edge with length at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eis\u003c/i\u003e \u003d 0\u003c/span\u003e — lengths of all edges less then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e Initial state \u003ccode\u003eDp[0][0] \u003d 1\u003c/code\u003e.\u003cbr /\u003e Transition — iterate all edges which can be first on the way in k-tree, then problem transform to the same, but with less length of the way (because subtree of vertex son is the k-tree).\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003ccode\u003eDp[n][0] \u003d Dp[n-1][0] + ... + Dp[n-min(d-1,n)][0]\u003c/code\u003e \u003ccode\u003eDp[n][1] \u003d Dp[n-1][1] + ... + Dp[n-min(d-1,n)][1] + (Dp[n-d][0] + Dp[n-d][1]) + ... + (Dp[n-min(n,k)][0] + Dp[n-min(n,k)][1])\u003c/code\u003e\u003c/p\u003e\u003cp\u003eSee solution for more details.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity\u003c/strong\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enk\u003c/i\u003e)\u003c/span\u003e\u003cbr /\u003e Notice that this solution can be easy midify to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e complexity, only precalc partial sums. But it is not neccesary to solve this problem in such way.\u003cbr /\u003e \u003cstrong\u003eSolution\u003c/strong\u003e: \u003ca href\u003d\"/contest/431/submission/6676700\" title\u003d\"Submission 6676700 by KaiZeR\"\u003e6676700\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/431/problem/D\" title\u003d\"Codeforces Round 247 (Div. 2)\"\u003e431D - Random Task\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eWe will search \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e by binary search. Such function is monotone, because the amount of numbers with exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e 1-bits on a segment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 2\u003c/span\u003e ... \u003cspan class\u003d\"tex-span\"\u003e2·(\u003ci\u003en\u003c/i\u003e + 1)\u003c/span\u003e more or equal than amount of such numbers on segment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e ... \u003cspan class\u003d\"tex-span\"\u003e2·\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Last statement is correct, because of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e2·(\u003ci\u003en\u003c/i\u003e + 1)\u003c/span\u003e have equals number of 1-bits.\u003cbr /\u003e To find the amount of numbers on segment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e...\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e, which have exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e 1-bits, it is sufficient to can calculate this number for segment \u003cspan class\u003d\"tex-span\"\u003e1...\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e, then the answer will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(1...\u003ci\u003eR\u003c/i\u003e) - \u003ci\u003eF\u003c/i\u003e(1..\u003ci\u003eL\u003c/i\u003e - 1)\u003c/span\u003e.\u003cbr /\u003e Let\u0027s understand how we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(1...\u003ci\u003eX\u003c/i\u003e)\u003c/span\u003e. Iterate number of bit will be the first(from biggest to smallest) which is different in X and numbers, which amount we want to calculate. Let the first difference will be in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th bit(it\u0027s possible, if in X this bit equals to 1, because we consider all numbers do not exceed X). Then other smallest bits we can choose in any way, but only amount of 1-bits must equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. We can do this in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ecnt\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e ways, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e — the number of 1-bits in X, bigger then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e — binomailany factor. Finally, you should not forget about X (if it, of course, has k one bits).\u003cbr /\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elong long F( X )\n   Ans \u003d 0 , cnt \u003d 0;\n   for i \u003d Max_Bit...0\n      if (bit(X,i) \u003d\u003d 1) Ans +\u003d C[i][K - cnt] , cnt ++;\n   if (Bit_Counts(X) \u003d\u003d K) Ans ++;   \n   return Ans;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eАсимптотика\u003c/strong\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e(\u003ci\u003eAns\u003c/i\u003e))\u003c/span\u003e \u003cbr /\u003e \u003cstrong\u003eРешение\u003c/strong\u003e: \u003ca href\u003d\"/contest/431/submission/6676713\" title\u003d\"Submission 6676713 by KaiZeR\"\u003e6676713\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/431/problem/E\" title\u003d\"Codeforces Round 247 (Div. 2)\"\u003e431E - Chemistry Experiment\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eFirst of all let\u0027s understand the statement.\u003cbr /\u003e We have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e tubes. At the beginning of each of them there are a few amount of mercury is poured. We want be able to perform two types of queries:\u003c/p\u003e \u003col\u003e   \u003cli\u003eMake the amount of mercury in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e- th tube equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e\u003c/li\u003e   \u003cli\u003eGiven the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e — the amount of water that must be optimally pour these tubes. What does it mean optimally? That mean we pour water in some of the tubes in the way, when maximum volume of liquid for all tubes, where we poured water, will be as small, as possible. \u003cbr /\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eWell, actually now turn to the solution.\u003cbr /\u003e Use binary search to find an answer, in particular, will sort out the amount of mercury in a tubes(let it equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e), such that in the tubes with smaller volume of the liquid can be poured all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e liters of water and the maximum liquid level does not exceed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. Let the number of tubes, with the amount of mercury less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e is equal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eNow the problem is reduced to learning how to count the total amount of water that we can to pour into each of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e least tubes, such that the level of the liquid in each of them is equal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e — the total amount of mercury in the tubes which exactly have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e liters mercury and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e — number of tubes which the volume of mercury is equal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d \u003ci\u003eb\u003c/i\u003e[0] + ... + \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ed\u003c/i\u003e - 1]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d \u003ci\u003et\u003c/i\u003e * \u003ci\u003ed\u003c/i\u003e - (\u003ci\u003ea\u003c/i\u003e[0] + \u003ci\u003ea\u003c/i\u003e[1] + ... + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ed\u003c/i\u003e - 1])\u003c/span\u003e — the total maximum amount of the water which can be poured. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e \u0026lt; \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, then obviously this space is not enough for pour all the water, otherwise quite enough and so the answer will be no more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e When we found the smallest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, we can say that the answer is equal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e — (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e) / \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eTo quickly find for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[0] + \u003ci\u003ea\u003c/i\u003e[1] + ... + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ed\u003c/i\u003e - 1]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[0] + ... + \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ed\u003c/i\u003e - 1]\u003c/span\u003e, and perform queries of the first type, you can use the Fenwick tree. \u003cbr /\u003e \u003cstrong\u003eАсимптотика\u003c/strong\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eqlog\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e \u003cbr /\u003e \u003cstrong\u003eРешение\u003c/strong\u003e: \u003ca href\u003d\"/contest/431/submission/6676668\" title\u003d\"Submission 6676668 by Antoniuk\"\u003e6676668\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["codeforces","247","editorial"]}}