{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1474471576,"rating":5,"authorHandle":"double301","modificationTimeSeconds":1474471651,"id":47253,"title":"\u003cp\u003eTwisted envelope problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eGreetings Codeforces,\u003c/p\u003e\u003cp\u003eI\u0027ve encountered a very interesting problem during my preparation for an internship interview. The problem is, given N distinct envelopes with specific width and height, determine what is the maximum amount of envelopes that you can russian doll(fit one inside of another). This problem can be solved in O(N*logN) by sorting them in ascending order based on their width and descending based on their height.After we do that we should find LIS which would be our answer.The reason we do descending on height is due to the fact that finding LIS while we have height in random/ascending order can lead into +1 answer while the envelopes have same width so we want to avoid that. Now here comes the twist,how could we solve this problem if we could flip the envelopes?\u003c/p\u003e\u003cp\u003eI was thinking about this approach but i can not prove it. Say we represent connection between 2 envelopes(ability to put one inside of another) as a directed graph,by doing this in O(N^2) complexity we could achieve multi component DAG where we could answer for each component \u0026quot;what is the longest path from source node X\u0026quot;,now by doing this we would have to do this for every vertex except the last one that has outdeg 0(in every component), therefor i came to the conclusion that we should just reverse edges of every single component and solve it for \u0026quot;last\u0026quot; node in every component.Total complexity is O(N^2).\u003c/p\u003e\u003cp\u003eI am wondering is this a proper solution and is there a way of doing this quicker?\u003c/p\u003e\u003cp\u003eCheers\u003c/p\u003e\u003c/div\u003e","tags":["envlope","problem"]}}