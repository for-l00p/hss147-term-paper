{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1522780118,"rating":112,"authorHandle":"mohammedehab2002","modificationTimeSeconds":1522952112,"id":58712,"title":"\u003cp\u003eCodeforces round #473 editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/959/problem/A\" title\u003d\"Codeforces Round 473 (Div. 2)\"\u003e959A - Mahmoud and Ehab and the even-odd game\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eIt\u0027s easy to see that if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 0\u003c/span\u003e, the next player loses. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is even, Mahmoud will choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e and win. Otherwise, Mahmoud will have to choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is odd and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is even, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is odd. Ehab will then subtract it all and win. Therefore, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is even Mahmoud wins. Otherwise, Ehab wins. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e doesn\u0027t follow our proof, yet Ehab still wins at it because Mahmoud won\u0027t be even able to choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eCode link (me) : \u003ca href\u003d\"https://pastebin.com/X3D08tg9\"\u003ehttps://pastebin.com/X3D08tg9\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCode link (\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/mahmoudbadawy\" title\u003d\"Candidate Master mahmoudbadawy\"\u003emahmoudbadawy\u003c/a\u003e) : \u003ca href\u003d\"https://pastebin.com/4u3RHE7n\"\u003ehttps://pastebin.com/4u3RHE7n\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime complexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBonus task :\u003c/strong\u003e If there were multiple integers, and each player can choose which integer to subtract from, who will win?\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eEhab can follow a good greedy strategy : make some number odd and leave it till the end of the game. Mahmoud won\u0027t be able to make it 0 so Ehab will win. If there\u0027s already an odd integer, or there are at least 2 even integers, Ehab can do that. Therefore, the only case Mahmoud wins is when there\u0027s one even integer!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/959/problem/B\" title\u003d\"Codeforces Round 473 (Div. 2)\"\u003e959B - Mahmoud and Ehab and the message\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eIt\u0027s easy to see that for every word, the minimum cost of sending it is the minimum cost of sending any word in its group. For each group, we\u0027ll maintain the minimum cost for sending a word in it (let it be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecost\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e) and for each word, we\u0027ll maintain its group (let it be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egroup\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e). For every word \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in the message, we\u0027ll add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecost\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003egroup\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e to the answer.\u003c/p\u003e\u003cp\u003eCode link (me) : \u003ca href\u003d\"https://pastebin.com/3RFeEkgD\"\u003ehttps://pastebin.com/3RFeEkgD\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCode link (\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/mahmoudbadawy\" title\u003d\"Candidate Master mahmoudbadawy\"\u003emahmoudbadawy\u003c/a\u003e) : \u003ca href\u003d\"https://pastebin.com/sR5eZy7d\"\u003ehttps://pastebin.com/sR5eZy7d\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime complexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e((\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) * \u003ci\u003elen\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBonus task :\u003c/strong\u003e Try to solve the problem if the input was given as pairs of words that are synonyms (assuming synonymy is transitive).\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eUse dsu to transform the bonus task to the original problem.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/959/problem/C\" title\u003d\"Codeforces Round 473 (Div. 2)\"\u003e959C - Mahmoud and Ehab and the wrong algorithm\u003c/a\u003e\u003c/h4\u003e\u003ch3\u003eThe first tree\u003c/h3\u003e\u003cp\u003eFor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≥ 6\u003c/span\u003e, you can connect nodes \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e to node \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e and connect the rest of the nodes to node \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e. The real vertex cover is the set \u003cspan class\u003d\"tex-span\"\u003e{1, 2}\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e while the found vertex cover will have size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(3, \u003ci\u003en\u003c/i\u003e - 3)\u003c/span\u003e. As \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≥ 6\u003c/span\u003e, that value will be \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e which is incorrect.\u003c/p\u003e\u003cp\u003eFor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026lt; 6\u003c/span\u003e, the answer doesn\u0027t exist.\u003c/p\u003e\u003ch3\u003eThe second tree\u003c/h3\u003e\u003cp\u003eThere are multiple ways to construct it. One easy way is the star tree. Connect all the nodes to node \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. The real and the found vertex cover will be simply \u003cspan class\u003d\"tex-span\"\u003e{1}\u003c/span\u003e. Another easy way is a path. Connect node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e \u0026lt; \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. The real and the found vertex cover has size \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3e/ad/3ead2496f4f2faeb43b29ca476339b0869026338.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eCode link (me) : \u003ca href\u003d\"https://pastebin.com/7J8B9fXx\"\u003ehttps://pastebin.com/7J8B9fXx\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCode link (\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/mahmoudbadawy\" title\u003d\"Candidate Master mahmoudbadawy\"\u003emahmoudbadawy\u003c/a\u003e) : \u003ca href\u003d\"https://pastebin.com/54jZ8sGM\"\u003ehttps://pastebin.com/54jZ8sGM\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime complexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBonus task :\u003c/strong\u003e Try to find an elegant proof that the answer for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026lt; 6\u003c/span\u003e doesn\u0027t exist for the first tree.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eFirst, the actual vertex cover is at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6d/7e/6d7e26fd9640549ef91531adbe73696736f42cd9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Second, the found vertex cover is also at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6d/7e/6d7e26fd9640549ef91531adbe73696736f42cd9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (because both \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eevenCnt\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eoddCnt\u003c/i\u003e\u003c/span\u003e can\u0027t be both greater than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6d/7e/6d7e26fd9640549ef91531adbe73696736f42cd9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e at the same time!). The algorithm is greedy so its answer is greater than or equal to the actual answer. As \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026lt; 6\u003c/span\u003e, The actual and the found answer can\u0027t exceed 2. Therefore, the only case where the algorithm is wrong is when the actual answer is 1 and the found answer is 2. That can\u0027t happen because the actual answer is 1 only in the case of a star tree. If all the nodes are connected to the root, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eevenCnt\u003c/i\u003e \u003d 1\u003c/span\u003e. Otherwise, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eoddCnt\u003c/i\u003e \u003d 1\u003c/span\u003e. Therefore, there\u0027s no case where the algorithm will fail.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/959/problem/D\" title\u003d\"Codeforces Round 473 (Div. 2)\"\u003e959D - Mahmoud and Ehab and another array construction task\u003c/a\u003e\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003eCommon things :\u003c/strong\u003e Let\u0027s call a number \u0026quot;ok\u0026quot; if it could be inserted to array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, as a new element, without breaking any of the conditions (i.e it should be coprime with all the previously inserted elements). Let\u0027s call the maximum number that could be inserted in the worst case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003c/span\u003e. For each integer from 2 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003c/span\u003e, we\u0027ll precompute its prime divisors with sieve.\u003c/p\u003e\u003ch3\u003eFirst solution by me\u003c/h3\u003e\u003cp\u003eCreate an \u003ccode\u003estd::set\u003c/code\u003e that contains all the numbers from \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003c/span\u003e. That set has all the \u0026quot;ok\u0026quot; numbers and will be updated each time we insert a new element to array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. We\u0027ll insert the elements to array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e greedily one by one. At index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e be the minimum number in the set greater than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e i.e \u003ccode\u003estd::lower_bound(a[i])\u003c/code\u003e. If cur isn\u0027t equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, the lexicographically greater condition is satisfied and we\u0027re no longer restricted to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, so, starting from index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e, we\u0027ll greedily choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e to be the first (minimum) number in the set instead. We\u0027ll insert \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Each time, we\u0027ll remove all the integers that aren\u0027t coprime with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e from the set. To do that, we\u0027ll loop over the multiples of its precomputed prime divisors and remove them from the set.\u003c/p\u003e\u003cp\u003eCode link (me) : \u003ca href\u003d\"https://pastebin.com/bg3Hi6r2\"\u003ehttps://pastebin.com/bg3Hi6r2\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eSecond solution by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/KAN\" title\u003d\"Grandmaster KAN\"\u003eKAN\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eused\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e indicate whether some prime is already a factor of one of elements in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e (so we shouldn\u0027t use it). Each time we insert an element to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, we update \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eused\u003c/i\u003e\u003c/span\u003e by iterating over its precomputed prime divisors and make them all used. We\u0027ll start inserting elements to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e greedily one by one. To check if a number is \u0026quot;ok\u0026quot;, we\u0027ll iterate over its precomputed prime divisors and check that all of them aren\u0027t used. While \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is \u0026quot;ok\u0026quot;, we\u0027ll keep inserting it to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. We\u0027ll reach an integer that isn\u0027t \u0026quot;ok\u0026quot;. In this case, we\u0027ll iterate naiively until we find an integer that is \u0026quot;ok\u0026quot; and insert it to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. The lexicographically greater condition is now satisfied and we can insert whatever we want (no restriction to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e). Notice that starting from now, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e will be sorted in increasing order. That\u0027s because if it\u0027s not, we can sort it and reach a better answer without breaking any of the conditions. The naiive solution is to loop starting from 2 until we find an \u0026quot;ok\u0026quot; integer for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. However, as the array is sorted, we can loop starting from 2 the first time and then loop starting from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e + 1\u003c/span\u003e and save a lot of loops that we\u0027re sure will fail!\u003c/p\u003e\u003cp\u003eCode link (me) : \u003ca href\u003d\"https://pastebin.com/Xh2QgqUf\"\u003ehttps://pastebin.com/Xh2QgqUf\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime complexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003emxlog\u003c/i\u003e(\u003ci\u003emx\u003c/i\u003e))\u003c/span\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emx\u003c/i\u003e\u003c/span\u003e has an order of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b5/8c/b58c98603d84a80b5c49403875d528cd07867cf3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e because the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e prime is expected to be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e and the number of primes less that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is expected to be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b7/c9/b7c9ef1eba60d79ba11b25d03a96a0b80264643e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/959/problem/E\" title\u003d\"Codeforces Round 473 (Div. 2)\"\u003e959E - Mahmoud and Ehab and the xor-MST\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eFor convenience, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e be the label of the last node not the number of nodes (i.e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003einput\u003c/i\u003e\u003c/sub\u003e - 1\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eDenote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elsb\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003ci\u003ex\u003c/i\u003e\u0026amp;( - \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e as the value of the least significant bit set to 1 in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. The answer is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/80/6b/806b6ac7f78e42e8bcf1758d39d74d0a7b9b1535.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, which means that node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e is connected to node \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/14/d1/14d1d968545309ec4c350f94c260b7d876d87606.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for all \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003eu\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e (node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e is connected to node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e without that bit).\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eFormal proof\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eLet\u0027s take a look at a version of Boruvka\u0027s algorithm for the MST. It starts with an empty MST and then at each step, it chooses some components. For each of them, it finds the edge with the minimum cost connecting this component to any other component and adds this edge to the minimum spanning tree. Let\u0027s apply this algorithm here. Assume that at step #\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, the components are of the form of intervals of length \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e i.e component #\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e has nodes in \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ei\u003c/i\u003e * 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e;(\u003ci\u003ei\u003c/i\u003e + 1) * 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e - 1]\u003c/span\u003e. Let\u0027s see what the algorithm does. Let\u0027s see what happens for components where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is odd. Assume the minimum cost for connecting this component is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. You can see that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e can\u0027t be less than \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. That\u0027s because this intervals contains integers that have all the possible combinations of the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e bits. Take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d 2\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 1\u003c/span\u003e, for example: the numbers are (in binary) \u003cspan class\u003d\"tex-span\"\u003e100\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e101\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e110\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e111\u003c/span\u003e. All the possible combinations for the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e bits are there! Notice that if you choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e \u0026lt; 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e, you\u0027re changing the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e bits. We have all possible combinations of them in the component so we\u0027ll make a cycle. That makes the minimum cost \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. There\u0027s always a way to make a connection with cost \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e which is connecting the first node of this component with the first node of the previous component (i.e connect node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e * 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e with node \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e - 1) * 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e). Notice that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/de/1a/de1ab29f43e1fa4ff358d7bf2d75378c22900dee.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is odd (Can you see why this is false for even \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e?). After that happens, the 2 components will form one big component and the components will be in the form of intervals of length \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e + 1\u003c/sup\u003e\u003c/span\u003e and the algorithm will repeat the same pattern!! Notice that at the beginning, the nodes are of the form of intervals with length 1 so the algorithm will work like that until the MST is constructed. Each node is the first node of its component and its component will have an odd index exactly once because after that it\u0027ll be in the middle of another big component. When that happens, it\u0027ll be when \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e \u003d \u003ci\u003elsb\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e. Therefore, node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e adds \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elsb\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e to the answer!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eNow let\u0027s see how to calculate that quickly.\u003c/p\u003e\u003ch3\u003eMath solution\u003c/h3\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e be the number of integers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ey\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elsb\u003c/i\u003e(\u003ci\u003ey\u003c/i\u003e) \u003d \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, then \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/76/5b/765b579bd8c5284a624f9e798b45c05be72d85f3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e) \u0026gt; 0\u003c/span\u003e if and only if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is a power of 2 so this sum is equivalent to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/48/c9/48c9a8ade6153ea3ae5d1d08d40e509ef839989a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Basically, the first number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elsb\u003c/i\u003e(\u003ci\u003ey\u003c/i\u003e) \u003d \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and then the period is \u003cspan class\u003d\"tex-span\"\u003e2 * \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Take 4 to see that. The integers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elsb\u003c/i\u003e(\u003ci\u003ey\u003c/i\u003e) \u003d 4\u003c/span\u003e are \u003cspan class\u003d\"tex-span\"\u003e{4, 12, 20, 28, \u003ci\u003eetc\u003c/i\u003e.}\u003c/span\u003e Therefore, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/51/65/5165d7066b200951be6156e55d654b877511ed46.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ex\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e and x is a power of 2.\u003c/p\u003e\u003cp\u003eCode link (me) : \u003ca href\u003d\"https://pastebin.com/dNuR9k0Y\"\u003ehttps://pastebin.com/dNuR9k0Y\u003c/a\u003e\u003c/p\u003e\u003ch3\u003eDP solution\u003c/h3\u003e\u003cp\u003eLet\u0027s see how the sequence of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elsb\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is constructed. We start with \u003cspan class\u003d\"tex-span\"\u003e{1}\u003c/span\u003e and at the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e step, we copy the sequence and concatenate it to itself and add \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e in the middle.\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b6/3c/b63c91095f62f30d128c4849549bbc9c76624315.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5a/1b/5a1bea47b8a32ad5f127111299e198a3240baee9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003ef\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e - 1)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eYou can see from the pattern above that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 2 * \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1] + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sup\u003e\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e1 \u0026lt; \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e (with the base case that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[1] \u003d 1\u003c/span\u003e). Let\u0027s find a recurrence for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e. Denote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emsb\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e as the value of the most significant bit set to 1. The sum can be split into 2 parts : the sum from 1 to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emsb\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e and the sum from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emsb\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) + 1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. You can see that in the second sum, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elsb\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e can never be equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emsb\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e, so we can remove that bit safely without affecting the answer. Removing that bit is like xoring with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emsb\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e which makes the sum start at 1 and end at \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/aa/61/aa6106bf9e16e2c8ce702a947abd7ff72d6a22bf.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e which is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/12/15/1215c6a69c3c9e6d34a4f8d4110c44c0da858d3c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Therefore, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/34/4e/344eca507c2fed93e6b56d782171514baeda70d5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. The first part can be calculated with the help of our \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003c/span\u003e because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emsb\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is a power of 2 and the second part goes recursively. Basically, for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e such that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e bit is set to 1, we add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e to the answer.\u003c/p\u003e\u003cp\u003eCode link (me) : \u003ca href\u003d\"https://pastebin.com/wnhBZx2v\"\u003ehttps://pastebin.com/wnhBZx2v\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime complexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/959/problem/F\" title\u003d\"Codeforces Round 473 (Div. 2)\"\u003e959F - Mahmoud and Ehab and yet another xor task\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eLet\u0027s solve a simpler version of the problem. Assume the queries only ask you to see whether the answer is 0 or positive instead of the exact answer. We can answer all the queries offline. We can keep a set containing all the possible xors of subsequences and update it for each prefix. Initially, the set contains only 0 (the xor of the empty subsequence). For each index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in the array, we can update the set by adding \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/17/72/1772203ccb22b33282f1c5ff1625d7e289bb9528.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e to the set for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in the set. The intuition behind it is that there\u0027s a subsequence with xor equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e (as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is in the set) and if we add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to it, its xor will be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/17/72/1772203ccb22b33282f1c5ff1625d7e289bb9528.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, so we should add it to the set. That\u0027s a slow solution to update the set, but we have some observations:-\u003c/p\u003e \u003col\u003e   \u003cli\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is in the set and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e is in the set, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/64/14/6414d574a1ee8301d86f2c5d15396d8dc4328313.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e must be in the set. To see that, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e be the xor of some elements and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e be the xor of other elements. \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/64/14/6414d574a1ee8301d86f2c5d15396d8dc4328313.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e must be the xor of the non-common elements (because the common elements will annihilate) so it must be in the set.\u003c/li\u003e   \u003cli\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is in the set and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e isn\u0027t in the set, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/64/14/6414d574a1ee8301d86f2c5d15396d8dc4328313.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e can\u0027t be in the set. This could be proved by contradiction. Assume \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/64/14/6414d574a1ee8301d86f2c5d15396d8dc4328313.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is in the set, then, by the first observation, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/eb/98/eb98755370580bb6628dfe60a0d0240807339d19.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e must be in the set. This is equivalent to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e which we said that it isn\u0027t in the set. Therefore, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/64/14/6414d574a1ee8301d86f2c5d15396d8dc4328313.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e isn\u0027t in the set.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eBasically, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is already in the set, we do nothing because updating the set would do nothing but extra operations according to the first observation, and if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e isn\u0027t in the set, we don\u0027t even waist a single operation without extending the set! That makes the total complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003emaxAi\u003c/i\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e((\u003ci\u003en\u003c/i\u003e + \u003ci\u003emaxAi\u003c/i\u003e)\u003ci\u003elog\u003c/i\u003e(\u003ci\u003emaxAi\u003c/i\u003e))\u003c/span\u003e depending on implementation because each element is added to the set exactly once.\u003c/p\u003e\u003cp\u003eTo solve our problem, let\u0027s see the naiive dynamic programming solution. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e be the number of subsequences of the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e elements with xor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/70/17/7017cf8321895851ddece427e836aa7c7ac1efc9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. The intuition behind it is exactly the same as the intuition behind the set construction. Let\u0027s prove that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e is equal for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e belonging to the set! Let\u0027s assume this holds true for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e and see what happens in the transition to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Notice that it holds true for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 0\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e be the value that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e is equal to for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e belonging to the set. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is in the set, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is in the set, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/17/72/1772203ccb22b33282f1c5ff1625d7e289bb9528.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is in the set (observation #1). Therefore, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ex\u003c/i\u003e] \u003d \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/32/48/324839be9e278383971c8a099c2492ededb185cf.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e which makes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e] \u003d 2 * \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in the set. Notice that the set doesn\u0027t change so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e] \u003d 0\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e that aren\u0027t in the set. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e isn\u0027t in the set, we have 3 cases for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is in the set, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/17/72/1772203ccb22b33282f1c5ff1625d7e289bb9528.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e isn\u0027t in the set. Therefore, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e] \u003d \u003ci\u003ej\u003c/i\u003e + 0 \u003d \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is to be added to the set in this step, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/17/72/1772203ccb22b33282f1c5ff1625d7e289bb9528.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is in the set. Therefore, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e] \u003d 0 + \u003ci\u003ej\u003c/i\u003e \u003d \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Otherwise, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e] \u003d 0\u003c/span\u003e. To summarize, we\u0027ll maintain the set. For each integer, if it\u0027s in the set, we\u0027ll just multiply \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e by 2. Otherwise, we\u0027ll update the set. We\u0027ll then answer all the queries for that prefix (saying 0 or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e) depending on whether \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is in the set.\u003c/p\u003e\u003cp\u003eCode link (me) : \u003ca href\u003d\"https://pastebin.com/Kfi0NWTi\"\u003ehttps://pastebin.com/Kfi0NWTi\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTime complexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003emaxAi\u003c/i\u003e)\u003c/span\u003e if you implement the \u0026quot;set\u0026quot; with a vector and an array.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBonus task :\u003c/strong\u003e Can you make this solution work online? Can you do that with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emaxAi\u003c/i\u003e \u0026lt; 2\u003csup class\u003d\"upper-index\"\u003e30\u003c/sup\u003e\u003c/span\u003e?\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSolution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eLet\u0027s consider each number as a vector in a 30-dimensional space. The \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e coordinate will be 1 if the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e bit is 1 and 0 otherwise. The bitwise-xor operation of 2 integers is equivalent to adding the 2 vectors modulo 2. Therefore, ordinary methods of linear algebra work! A linear combination of some vectors is achieved by multiplying each vector by 0 or 1 and summing them up (modulo 2). Let\u0027s find the basis (the vectors such that any vector can be formed as a linear combination of them). To do that, we\u0027ll just use gaussian elimination. There can\u0027t be more than 30 basis vectors. In each query, we\u0027ll find the basis vectors with index less than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and check that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e can be formed by a linear combination of them with gaussian elimination. If it can\u0027t, the answer is of course 0. Otherwise, let the number of basis vectors be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e. The answer is \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003el\u003c/i\u003e - \u003ci\u003ecnt\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. The reason is that for each subsequence of the vectors that aren\u0027t basis vectors, we can add a linear combination of the basis vectors to it and achieve \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Their count is \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003el\u003c/i\u003e - \u003ci\u003ecnt\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. I strongly recommend this \u003ca href\u003d\"https://www.youtube.com/watch?v\u003dkjBOesZCoqc\u0026amp;list\u003dPLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab\"\u003elinear algebra tutorial\u003c/a\u003e to understand the intuitions.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}