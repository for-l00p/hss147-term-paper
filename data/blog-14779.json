{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1416507049,"rating":47,"authorHandle":"I_love_Hoang_Yen","modificationTimeSeconds":1417115012,"id":14779,"title":"\u003cp\u003e[GYM] 2014-2015 CT S02E10 — Solution\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100534/problem/A\" title\u003d\"2014-2015 CT S02E10: Codeforces Trainings Season 2 Episode 10 - 2014 Amirkabir University of Technology Annual Programming Contest (AUT APC 14)\"\u003e100534A - Abnormal Coins\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis problem is the easiest amongst the problems. Since you need to choose different polygon types, the optimal way (meaning you would spend minimum amount of coins) is choosing polygon with sizes \u003cspan class\u003d\"tex-span\"\u003e3, 4, 5, 6, ...\u003c/span\u003e in this increasing order.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/X4Jlxz\"\u003eCode\u003c/a\u003e \u003ca href\u003d\"/gym/100534/problem/B\" title\u003d\"2014-2015 CT S02E10: Codeforces Trainings Season 2 Episode 10 - 2014 Amirkabir University of Technology Annual Programming Contest (AUT APC 14)\"\u003e100534B - Fake Coins\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSince the length of the string is at most 1000, you can loop through all generated code. This can be done by looping through the first and second index of the code.\u003c/p\u003e\u003cp\u003eHow to check if two code are equal? One way to do this is to use polynomial hash. For each code, you need to calculate its hash value, which can be done by using simple DP:\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eHash\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e be polynomial hash of string starts at indices i and j, then:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eHash\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e) \u003d \u003ci\u003es\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e) + \u003ci\u003eHash\u003c/i\u003e(\u003ci\u003ej\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e) * \u003ci\u003eBASE\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eAfter calculating all the hashes, you only need to count how many different hashes are there.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/5EBfLI\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100534/problem/C\" title\u003d\"2014-2015 CT S02E10: Codeforces Trainings Season 2 Episode 10 - 2014 Amirkabir University of Technology Annual Programming Contest (AUT APC 14)\"\u003e100534C - Coin Graph\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet f(a, b) \u003d the length of the shortest path between a and b.\u003c/p\u003e\u003cp\u003eLet W(G) \u003d total f(a, b) for all pairs of a, b.\u003c/p\u003e\u003cp\u003eIn this type of problem, you should find a simple type of graph G, such that W(G) can be calculated easily, and from G, you can generate G\u0027 such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e(\u003ci\u003eG\u003c/i\u003e\u0027) \u003d \u003ci\u003eW\u003c/i\u003e(\u003ci\u003eG\u003c/i\u003e) + 1\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e(\u003ci\u003eG\u003c/i\u003e\u0027) \u003d \u003ci\u003eW\u003c/i\u003e(\u003ci\u003eG\u003c/i\u003e) - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eBy trial and error, I found that \u003ca href\u003d\"http://mathworld.wolfram.com/StarGraph.html\"\u003eStar graph\u003c/a\u003e has this property. A star graph with N vertices has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e(\u003ci\u003eG\u003c/i\u003e) \u003d (\u003ci\u003eN\u003c/i\u003e - 1)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e, and you can reduce this by one simply by adding 1 edge between the 1-degree vertices. Though there are some special cases when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e(\u003ci\u003eG\u003c/i\u003e)\u003c/span\u003e is small, and you should handle these carefully.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/3rJKUw\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100534/problem/D\" title\u003d\"2014-2015 CT S02E10: Codeforces Trainings Season 2 Episode 10 - 2014 Amirkabir University of Technology Annual Programming Contest (AUT APC 14)\"\u003e100534D - Coin Table\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst, let\u0027s not worry about counting the number of paths. After we know how to find maximum number of coins in our path, it will be very simple to count number of paths.\u003c/p\u003e\u003cp\u003eConsider the following figure: We need to go from \u003cspan class\u003d\"tex-span\"\u003e(1, 1)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eM\u003c/i\u003e, \u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e, and you must not go through red cells. This will be equivalent to you must go through green cells.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/89/b2/89b2b9d7fb1c1b3c786769cde701e967c3a7aa7b.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo now, to answer each query, you can loop through each green cell, and count the maximum number of coins you can have, if your path go through this cell. This can be solved using simple DP.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/cIDKGP\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100534/problem/E\" title\u003d\"2014-2015 CT S02E10: Codeforces Trainings Season 2 Episode 10 - 2014 Amirkabir University of Technology Annual Programming Contest (AUT APC 14)\"\u003e100534E - Volleyball\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is just an implementation problem, though there are too many details, which make it very hard to code in contest time. :)\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100534/problem/F\" title\u003d\"2014-2015 CT S02E10: Codeforces Trainings Season 2 Episode 10 - 2014 Amirkabir University of Technology Annual Programming Contest (AUT APC 14)\"\u003e100534F - Huge Table\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100534/problem/G\" title\u003d\"2014-2015 CT S02E10: Codeforces Trainings Season 2 Episode 10 - 2014 Amirkabir University of Technology Annual Programming Contest (AUT APC 14)\"\u003e100534G - Coin Game\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThere are two possibilities: either you move all 1-coins to the left, or you move all 2-coins to the left. Let\u0027s say you want to move all 1-coins to the left. For each 1-coin, you will need to swap it with all the 2-coins that lies to the left of it. So, the total cost is the sum of (number of 2-coins to the left) for each 1-coin. This can be calculated in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/eC22IE\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100534/problem/H\" title\u003d\"2014-2015 CT S02E10: Codeforces Trainings Season 2 Episode 10 - 2014 Amirkabir University of Technology Annual Programming Contest (AUT APC 14)\"\u003e100534H - Dreams Were Important Too!\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet call the three edges of the triangle \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u003ci\u003eP\u003c/i\u003e / 2 \u003d (\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e + \u003ci\u003ec\u003c/i\u003e) / 2\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eConsider all values of a and b (using 2 loops :) ). Since you know P, you can calculate c. And you can check if the area of the triangle satisfies using the formula:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e \u003d \u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e * (\u003ci\u003ep\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e) * (\u003ci\u003ep\u003c/i\u003e - \u003ci\u003eb\u003c/i\u003e) * (\u003ci\u003ep\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow, we know all the sides of the triangle. The only thing left is to find its coordinate. Obviously, you can translate the triangle, so that one vertex is at \u003cspan class\u003d\"tex-span\"\u003e(0, 0)\u003c/span\u003e. Let the other two vertices be \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e1, \u003ci\u003ey\u003c/i\u003e1)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e2, \u003ci\u003ey\u003c/i\u003e2)\u003c/span\u003e. We know that:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e1 * \u003ci\u003ex\u003c/i\u003e1 + \u003ci\u003ey\u003c/i\u003e1 * \u003ci\u003ey\u003c/i\u003e1)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d \u003ci\u003esqrt\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e2 * \u003ci\u003ex\u003c/i\u003e2 + \u003ci\u003ey\u003c/i\u003e2 * \u003ci\u003ey\u003c/i\u003e2)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e \u003d \u003ci\u003esqrt\u003c/i\u003e((\u003ci\u003ex\u003c/i\u003e1 - \u003ci\u003ex\u003c/i\u003e2) * (\u003ci\u003ex\u003c/i\u003e1 - \u003ci\u003ex\u003c/i\u003e2) + (\u003ci\u003ey\u003c/i\u003e1 - \u003ci\u003ey\u003c/i\u003e2) * (\u003ci\u003ey\u003c/i\u003e1 - \u003ci\u003ey\u003c/i\u003e2))\u003c/span\u003e\u003c/p\u003e\u003cp\u003eTo find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e1, \u003ci\u003ey\u003c/i\u003e1, \u003ci\u003ex\u003c/i\u003e2, \u003ci\u003ey\u003c/i\u003e2\u003c/span\u003e, you can generate all \u003ca href\u003d\"http://en.wikipedia.org/wiki/Pythagorean_triple\"\u003ePythagorean triples\u003c/a\u003e. Before looping through values of a and b, generate all triplets \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e * \u003ci\u003ex\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e * \u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003ez\u003c/i\u003e * \u003ci\u003ez\u003c/i\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThis solution is hard to run in time. To solve it, you need to make some optimization, for example:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e must be divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e * \u003ci\u003eS\u003c/i\u003e / \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e. This can be proven using the area formula stated above.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eOnly consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e satisfying: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003ep\u003c/i\u003e / 2\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/MWyK5b\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100534/problem/I\" title\u003d\"2014-2015 CT S02E10: Codeforces Trainings Season 2 Episode 10 - 2014 Amirkabir University of Technology Annual Programming Contest (AUT APC 14)\"\u003e100534I - Coin Robbery\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn this problem, you are given a graph G, and you need to find the minimum number of vertex you need to \u0027block\u0027, so that the shortest path from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e - 1\u003c/span\u003e increases.\u003c/p\u003e\u003cp\u003eFirst, ignore all edges that is not on any shortest path from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e - 1\u003c/span\u003e. Now the problem becomes, given a graph G, find minimum number of vertices to block, so that the graph is no longer connected. This can be solved using Max flow.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/nypQ08\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/gym/100534/problem/J\" title\u003d\"2014-2015 CT S02E10: Codeforces Trainings Season 2 Episode 10 - 2014 Amirkabir University of Technology Annual Programming Contest (AUT APC 14)\"\u003e100534J - Bimetallic coins\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn this problem, you are given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e \u003d \u003ci\u003eN\u003c/i\u003e * (\u003ci\u003eN\u003c/i\u003e - 1) / 2\u003c/span\u003e alloys. For each alloy, you know the thermal coefficient, the cost if it is inner or outer of the coin. Obviously, you can create \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e / 2\u003c/span\u003e coins from these alloys. Now you should calculate the minimum cost. Sort the alloys in increasing order of thermal coefficient. Since you know that all the thermal coefficients are different, and an alloy with smaller thermal coefficient can only be placed outside, the problem can be solved by the following DP:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e) \u003d \u003c/span\u003e minimum cost if you considered first i alloys. There are still j alloys which are outer, but you have not find the alloy to be inner.\u003c/p\u003e\u003cp\u003eTo calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e, note that from a state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e, you can only make the following transitions:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eUse alloy \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1)\u003c/span\u003e as outer. Then you will go to state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ej\u003c/i\u003e + 1)\u003c/span\u003e.\u003c/li\u003e   \u003cli\u003eUse alloy \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1)\u003c/span\u003e as inner. The outer alloy must be before \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1)\u003c/span\u003e, and still not have inner alloy. So you go to state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1, \u003ci\u003ej\u003c/i\u003e - 1)\u003c/span\u003e.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThere is still one thing to take care of: when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eM\u003c/i\u003e\u003c/span\u003e is odd, you must ignore 1 alloy. This can be done by adding 1 more dimension to the above DP function.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/U6Se0F\"\u003eCode\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["acm","gym","training"]}}