{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1504237768,"rating":9,"authorHandle":"sdnr1","modificationTimeSeconds":1504237768,"id":54221,"title":"\u003cp\u003eDP Optimizations\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eMost of the optimizations are available at \u003ca href\u003d\"//codeforces.com/blog/entry/8219\"\u003ehttp://codeforces.com/blog/entry/8219\u003c/a\u003e (This also includes practise problems, links for further reading and some optimizations which are extensions of those covered in class).\u003c/p\u003e\u003cp\u003eOther resources for DP Optimizations:\u003c/p\u003e\u003cp\u003eConvex Hull : \u003ca href\u003d\"http://pclub.in/tutorial/algos/2016/08/22/dpconvex.html\"\u003ehttp://pclub.in/tutorial/algos/2016/08/22/dpconvex.html\u003c/a\u003e (also includes practise problems)\u003c/p\u003e\u003cp\u003eAlien DP : \u003ca href\u003d\"//codeforces.com/blog/entry/49691\"\u003ehttp://codeforces.com/blog/entry/49691\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCode for Convex Hull Trick (Dynamic Hull) : \u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e// max query implementation\nconst int MD \u003d 1; // change this to -1 for min query\nconst long is_query \u003d (1LL \u0026lt;\u0026lt; 62) * (-MD);\n\nstruct Line {\n    long m, b;\n    mutable function\u0026lt;const Line *()\u0026gt; succ;\n\n    bool operator\u0026lt;(const Line \u0026amp;rhs) const {\n        if (rhs.b !\u003d is_query) return m \u0026lt; rhs.m;\n        const Line *s \u003d succ();\n        if (!s) return 0;\n        long x \u003d rhs.m;\n        return b - s-\u0026gt;b \u0026lt; (s-\u0026gt;m - m) * x;\n    }\n};\n\nstruct HullDynamic : public multiset\u0026lt;Line\u0026gt; {\n    bool bad(iterator y) {\n        auto z \u003d next(y);\n        if (y \u003d\u003d begin()) {\n            if (z \u003d\u003d end()) return 0;\n            return y-\u0026gt;m \u003d\u003d z-\u0026gt;m \u0026amp;\u0026amp; y-\u0026gt;b \u0026lt;\u003d z-\u0026gt;b;\n        }\n        auto x \u003d prev(y);\n        if (z \u003d\u003d end()) return y-\u0026gt;m \u003d\u003d x-\u0026gt;m \u0026amp;\u0026amp; y-\u0026gt;b \u0026lt;\u003d x-\u0026gt;b;\n        return (x-\u0026gt;b - y-\u0026gt;b) * (z-\u0026gt;m - y-\u0026gt;m) \u0026gt;\u003d (y-\u0026gt;b - z-\u0026gt;b) * (y-\u0026gt;m - x-\u0026gt;m);\n    }\n\n    void insert_line(long m, long b) {\n        auto y \u003d insert({MD * m, MD * b});\n        y-\u0026gt;succ \u003d [\u003d] { return next(y) \u003d\u003d end() ? 0 : \u0026amp;*next(y); };\n        if (bad(y)) {\n            erase(y);\n            return;\n        }\n        while (next(y) !\u003d end() \u0026amp;\u0026amp; bad(next(y))) erase(next(y));\n        while (y !\u003d begin() \u0026amp;\u0026amp; bad(prev(y))) erase(prev(y));\n    }\n\n    long eval(long x) {\n        auto l \u003d lower_bound((Line) {x, is_query});\n        if(l \u003d\u003d end())\n            return is_query;\n        return MD * (l-\u0026gt;m * x + l-\u0026gt;b);\n    }\n};\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eHere is a list of known optimizations with practise problems: \u003cimg alt\u003d\" \" src\u003d\"/predownloaded/ab/43/ab43db7fcf43aa7f54dffd776bb4ebf773734017.jpeg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003c/div\u003e","tags":["#dp"]}}