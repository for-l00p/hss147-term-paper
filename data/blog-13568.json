{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1409074370,"rating":50,"authorHandle":"snuke","modificationTimeSeconds":1409112706,"id":13568,"title":"\u003cp\u003eCodeforces Round #263 Tutorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/462/problem/A\"\u003eDiv2 A Appleman and Easy Task\u003c/a\u003e (Author: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/wolf_sothe\" title\u003d\"Мастер wolf_sothe\"\u003ewolf_sothe\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eThis is a simple implementation problem. You can solve by searching adjacent cells of every cell.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/462/problem/B\"\u003eDiv2 B Appleman and Card Game\u003c/a\u003e (Author: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/wolf_sothe\" title\u003d\"Мастер wolf_sothe\"\u003ewolf_sothe\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eThis is simple greedy problem, but it seemed to be reading-hard. The statement says, \u0026quot;Choose K cards from N cards, the score of each card is (the number of cards which has the same character in \u003cb\u003eK\u003c/b\u003e cards. (not in N cards)\u0026quot;\u003c/p\u003e\u003cp\u003eIt is clear that this total score is (the number of \u0027A\u0027 in K cards)^2 + (the number of \u0027B\u0027 in K cards)^2 + ... + (the number of \u0027Z\u0027 in K cards)^2 This value will be maximized by the simple greedy algorithm, take K cards from most appearred character in N cards, the second most appearred character in N cards, and so on.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/461/problem/A\"\u003eDiv1 A / Div2 C Appleman and Toastman\u003c/a\u003e (Author: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/hogloid\" title\u003d\"Международный мастер hogloid\"\u003ehogloid\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eFirst I describe the algorithm, and explain why it works.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eSort {\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e} in non-decreasing order.\u003c/li\u003e   \u003cli\u003eThen, for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th number, add \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e + 1) * \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to the result.(i\u003d1...n-1)\u003c/li\u003e   \u003cli\u003eFor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e-th number, add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e * \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to the result.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eActually, when you multiply all numbers by -1,the answer will be the minimal possible value, multiplied by -1.\u003c/p\u003e\u003cp\u003eIt\u0027s Huffman coding problem to find minimal possible value. Solving Huffman coding also can be solved in O(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enlogn\u003c/i\u003e\u003c/span\u003e)\u003c/p\u003e\u003cp\u003eIn Huffman coding, push all the numbers to a priority queue. While the size of the queue is larger than 2, delete the minimal and second-minimal element, add the sum of these two to the cost, and push the sum to the queue. Here, since all the numbers are negative, the pushed sum will be remain in the first in the queue. Analyzing this movement will lead to the first algorithm.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/461/problem/B\"\u003eDiv1 B / Div2 D Appleman and Tree\u003c/a\u003e (Author: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/hogloid\" title\u003d\"Международный мастер hogloid\"\u003ehogloid\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eFill a DP table such as the following bottom-up:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eDP[v][0] \u003d the number of ways that the subtree rooted at vertex v has no black vertex.\u003c/li\u003e   \u003cli\u003eDP[v][1] \u003d the number of ways that the subtree rooted at vertex v has one black vertex.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThe recursion pseudo code is folloing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eDFS(v):\n DP[v][0] \u003d 1\n DP[v][1] \u003d 0\n foreach u : the children of vertex v\n  DFS(u)\n  DP[v][1] *\u003d DP[u][0]\n  DP[v][1] +\u003d DP[v][0]*DP[u][1]\n  DP[v][0] *\u003d DP[u][0]\n if x[v] \u003d\u003d 1:\n  DP[v][1] \u003d DP[v][0]\n else:\n  DP[v][0] +\u003d DP[v][1]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe answer is DP[root][1].\u003c/p\u003e\u003cp\u003eUPD:\u003cbr /\u003e The above code calculate the DP table while regarding that the vertex v is white (x[v]\u003d\u003d0) in the foreach loop.\u003c/p\u003e\u003cp\u003eAfter that the code thinks about the color of vertex v and whether we cut the edge connecting vertex v and its parent or not in \u0026quot;if x[v] \u003d\u003d 1: DP[v][1] \u003d DP[v][0] else: DP[v][0] +\u003d DP[v][1]\u0026quot;.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/461/problem/C\"\u003eDiv1 C / Div2 E Appleman and a Sheet of Paper\u003c/a\u003e (Author: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/snuke\" title\u003d\"Гроссмейстер snuke\"\u003esnuke\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eFor each first type queries that p_i \u0026gt; (the length of the paper) — p_i, you should express the operation in another way: not fold the left side of the paper but fold the right side of the paper. After such query you need to think as the paper is flipped.\u003c/p\u003e\u003cp\u003eLet\u0027s define count[i] as the number of papers piled up at the segment [i,i+1] (absolute position). For each query of first type you can update each changed count[i] naively.\u003c/p\u003e\u003cp\u003eUse BIT or segment tree for count[i] because you can answer each second type queries in O(log n). The complexity of a first type query is O((the decrement of the length of the paper) log n) so total complexity of a first type query is O(n log n).\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/461/problem/D\"\u003eDiv1 D Appleman and Complicated Task\u003c/a\u003e (Author: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/wolf_sothe\" title\u003d\"Мастер wolf_sothe\"\u003ewolf_sothe\u003c/a\u003e,\u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/snuke\" title\u003d\"Гроссмейстер snuke\"\u003esnuke\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eFirst, we ignore the already drawn cell and dependence of cells. If we decide the first row, then the entire board can decided uniquely. We call \u0027o\u0027 is 1, and \u0027x\u0027 is 0. Then,\u003c/p\u003e\u003cp\u003ea[i][j] \u003d a[i-2][j] xor a[i-1][j-1] xor a[i-1][j+1]\u003c/p\u003e\u003cp\u003eFor example, I\u0027ll explain n\u003d5 case. Each column of first row is a, b, c, d, and e. \u0026quot;ac\u0026quot; means a xor c.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ea   b   c   d   e\nb   ac  bd  ce  d\nc   bd  ace bd  c\nd   ce  bd  ac  b\ne   d   c   b   a\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEach character affects the following cells (denoted \u0027o\u0027).\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eo.... .o... ..o.. ...o. ....o\n.o... o.o.. .o.o. ..o.o ...o.\n..o.. .o.o. o.o.o .o.o. ..o..\n...o. ..o.o .o.o. o.o.. .o...\n....o ...o. ..o.. .o... o....\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eGenerally we can prove the dependence that a[0][k] affects a[i][j] if k\u0026lt;\u003di+j\u0026lt;\u003d2(n-1)-k and |i-j|\u0026lt;\u003dk and k%2\u003d\u003d(i+j)%2. ... (*)\u003c/p\u003e\u003cp\u003eWe can separate the problems by (i+j) is odd or even.\u003c/p\u003e\u003cp\u003eEach (i,j), we can get the range of k that affects the cell (i,j) by using formula (*). So the essence of this problem is that \u0026quot;There is a sequence with n integers, each of them is 0 or 1. We know some (i,j,k) where a[i]^a[i+1]^...^a[j]\u003dk. How many possible this sequences are there?\u0026quot; We can solve this problem by using union-find. At first, there is n*2 vertices. If k is 1, we\u0027ll connect (i*2,(j+1)*2+1) and (i*2+1,(j+1)*2), if k is 0, we\u0027ll connect (i*2,(j+1)*2) and (i*2+1,(j+1)*2+1) (note that i\u0026lt;\u003dj). If both i*2 and i*2+1 are in the same set for any i, the answer is 0. Otherwise the answer is 2^((the number of sets-2)/2).\u003c/p\u003e\u003cp\u003eAlso, it is possible to solve odd number version. (How many ways to fill all the empty cells with \u0027x\u0027 or \u0027o\u0027 (each cell must contain only one character in the end) are there, such that for each cell the number of adjacent cells with \u0027o\u0027 will be \u0026quot;odd\u0026quot;? ) I\u0027ll hope for your challenge for odd-number version!!\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/461/problem/E\"\u003eDiv1 E Appleman and a Game\u003c/a\u003e (Author: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/hogloid\" title\u003d\"Международный мастер hogloid\"\u003ehogloid\u003c/a\u003e,\u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/snuke\" title\u003d\"Гроссмейстер snuke\"\u003esnuke\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eLet C be the number of characters(here, C\u003d4)\u003c/p\u003e\u003cp\u003eGiven string S, the way to achieve minimum steps is as follows: Append one of the longest substring of T that fits current position of string S. Appending a not-longest substring can be replaced by appending longest substring and shortening the next substring appended.\u003c/p\u003e\u003cp\u003eLet dp[K][c1][c2] be defined as :\u003c/p\u003e\u003cp\u003ethe minimum length of string that can be obtained by appending a string K times and that starts by character c1 and whose next character is c2. Note that next character is not counted in the length.\u003c/p\u003e\u003cp\u003edp[1] can be calculated as follows:\u003c/p\u003e\u003cp\u003eFor every string of length L expressed by C characters, if the string is not included in T, update the dp table as dp[1][the string\u0027s first character][its last character]\u003dmin(dp[1][its first character][its last character],L-1)\u003c/p\u003e\u003cp\u003eFor any (c1,c2), dp[1][c1][c2] is smaller than or equal to log_C(T+1)+2 (since the kind of strings of length log_C(T+1)+2 that start by c1 and end by c2 is equals to T+1). Therefore for L\u003d1...log(T+1)+2, try all the strings as described above.\u003c/p\u003e\u003cp\u003eAlso we can use trie that contains all substrings of T of length log_C(T+1)+2, and find what can\u0027t be described as a substring of T by one step.\u003c/p\u003e\u003cp\u003eSince dp[k+1][c1][c2]\u003dmin(dp[k][c1][c3]+dp[1][c3][c2] | c3\u003d1...C), we can use matrix multiplication to get dp[K].\u003c/p\u003e\u003cp\u003eFor a integer K, if there is (c1,c2) such that dp[K][c1][c2]\u0026lt;|S|, the answer is greater than K. Otherwise,the answer is smaller than or equal to K.\u003c/p\u003e\u003cp\u003eSince answer is bigger or equal to 1 and smaller or equal to |S|, we can use binary search to find the ansewr.\u003c/p\u003e\u003cp\u003eO(T*((log T)^2+C^2)+C^3(log |S|)^2)\u003c/p\u003e\u003cp\u003eBONUS: Is there any algorithm that solves in O(1) or O(C^foo)(that is, not depended on |S|) for each |S| with pre-calc?\u003c/p\u003e\u003cp\u003eSome hints: Maximal value of dp[1][*][*] — Minimal value of dp[1][*][*] \u0026lt;\u003d 2\u003c/p\u003e\u003cp\u003e(let\u0027s call the maximal value dp[1][i][j]\u003dL. Here, any C^(L-2) strings are contained in T as substring, so for any (c1,c2), dp[1][c1][c2]\u0026gt;\u003dL-2)\u003c/p\u003e\u003cp\u003eMaximal value of dp[1][k][*] — minimal value of dp[1][k][*] \u0026lt;\u003d1 ( k\u003d1...C)\u003c/p\u003e\u003cp\u003eMaximal value of dp[1][*][k] — minimal value of dp[1][*][k] \u0026lt;\u003d1 ( k\u003d1...C)\u003c/p\u003e\u003cp\u003eEven if we use these hints and make C\u003d3, the implementation would be not easy.\u003c/p\u003e\u003cp\u003eIf you come up with smart way, please comment here :)\u003c/p\u003e\u003c/div\u003e","tags":["cf263"]}}