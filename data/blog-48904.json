{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1481145844,"rating":30,"authorHandle":"likecs","modificationTimeSeconds":1481145844,"id":48904,"title":"\u003cp\u003eA DAG Problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eA was thinking about a DAG problem. It goes as follows:\u003c/p\u003e\u003cp\u003eYou are given a directed acyclic graph with \u003cstrong\u003eN\u003c/strong\u003e nodes and \u003cstrong\u003eM\u003c/strong\u003e edges. Every vertex has a number associated with it, let us call it \u003cstrong\u003eA[i]\u003c/strong\u003e. The power of every vertex is defined as the sum of values written on every vertex reachable from it. We are given \u003cstrong\u003eQ\u003c/strong\u003e queries. In each query we need to find the power of a given vertex. \u003c/p\u003e\u003cp\u003eFor example, Let N \u003d 5, M \u003d 5 and the value of A \u003d {2, 3, 1, 4, 2}. (Assume 1-based indexing). Let the edges be {(2, 1), (3, 1), (4, 2), (4, 3), (3, 5)}, where \u003cstrong\u003e(x, y)\u003c/strong\u003e means there is directed edge from \u003cstrong\u003ex\u003c/strong\u003e to \u003cstrong\u003ey\u003c/strong\u003e. \u003c/p\u003e\u003cp\u003eSo, querying for vertex 4, gives a answer of (2 + 3 + 1 + 4 + 2) \u003d 12, as every vertex is reachable from it, while for vertex 3, it gives answer as (2 + 3 + 2) \u003d 7 as only {1, 3, 5} are reachable from it.\u003c/p\u003e\u003cp\u003eThe brute force solution is to perform dfs/bfs in every query. If possible, can you please provide an efficient algorithm for this. (I was thinking about some kind of precomputation using topological sort, but ended but added some values more than once.)\u003c/p\u003e\u003cp\u003eThank you.\u003c/p\u003e\u003c/div\u003e","tags":["dag","queries"]}}