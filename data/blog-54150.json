{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1504024056,"rating":131,"authorHandle":"Nisiyama_Suzune","modificationTimeSeconds":1504077574,"id":54150,"title":"\u003cp\u003e[Tutorial] Math note — Dirichlet convolution\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eOriginating from \u003ca href\u003d\"https://projecteuler.net/\"\u003eProject Euler\u003c/a\u003e, Dirichlet convolution saw its use in optimizing the problem to compute the partial sum of some specific multiplicative function. This article is aimed to introduce the exact technique applied.\u003c/p\u003e\u003ch1\u003ePrequisite\u003c/h1\u003e\u003cp\u003eThis tutorial can be viewed as an extension of \u003ca href\u003d\"//codeforces.com/blog/entry/53925\"\u003ethe previous tutorial\u003c/a\u003e, so I recommend to take a look at that one first.\u003c/p\u003e\u003ch1\u003eDirichlet convolution\u003c/h1\u003e\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Dirichlet_convolution\"\u003eDirichlet convolution\u003c/a\u003e is a way to generate a new function from two functions. Specifically, the Dirichlet convolution of two functions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0d/e5/0de5c6af0c6dbf2e6b35b47e5e1b1b6b68c66ee3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eWe already know that one property of such convolution is that if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e are all multiplicative, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e * \u003ci\u003eg\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is multiplicative as well. Based on the property of the Möbius inversion \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f9/cb/f9cb14b122fe4ae0bb47ea7be8085eb8a1b9edd4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we can also claim that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a4/40/a4401658d05506cad780a26a26ed439f138580ba.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch1\u003eOptimization technique\u003c/h1\u003e\u003cp\u003eLet\u0027s say that I wish to find the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e-th partial sum of some multiplicative function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e, i.e. I want to know the value of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e8/ae/e8ae3047d3287fecbce05790f4e80def13ae351a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Now let\u0027s pretend that I (miraculously) find a \u0026quot;magical function\u0026quot; \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e such that both the partial sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e (denoted as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e) and the partial sum of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e5/db/e5db23d557cbf91a8ea89d459e4cd827d1fe164f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (denoted as \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/48/c0/48c0388e561acfc9059e47d632d14caaf77f431f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e) are (miraculously) very easy to obtain in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e time complexity. I can then perform the following trick to compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s begin with the definition of the Dirichlet convolution:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3b/06/3b06835543a76a3a8768e700c94e227b940739a9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eWe can assume that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d \u003ci\u003epd\u003c/i\u003e\u003c/span\u003e, and sum things via \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a5/d9/a5d92eff3531da386e02b46ac54a9cfa53398a38.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eNow we can split the part where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e \u003d 1\u003c/span\u003e.\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a1/4c/a14c3ce99c800aa541b797cb86c4a546ee9dc57f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eWe can see that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e has surfaced. Let\u0027s move all the rest of the equation to the other hand.\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/21/54/2154cbc2f0a7153c0f6ef46edddb7d59fbf418bb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eAccording to the harmonic lemma introduced in the last article, only at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/23/25/23252b0fc4d48df9962f8b56307b87565eba520a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e different elements exist for \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ad/2b/ad2bb8fae5e91992c70c458fd83816de75a4a7fd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. We can thus recursively calculate the value of those \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e, dividing the product \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6b/65/6b65e0d64978f3a2c2fecbf4871328c2121cd13d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e into at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/23/25/23252b0fc4d48df9962f8b56307b87565eba520a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e different segments, and sum them up in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/32/91/32913ddf691f31b4d68f1a13d186d75779229920.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e complexity.\u003c/p\u003e\u003cp\u003eWhat is the overall complexity of the algorithm? If we implement a hash table to store every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e we computed, then with the integer division lemma (see last tutorial), it is not difficult to observe that only these values \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bf/23/bf23ecdf9777520ef715cc2aca59db9d9f7c7234.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e are computed. Since computing an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e costs \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2e/62/2e6201d1d724ed13fe80278387e3dfda5835f0ed.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, the overall cost should be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/66/18/6618df0bcf350862cf7b71000de2f164a3fb465c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eUpon now we have not used the interesting fact that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is multiplicative. Come to think of it, we can actually use the linear sieve to pre-compute a few first elements of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e, omitting the need to process them recursively. Let\u0027s say that we pre-compute the first \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/09/44/0944d9061f678978ff30f0afa268ce45e3a4203d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e elements of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e. We can calculate the complexity\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/61/f1/61f19a4e11e27f10ad8ab18be9b9a7d3793d7515.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eApparently, when \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5f/c9/5fc9fb5c0de25ce4c90f88bd049fc86a09d46815.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8b/84/8b84110ecf76b6c0fa9cc54f5f7d48646ed63c77.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eHence, the algorithm is optimized to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/14/e7/14e77072409139a62fc0c967bc104bd1f965fa87.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eThe following code gives a brief idea on the implementation of the technique.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e/*\tPrefix sum of multiplicative functions :\n\t\tp_f : the prefix sum of f (x) (1 \u0026lt;\u003d x \u0026lt;\u003d th).\n\t\tp_g : the prefix sum of g (x) (0 \u0026lt;\u003d x \u0026lt;\u003d N).\n\t\tp_c : the prefix sum of f * g (x) (0 \u0026lt;\u003d x \u0026lt;\u003d N).\n\t\tth : the thereshold, generally should be n ^ (2 / 3).\n*/\n\nstruct prefix_mul {\n\n\ttypedef long long (*func) (long long);\n\n\tfunc p_f, p_g, p_c;\n\tlong long n, th;\n\tstd::unordered_map \u0026lt;long long, long long\u0026gt; mem;\n\n\tprefix_mul (func p_f, func p_g, func p_c) : p_f (p_f), p_g (p_g), p_c (p_c) {}\n\n\tlong long calc (long long x) {\n\t\tif (x \u0026lt;\u003d th) return p_f (x);\n\t\tauto d \u003d mem.find (x);\n\t\tif (d !\u003d mem.end ()) return d -\u0026gt; second;\n\t\tlong long ans \u003d 0;\n\t\tfor (long long i \u003d 2, la; i \u0026lt;\u003d x; i \u003d la + 1) {\n\t\t\tla \u003d x / (x / i);\n\t\t\tans \u003d ans + (p_g (la) - p_g (i - 1) + mod) * calc (x / i);\n\t\t}\n\t\tans \u003d p_c (x) - ans; ans \u003d ans / inv;\n\t\treturn mem[x] \u003d ans;\n\t}\n\n\tlong long solve (long long n, long long th) {\n\t\tif (n \u0026lt;\u003d 0) return 0;\n\t\tprefix_mul::n \u003d n; prefix_mul::th \u003d th;\n\t\tinv \u003d p_g (1);\n\t\treturn calc (n); \n\t}\n\n};\n\u003c/code\u003e\u003c/pre\u003e\u003ch1\u003eDecoding the magic\u003c/h1\u003e\u003cp\u003eThough we have finished discussing the algorithm, I have not yet shown how to find the \u0026quot;magic function\u0026quot;. Unfortunately, there is no guarantee that such function exists in the first place. However, we can think about a question: how many functions are there that is \u003cstrong\u003every easy\u003c/strong\u003e to compute the partial sum of it?\u003c/p\u003e\u003cp\u003eFew.\u003c/p\u003e\u003cp\u003eCertainly we know that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/03/1a/031af8506933e04f3e4fe57aa4c88f8c563ea4bc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eI\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eId\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e are all trivial functions that have formulas for their partial sums, but there are hardly any other ones that come handy in the form of the Dirichlet convolution. The fact suggests that we can apply a trial-and-error method to test these trivial functions until one of them satisfies the condition that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/48/c0/48c0388e561acfc9059e47d632d14caaf77f431f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is also trivial.\u003c/p\u003e\u003cp\u003eStill, if we know some property of the function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e, we might have some other ways to work around it.\u003c/p\u003e\u003cp\u003eFor instance, consider the Möbius function \u003cspan class\u003d\"tex-span\"\u003eμ(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e, we have already noticed that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a4/40/a4401658d05506cad780a26a26ed439f138580ba.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, which tells us to take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eI\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e as the \u0026quot;magic function\u0026quot;. Another example would be \u003ca href\u003d\"https://en.wikipedia.org/wiki/Euler%27s_totient_function\"\u003ethe Euler\u0027s totient function\u003c/a\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/62/ac/62ac3a78df090cb09c5a7e8e7932644d3647f07e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we can prove that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fe/db/fedb9b8b8e416b2f9a5084500a03cbece46de7f5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (with the \u0026quot;\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e\u0026quot; method, i.e. show that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0a/c0/0ac083654eaefc49dd5ddadc9ddda195333b409e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is multiplicative first, and then compute \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/25/3e/253eed7ed96c1af8ccb7acd78b047e109cecbd8a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e), so \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/00/5d/005dfc5ec6f78eb6a6209ecf987cc510f06e10f8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch1\u003eExample problems\u003c/h1\u003e\u003cp\u003e\u003cstrong\u003eExample 1.\u003c/strong\u003e Find out the number of co-prime pairs of integer \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e in range \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003en\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution 1.\u003c/strong\u003e We already know that\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b6/65/b665dac1860ef3adae9a3cd17e6f336cfd200d98.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eNow since we can calculate the partial sum of \u003cspan class\u003d\"tex-span\"\u003eμ(\u003ci\u003ed\u003c/i\u003e)\u003c/span\u003e faster, we are able to apply the harmonic lemma on the formula and optimize the loop to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/32/91/32913ddf691f31b4d68f1a13d186d75779229920.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Note that while we have to compute multiple partial sums of \u003cspan class\u003d\"tex-span\"\u003eμ(\u003ci\u003ed\u003c/i\u003e)\u003c/span\u003e, the overall complexity is still \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/14/e7/14e77072409139a62fc0c967bc104bd1f965fa87.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e if we do not clear the hash table, due to the fact that all values we plugged in is in the sequence \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bf/23/bf23ecdf9777520ef715cc2aca59db9d9f7c7234.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, which are already computed while processing \u003cspan class\u003d\"tex-span\"\u003eμ(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e anyway.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExample 2.\u003c/strong\u003e Find out the sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e for every pair of integer \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e in range \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003en\u003c/i\u003e]\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e means the greatest common divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution 2.\u003c/strong\u003e Since\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/45/b5/45b5bbd23cf9ae13e07c409c161c6d17b9888a4e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eWe just apply the optimization technique exactly the same as above.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExample 3.\u003c/strong\u003e Find out the sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elcm\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e for every pair of integer \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e in range \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003en\u003c/i\u003e]\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elcm\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e means the least common multiple of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution 3.\u003c/strong\u003e We know that\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/43/89/4389772bf6ea6d79597433dcb8f1fe68abf77738.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9b/fb/9bfb9c70cfa5f3da90e824bd256c3ce8263fa8ff.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eNow we just have to find a \u0026quot;magic function\u0026quot; for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003el\u003c/i\u003e)\u003c/span\u003e. With a little luck, we can notice that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eId\u003c/i\u003e(\u003ci\u003el\u003c/i\u003e) \u003d \u003ci\u003eg\u003c/i\u003e * \u003ci\u003eId\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003el\u003c/i\u003e)\u003c/span\u003e, and we just apply the optimization technique exactly the same as above.\u003c/p\u003e\u003cp\u003e(Should you be curious about the reason why \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eId\u003c/i\u003e(\u003ci\u003el\u003c/i\u003e) \u003d \u003ci\u003eg\u003c/i\u003e * \u003ci\u003eId\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003el\u003c/i\u003e)\u003c/span\u003e holds true, the answer is still just the \u0026quot;\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e\u0026quot; method: it is vital to show that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e * \u003ci\u003eId\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003el\u003c/i\u003e)\u003c/span\u003e is multiplicative, and simply calculating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e * \u003ci\u003eId\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e will yield the result.)\u003c/p\u003e\u003ch1\u003ePractice Problems\u003c/h1\u003e\u003ch2\u003efunction\u003c/h2\u003e\u003cp\u003e\u003ca href\u003d\"http://acm.hdu.edu.cn/showproblem.php?pid\u003d5608\"\u003eLink\u003c/a\u003e\u003c/p\u003e\u003ch2\u003eCounting Divisors (square)\u003c/h2\u003e\u003cp\u003e\u003ca href\u003d\"http://www.spoj.com/problems/DIVCNT2/\"\u003eLink\u003c/a\u003e\u003c/p\u003e\u003ch1\u003eExtension\u003c/h1\u003e\u003cp\u003eUnder some circumstances an implemented hash table might not be available. Fortunately, that does not mean you have to hand-code it for the optimization. With a little observation we can notice that all keys appearing in the hash table are in the form \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/10/a2/10a28e0047b2e7caf182b00e9b28e67c319bd90c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Therefore, if we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, i.e. \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0a/75/0a75e83b9dc50f0fd29981a84dc9a403eb9e4a5b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e as the hashing function, we can prove that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e2/c6/e2c629a7fe9e1b5b133ab7f9888ada3e51928e21.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e never collides.\u003c/p\u003e\u003c/div\u003e","tags":["math","dirichlet convolution","tutorial"]}}