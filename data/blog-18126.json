{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1432665349,"rating":125,"authorHandle":"DarthPrince","modificationTimeSeconds":1432733575,"id":18126,"title":"\u003cp\u003eCodeforces Round #305 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/548/problem/A\" title\u003d\"Codeforces Round 305 (Div. 2)\"\u003e548A - Mike and Fax\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eConsider characters of this string are number 0-based from left to right. If \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e is not a multiply of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, then answer is \u0026quot;NO\u0026quot;. Otherwise, let \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e5/43/e543dfca40ec603255ca786887f9acb768cefebd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Then answer is \u0026quot;Yes\u0026quot; if and only if for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ei\u003c/i\u003e \u0026lt; |\u003ci\u003es\u003c/i\u003e|\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e(\u003ci\u003ei\u003c/i\u003e / \u003ci\u003elen\u003c/i\u003e) * \u003ci\u003elen\u003c/i\u003e + \u003ci\u003elen\u003c/i\u003e - 1 - (\u003ci\u003ei\u003c/i\u003e%\u003ci\u003elen\u003c/i\u003e)\u003c/sub\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e%\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is the remainder of dividing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/6a/91/6a919c3e24c4ce3386cfffb8cc5d847b8b1bdf25.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eTime complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f3/c7/f3c745c8c1b7ab288cca7f3e4cb5b44f0eaa6757.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/HpYQHZ\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/A6yhex\"\u003ePython Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Haghani\" title\u003d\"International master Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/PHiL7p\"\u003ePython Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/548/problem/B\" title\u003d\"Codeforces Round 305 (Div. 2)\"\u003e548B - Mike and Fun\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eConsider this problem: We have a binary sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and want to find the maximum number of consecutive 1s in it. How to solve this? Easily:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eans \u003d 0\ncur \u003d 0\nfor i \u003d 1 to n:\n     if s[i] \u003d\u003d 0\n          then cur \u003d 0\n     else\n          cur \u003d cur + 1\n     ans \u003d max(ans, cur)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/fc/1d/fc1d505341a403d8133679ddc267ced5d346219c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFinally, answer to this problem is \u003ccode\u003eans\u003c/code\u003e. For each row \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e of the table, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the maximum number of consecutive 1s in it (we know how to calculate it in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e)\u003c/span\u003e right ?). So after each query, update \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e)\u003c/span\u003e and then find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTime complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9a/04/9a0427e0bd32203f67fc1d917e24c3f3e901bde1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/m84gS5\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/6tX7dW\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Haghani\" title\u003d\"International master Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/EpwXOM\"\u003ePython Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/547/problem/A\" title\u003d\"Codeforces Round 305 (Div. 1)\"\u003e547A - Mike and Frog\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eIn this editorial, consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u003ci\u003em\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e′ \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e′ \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e \u003d \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eY\u003c/i\u003e \u003d \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFirst of all, find the number of seconds it takes until height of Xaniar becomes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e′\u003c/span\u003e (starting from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e) and call it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e. Please note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e ≤ \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and if we don\u0027t reach \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e′\u003c/span\u003e after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e seconds, then answer is \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eIf after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e seconds also height of Abol will become equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e′\u003c/span\u003e then answer if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eOtherwise, find the height of Abdol after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e seconds and call it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen find the number of seconds it takes until height of Xaniar becomes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e′\u003c/span\u003e (starting from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e′\u003c/span\u003e) and call it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. Please note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e ≤ \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and if we don\u0027t reach \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e′\u003c/span\u003e after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e seconds, then answer is \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eif \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003ci\u003eXx\u003c/i\u003e + \u003ci\u003eY\u003c/i\u003e\u003c/span\u003e, then find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003ci\u003eg\u003c/i\u003e(\u003ci\u003eg\u003c/i\u003e(...(\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e))))\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e times). It is really easy:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ec \u003d 1, d \u003d 0\nfor i \u003d 1 to c\n     c \u003d (cX) % p\n     d \u003d (dX + Y) % p\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, \u003c/p\u003e \u003cpre\u003e\u003ccode\u003ef(x)\n     return (cx + d) % p\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/dc/70/dc70b365d1560f2027d5fd0108c49cc9570e364f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eActually, if height of Abol is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e then, after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e seconds it will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen, starting from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e, find the minimum number of steps of performing \u003ccode\u003ee \u003d f(e)\u003c/code\u003e it takes to reach \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e′\u003c/span\u003e and call it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eo\u003c/i\u003e\u003c/span\u003e. Please note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eo\u003c/i\u003e ≤ \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and if we don\u0027t reach \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e′\u003c/span\u003e after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e seconds, then answer is \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + \u003ci\u003ec\u003c/i\u003e × \u003ci\u003eo\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b1/86/b186d90a292c5fb9dafc3ef4d0e3ec98302fdf3c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/2M9fLb\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/MvB3Y1\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Haghani\" title\u003d\"International master Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/4PxOgM\"\u003eJava Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/547/problem/B\" title\u003d\"Codeforces Round 305 (Div. 1)\"\u003e547B - Mike and Feet\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFor each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, find the largest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and show it by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (if there is no such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eAlso, find the smallest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and show it by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (if there is no such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eThis can be done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e with a stack. Pseudo code of the first part (second part is also like that) :\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estack s // initially empty\nfor i \u003d 1 to n\n     while s is not empty and a[s.top()] \u0026gt;\u003d a[i]\n          do s.pop()\n     if s is empty\n          then l[i] \u003d 0\n     otherwise\n          l[i] \u003d s.top()\n     s.push(i)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/82/a9/82a906b1846ef5efdba61b8ce95497ead22906fa.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eConsider that you are asked to print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e integers, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Obviously, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e ≥ \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e ≥ ... ≥ \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, we know that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e can be minimum element in groups of size \u003cspan class\u003d\"tex-span\"\u003e1, 2, ..., \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSe we need a data structure for us to do this:\u003c/p\u003e\u003cp\u003eWe have array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and all its elements are initially equal to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. Also, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e queries. Each query gives \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e, \u003ci\u003eval\u003c/i\u003e\u003c/span\u003e and want us to perform \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eval\u003c/i\u003e), \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003eval\u003c/i\u003e), ..., \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eval\u003c/i\u003e)\u003c/span\u003e. We want the final array.\u003c/p\u003e\u003cp\u003eThis can be done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e with a maximum partial sum (keeping maximum instead of sum), \u003ca href\u003d\"/blog/entry/15729\"\u003eread here for more information about partial sum\u003c/a\u003e. \u003c/p\u003e\u003cp\u003eTime complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d6/2e/d62e2a32a67492a176690a6a7c26f5a68aa2a122.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/Ryg2gn\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/gQ3ijn\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Haghani\" title\u003d\"International master Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"ideone.com/EDr7bG\"\u003eJava Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/547/problem/C\" title\u003d\"Codeforces Round 305 (Div. 1)\"\u003e547C - Mike and Foam\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe define that a number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is good if and only if there is no \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e \u0026gt; 1\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e is a divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAlso, we define function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e as follow:\u003c/p\u003e\u003cp\u003eConsider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e × \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sup\u003e × ... × \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/sup\u003e\u003c/span\u003e where all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003es are prime. Then, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e) \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eUse simple inclusion. Consider all the primes from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e5 × 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSo, after each query, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is the set of beers like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in the shelf that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is a divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, then number of pairs with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e\u003c/span\u003e equal to 1 is: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c0/a8/c0a88ee1556bd2eae65c3d8d2303bb8bbe836bf9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eConsider good numbers from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e5 × 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. The above phrase can be written in some other way: \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ed\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e)| × ( - 1)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e)\u003c/sup\u003e + |\u003ci\u003ed\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)| × ( - 1)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/sup\u003e + ... + |\u003ci\u003ed\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e)| × ( - 1)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e)\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSo, for each query if we can find all good numbers that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is divisible by them in a fast way, we can solve the rest of the problem easily (for each good number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, we can store \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ed\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)|\u003c/span\u003e in an array and just update this array and update the answer).\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/b9/9b/b99be3515b0e676e12ec74f9ef35be668e2305a2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSince all numbers are less than \u003cspan class\u003d\"tex-span\"\u003e2 × 3 × 5 × 7 × 11 × 13 × 17\u003c/span\u003e, then there are at most \u003cspan class\u003d\"tex-span\"\u003e6\u003c/span\u003e primes divisible buy \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. With a simple preprocesses, we can find their maximum and so easily we can find these (at most 6) primes fast. If their amount is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, then there are exactly \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e good numbers that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is divisible by them (power of each prime should be either \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eSo we can perform each query in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003eTime complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/82/87/82873a4062d1bda8f51345bc768c080981d06b19.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/IxkI9b\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/dQcpTQ\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Haghani\" title\u003d\"International master Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/De4DCl\"\u003eJava Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/547/problem/D\" title\u003d\"Codeforces Round 305 (Div. 1)\"\u003e547D - Mike and Fish\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eConsider a bipartite graph. In each part (we call them first and second part) there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e \u003d 2 × 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e vertices numbered from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e. For each point \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e add an edge between vertex number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e from the first part and vertex number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e from the second part.\u003c/p\u003e\u003cp\u003eIn this problem, we want to color edges with two colors so that the difference between the number of blue edges connected to a vertex and the number of red edges connected to it be at most 1.\u003c/p\u003e\u003cp\u003eDoing such thing is always possible.\u003c/p\u003e\u003cp\u003eWe prove this and solve the problem at the same time with induction on the number of edges :\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/2f/dd/2fdd0fd2aef16b18552a63720d1ede993ee81050.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIf all vertices have even degree, then for each component there is an Eulerian circuit, find it and color the edges alternatively_ with blue and red. Because graph is bipartite, then our circuit is an even walk and so, the difference between the number of blue and red edges connected to a vertex will be 0.\u003c/p\u003e\u003cp\u003eOtherwise, if a vertex like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e has odd degree, consider a vertex like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e that there is and edge between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e. Delete this edge and solve the problem for the rest of the edges (with the induction definition) and then add this edge and if the number of red edges connected to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e is more than the blue ones, then color this edge with blue, otherwise with red.\u003c/p\u003e\u003cp\u003eYou can handle this add/delete edge requests and find odd vertices with a simple \u003ccode\u003eset\u003c/code\u003e. So,\u003c/p\u003e\u003cp\u003eTime complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/34/88/34883026310b7131810b80804e06b0a9fa1781e3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/0KCyaW\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/eL5XDx\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Haghani\" title\u003d\"International master Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/p5VlGg\"\u003eJava Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/547/problem/E\" title\u003d\"Codeforces Round 305 (Div. 1)\"\u003e547E - Mike and Friends\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecall\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e) \u003d \u003ci\u003ematch\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ejins\u003c/i\u003e\u003c/sub\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ematch\u003c/i\u003e(\u003ci\u003etins\u003c/i\u003e)\u003c/span\u003e is the number of occurrences of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eConcatenate all strings together in order (an put null character between them) and call it string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e. We know that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/88/df/88df884b7e8405a3da8e187ce95ea2b187dcc04a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eConsider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 5 × 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e. Consider Consider for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1\u003c/sub\u003e...\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e \u003d \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e \u003d \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 2\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eAlso, for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003eth\u003c/i\u003e\u003c/span\u003e character of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e which is not a null character, consider it belongs to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eCalculate the suffix array of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/79/b5/79b54f2ac203c4801ee58775b3c72212fb6e173f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and show it by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e|\u003ci\u003eS\u003c/i\u003e|\u003c/sub\u003e\u003c/span\u003e (we show each suffix by the index of its beginning).\u003c/p\u003e\u003cp\u003eFor each query, we want to know the number of occurrences of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e...\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e. For this propose, we can use this suffix array.\u003c/p\u003e\u003cp\u003eConsider that we show suffix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e starting from index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAlso, for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u0026lt; |\u003ci\u003eS\u003c/i\u003e|\u003c/span\u003e, calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elcp\u003c/i\u003e(\u003ci\u003eS\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e), \u003ci\u003eS\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e))\u003c/span\u003e totally in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8b/b2/8bb2331b0345c2c4c63dea3d1093d10291a221f6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and show it by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elc\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/54/e3/54e3b699b1f31ed6fbce5771e422ce3b16fca0c9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFor each query, consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, also find minimum number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and maximum number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e (using binary search and sparse table on sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elc\u003c/i\u003e\u003c/span\u003e) such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003elc\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003elc\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e + 1\u003c/sub\u003e, ..., \u003ci\u003elc\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e) ≥ |\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e|\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003elc\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003elc\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e, ..., \u003ci\u003elc\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e - 1\u003c/sub\u003e) ≥ |\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e|\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFinally answer of this query is the number of elements in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e + 1\u003c/sub\u003e, ..., \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e that are in the interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThis problem is just like \u003ca href\u003d\"http://www.spoj.com/problems/KQUERY/\"\u003eKQUERY\u003c/a\u003e. You can read my offline approach for KQUERY \u003ca href\u003d\"/blog/entry/15890\"\u003ehere\u003c/a\u003e. It uses segment tree, but you can also use Fenwick instead of segment tree.\u003c/p\u003e\u003cp\u003eThis wasn\u0027t my main approach. My main approach uses aho-corasick and a data structure I invented and named it C-Tree.\u003c/p\u003e\u003cp\u003eTime complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/54/37/54370df289cb1ce4f2ddf7deded8a73a1fb47a18.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/6VyRJJ\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e (\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/54/37/54370df289cb1ce4f2ddf7deded8a73a1fb47a18.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e) \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/xIKjW2\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e (\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/10/57/105730e5bec9c6659399e6815d60c3761d079d1e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e)\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/uS0U0f\"\u003eC++ Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Haghani\" title\u003d\"International master Haghani\"\u003eHaghani\u003c/a\u003e (Suffix array construction in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/10/57/105730e5bec9c6659399e6815d60c3761d079d1e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and the rest in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/54/37/54370df289cb1ce4f2ddf7deded8a73a1fb47a18.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e)\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/oag72o\"\u003eJava Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/40/d1/40d11b74e20e6ccf0c96d3f108bcd09af35a1f4f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIf there\u0027s any suggestion or error let me know.\u003c/p\u003e\u003c/div\u003e","tags":["codeforces","round","305","editorial","mike"]}}