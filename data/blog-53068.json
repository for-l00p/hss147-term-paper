{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1499043538,"rating":98,"authorHandle":"Melnik","modificationTimeSeconds":1499043538,"id":53068,"title":"\u003cp\u003eCodeforces Round #422 (Div. 2) Editorial\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"822A\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFirst accepted Div1: 00:00:58 \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/kriii\" title\u003d\"Grandmaster kriii\"\u003ekriii\u003c/a\u003e \u003c/p\u003e\u003cp\u003eFirst accepted Div2: 00:00:59 \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Baneling3\" title\u003d\"Expert Baneling3\"\u003eBaneling3\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAuthor\u0027s solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e    int a, b;\n    scanf ( \u0026quot;%d%d\u0026quot;, \u0026amp;a, \u0026amp;b );\n    int ans \u003d 1;\n    for ( int j \u003d 1; j \u0026lt;\u003d min( a, b ); j++ )\n    \tans *\u003d j;\n    printf ( \u0026quot;%d\\n\u0026quot;, ans );\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"822B\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFirst accepted Div1: 00:03:30 \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/egor.lifar\" title\u003d\"Master egor.lifar\"\u003eegor.lifar\u003c/a\u003e \u003c/p\u003e\u003cp\u003eFirst accepted Div2: 00:04:43 \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Baneling3\" title\u003d\"Expert Baneling3\"\u003eBaneling3\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAuthor\u0027s solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e    const int maxn \u003d 1050;\n\n    vector \u0026lt; int \u0026gt; ans;\n    vector \u0026lt; int \u0026gt; newAns;\n\n    char t1[maxn];\n    char t2[maxn];\n\n    int n, m;\n    scanf ( \u0026quot;%d%d\\n\u0026quot;, \u0026amp;n, \u0026amp;m );\n    gets( t1 );\n    gets( t2 );\n\n    for ( int j \u003d 0; j \u0026lt; n; j++ )\n    \tans.pb( j );\n\n    for ( int j \u003d 0; j \u0026lt; m - n + 1; j++ ) {\n    \tnewAns.clear();\n    \tfor ( int i \u003d 0; i \u0026lt; n; i++ )\n    \t\tif ( t1[i] !\u003d t2[i + j] )\n    \t\t\tnewAns.pb( i );\n    \tif ( newAns.size() \u0026lt; ans.size() )\n    \t\tans \u003d newAns;\n    }\n    int sz \u003d ans.size();\n    printf( \u0026quot;%d\\n\u0026quot;, sz );\n    for ( int j \u003d 0; j \u0026lt; sz; j++ ) \n    \tprintf( \u0026quot;%d \u0026quot;, ans[j] + 1 );\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"822C\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFirst accepted Div1: 00:08:30 \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/nuip\" title\u003d\"International master nuip\"\u003enuip\u003c/a\u003e \u003c/p\u003e\u003cp\u003eFirst accepted Div2: 00:10:19 \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/ColdSu\" title\u003d\"Expert ColdSu\"\u003eColdSu\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAuthor\u0027s solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003econst int maxn \u003d 200500;\nconst int inf \u003d ( 2e9 ) + 2;\n\nvector \u0026lt; pair \u0026lt; pair \u0026lt; int, int \u0026gt;, pair \u0026lt; int, int \u0026gt; \u0026gt; \u0026gt; queries;\nint bestCost[maxn];\n\nint l[maxn];\nint r[maxn];\nint cost[maxn];\n\nint solution( int n, int needLen ) {\n    queries.clear();\n    for ( int j \u003d 0; j \u0026lt; n; j++ ) {\n        queries.pb( mp( mp( l[j], -1 ), mp( r[j], cost[j] ) ) );\n        queries.pb( mp( mp( r[j], 1 ), mp( l[j], cost[j] ) ) );\n    }\n    for ( int j \u003d 0; j \u0026lt; maxn; j++ )\n        bestCost[j] \u003d inf;\n    ll ans \u003d 2LL * inf;\n    sort( queries.begin(), queries.end() );\n    int sz \u003d queries.size();\n    for ( int j \u003d 0; j \u0026lt; sz; j++ ) {\n        int type \u003d queries[j].f.s;\n        if ( type \u003d\u003d -1 ) {\n            int curLen \u003d queries[j].s.f - queries[j].f.f + 1;\n            if ( curLen \u0026lt;\u003d needLen )\n                ans \u003d min( ans, 1LL * queries[j].s.s + 1LL * bestCost[needLen - curLen] );\n        }\n        if ( type \u003d\u003d 1 ) {\n            int curLen \u003d queries[j].f.f - queries[j].s.f + 1;\n            bestCost[curLen] \u003d min( bestCost[curLen], queries[j].s.s );\n        }\n    }\n    return ans \u0026gt;\u003d inf ? -1 : ans;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"822D\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFirst accepted Div1: 00:15:47 \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/arsijo\" title\u003d\"Grandmaster arsijo\"\u003earsijo\u003c/a\u003e \u003c/p\u003e\u003cp\u003eFirst accepted Div2: 00:18:01 \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/ColdSu\" title\u003d\"Expert ColdSu\"\u003eColdSu\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAuthor\u0027s solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003econst int maxn \u003d 5000500;\n\nint isPrime[maxn];\nll dp[maxn];\n\nint main()\n{\n    int t, l, r;\n    scanf ( \u0026quot;%d%d%d\u0026quot;, \u0026amp;t, \u0026amp;l, \u0026amp;r );\n    for ( int j \u003d 2; j \u0026lt; maxn; j++ )\n        isPrime[j] \u003d j;\n    for ( int j \u003d 2; j * j \u0026lt; maxn; j++ )\n        if ( isPrime[j] \u003d\u003d j )\n            for ( int i \u003d j * j; i \u0026lt; maxn; i +\u003d j )\n                isPrime[i] \u003d min( j, isPrime[i] );\n\n    dp[1] \u003d 0;\n    for ( int j \u003d 2; j \u0026lt; maxn; j++ ) {\n        dp[j] \u003d 1LL * inf * inf;\n        for ( int x \u003d j; x !\u003d 1; x /\u003d isPrime[x] )\n            dp[j] \u003d min( dp[j], 1LL * dp[j / isPrime[x]] + 1LL * j * ( isPrime[x] - 1 ) / 2LL );\n    }\n\n    int ans \u003d 0;\n    int cnt \u003d 1;\n    for ( int j \u003d l; j \u0026lt;\u003d r; j++ ) {\n        dp[j] %\u003d base;\n        ans \u003d ( 1LL * ans + 1LL * cnt * dp[j] ) % base;\n        cnt \u003d ( 1LL * cnt * t ) % base;\n    }\n    printf ( \u0026quot;%d\\n\u0026quot;, ans );\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"822E\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFirst accepted Div1: 00:43:18 \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Deadwing\" title\u003d\"Master Deadwing\"\u003eDeadwing\u003c/a\u003e \u003c/p\u003e\u003cp\u003eFirst accepted Div2: 01:05:21 \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/CountOlaf\" title\u003d\"Candidate Master CountOlaf\"\u003eCountOlaf\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAuthor\u0027s solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport java.io.*;\nimport java.util.*;\n\npublic class Main implements Runnable {\n    static class InputReader {\n        BufferedReader reader;\n        StringTokenizer tokenizer;\n\n        InputReader(InputStream in) {\n            reader \u003d new BufferedReader(new InputStreamReader(in), 1 \u0026lt;\u0026lt; 20);\n            tokenizer \u003d null;\n        }\n\n        String next() {\n            while (tokenizer \u003d\u003d null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer \u003d new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n    }\n\n    static long[] unique(long[] arr) {\n        Arrays.sort(arr);\n        int newLen \u003d 0;\n        for (int i \u003d 0; i \u0026lt; arr.length; i++) {\n            if (i + 1 \u003d\u003d arr.length || arr[i] !\u003d arr[i + 1]) {\n                arr[newLen++] \u003d arr[i];\n            }\n        }\n        return Arrays.copyOf(arr, newLen);\n    }\n\n    static class SuffixArray {\n         int[][] classes;\n         String s;\n         int maxH;\n         SuffixArray(String s) {\n             this.s \u003d s;\n             maxH \u003d 0;\n             while ((1 \u0026lt;\u0026lt; maxH) \u0026lt;\u003d s.length()) maxH++;\n             classes \u003d new int[maxH][];\n             for (int h \u003d 0; h \u0026lt; maxH; h++) {\n                 classes[h] \u003d new int[s.length()];\n             }\n             for (int i \u003d 0; i \u0026lt; s.length(); i++) {\n                 classes[0][i] \u003d s.charAt(i) - \u0027a\u0027;\n             }\n             for (int h \u003d 1; h \u0026lt; maxH; h++) {\n                 long[] values \u003d new long[s.length() - (1 \u0026lt;\u0026lt; h) + 1];\n                 int valuesLen \u003d 0;\n                 for (int i \u003d 0; i + (1 \u0026lt;\u0026lt; h) \u0026lt;\u003d s.length(); i++) {\n                     int leftPart \u003d classes[h - 1][i];\n                     int rightPart \u003d classes[h - 1][i + (1 \u0026lt;\u0026lt; (h - 1))];\n                     long curValue \u003d ((long)leftPart \u0026lt;\u0026lt; 30) ^ rightPart;\n                     values[valuesLen++] \u003d curValue;\n                 }\n                 values \u003d unique(values);\n                 for (int i \u003d 0; i + (1 \u0026lt;\u0026lt; h) \u0026lt;\u003d s.length(); i++) {\n                     int leftPart \u003d classes[h - 1][i];\n                     int rightPart \u003d classes[h - 1][i + (1 \u0026lt;\u0026lt; (h - 1))];\n                     long curValue \u003d ((long)leftPart \u0026lt;\u0026lt; 30) ^ rightPart;\n                     classes[h][i] \u003d Arrays.binarySearch(values, curValue);\n                 }\n             }\n         }\n         int getLCP(int i, int j) {\n             int res \u003d 0;\n             for (int h \u003d maxH - 1; h \u0026gt;\u003d 0; h--) {\n                 if (i + (1 \u0026lt;\u0026lt; h) \u0026lt;\u003d s.length() \u0026amp;\u0026amp; j + (1 \u0026lt;\u0026lt; h) \u0026lt;\u003d s.length() \u0026amp;\u0026amp; classes[h][i] \u003d\u003d classes[h][j]) {\n                     res +\u003d (1 \u0026lt;\u0026lt; h);\n                     i +\u003d (1 \u0026lt;\u0026lt; h);\n                     j +\u003d (1 \u0026lt;\u0026lt; h);\n                 }\n             }\n             return res;\n         }\n    }\n\n    @Override\n    public void run() {\n\n\n        InputReader in \u003d new InputReader(System.in);\n        PrintWriter out \u003d new PrintWriter(System.out);\n\n        int n \u003d in.nextInt();\n        String s \u003d in.next();\n        int m \u003d in.nextInt();\n        String t \u003d in.next();\n\n        int x \u003d in.nextInt();\n\n        int[][] dp \u003d new int[x + 1][n + 1];\n\n        for (int i \u003d 0; i \u0026lt;\u003d x; i++) {\n            for (int j \u003d 0; j \u0026lt;\u003d n; j++) {\n                dp[i][j] \u003d Integer.MIN_VALUE;\n            }\n        }\n\n        String q \u003d s + \u0026quot;#\u0026quot; + t;\n\n        SuffixArray sarr \u003d new SuffixArray(q);\n\n        dp[0][0] \u003d 0;\n\n        for (int cnt \u003d 0; cnt \u0026lt;\u003d x; cnt++) {\n            for (int prefS \u003d 0; prefS \u0026lt;\u003d n; prefS++) {\n                if (dp[cnt][prefS] \u003d\u003d Integer.MIN_VALUE) continue;\n                //System.err.println(\u0026quot;cnt \u003d \u0026quot; + cnt + \u0026quot;, prefS \u003d \u0026quot; + prefS + \u0026quot;, value \u003d \u0026quot; + dp[cnt][prefS]);\n                if (prefS + 1 \u0026lt;\u003d n \u0026amp;\u0026amp; dp[cnt][prefS + 1] \u0026lt; dp[cnt][prefS]) {\n                    dp[cnt][prefS + 1] \u003d dp[cnt][prefS];\n                }\n                if (cnt + 1 \u0026lt;\u003d x) {\n                    int prefT \u003d dp[cnt][prefS];\n                    int lcp \u003d sarr.getLCP(prefS, prefT + n + 1);\n                    if (dp[cnt + 1][prefS + lcp] \u0026lt; prefT + lcp) {\n                        dp[cnt + 1][prefS + lcp] \u003d prefT + lcp;\n                    }\n                }\n            }\n        }\n\n        boolean ok \u003d false;\n\n        for (int cnt \u003d 0; cnt \u0026lt;\u003d x; cnt++) {\n            if (dp[cnt][n] \u003d\u003d m) {\n                ok \u003d true;\n            }\n        }\n\n        out.println(ok ? \u0026quot;YES\u0026quot; : \u0026quot;NO\u0026quot;);\n\n        out.close();\n    }\n\n    public static void main(String[] args) {\n        new Thread(null, new Main(), \u0026quot;1\u0026quot;, 1L \u0026lt;\u0026lt; 28).run();\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"822F\"\u003eTutorial is loading...\u003c/div\u003e\u003cp\u003eFirst accepted Div1: 00:16:33 \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/mcfx\" title\u003d\"International master mcfx\"\u003emcfx\u003c/a\u003e \u003c/p\u003e\u003cp\u003eFirst accepted Div2: 01:12:52 \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Nisiyama_Suzune\" title\u003d\"Candidate Master Nisiyama_Suzune\"\u003eNisiyama_Suzune\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAuthor\u0027s solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003econst int maxn \u003d 105;\n\nvector \u0026lt; pair \u0026lt; int, int \u0026gt; \u0026gt; edge[maxn];\nint used[maxn];\nint from[maxn];\nint where[maxn];\nld dist[maxn];\n\nvoid dfs( int v, ld prevTime ) {\n    used[v] \u003d true;\n    int sz \u003d edge[v].size();\n    ld bestTime \u003d 2.0L / sz;\n    ld nextTime \u003d prevTime + bestTime;\n    if ( nextTime \u0026gt;\u003d 2.0L )\n        nextTime -\u003d 2.0L;\n    for ( int j \u003d 0; j \u0026lt; sz; j++ ) {\n        int id \u003d edge[v][j].f;\n        int to \u003d edge[v][j].s;\n        if ( used[to] )\n            continue;\n\n        ld toTime;\n        if ( nextTime \u0026lt;\u003d 1.0L ) {\n            from[id] \u003d to;\n            where[id] \u003d v;\n            dist[id] \u003d 1.0L - nextTime;\n            toTime \u003d nextTime + 1.0L;\n        } else {\n            from[id] \u003d v;\n            where[id] \u003d to;\n            dist[id] \u003d 2.0L - nextTime;\n            toTime \u003d nextTime - 1.0L;\n        }\n\n        dfs( to, toTime );\n\n        nextTime \u003d nextTime + bestTime;\n        if ( nextTime \u0026gt;\u003d 2.0L )\n            nextTime -\u003d 2.0L;\n    }\n}\n\nint main()\n{\n    int n;\n    scanf ( \u0026quot;%d\u0026quot;, \u0026amp;n );\n    for ( int j \u003d 1; j \u0026lt; n; j++ ) {\n        int u, v;\n        scanf ( \u0026quot;%d%d\u0026quot;, \u0026amp;u, \u0026amp;v );\n        edge[u].pb( mp( j, v ) );\n        edge[v].pb( mp( j, u ) );\n    }\n    dfs( 1, 0 );\n    printf( \u0026quot;%d\\n\u0026quot;, n - 1 );\n    for ( int j \u003d 1; j \u0026lt; n; j++ ) {\n        printf( \u0026quot;%d %d %d %d \u0026quot;, 1, j, from[j], where[j] );\n        cout \u0026lt;\u0026lt; fixed \u0026lt;\u0026lt; setprecision( 10 ) \u0026lt;\u0026lt; dist[j] \u0026lt;\u0026lt; endl;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}