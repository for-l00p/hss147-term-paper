{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1480795728,"rating":3,"authorHandle":"Xeno_Amess","modificationTimeSeconds":1480796688,"id":48821,"title":"\u003cp\u003eThings about 443B\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eWarning:This article is only for beginners.Don\u0027t waste your time reading if you have known about suffix-array.\u003c/p\u003e\u003cp\u003eSo this is today\u0027s problem.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/443/problem/B\" title\u003d\"Codeforces Round 253 (Div. 2)\"\u003e443B - Коля и тандемный повтор\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAlthough the question is so easy,there is lots of fun in it,if you go deep.\u003c/p\u003e\u003ch1\u003e1.\u003c/h1\u003e\u003cp\u003eFirst,why is it a easy problem?\u003c/p\u003e\u003cp\u003eThe thing who makes this question so easy is the limit of n: n\u0026lt;\u003d200.\u003c/p\u003e\u003cp\u003eFirst every high school students shall be able to get it AC by a O(n^3) sulution.\u003c/p\u003e\u003cp\u003eIn which we can use one demention for the start, one demention for the end,one demention for the check.\u003c/p\u003e\u003cp\u003eWow.A really bruteforce solution.\u003c/p\u003e\u003cp\u003eBut in this question ,the solution runs so fast that everybody gets a 15msAC,which means the fastest CF can configure.\u003c/p\u003e\u003cp\u003eBut,when we face bigger test data, the n^3 solution goes never so fast again.\u003c/p\u003e\u003cp\u003eWhat will happen when we add n to 5000?\u003c/p\u003e\u003cp\u003eWe use one of the 15ms O(n^3) solution for test.\u003c/p\u003e\u003cp\u003eHere is the solution : \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/443/submission/6916391\" title\u003d\"Посылка 6916391 от Naturain\"\u003e6916391\u003c/a\u003e\u003c/p\u003e\u003cp\u003e(Sorry Natureal,don\u0027t beat me,at least not to hard~)\u003c/p\u003e\u003cp\u003eAnd Here is the data :\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/443/submission/22681015\" title\u003d\"Посылка 22681015 от Xeno_Amess\"\u003e22681015\u003c/a\u003e\u003c/p\u003e\u003cp\u003e(I random it.)\u003c/p\u003e\u003cp\u003eWell on my computer it runs for 38.846s.\u003c/p\u003e\u003ch1\u003e2.\u003c/h1\u003e\u003cp\u003eSo if there a quicklier solution?\u003c/p\u003e\u003cp\u003eOfcause there is.\u003c/p\u003e\u003cp\u003eWe can use Rabin-Karp to speed up the third demention,in witch we check if a given begin and end can do,from O(n)to O(1).\u003c/p\u003e\u003cp\u003eThat means the whole solution is O(n^2).\u003c/p\u003e\u003cp\u003eYou can easily learn basic of Rabin-Karp from any website,so I don\u0027t explain for it,but I do give comment in code.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/443/submission/22681205\" title\u003d\"Посылка 22681205 от Xeno_Amess\"\u003e22681205\u003c/a\u003e\u003c/p\u003e\u003cp\u003eUse it to deal with the n\u003d5000 data,and it runs for 0.723s.\u003c/p\u003e\u003cp\u003eDon\u0027t stop thinking.\u003c/p\u003e\u003cp\u003e38.846/0.723 \u003d 53.729.\u003c/p\u003e\u003cp\u003eSo why a n^2 solution faster than a n^3 solution only 54 times,while n \u003d\u003d 5000?\u003c/p\u003e\u003cp\u003eBecause Rabin-Karp has lots of [Modulo Operation],which is far slower than [simply check if equal] in that n^3.\u003c/p\u003e\u003ch1\u003e3.\u003c/h1\u003e\u003cp\u003eLet\u0027s get it better.\u003c/p\u003e\u003cp\u003eIn that solution I check k and n.\u003c/p\u003e\u003cp\u003ewhen n \u0026lt; k,that\u0027s obvious that he can take the whole string(if it\u0027s odd,-1).\u003c/p\u003e\u003cp\u003eOr,we shall do the n^2.\u003c/p\u003e\u003cp\u003emaxa means the largest answer we had met,and it starts from 0.\u003c/p\u003e\u003cp\u003eAs you can see,I use maxa to jump the answers whose len\u0026lt;\u003dmaxa.I only check substrings whose length\u0026gt;maxa. \u003c/p\u003e\u003cp\u003eBut wait a minute.Why let maxa be 0?\u003c/p\u003e\u003cp\u003eAt the begining we do have a solution of len\u003d2*k,which means use the k spaces he add to mirror the last k words.\u003c/p\u003e\u003cp\u003elet\u0027s add it.\u003c/p\u003e\u003cp\u003eAlso ,you can know that in my code,when the check-work get \u0026quot;yes\u0026quot;,the second demention will still run,because the next \u003c/p\u003e\u003cp\u003esolution is always lager than the last in one loop.\u003c/p\u003e\u003cp\u003eSo why don\u0027t we get it reversed?\u003c/p\u003e\u003cp\u003eWe can do it from the largest to shortest.when check-work get \u0026quot;yes\u0026quot;,simply break the second loop.\u003c/p\u003e\u003cp\u003eso we add the two optimization to our origion n^2 code.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/443/submission/22681668\" title\u003d\"Посылка 22681668 от Xeno_Amess\"\u003e22681668\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAnd I get a 0.026s on my n\u003d5000 data.\u003c/p\u003e\u003cp\u003eWhy so fast?\u003c/p\u003e\u003cp\u003eBecause I made that data n\u003dk\u003d5000.so the advanced n^2 solution will let maxa \u003d k in the begining,just the max.\u003c/p\u003e\u003cp\u003eSo the next n^2 \u003d 0^2,so 0.026.\u003c/p\u003e\u003cp\u003eWell that\u0027s not fair because not every time we are so lucky to get k similar to n.\u003c/p\u003e\u003cp\u003eSo I change k in the n\u003dk\u003d5000 data.now he is n\u003d5000;k\u003d1000 data.\u003c/p\u003e\u003cp\u003eAnd get a 0.143s.\u003c/p\u003e\u003cp\u003eNot fair again.so we use the original n^2 code to run n\u003d5000;k\u003d1000 data.\u003c/p\u003e\u003cp\u003eAnd get a 0.282s.\u003c/p\u003e\u003cp\u003eThis time fair enough.\u003c/p\u003e\u003cp\u003eBut notice that when k get more larger,the advanced code runs far more faster.\u003c/p\u003e\u003cp\u003eInteresting,right?\u003c/p\u003e\u003ch1\u003e4.\u003c/h1\u003e\u003cp\u003eSo how to get it faster?\u003c/p\u003e\u003cp\u003eI know some of you knows about suffix-array.\u003c/p\u003e\u003cp\u003eAll right,we do can use suffix-arry to deal with the strings totally in n,and use exgcd to deal with the strings who is in both n and k.\u003c/p\u003e\u003cp\u003eAnd that is O(n).Rignt,I know.\u003c/p\u003e\u003cp\u003eBut I want a solution to get my code faster now.\u003c/p\u003e\u003cp\u003eJust imagine I am a green-hand,knowing nothing about suffix-array.Not every time we have high-tech weapons to deal with problems in contest.\u003c/p\u003e\u003cp\u003eOK HERE I DO REALLY HAVE A CRAZY SOLUTION!!!\u003c/p\u003e\u003cp\u003eBad news is that it can only deal with randomed data.Targeted-and-well-designed data can hack it.But when data is randomed,it really works.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/443/submission/22683992\" title\u003d\"Посылка 22683992 от Xeno_Amess\"\u003e22683992\u003c/a\u003e\u003c/p\u003e\u003cp\u003erun n\u003d5000;k\u003d1000 data.(data is randomed)\u003c/p\u003e\u003cp\u003eget a 0.018s.\u003c/p\u003e\u003cp\u003eWhen n gets larger,the difference gets biggger.\u003c/p\u003e\u003cp\u003erun n\u003d500000;k\u003d100000 data.(data is randomed)\u003c/p\u003e\u003cp\u003e22683992 gets 0.387s\u003c/p\u003e\u003cp\u003e22681668 gets ...\u003c/p\u003e\u003cp\u003e10 mins later.\u003c/p\u003e\u003cp\u003estill running.\u003c/p\u003e\u003cp\u003e20 mins later.\u003c/p\u003e\u003cp\u003estill running.\u003c/p\u003e\u003cp\u003eAnd it has no sign like \u0026quot;Oh I will be out soon!\u0026quot;.Nope.Maybe next time I shall write something like that to show me how far it has gone.\u003c/p\u003e\u003cp\u003eAll right,what ever.\u003c/p\u003e\u003cp\u003eI\u0027d go sleep now.Hope I can report when I wake tomorrow.\u003c/p\u003e\u003cp\u003eActually it will be simpler to understand if you\u0027ve learned bucket-sort.\u003c/p\u003e\u003cp\u003eThe main idea is : if it do,then there is two same strings one close to another.And if it do,the two strings must be same.And if the two strings same,then their first three words is equal.AH,here is it.WE ONLY CHECK TWO STRINGS WITH SAME PREFIX OF LENGTH 3.\u003c/p\u003e\u003cp\u003eThe strategy is really really really crazy,and since there is lots of great HACKERS on CF,I know it does not work.\u003c/p\u003e\u003cp\u003eBut in other places,things could be different,especially in some places totally without HACK.\u003c/p\u003e\u003cp\u003eOr we can still see it as a joke.\u003c/p\u003e\u003cp\u003eBy the way,if the data is godly-perfect randomed,the solution woule be O(26^3 + n^2 / 26^3 )\u003c/p\u003e\u003cp\u003eOfcause it would\u0027t be.\u003c/p\u003e\u003cp\u003eThanks for the the force of buckets!\u003c/p\u003e\u003cp\u003eSee you next time~\u003c/p\u003e\u003c/div\u003e","tags":["rabin- karp algo","string","hashing","newbie","begineers"]}}