{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1456060568,"rating":-4,"authorHandle":"WarpSpeed","modificationTimeSeconds":1456060667,"id":43265,"title":"\u003cp\u003eHelp needed in achieving customized sorting of 2-Dimensional arrays\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI have gone through sorting of simple 2-D arrays. And there are ample ways to do this efficiently. But lately, I\u0027m facing some issues in sorting 2-D arrays with the following conditions:\u003c/p\u003e\u003cp\u003eSuppose there\u0027s a 2-D array with 2 rows and n columns. (Here n can vary from 1 upto 10^6) . All the entries are integer entries with the upper bound being 2 * 10^9 . The task here is to sort the elements in the first row in ascending order, preferably ( although, ascending/descending doesn\u0027t make much of a difference anyway ) and the elements of second row should occupy their new positions corresponding to their previous row-1 elements ( irrespective of their relations among other row-2 elements ).\u003c/p\u003e\u003cp\u003eA sample:\u003c/p\u003e\u003cp\u003eSuppose the array is as follows:\u003c/p\u003e\u003cp\u003e5 6 4 8 7 3\u003c/p\u003e\u003cp\u003e4 9 5 1 0 2\u003c/p\u003e\u003cp\u003eThen after sorting the final array should become:\u003c/p\u003e\u003cp\u003e3 4 5 6 7 8\u003c/p\u003e\u003cp\u003e2 5 4 9 0 1\u003c/p\u003e\u003cp\u003eWith the conditions of n\u0027s upper bound going as high as 10^6, trivial methods of sorting this serve useless and lead to TLE message. How can the aforementioned task be achieved in the most efficient manner?\u003c/p\u003e\u003c/div\u003e","tags":["sorting","2-dimension"]}}