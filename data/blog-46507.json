{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1470934962,"rating":68,"authorHandle":"Xellos","modificationTimeSeconds":1475021401,"id":46507,"title":"\u003cp\u003eIndexed set / array with wide functionality: treap\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cpre\u003e\u003ccode\u003econst int *\nint const *\nint * const\nint const * const\nconst int * function (const arg) const\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca href\u003d\"https://github.com/0Xellos/treapset\"\u003elink to repo\u003c/a\u003e\u003c/p\u003e\u003cp\u003eBased on the e-maxx implementation and other stuff I found online, I pieced together a powerful treap. It can be used as a set\u0026lt;\u0026gt;, array, segment tree or (within limits) all of them at once.\u003c/p\u003e\u003cp\u003eConsider a set\u0026lt;\u0026gt; represented as a sorted array of distinct elements. You can insert/remove elements just like in a set\u0026lt;\u0026gt;. You can also find the index of any element in this array, remove an element by index — or insert an element at an index, but that will probably break the sortedness and you can\u0027t use the operations which rely on it anymore (you can still insert/remove elements by index). As long as the array is sorted, you can query lower bound / upper bound of any element, given as a pair (element, index). \u003c/p\u003e\u003cp\u003eNext, you can reverse a range, add to a range and query range sums; this will work all the time, but range addition can and reversing will break the sortedness. You can implement your own queries (like min/max) or combined range updates (paint+add) like in a segment tree. Since we need lazy propagation, everything is immutable (you can work around it e.g. with erase/insert) and I decided not to bother with iterators.\u003c/p\u003e\u003cp\u003eI took special care with randomisation. It uses testlib random_t and if equal priorities are detected (at insert), they\u0027re all regenerated, but it shouldn\u0027t happen with reasonably small data — the priorities are 60-bit, which is far above the Birthday Paradox threshold for just about anything.\u003c/p\u003e\u003cp\u003eThe DS is templated over some type T, which has to be comparable and support addition / subtraction / multiplication by int (like a vector space in math).\u003c/p\u003e\u003cp\u003eIt supports the following operations, all online in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/28/a3/28a3e1ebf443830c2b8d35cc88c49444739ab741.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e being the current number of elements, ofc):\u003c/p\u003e \u003ctable\u003e   \u003ctbody\u003e     \u003ctr\u003e       \u003ctd\u003e\u003cstrong\u003efunction\u003c/strong\u003e \u003c/td\u003e       \u003ctd\u003e\u003cstrong\u003eaction\u003c/strong\u003e \u003c/td\u003e       \u003ctd\u003e\u003cstrong\u003ereturns\u003c/strong\u003e \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003einsert(element) \u003c/td\u003e       \u003ctd\u003einserts element into a set \u003c/td\u003e       \u003ctd\u003ebool(was it inserted?) \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003einsert_pos(index, element) \u003c/td\u003e       \u003ctd\u003einserts element at index \u003c/td\u003e       \u003ctd\u003evoid \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eerase(element) \u003c/td\u003e       \u003ctd\u003eremoves element from a set \u003c/td\u003e       \u003ctd\u003ebool(was it removed?) \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eerase_pos(index) \u003c/td\u003e       \u003ctd\u003eremoves element at index \u003c/td\u003e       \u003ctd\u003evoid \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eget_index(element) \u003c/td\u003e       \u003ctd\u003efinds the element\u0027s index, size() if non-existent \u003c/td\u003e       \u003ctd\u003eint in [0..size()] \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e[index] \u003c/td\u003e       \u003ctd\u003efinds the element at index \u003c/td\u003e       \u003ctd\u003eT (not T\u0026amp;) \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003elower_bound(element) \u003c/td\u003e       \u003ctd\u003efinds the lower_bound() of that element, with index \u003c/td\u003e       \u003ctd\u003epair\u0026lt;T,int\u0026gt; \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eupper_bound(element) \u003c/td\u003e       \u003ctd\u003ethe same with upper_bound() \u003c/td\u003e       \u003ctd\u003epair\u0026lt;T,int\u0026gt; \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eshift(left,right,element) \u003c/td\u003e       \u003ctd\u003eadd element to everything in the range [left,right] \u003c/td\u003e       \u003ctd\u003evoid \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003ereverse(left,right) \u003c/td\u003e       \u003ctd\u003ereverse the range [left,right] \u003c/td\u003e       \u003ctd\u003evoid \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003esum(left,right) \u003c/td\u003e       \u003ctd\u003efind the sum of the range [left,right] \u003c/td\u003e       \u003ctd\u003eT \u003c/td\u003e     \u003c/tr\u003e   \u003c/tbody\u003e \u003c/table\u003e\u003cp\u003eAlso, there\u0027s the usual \u003ccode\u003eempty()\u003c/code\u003e, \u003ccode\u003esize()\u003c/code\u003e, \u003ccode\u003eis_sorted()\u003c/code\u003e (returns true if the sortedness hasn\u0027t been broken yet) and \u003ccode\u003esrand()\u003c/code\u003e, which lets you choose your seed if you don\u0027t want the testlib default.\u003c/p\u003e\u003cp\u003eI compared it with STL set\u0026lt;\u0026gt; on a million insert/erase/lower_bound operations; the treapset is ~3-4 times slower (which makes sense, since the structure supports many more operations). I also tested it on a million insert_pos/get_index/shift/reverse/sum operations; it took ~4 seconds locally. It seems to work...\u003c/p\u003e\u003c/div\u003e","tags":["data structure","treap"]}}