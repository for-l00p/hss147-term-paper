{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1481191493,"rating":5,"authorHandle":"svineet","modificationTimeSeconds":1481191493,"id":48919,"title":"\u003cp\u003eHamiltonian path in tournament graphs, getting WA\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eProblem: \u003ca href\u003d\"http://opc.iarcs.org.in/index.php/problems/RANKFRAUD\"\u003eRANKFRAUD\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe problem can be framed as a graph problem, to find hamiltonian path in the graph. As the graph is a tournament graph, the path can be found in polynomial time.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://paste.fedoraproject.org/501531/48119100/\"\u003eMy Solution\u003c/a\u003e\u003c/p\u003e\u003cp\u003eMy solution uses the algorithm described \u003ca href\u003d\"http://www.iarcs.org.in/inoi/contests/apr2005/Advanced-2-solution.php\"\u003ehere\u003c/a\u003e, but it gives me a WA for four cases. I am not able to figure out why my implementation is wrong.\u003c/p\u003e\u003cp\u003eWhen I inserted the \u003ccode\u003eassert\u003c/code\u003es I got a SIGABRT, meaning the portion with the \u003ccode\u003egot\u003c/code\u003e variable is failing somehow. Shouldn\u0027t there always be a vertex \u003ccode\u003ej\u003c/code\u003e such that path[j]-\u0026gt;i and i-\u0026gt;path[j+1]?\u003c/p\u003e\u003cp\u003eLet\u0027s assume there is not such a vertex and that path[path.size()-1] does not connect to \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003ei\u003c/code\u003e does not connect to path[0]. If it does the other two \u003ccode\u003eif\u003c/code\u003es should handle that in the code. Then we have a case where path[0] defeats i and i defeats path[path.size()-1]. If we assumed that no element \u003ccode\u003ej\u003c/code\u003e in path exists such that path[j] defeats i and i defeats path[j+1], then for all j the case must be either that path[j] and path[j+1] both are defeated by i OR path[j] and path[j+1] both defeat i. In the first cases, all indices 1..path.size()-1 must get defeated by i, but we know that path[0] defeats i so we have found a place to insert i. A similar argument goes the other way for the last element in path.\u003c/p\u003e\u003cp\u003eWhat is wrong with my reasoning?\u003c/p\u003e\u003c/div\u003e","tags":[]}}