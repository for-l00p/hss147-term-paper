{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1456869814,"rating":65,"authorHandle":"Edvard","modificationTimeSeconds":1456960477,"id":43493,"title":"\u003cp\u003eРазбор задач Educational Codeforces Round 9\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/632/problem/A\" title\u003d\"Educational Codeforces Round 9\"\u003e632A - Grandma Laura and Apples\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/unprost\" title\u003d\"Expert unprost\"\u003eunprost\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eConsider the process from the end. The last buyer will always buy a half of an apple and get a half for free (so the last string always is \u003cem\u003ehalfplus\u003c/em\u003e). After that each buyer increases the number of apples twice and also maybe by one. So we simply have the binary presentation of the number of apples from the end. To calculate the answer we should simply restore that value from the end and also calculate the total money grandma should have.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/m02Ffev6\"\u003eС++ solution\u003c/a\u003e by me.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/CD5CJ7v0\"\u003eС++ solution\u003c/a\u003e by \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/unprost\" title\u003d\"Expert unprost\"\u003eunprost\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/632/problem/B\" title\u003d\"Educational Codeforces Round 9\"\u003e632B - Alice, Bob, Two Teams\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Lewin Gan \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/lewin\" title\u003d\"International master lewin\"\u003elewin\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s calculate the prefix sums for all numbers (and store it in array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e1\u003c/span\u003e) and for numbers with letter B (and store it in array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e2\u003c/span\u003e). Now we can find the sum of all numbers in any segment in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e time and the sum of numbers with letter B.\u003c/p\u003e\u003cp\u003eLet\u0027s iterate over prefix or suffix to flip and calculate the sum in that case by formulas: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e1, 0, \u003ci\u003en\u003c/i\u003e - 1) + \u003ci\u003esum\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e2, 0, \u003ci\u003ei\u003c/i\u003e) - 2·\u003ci\u003esum\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e1, 0, \u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e for prefixes and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e1, 0, \u003ci\u003en\u003c/i\u003e - 1) + \u003ci\u003esum\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e2, \u003ci\u003ei\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e - 1) - 2·\u003ci\u003esum\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e1, \u003ci\u003ei\u003c/i\u003e, \u003ci\u003en\u003c/i\u003e - 1)\u003c/span\u003e for suffixes.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/3WQTWaxD\"\u003eC++ solution\u003c/a\u003e by me.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/ZsjnmDhq\"\u003ePython solution\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/lewin\" title\u003d\"International master lewin\"\u003elewin\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/632/problem/C\" title\u003d\"Educational Codeforces Round 9\"\u003e632C - The Smallest String Concatenation\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Lewin Gan \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/lewin\" title\u003d\"International master lewin\"\u003elewin\u003c/a\u003e. The proof of the transitivity also belongs to him.\u003c/p\u003e\u003cp\u003eLet\u0027s sort all the strings by comparator \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e + \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and concatenate them. Let\u0027s prove that it\u0027s the optimal answer. Let that operator be transitive (so if \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/d9/7cd97becf66d45808841e0750e11d642f797ae0a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e). Consider an optimal answer with two strings in reverse order by that operator. Because of the transitivity of operator we can assume that pair of strings are neighbouring. But then we can swap them and get the better answer.\u003c/p\u003e\u003cp\u003eLet\u0027s prove the transitivity of operator. Consider the strings as the \u003cspan class\u003d\"tex-span\"\u003e26\u003c/span\u003e-base numbers. Then the relation \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e + \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e equivalent to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f5/cc/f5cc845fb426419942c24106174136f0f8db7565.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. The last is simply the relation between real numbers. So we proved the transitivity of the relation \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e + \u003ci\u003ea\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/48WhrGLn\"\u003eC++ solution\u003c/a\u003e by me.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/b7Gc34ez\"\u003ePython solution\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/lewin\" title\u003d\"International master lewin\"\u003elewin\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enLlogn\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e is the maximal string length.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/632/problem/D\" title\u003d\"Educational Codeforces Round 9\"\u003e632D - Longest Subsequence\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Denis Bezrukov \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/pitfall\" title\u003d\"Candidate Master pitfall\"\u003epitfall\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the number of occurences of the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in the given array (easy to see that we can ignore the numbers greater than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e). Let\u0027s iterate over \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/3e/cb/3ecbf6bedf97fb28aef21a86b2f6c24caa1219cf.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ek\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e·\u003ci\u003ek\u003c/i\u003e ≤ \u003ci\u003em\u003c/i\u003e\u003c/span\u003e and increase the value in the position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e·\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in some array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e by the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. So the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e equals the number of numbers in the given array which divide \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e. Let\u0027s find the minimal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e with the maximum value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003el\u003c/i\u003e ≤ \u003ci\u003em\u003c/i\u003e\u003c/span\u003e). Easy to see that the answer to the problem is the numbers which divide \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s calculate the complexity of the solution. The number of the pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ek\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e we can bound with the value \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/0a/290a862860ea89cc76a1cdda7099bfa29468205b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/v5tayDQq\"\u003eC++ solution\u003c/a\u003e by me.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/aZQ2c1xR\"\u003eJava solution\u003c/a\u003e by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/pitfall\" title\u003d\"Candidate Master pitfall\"\u003epitfall\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003emlogm\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/632/problem/E\" title\u003d\"Educational Codeforces Round 9\"\u003e632E - Thief in a Shop\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Alexey Chesnokov \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/CleRIC\" title\u003d\"Candidate Master CleRIC\"\u003eCleRIC\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 2\u003c/span\u003e, then it is the standard problem which can be solved by FFT (Fast Fourier Transform). The solution is the following: consider the polynomial which the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th coefficient equals to one if and only if there is the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in the given array. Let\u0027s multiply that polynomial by itself and find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e for which the coefficient in square not equals to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. Those values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e will be in the answer. Easy to modificate the solution for the arbitrary \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. We should simply calculate the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-th degree of the polynomial. The complexity will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eWlogWlogk\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e\u003c/span\u003e is the maximal sum.\u003c/p\u003e\u003cp\u003eWe can improve that solution. Instead of calculating the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-th degree of the polynomial we can calculate the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-th degree of the DFT of the polynomial. The only problem is the large values of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-th degrees. We can\u0027t use FFT with complex numbers, because of the precision problems. But we can do that with NTT (Number-theoretic transform). But that solution also has a problem. It can happen that some coefficients became equals to zero modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, but actually they are not equal to zero. To get round that problem we can choose two-three random modules and get the complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eW\u003c/i\u003e(\u003ci\u003elogW\u003c/i\u003e + \u003ci\u003elogk\u003c/i\u003e))\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThe main author solution has the complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eWlogWlogk\u003c/i\u003e)\u003c/span\u003e (FFT with complex numbers), the second solution has the same complexity, but uses NTT and the third solution has the improved complexity (but it was already hacked by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/halyavin\" title\u003d\"Grandmaster halyavin\"\u003ehalyavin\u003c/a\u003e).\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/vdw5DWLC\"\u003eС++ solution, complex FFT\u003c/a\u003e by me.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/z6b7wu5b\"\u003eС++ solution, NTT\u003c/a\u003e by me.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/t6nguiHa\"\u003eС++ solution, improved NTT\u003c/a\u003e by me.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/Wu3RY6UD\"\u003eС++ solution\u003c/a\u003e by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/CleRIC\" title\u003d\"Candidate Master CleRIC\"\u003eCleRIC\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eP.S.: To get faster solution you should each time multiply the polynomials of the required degree, but not of the degree \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e20\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eWlogWlogk\u003c/i\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eW\u003c/i\u003e(\u003ci\u003elogW\u003c/i\u003e + \u003ci\u003elogk\u003c/i\u003e))\u003c/span\u003e, depending the bravery of the coder :-)\u003c/p\u003e\u003cp\u003eUPD: It turns out that the first approach also has complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eW\u003c/i\u003e(\u003ci\u003elogW\u003c/i\u003e + \u003ci\u003elogk\u003c/i\u003e))\u003c/span\u003e. See below the comment of \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/halyavin\" title\u003d\"Grandmaster halyavin\"\u003ehalyavin\u003c/a\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/632/problem/F\" title\u003d\"Educational Codeforces Round 9\"\u003e632F - Magic Matrix\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Lewin Gan \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/lewin\" title\u003d\"International master lewin\"\u003elewin\u003c/a\u003e. The solution and proof also belongs to him.\u003c/p\u003e\u003cp\u003eConsider the undirected complete graph with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e nodes, with an edge between nodes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e with cost \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e denote the minimum possible value of the max edge of a path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. We know that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e ≥ \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e by definition.\u003c/p\u003e\u003cp\u003eIf the matrix is magic, we can choose arbitrary \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e by repeating invocations of the inequality given. Also, you can show that if this inequality is satisfied, then the matrix is magic (by choosing an \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e \u003d 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e arbitrary).\u003c/p\u003e\u003cp\u003eSo, this shows that the matrix is magic if and only if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Thus, combining with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e ≥ \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWe need a fast way to compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for all pairs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. This can be computed as the MST, as the path in the MST minimizes the max edge between all pairs of nodes. So, the algorithm works as follows. First, find the MST on the complete graph. Then, the matrix is magic if and only if the max edge on the path between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e in the MST is exactly equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Also you shouldn\u0027t forget to check symmetry of the matrix and diagonal for zeros.\u003c/p\u003e\u003cp\u003eP.S.: Unfortunately we couldn\u0027t increase the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e in this problem: the tests already had the size about 67MB and they couldn\u0027t be given with generator. So most of the users who solved this problem uses \u003cem\u003ebitset\u003c/em\u003e-s. The complexity of their solution is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1e/3e/1e3eb74fcbc88adce806264c804a0600e019f358.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d 32\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d 64\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/rh96ipzn\"\u003eC++ solution, binary lifts\u003c/a\u003e by me.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/AwcXFR4y\"\u003eJava solution\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/lewin\" title\u003d\"International master lewin\"\u003elewin\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003elogn\u003c/i\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["educational round 9","editorial"]}}