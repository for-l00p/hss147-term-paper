{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1461391756,"rating":3,"authorHandle":"challengersy","modificationTimeSeconds":1461391868,"id":44507,"title":"\u003cp\u003eUva 10164\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003edescription: giving 2N-1(N\u003d2^k, k\u003d1,2,3,4,5,6,7,8,9,10) numbers, each number is a positive integer not bigger than 1000. can you choose N of them, and add them all to a integer S, to make that S/N is a integer? this is the link:\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://uva.onlinejudge.org/index.php?option\u003donlinejudge\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d1105\"\u003eproblem source\u003c/a\u003e\u003c/p\u003e\u003cp\u003ei tried to solve this problem but i couldn\u0027t i saw a solution using backtracking. is it possible to use backrtacking here considering N\u003d1000?? and there was another alorithm on this link \u003ca href\u003d\"http://conclave.cs.tsukuba.ac.jp/tpc/wiki/index.php?Solutions%2FUva%2F10164\"\u003ealgorithm source\u003c/a\u003e i understand: make a huge loop to get the answer randomly choose n differnt indices and get the elemnts check the sum? why didn\u0027t get TLE?? the loopis(100000000)*(n\u003d1000)???\u003c/p\u003e\u003c/div\u003e","tags":["dynamic programming","backtracking"]}}