{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1422302407,"rating":1,"authorHandle":"charany1","modificationTimeSeconds":1422308638,"id":16037,"title":"\u003cp\u003eDoubt:Subset sum DP solution using 1D array.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi there, I came across this dp solution for subset sum problem which uses \u003cstrong\u003eO(sum)\u003c/strong\u003e space rather than \u003cstrong\u003eO(n*sum)\u003c/strong\u003e. The array is filled in a reverse manner i.e. starting from sum.\u003c/p\u003e\u003cp\u003eBut I am not able to understand it properly,I know what is happening but not able to make clear sense out of it. Can someone please explain, how its working.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ebool is_subset_sum(vector\u0026lt;int\u0026gt;\u0026amp; v,int sum)\n{\nint n\u003dv.size();\nvector\u0026lt;int\u0026gt;dp(sum+1,0);\ndp[0]\u003d1; //sum \u003d0 is always attainable.\n\nfor(int i\u003d0;i\u0026lt;n;i++)for(int j\u003dsum;j\u0026gt;\u003dv[i];j--)\n     dp[j]|\u003ddp[j-v[i]];\n\nreturn dp[sum];\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["subset sum","dp"]}}