{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1497017773,"rating":0,"authorHandle":"ZzZZzzzZZZZZzzzzzzzz","modificationTimeSeconds":1508238929,"id":52491,"title":"\u003cp\u003eSegment tree: Range add\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e/*       \n  The problem: Given array of N elements, there are Q queries of following types:\n    1 l r x   add x to segment from l to r\n    2 l r print sum on a[l .. r]\n    3 l r print maximum on a[l .. r]\n*/\n\n#include \u0026lt;bits/stdc++.h\u0026gt;   \n\n# define F first\n# define S second\n# define mp make_pair                                                                                              \n# define pii pair\u0026lt;int,int\u0026gt;\n\n# define long long long\n# define pb push_back\n# define sz(a) (int)(a.size())\n\n# define y1     tipa_y1\n# define left   tipa_left\n# define right  tipa_right\n\nconst int Mod \u003d (int)1e9 + 7;\nconst int MX \u003d 1073741822;\nconst long MXLL \u003d 4611686018427387903;\nconst int Sz \u003d 1110111;\n\nusing namespace std;\n\ninline void Read_rap () {\n  ios_base :: sync_with_stdio(0);\n  cin.tie(0);\n}\nconst int N \u003d 1e5 + 1;\n         \nint a[N];\n\nint n, q;\n    \nstruct node {\n  long sum, mx;\n  long add; \n} t[4 * N];\n\ninline void recalc (int v) {\n  t[v].sum \u003d t[2*v].sum + t[2*v + 1].sum;\n  t[v].mx \u003d max (t[2*v].mx, t[2*v + 1].mx);\n}             \n         \nvoid build (int v, int tl, int tr) {\n  if (tl \u003d\u003d tr) {  \n    t[v].sum \u003d t[v].mx \u003d a[tl];\n    return;\n  }\n  int tmid \u003d (tl+tr) \u0026gt;\u0026gt; 1;\n  build (2*v, tl, tmid);\n  build (2*v + 1, tmid + 1, tr);\n\n  recalc (v);\n}     \n\ninline void push (int v, int tl, int tr) {\n  if (t[v].add) {\n    t[v].sum +\u003d t[v].add * (tr - tl + 1);\n    t[v].mx +\u003d t[v].add;\n    \n    if (tl !\u003d tr) {\n      t[2*v].add +\u003d t[v].add; \n      t[2*v + 1].add +\u003d t[v].add;\n    }\n    t[v].add \u003d 0;\n  }              \n}\n\nvoid update (int v, int tl, int tr, int l, int r, int x) {\n  push (v, tl, tr);\n  if (tr \u0026lt; l || tl \u0026gt; r) return;\n  \n  if (l \u0026lt;\u003d tl \u0026amp;\u0026amp; tr \u0026lt;\u003d r) {\n    t[v].add +\u003d x;\n    push (v, tl, tr);\n    return;\n  }\n  int tmid \u003d (tl+tr) \u0026gt;\u0026gt; 1;\n  update (2*v, tl, tmid, l, r, x);\n  update (2*v + 1, tmid + 1, tr, l, r, x);\n                          \n  recalc (v);\n}          \n\nlong get_sum (int v, int tl, int tr, int l, int r) {\n  push (v, tl, tr);\n  if (tr \u0026lt; l || tl \u0026gt; r) return 0;\n  if (l \u0026lt;\u003d tl \u0026amp;\u0026amp; tr \u0026lt;\u003d r) return t[v].sum;\n  \n  int tmid \u003d (tl+tr) \u0026gt;\u0026gt; 1;\n  return get_sum (2*v, tl, tmid, l, r) + get_sum (2*v + 1, tmid + 1, tr, l, r);\n}\nlong get_max (int v, int tl, int tr, int l, int r) {\n  push (v, tl, tr);\n  if (tr \u0026lt; l || tl \u0026gt; r) return 0;\n  if (l \u0026lt;\u003d tl \u0026amp;\u0026amp; tr \u0026lt;\u003d r) return t[v].mx;\n  \n  int tmid \u003d (tl+tr) \u0026gt;\u0026gt; 1;\n  return max (get_max (2*v, tl, tmid, l, r), get_max (2*v + 1, tmid + 1, tr, l, r));\n}\n\nint main()\n{\n  Read_rap ();              \n  cin \u0026gt;\u0026gt; n;\n  for (int i \u003d 1;i \u0026lt;\u003d n;i ++) cin \u0026gt;\u0026gt; a[i];\n\n  build (1, 1, n);\n\n  cin \u0026gt;\u0026gt; q;\n  while (q --) {  \n    int tp, l, r; cin \u0026gt;\u0026gt; tp \u0026gt;\u0026gt; l \u0026gt;\u0026gt; r;\n\n    if (tp \u003d\u003d 1) {\n      int x;  cin \u0026gt;\u0026gt; x;\n      update (1, 1, n, l, r, x);\n    }\n    if (tp \u003d\u003d 2)\n      cout \u0026lt;\u0026lt; get_sum (1, 1, n, l, r) \u0026lt;\u0026lt; endl;\n    if (tp \u003d\u003d 3)\n      cout \u0026lt;\u0026lt; get_max (1, 1, n, l, r) \u0026lt;\u0026lt; endl;\n  }\n\n\n\n  return 0;\n}\n\n\n\n\n\n\n\n\n\n// Coded by Z...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}