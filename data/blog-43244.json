{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1456007920,"rating":-16,"authorHandle":"muxecoid","modificationTimeSeconds":1456008019,"id":43244,"title":"\u003cp\u003eAPI asymmetry between std::map::upper_bound and std::map::lower_bound\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eJust something curious that I just noticed during practice.\u003c/p\u003e\u003cp\u003estd::map::upper_bound returns iterator to the \u003cstrong\u003efirst\u003c/strong\u003e element with key strictly \u003cstrong\u003egreater\u003c/strong\u003e, than argument.\u003c/p\u003e\u003cp\u003eBy intuition of symmetry one could expect std::map::lower_bound to return iterator to the \u003cstrong\u003elast\u003c/strong\u003e element with key strictly \u003cstrong\u003eless\u003c/strong\u003e, than argument. In fact it returns iterator exactly one after it.\u003c/p\u003e\u003cp\u003eWhat is the reason for this asymmetry? This is because map::end() points at one position after the last element, if we search for element greater than largest key in map upper_bound has a reasonable iterator to return map::end. map::begin() points at first element. To provide API symmetry lower_bound would need to return map::prebegin() which does not exist in standard. This way asymmetry between begin() and end() leads to asymmetry between lower_bound() and upper_bound().\u003c/p\u003e\u003cp\u003eWhat other cases of asymmetry are there in STL?\u003c/p\u003e\u003c/div\u003e","tags":["c++","stl"]}}