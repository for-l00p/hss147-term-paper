{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1508546062,"rating":3,"authorHandle":"CodingKnight","modificationTimeSeconds":1508601418,"id":55311,"title":"\u003cp\u003eComputing huge Binomial coefficients without overflow and without using the arithmetic modulus operator \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThe following are C++11 classes \u003ccode\u003ehuge_unsigned\u003c/code\u003e and \u003ccode\u003ebinomial_coefficient\u003c/code\u003e for computing huge Binomial coefficients C( n, k ), where n and k are positive integers. \u003c/p\u003e\u003cp\u003eThe class implements the iterative multiplicative formula:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef binomialCoefficient(n, k):\n    if k \u0026lt; 0 or k \u0026gt; n:\n        return 0\n    if k \u003d\u003d 0 or k \u003d\u003d n:\n        return 1\n    k \u003d min(k, n - k) # take advantage of symmetry\n    c \u003d 1\n    for i in range(k):\n        c \u003d c * (n - i) / (i + 1)\n    return c\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ereported in \u003ca href\u003d\"https://en.wikipedia.org/wiki/Binomial_coefficient\"\u003eBinomial coefficient\u003c/a\u003e without \u003cstrong\u003eoverflow\u003c/strong\u003e, and without using the \u003cstrong\u003emodulus\u003c/strong\u003e arithmetic operator. Items of the STL base class \u003ccode\u003evector\u0026lt; uint32_t \u0026gt;\u003c/code\u003e are used to store the successive digits of a base-4,294,967,296 representation of C( n, k ). C( 32000, 16000 ) has been computed using 1000 huge_unsigned digits in 1.873 sec. on Intel Core i3 processor with 3 GB RAM running at 2.4 GHz. Comments and votes (like or do not like) are thankfully and gratefully appreciated. \u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n\nusing namespace std;\n\nstruct huge_unsigned: public vector\u0026lt; uint32_t \u0026gt;\n{\n    uint64_t carry;\n\n    huge_unsigned() : carry( 0 ) {}\n\n    huge_unsigned\u0026amp; operator *\u003d ( uint32_t i )\n    {\n        register uint64_t p, q, x \u003d i; \n\n        for( register size_t k \u003d 0, l \u003d size(); k \u0026lt; l; at( k++ ) \u003d q, carry \u003d ( q \u0026gt;\u0026gt; 32 ) )\n        {\n            p \u003d at( k ), q \u003d p * x;\n\n            if ( carry !\u003d 0 )\n                q +\u003d carry;\n        }\n\n         if ( carry !\u003d 0 )\n            push_back( carry ), carry \u003d 0;\n\n        return *this;\n    }\n\n    huge_unsigned\u0026amp; operator /\u003d ( uint32_t j )\n    {\n        register uint64_t p, q, x \u003d j;\n\n        for ( register size_t k \u003d size(); k \u0026gt; 0; at( k ) \u003d q, carry \u003d p - q * x )\n            p \u003d ( carry \u0026lt;\u0026lt; 32 ) | at( --k ), q \u003d p / x;\n\n        while( size() \u0026gt; 0 \u0026amp;\u0026amp; back() \u003d\u003d 0 )\n            pop_back();\n\n        return *this;\n    }\n\n    void write()\n    {\n        for( register size_t k \u003d size() - 1; k \u0026gt; 0; k-- )\n            printf( \u0026quot;%u \u0026quot;, at( k ) );\n\n        printf( \u0026quot;%u\u0026quot;, at( 0 ) );\n    }\n};\n\nstruct binomial_coefficient: public huge_unsigned\n{\n    binomial_coefficient( uint32_t n, uint32_t k )\n    {\n        if ( k \u0026gt; n )\n        {\n            push_back( 0 ); return;\n        }\n\n        register uint32_t p \u003d n - k, q \u003d min( k, p );\n\n        if ( q \u003d\u003d 0 )\n        {\n            push_back( 1 ); return;\n        }\n\n        push_back( n-- );\n\n        for( register uint32_t i \u003d 2; i \u0026lt;\u003d q; *this /\u003d i++ )\n            *this *\u003d n--;\n    }\n};\n\nint main() // A sample test program\n{\n    uint32_t n, k; scanf( \u0026quot;%u %u\u0026quot;, \u0026amp;n, \u0026amp;k );\n\n    clock_t start_time \u003d clock();\n\n    binomial_coefficient c( n, k );\n\n    clock_t end_time \u003d clock();\n\n    double elapsed_time \u003d ( end_time - start_time ) * 1000.0 / CLOCKS_PER_SEC;\n\n    printf( \u0026quot;Computed c( %u, %u ) \u003d \u0026quot;, n, k ), c.write(), putchar( \u0027\\n\u0027 ),\n    printf( \u0026quot;Using %u huge unsigned digits(s)\\n\u0026quot;, c.size() ),\n    printf( \u0026quot;Elapsed time \u003d %f msec.\\n\u0026quot;, elapsed_time );\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":[]}}