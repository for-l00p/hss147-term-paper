{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1517938039,"rating":2,"authorHandle":"HOMIARA_RUBY","modificationTimeSeconds":1517938039,"id":57591,"title":"\u003cp\u003eAbout Java that I want to know\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI\u0027m learning OOP using Java. So you may find my question \u0027like dumb\u0027. I have followed Java coders code like \u003ca href\u003d\"https://ideone.com/Ejwqu5\"\u003ethis\u003c/a\u003e not \u003ca href\u003d\"https://ideone.com/eWnQtU\"\u003ethis\u003c/a\u003e. why? I thought Java has garbage collection system(not like destructor in C++) which is called randomly(As far I know). So creating lot of objects will result MLE(if no garbage collection is called during execution time and if an object take N space and we create M objects then it should take N*M space which may result MLE). So in Codeforces \u0027custom invocation\u0027 I tried to do experiment and see what happens. I did the same experiment in \u0027Ideone\u0027. I found almost no difference (i thought M times larger for M objects) in terms of memory. Why?\u003c/p\u003e\u003cp\u003eI have asked the question here because Codeforces community is more responsive.\u003c/p\u003e\u003c/div\u003e","tags":[]}}