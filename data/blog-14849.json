{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1416826847,"rating":30,"authorHandle":"HolkinPV","modificationTimeSeconds":1416836395,"id":14849,"title":"\u003cp\u003eCodeforces Round #279 (Div. 2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/490/problem/A\" title\u003d\"Codeforces Round 279 (Div. 2)\"\u003e490A - Team Olympiad\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe teams could be formed using greedy algorithm. We can choose any three children with different skills who are not participants of any team yet and form a new team using them. After some time we could not form any team, so the answer to the problem is minimum of the number of ones, twos and threes in given array. We can get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e solution if we add children with different skills into three different arrays. Also the problem could be solved in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e — every iteration find new three children for new team.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/490/problem/B\" title\u003d\"Codeforces Round 279 (Div. 2)\"\u003e490B - Queue\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThis problem can be solved constructively. Find the first student — it is a student with such number which can be found among \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and could not be found among \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (because he doesn’t stand behind for anybody). Find the second student — it is a student standing behind the first, number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of the first student equals \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, so his number is a number in pair \u003cspan class\u003d\"tex-span\"\u003e[0, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAfter that we will find numbers of all other students beginning from the third. It can be easily done using penultimate found number. The number of the next student is a number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in such pair where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e equals to number of penultimate found student number (that is a number in pair \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003c/sub\u003e[\u003ci\u003ei\u003c/i\u003e - 2], \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e). Look at the sample to understand the solution better.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/490/problem/C\" title\u003d\"Codeforces Round 279 (Div. 2)\"\u003e490C - Hacking Cypher\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eAt first, let’s check all prefixes of specified number — do they have remainder 0 when divided by the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e? It can be done with asymptotic behavior \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e -length of specified number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e. If we have remainder of division by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e of prefix, which ends in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e, we can count remainder in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e + 1\u003c/span\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erema\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e + 1] \u003d (\u003ci\u003erema\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e] * 10 + \u003ci\u003eC\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e + 1])\u003c/span\u003e % \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen we need to check suffixes.If we have remainder of division by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e of suffix, which begin in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e, we can count remainder of position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e - 1\u003c/span\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eremb\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e - 1] \u003d (\u003ci\u003eC\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e - 1] * \u003ci\u003eP\u003c/i\u003e + \u003ci\u003eremb\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e])\u003c/span\u003e % \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e — it is \u003cspan class\u003d\"tex-span\"\u003e10\u003c/span\u003e^\u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eL\u003c/i\u003e - 1)\u003c/span\u003e module \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e — length of suffix (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e we can count parallel).\u003c/p\u003e\u003cp\u003eNow let’s check all positions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e — can we cut specified number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e in this position. We can do it if next four conditions performed: prefix of number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e, which ends in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e is divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e; suffix of number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e, which begin in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e + 1\u003c/span\u003e is divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e; length of prefix and suffix more than \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e; first digit of suffix is different from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. If all four conditions performed we found answer. If we did not find any such positions, than print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eNO\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/490/problem/D\" title\u003d\"Codeforces Round 279 (Div. 2)\"\u003e490D - Chocolate\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe can change the numbers by dividing their by two or by dividing their by three and multiply two. Firstly remove all 2 and 3 from factorization of chocolate and determine equals their square or not. If their squares are not equals answer doesn’t exists. Otherwise calculate of difference between number of three in factorization, we should remove this amount of threes from the some chocolate, it depends from the sign, and recalculate difference between number of two in factorization and do the same.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/490/problem/E\" title\u003d\"Codeforces Round 279 (Div. 2)\"\u003e490E - Restoring Increasing Sequence\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eLet’s iterate on specified numbers and try to make from current number minimal possible, which value more than value of previous number. Let’s current number is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e, previous number is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprev\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eIf length of number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e less than length of number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprev\u003c/i\u003e\u003c/span\u003e — let’s print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eNO\u003c/i\u003e\u003c/span\u003e, this problem has not solution.\u003c/p\u003e\u003cp\u003eIf length of number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e more than length of number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprev\u003c/i\u003e\u003c/span\u003e — replace all signs \u003cspan class\u003d\"tex-span\"\u003e?\u003c/span\u003e in number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e to digit \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, except case, when sign \u003cspan class\u003d\"tex-span\"\u003e?\u003c/span\u003e in first position — replace him on digit \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, because numbers in answer must be without leading zeroes.\u003c/p\u003e\u003cp\u003eAnother case when lengths of numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e are equal. Let’s iterate on positions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e, in which prefix number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e more than prefix of number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprev\u003c/i\u003e\u003c/span\u003e. Now we need to try for this position make minimal possible number, which more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprev\u003c/i\u003e\u003c/span\u003e. In all positions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, which less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e, replace all \u003cspan class\u003d\"tex-span\"\u003e?\u003c/span\u003e on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprev\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e. In all positions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, which more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e, replace all \u003cspan class\u003d\"tex-span\"\u003e?\u003c/span\u003e on digit \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e] \u003d  \u003d ?\u003c/span\u003e than make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e] \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003eprev\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e] + 1, 9)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf received number less or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprev\u003c/i\u003e\u003c/span\u003e — this position is bad. From all good positions choose minimal number, received with operations above and assign him number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/span\u003e and will continue iteration. If count of such positions is \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e we need to print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eNO\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/490/problem/F\" title\u003d\"Codeforces Round 279 (Div. 2)\"\u003e490F - Treeland Tour\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem is generalization of finding maximal increasing subsequence in array, so it probably can be solved using dynamic programming. We will calс dynamic \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)]\u003c/span\u003e, the state is directed edge \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e in tree. Value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)]\u003c/span\u003e means the maximum number of vertices where the band will have concerts on some simple path ended in vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e going through vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e. Also the concert in vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e must be certainly.\u003c/p\u003e\u003cp\u003eTo calc \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e we should consider all such edges \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e that there is simple path started in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, going through \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and ended in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. These edges can be found using dfs from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e which is not going through vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. All edges used by dfs should be reoriented. So if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e[\u003ci\u003ey\u003c/i\u003e] \u0026lt; \u003ci\u003er\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e]\u003c/span\u003e then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)] \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ed\u003c/i\u003e[(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)], \u003ci\u003ed\u003c/i\u003e[(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)] + 1)\u003c/span\u003e. The solution needs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e time and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e memory. The memory could be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e if you get indexes of directed edges without two-dimensional array.\u003c/p\u003e\u003c/div\u003e","tags":["codeforces","279","tutorial"]}}