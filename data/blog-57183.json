{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1516224782,"rating":9,"authorHandle":"brdy","modificationTimeSeconds":1516231872,"id":57183,"title":"\u003cp\u003eWhen does std::stable_sort outperform std::sort?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello,\u003c/p\u003e\u003cp\u003eI was doing this \u003ca href\u003d\"http://www.usaco.org/index.php?page\u003dviewproblem2\u0026amp;cpid\u003d623\"\u003eproblem\u003c/a\u003e and was getting TLE on the last two test cases.\u003c/p\u003e\u003cp\u003eOn a whim, I decided to replace my sort() functions with stable_sort(), and the solution passed.\u003c/p\u003e\u003cp\u003eAccording to this \u003ca href\u003d\"https://stackoverflow.com/questions/810951/how-big-is-the-performance-gap-between-stdsort-and-stdstable-sort-in-practic\"\u003ebenchmark\u003c/a\u003e, stable_sort uses less iterations overall in g++ 5.3.0 and clang++ 3.7.0 than sort on average.\u003c/p\u003e\u003cp\u003eIn the problem I sorted a vector\u0026lt;pair\u0026lt;int, pair\u0026lt;int,int\u0026gt;\u0026gt;\u0026gt;, which would take up to three comparisons each time. I considered this a possibility for the lower constant factor of stable_sort for this problem, but was not able to replicate the results.\u003c/p\u003e\u003cp\u003eYou can try to submit my \u003ca href\u003d\"https://pastebin.com/37m5cVGX\"\u003esolution\u003c/a\u003e and it should AC. But if you replace \u0026quot;stable_sort\u0026quot; with \u0026quot;sort\u0026quot; it will TLE.\u003c/p\u003e\u003cp\u003eDoes anyone know which types of cases stable_sort can outperform sort?\u003c/p\u003e\u003cp\u003eEdit: Programs are compiled with gcc/g++ 4.8.2 using the \u0026quot;-O2\u0026quot; optimization flag and \u0026quot;-lm\u0026quot; to access the math library, and also \u0026quot;-std\u003dc++0x\u0026quot; to enable support for C++11.\u003c/p\u003e\u003c/div\u003e","tags":["stable_sort","sort","sortings","gotem"]}}