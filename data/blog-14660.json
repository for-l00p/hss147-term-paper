{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1415622214,"rating":0,"authorHandle":"KayacanV","modificationTimeSeconds":1415623573,"id":14660,"title":"\u003cp\u003ealttaki sorunun çözümü\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eÇok zor ama BEN ÇÖZDÜM .\u003c/p\u003e\u003cp\u003eörnek girdi\u003c/p\u003e\u003cp\u003e5 3\u003c/p\u003e\u003cp\u003e2 2 2\u003c/p\u003e\u003cp\u003e2 2 1\u003c/p\u003e\u003cp\u003e1 1 1\u003c/p\u003e\u003cp\u003e2 1 2\u003c/p\u003e\u003cp\u003e1 2 1\u003c/p\u003e\u003cp\u003eilk olarak N*M lik bir matris tutuyoruz. öyle ki matrisin içinde tutduğu her sayı kendinin üstünde kaç tane kendiyle aynı sayı oldugunu tututyor.buna o sayının alfa sı diyelim\u003c/p\u003e\u003cp\u003eörnek girdi için çıkan matris\u003c/p\u003e\u003cp\u003e2(1) 2(1) 2(1)\u003c/p\u003e\u003cp\u003e2(2) 2(2) 1(1)\u003c/p\u003e\u003cp\u003e1(1) 1(1) 1(2)\u003c/p\u003e\u003cp\u003e2(1) 1(2) 2(1)\u003c/p\u003e\u003cp\u003e1(1) 2(1) 1(1)\u003c/p\u003e\u003cp\u003eve sonra matrisin her noktası için o nokta dikdörtgenin sağ alt noktası olcek şekilde kaç dikdörtgen tuttabilceğine bakıyoruz.bunun için satır satır inceliyoruz.\u003c/p\u003e\u003cp\u003e1)eğer bir solumuzdaki elemanını yüksekliği bize eşit değilse o birim karenin cevabı yüksekliğidi. 4. işleme geç\u003c/p\u003e\u003cp\u003e2)stackimizin içindeki alfası alfamızdan küçük olan ilk birim kareyi buluyoruz, o birim karenin cevabını bizim birim karemizin cevabına ekliyoruz.\u003c/p\u003e\u003cp\u003e3)(stackimizin içindeki alfası alfamızdan küçük olan ilk birim kare ile bizim bulunduğumuz birim kare arasındaki uzaklık)*(bulunduğumuz birim karenin alfası) çarpıp birim karenin cevabına ekliyoruz.\u003c/p\u003e\u003cp\u003e4)bulundugumuz birim kareyi stacke atıyoruz.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elint n,m,mat[N][N],d[N],cevap;\nint main()\n{\n\tscanf(\u0026quot;%lld %lld\u0026quot;,\u0026amp;n,\u0026amp;m);\n\tfor (int i \u003d 1; i \u0026lt;\u003d n; i++)\n\t\tfor (int j \u003d 1; j \u0026lt;\u003d m; j++)\n\t\t\tscanf(\u0026quot;%lld\u0026quot;,\u0026amp;mat[i][j]);\n\tfor (int i \u003d 1; i \u0026lt;\u003d n; i++)\n\t{\n\t\tfor (int j \u003d 1; j \u0026lt;\u003d m; j++)          //Her birim için üstünde buna\n\t\t\tif(mat[i][j]!\u003dmat[i-1][j])    //eşit kaç birim kare olduğunu\n\t\t\t\td[j]\u003d1;               //bulmak için. Alfa dediğim şey\n\t\t\telse d[j]++;                  //\n\t\tlint cev[m+1];\n\t\tstack \u0026lt;lint\u0026gt; st;\n\t\tfor (int j \u003d 1; j \u0026lt;\u003d m; j++)\n\t\t\tif(mat[i][j-1]!\u003dmat[i][j])    //1.işlem\n\t\t\t{\n\t\t\t\twhile(!st.empty())\n\t\t\t\t\tst.pop();\n\t\t\t\tst.push(j);\n\t\t\t\tcev[j]\u003dd[j];\n\t\t\t\tcevap+\u003dcev[j];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlint tut\u003dst.top(),say\u003d1;\n\t\t\t\twhile(!st.empty() \u0026amp;\u0026amp; d[tut]\u0026gt;d[j])  //stackimizde alfası\n\t\t\t\t{                       //bizden küçükü bulma\n\t\t\t\t\tsay++;          //aramızdaki uzaklık\n\t\t\t\t\tst.pop();\n\t\t\t\t\ttut\u003dst.top();\n\t\t\t\t}\n\t\t\t\tcev[j]\u003dsay*d[j]+cev[tut];//uzaklık*alfamız+alfası bizden\n\t\t\t\tst.push(j);              //küçükün cevabı\n\t\t\t\tcevap+\u003dcev[j];           //genel cevaba ekleme\n\t\t\t}\n\t}\n\tprintf(\u0026quot;%lld\u0026quot;,cevap);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca href\u003d\"http://paste.ubuntu.com/8918755/\"\u003eCode HERE\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["ben","çöz","düm"]}}