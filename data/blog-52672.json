{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1497661367,"rating":0,"authorHandle":"SAeed","modificationTimeSeconds":1497661367,"id":52672,"title":"\u003cp\u003eSPU Contest #8\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e \u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214144/problem/Blue\"\u003eBlue — Bear and Reverse Radewoosh\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eImplementation\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eJust simulate the two solving approaches while keeping a variable \u003ccode\u003etimer\u003c/code\u003e to indicate the current time.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(n)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\nint a[100100];\nint p[100100];\n\nint main() {\n\t//freopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\t//freopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n\tios::sync_with_stdio(0);\n\n\tint n, c; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; c;\n\tfor (int i \u003d 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; p[i];\n\tfor (int i \u003d 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i];\n\tint timer \u003d 0, points1 \u003d 0, points2 \u003d 0;\n\tfor (int i \u003d 0; i \u0026lt; n; i++){\n\t\ttimer +\u003d a[i];\n\t\tpoints1 +\u003d max(0, p[i] - timer * c);\n\t}\n\ttimer \u003d 0;\n\tfor (int i \u003d n - 1; i \u0026gt;\u003d 0; i--){\n\t\ttimer +\u003d a[i];\n\t\tpoints2 +\u003d max(0, p[i] - timer * c);\n\t}\n\tif (points1 \u0026gt; points2) cout \u0026lt;\u0026lt; \u0026quot;Limak\u0026quot; \u0026lt;\u0026lt; endl;\n\telse if (points2 \u0026gt; points1) cout \u0026lt;\u0026lt; \u0026quot;Radewoosh\u0026quot; \u0026lt;\u0026lt; endl;\n\telse cout \u0026lt;\u0026lt; \u0026quot;Tie\u0026quot; \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214144/problem/Green\"\u003eGreen — k-Factorization\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eNumber Theory\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eFirst, let\u0027s factorize the given number to its factors. If the number of factors is smaller than \u003ccode\u003ek\u003c/code\u003e, then it\u0027s impossible to get an answer (because we factorized the number to its prime factors, and none of them can be divided any further).\u003c/p\u003e\u003cp\u003eOtherwise, print the first \u003ccode\u003ek - 1\u003c/code\u003e factors, and for the factor number \u003ccode\u003ek\u003c/code\u003e print the product of all the remaining factors. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(sqrt(n))\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\nvector\u0026lt;ll\u0026gt; facts;\n\nint main() {\n\t//freopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\t//freopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n\tios::sync_with_stdio(0);\n\n\tll n, k; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; k;\n\tfor (int i \u003d 2; i \u0026lt; sqrt(n) + 10; i++){\n\t\twhile (n % i \u003d\u003d 0) facts.push_back(i), n /\u003d i;\n\t}\n\tif (n \u0026gt; 1) facts.push_back(n);\n\tif (facts.size() \u0026lt; k) cout \u0026lt;\u0026lt; -1 \u0026lt;\u0026lt; endl;\n\telse{\n\t\tfor (int i \u003d 0; i \u0026lt; k - 1; i++) cout \u0026lt;\u0026lt; facts[i] \u0026lt;\u0026lt; \u0026quot; \u0026quot;;\n\t\tll lastFact \u003d 1;\n\t\tfor (int i \u003d k - 1; i \u0026lt; facts.size(); i++) lastFact *\u003d facts[i];\n\t\tcout \u0026lt;\u0026lt; lastFact \u0026lt;\u0026lt; endl;\n\t}\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214144/problem/Purple\"\u003ePurple — Bear and Three Balls\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eAdHoc\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eFrom problem statements we can see that the balls we need to pick should have the values \u003ccode\u003ek\u003c/code\u003e, \u003ccode\u003ek + 1\u003c/code\u003e, \u003ccode\u003ek + 2\u003c/code\u003e for some \u003ccode\u003ek\u003c/code\u003e. Since the ball\u0027s size is at most 1000 we can simply check all the possible solution to find which three consecutive numbers we have.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(ti)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\nset\u0026lt;int\u0026gt; balls;\n\nint main() {\n\t//freopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\t//freopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n\tios::sync_with_stdio(0);\n\n\tint n; cin \u0026gt;\u0026gt; n;\n\tfor (int i \u003d 0; i \u0026lt; n; i++){\n\t\tint a; cin \u0026gt;\u0026gt; a;\n\t\tballs.insert(a);\n\t}\n\tfor (int i \u003d 1; i \u0026lt; 1010; i++){\n\t\tif (balls.count(i) \u0026amp;\u0026amp; balls.count(i + 1) \u0026amp;\u0026amp; balls.count(i + 2)){\n\t\t\tcout \u0026lt;\u0026lt; \u0026quot;YES\u0026quot; \u0026lt;\u0026lt; endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\tcout \u0026lt;\u0026lt; \u0026quot;NO\u0026quot; \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jinQE9BhKP/contest/214144/problem/Red\"\u003eRed — Xor-tree\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eDFS\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIf we divided the tree into level, such that each node has a level. Each node\u0027s level is equal to the distance between it and the root. Now we will notice that some nodes have an even level, while others have an odd level. If we look closer we can see that if we flipped a node at an even level, then only the nodes within its subtree that having an even level will be flipped, and the same thing holds for odd level nodes.\u003c/p\u003e\u003cp\u003eRun a single DFS, while keeping the following parameters:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003e\u003ccode\u003enode\u003c/code\u003e the current node.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ccode\u003eparent\u003c/code\u003e the parent of the current node.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ccode\u003eoddFlips\u003c/code\u003e the number of flips made on the odd levels.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ccode\u003eevenFlips\u003c/code\u003e the number of flips made on the even levels.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ccode\u003elevel\u003c/code\u003e the level of the current node.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eWhen we reach a node we immediately do all the flips according to its level. If the new state of the node is not equal to the goal, we flip this node too (add this node to our answer, increase the number of flips in this node\u0027s level).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eComplexity: O(n)\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n\nvector\u0026lt;int\u0026gt; G[100100];\nint init[100100];\nint goal[100100];\nvector\u0026lt;int\u0026gt; flips;\nvoid dfs(int node, int parent, int oddFlips, int evenFlips, int level){\n\tif (level \u003d\u003d 0){\n\t\tint state \u003d (init[node] + evenFlips) % 2;\n\t\tif (state !\u003d goal[node]) evenFlips++, flips.push_back(node);\n\t}\n\telse{\n\t\tint state \u003d (init[node] + oddFlips) % 2;\n\t\tif (state !\u003d goal[node]) oddFlips++, flips.push_back(node);\n\t}\n\tfor (int i \u003d 0; i \u0026lt; G[node].size(); i++){\n\t\tint nxt \u003d G[node][i];\n\t\tif (nxt \u003d\u003d parent) continue;\n\t\tdfs(nxt, node, oddFlips, evenFlips, 1 - level);\n\t}\n}\n\nint main() {\n\t//freopen(\u0026quot;in.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\t//freopen(\u0026quot;out.txt\u0026quot;, \u0026quot;w\u0026quot;, stdout);\n\tios::sync_with_stdio(0);\n\n\tint n; cin \u0026gt;\u0026gt; n;\n\tfor (int i \u003d 0; i \u0026lt; n - 1; i++){\n\t\tint a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b;\n\t\tG[a].push_back(b);\n\t\tG[b].push_back(a);\n\t}\n\tfor (int i \u003d 1; i \u0026lt;\u003d n; i++) cin \u0026gt;\u0026gt; init[i];\n\tfor (int i \u003d 1; i \u0026lt;\u003d n; i++) cin \u0026gt;\u0026gt; goal[i];\n\tdfs(1, -1, 0, 0, 0);\n\tcout \u0026lt;\u0026lt; flips.size() \u0026lt;\u0026lt; endl;\n\tfor (int i \u003d 0; i \u0026lt; flips.size(); i++) cout \u0026lt;\u0026lt; flips[i] \u0026lt;\u0026lt; endl;\n\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}