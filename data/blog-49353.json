{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1482866544,"rating":6,"authorHandle":"be_right_back_in_2018","modificationTimeSeconds":1482866544,"id":49353,"title":"\u003cp\u003eTrade-offs between Mathematics and CP\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello guys, it\u0027s been a long while since I\u0027ve last used Codeforces..\u003c/p\u003e\u003cp\u003eI neither have a question nor aiming to discuss a problem, it\u0027s more like a survey and I really like to listen to all of your different opinions\u003c/p\u003e\u003cp\u003eDo you think there are any trade-offs between Mathematics and Competitive Programming?\u003c/p\u003e\u003cp\u003eI mean, I\u0027ve almost always thought that one cannot be great at both of the fields, though it\u0027s important to have some essential skills of the other field no matter which side you belong\u003c/p\u003e\u003cp\u003eMy current reflection is: Mathematics is so important not only for CP but for CS and any other scientific field, but it concerns itself about some so deep low-level worries that programmers tend to take for granted, since it\u0027s almost always the case that they use some pre-built tools\u003c/p\u003e\u003cp\u003eand I personally think that though it\u0027s always better and more \u0026quot;efficient\u0026quot; to understand what\u0027s going on under the hood, it makes you less productive to worry so much about details and re-think about the same problems you\u0027ve solved earlier, especially when you\u0027re required to re-invent the wheel in a relatively short period (which is somehow the case when one\u0027s solving CP problems)\u003c/p\u003e\u003cp\u003eThese thoughts came to me while working on some project that requires a strong familiarity with the two fields. I was trying to solve some problem that is modeled using a certain data structure and thought that it would make the solution more efficient to solve the problem with Gaussian Elimination rather than traditional search techniques, but some problem emerged and required me to use Extended Euclid Algorithm to calculate the Modular Multiplicative Inverse of some number, and since I haven\u0027t touched Number Theory for a while I was only able (at that moment) to figure out that the solution is to calculate the mod-inv without even remembering how to do it, and though it didn\u0027t take me long to remember about the details (or re-conclude it), I just used a pre-built tool to calculate it without worrying about the tedious implementation.\u003c/p\u003e\u003cp\u003eI\u0027m not an expert at any of the two fields so I don\u0027t assume that any of my reflections are correct, in fact that\u0027s why I\u0027d like to hear all about your opinions :)\u003c/p\u003e\u003c/div\u003e","tags":[]}}