{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1495661969,"rating":0,"authorHandle":"bssanches","modificationTimeSeconds":1496199577,"id":52162,"title":"\u003cp\u003eDFS\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eDefinições sobre grafos\u003c/p\u003e\u003cp\u003eVértice: Uma das extremidades da aresta\u003c/p\u003e\u003cp\u003eAresta: O que liga os vértices\u003c/p\u003e\u003cp\u003eGrafo: Um conjunto de vértices e arestas que representa algum problema\u003c/p\u003e\u003cp\u003eComponente: O conjunto de vértices alcançáveis a partir de um nó\u003c/p\u003e\u003cp\u003eCaminho: Conjunto de arestas e vértices que ligam dois nós do grafo\u003c/p\u003e\u003cp\u003eCiclo: Caminho que começa e termina no mesmo vértice\u003c/p\u003e\u003cp\u003eAresta direcional: Aresta que sai de um vértice e vai para o outro mas não pode ser usado no sentido contrario\u003c/p\u003e\u003cp\u003eAresta bidirecional: Aresta que possuí as duas direções\u003c/p\u003e\u003cp\u003eDFS (Deep First Search) é um algoritmo de busca em grafos. Sua complexidade é O(V + E) onde V é o número de vértices e E o número de arestas do grafo.\u003c/p\u003e\u003cp\u003eCódigo:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003evector\u0026lt;int\u0026gt; adj[100010];\nint vis[100010];\nint dfs(int curr)\n{\n    for (int i \u003d 0; i \u0026lt; adj[curr].size(); ++i)\n    {\n        int u \u003d adj[curr][i];\n        if (!vis[u])\n        {\n            vis[u] \u003d 1;\n            dfs(u);\n        }    \n    }\n}\n\nint main()\n{\n   adj[2].push_back(3); // fala que o 2 tem como adjacente o 3\n   adj[1].push_back(5); // fala que o 1 tem como adjacente o 5\n   vis[1] \u003d 1;\n   dfs(1);\n    return 0;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eA complexidade utilizando matriz de adjacência é O(V^2)! Onde V é o número de vértices do grafo. Não utilize matriz ao menos que seja muito necessário!\u003c/p\u003e\u003c/div\u003e","tags":[]}}