{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1490388474,"rating":-7,"authorHandle":"f2lk6wf90d","modificationTimeSeconds":1490388474,"id":51200,"title":"\u003cp\u003eUsing the C++ standard library for binary search\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eIn C, it\u0027s possible to use the bsearch() function to perform binary search on a \u0027hidden\u0027 array. e.g. for IOI 2015 practice — Search (part of task description below):\u003c/p\u003e\u003cp\u003eYou may call a function compare(i, val) that compares number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and integer number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eval\u003c/i\u003e\u003c/span\u003e. This function returns:\u003cbr /\u003e- \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e: if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003eval\u003c/i\u003e\u003c/span\u003e\u003cbr /\u003e- \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003eval\u003c/i\u003e\u003c/span\u003e\u003cbr /\u003e- \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eval\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eNow, bsearch() can be used like this: \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint values[1000];\nint cmp(const int * a, const int * b)\n{\n   int id \u003d b - values;\n   return compare(id, *a); \n}\nint find(int sub, int N, int X) {\n    int* ptr \u003d bsearch(\u0026amp;X, values, N, sizeof(int), cmp);\n    return ptr \u003d\u003d NULL ? -1 : ptr - values;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIs something like this possible using std::lower_bound?\u003c/p\u003e\u003c/div\u003e","tags":[]}}