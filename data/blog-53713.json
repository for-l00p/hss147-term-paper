{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1502016229,"rating":6,"authorHandle":"rootn","modificationTimeSeconds":1502016547,"id":53713,"title":"\u003cp\u003eGraph Traversals\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eBFS\u003c/h2\u003e\u003cp\u003eBreadth first search uses queue.If we use adjacency list to store graph then the following code will implement the BFS:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// V is the number of vertices\n// s is the starting index;\n\nlist\u0026lt;int\u0026gt; G[V]; \nvector\u0026lt;bool\u0026gt; visited(V, false);\nqueue\u0026lt;int\u0026gt; q;\n\nvoid BFS(int s)\n{\n    q.push_back(s);\n    while(!q.empth())\n    {\n        s \u003d q.front();\n        cout \u0026lt;\u0026lt; s \u0026lt;\u0026lt; \u0026quot; \u0026quot;;\n        q.pop_front();\n        for(auto i \u003d F[s].begin();i !\u003d G[s].end();i++)\n        {\n            if(!visited[*i])\n            {\n                visited[*i] \u003d true;\n                q.push_back(*i);\n            }\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHowever, this implementation will not be able to traverse a disconnected graph completely.To do so, we have to check every node by making it a starting node and BFS from that node.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor(int i \u003d 0;i \u0026lt; V;i++)\n{\n    if(!visited[i])\n        BFS(i);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2\u003eDFS\u003c/h2\u003e\u003cp\u003eDFS make use of stack. For than we don\u0027t have to use a separate stack, we can implement it using recursion. Following code shows implementation of DFS using assumptions taken while explaining BFS:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid DFS(int s)\n{\n    visited[s] \u003d true;\n    cout \u0026lt;\u0026lt; s \u0026lt;\u0026lt; \u0026quot; \u0026quot;;\n    for(auto i \u003d G[s].begin();i !\u003d G[s].end();i++)\n        if(!visited[*i])\n            DFS(*i);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis implementation can also be made to traverse the whole graph, in case of disconnected graph, by using the iterative calls used in BFS.\u003c/p\u003e\u003c/div\u003e","tags":[]}}