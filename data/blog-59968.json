{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1528736129,"rating":144,"authorHandle":"cyand1317","modificationTimeSeconds":1528736129,"id":59968,"title":"\u003cp\u003eCodeforces Round #487 (Div. 2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSelamat petang!\u003c/p\u003e\u003cp\u003eThe curtain has fallen on \u003ca href\u003d\"/contest/989\" title\u003d\"Codeforces Round 487 (Div. 2)\"\u003eCodeforces Round #487 (Div. 2)\u003c/a\u003e. Have you enjoyed the problems themselves? Or the stories? Or both? Neither?\u003c/p\u003e\u003cp\u003eI hadn\u0027t ever intended to create a hard contest, believe me... (╥﹏╥) The author will try to find ways to estimate the difficulty better in the future. Also, stronger pretests, notes taken.\u003c/p\u003e\u003cp\u003eAnyways, hope you\u0027ve all enjoyed the challenges you\u0027ve faced, and gained something from this round. Congratulations to those who performed well, and commiserations to those waiting for their next chance to shine (^_−)−☆\u003c/p\u003e\u003cp\u003eBelow are the tutorials of all problems. Feel free to point out mistakes (if any) or share your ideas in the comments! I might be overcomplicating or confusing something \u0026gt; \u0026lt;\u003c/p\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"989A\"\u003eTutorial is loading...\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eShort Ruby solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eputs gets.codepoints.each_cons(3).any?{|x,y,z|x*y*z\u003d\u003d287430}?\u0027Yes\u0027:\u0027No\u0027\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"989B\"\u003eTutorial is loading...\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eNoam\u0027s C++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n#define endl \u0027\\n\u0027\n#define fast ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)\n#define finish(x) return cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl, 0\nusing namespace std;\n\nstring s, t;\nint n, p;\n\nbool isperiod() {\n\tfor (int i \u003d p; i \u0026lt; n; i++)\n\t\tif (t[i] !\u003d t[i - p]) return false;\n\treturn true;\n}\n\nint main() {\n\tfast;\n\tcin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; p \u0026gt;\u0026gt; s;\n\n\t// attempt 1\n\tt \u003d s;\n\tfor (auto \u0026amp;i : t)\n\t\tif (i \u003d\u003d \u0027.\u0027) i \u003d \u00270\u0027;\n\tif (!isperiod()) finish(t);\n\n\t// attempt 2\n\tint i \u003d 0;\n\twhile (i \u0026lt; n \u0026amp;\u0026amp; s[i] !\u003d \u0027.\u0027) i++;\n\tif (i + p \u0026lt; n) {\n\t\tt[i] \u003d \u00271\u0027;\n\t\tfinish(t);\n\t}\n\ti \u003d n - 1;\n\twhile (i \u0026gt;\u003d 0 \u0026amp;\u0026amp; s[i] !\u003d \u0027.\u0027) i--;\n\tif (i - p \u0026gt;\u003d 0) {\n\t\tt[i] \u003d \u00271\u0027;\n\t\tfinish(t);\n\t}\n\n\tfinish(\u0026quot;No\u0026quot;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ePython solution for the original problem as well as for the last challenge\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003en, p \u003d map(int, input().split())\ns \u003d input()\n\nt \u003d s.replace(\u0027.\u0027, \u00270\u0027)\n\nif all(t[i] \u003d\u003d t[i + p] for i in range(n - p)):\n    rmost \u003d -1\n    for r in range(p - 1, -1, -1):\n        x \u003d s[r::p].rfind(\u0027.\u0027)\n        if x !\u003d -1 and s[r::p] !\u003d \u0027.\u0027:\n            rmost \u003d max(rmost, x * p + r)\n    if rmost \u003d\u003d -1:\n        print(\u0027No\u0027)\n    else:\n        print(t[:rmost] + \u00271\u0027 + t[(rmost + 1):])\nelse:\n    print(t)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ seemingly-brute-force solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;cstdio\u0026gt;\n\nstatic const int MAXN \u003d 2005;\n\nstatic int n, p;\nstatic char s[MAXN];\n\nstatic int dots_ct \u003d 0, dots[MAXN];\n\nint main()\n{\n    scanf(\u0026quot;%d%d%s\u0026quot;, \u0026amp;n, \u0026amp;p, s);\n\n    for (int i \u003d 0; i \u0026lt; n; ++i) if (s[i] \u003d\u003d \u0027.\u0027) {\n        dots[dots_ct++] \u003d i;\n        s[i] \u003d \u00270\u0027;\n    }\n\n    for (int i \u003d 1; i \u0026lt;\u003d (1 \u0026lt;\u0026lt; std::min(dots_ct, 19)); ++i) {\n        bool is_period \u003d true;\n        for (int j \u003d 0; j \u0026lt; n - p; ++j)\n            if (s[j] !\u003d s[j + p]) { is_period \u003d false; break; }\n        if (!is_period) {\n            puts(s);\n            return 0;\n        }\n        for (int j \u003d 0; j \u0026lt;\u003d __builtin_ctz(i); ++j)\n            s[dots[j]] ^\u003d 1;\n    }\n\n    puts(\u0026quot;No\u0026quot;);\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"989C\"\u003eTutorial is loading...\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eModel solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;cstdio\u0026gt;\n#include \u0026lt;cstdlib\u0026gt;\n#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;utility\u0026gt;\n#include \u0026lt;vector\u0026gt;\n\nstatic const int MAXM \u003d 50;\n\nint main()\n{\n    srand(1);\n\n    int a[4];\n    scanf(\u0026quot;%d%d%d%d\u0026quot;, \u0026amp;a[0], \u0026amp;a[1], \u0026amp;a[2], \u0026amp;a[3]);\n\n    int M \u003d std::max(2, std::min(MAXM, *std::max_element(a, a + 4)));\n    std::vector\u0026lt;std::string\u0026gt; g;\n\n    for (int k \u003d 0; k \u0026lt; 4; ++k) {\n        int islands \u003d a[(k + 1) % 4] - 1;\n        std::string s(M, \u0027A\u0027 + k);\n        std::vector\u0026lt;std::pair\u0026lt;int, int\u0026gt;\u0026gt; pos;\n\n        g.push_back(s);\n        for (int x \u003d 0; x \u0026lt; (islands + (M - 2)) / (M - 1); ++x) {\n            for (int i \u003d 0; i \u0026lt; 3; ++i) g.push_back(s);\n            for (int i \u003d (x \u0026amp; 1); i \u0026lt; M - !(x \u0026amp; 1); ++i)\n                pos.push_back({(int)g.size() - 2 - ((i ^ x) \u0026amp; 1), i});\n        }\n\n        std::random_shuffle(pos.begin(), pos.end());\n        for (int i \u003d 0; i \u0026lt; islands; ++i)\n            g[pos[i].first][pos[i].second] \u003d \u0027A\u0027 + (k + 1) % 4;\n    }\n\n    if (g.size() \u0026lt;\u003d M) {\n        printf(\u0026quot;%lu %d\\n\u0026quot;, g.size(), M);\n        for (int i \u003d 0; i \u0026lt; g.size(); ++i) puts(g[i].c_str());\n    } else {\n        printf(\u0026quot;%d %lu\\n\u0026quot;, M, g.size());\n        for (int i \u003d 0; i \u0026lt; M; ++i) {\n            for (int j \u003d 0; j \u0026lt; g.size(); ++j) putchar(g[j][i]);\n            putchar(\u0027\\n\u0027);\n        }\n    }\n\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"989D\"\u003eTutorial is loading...\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eModel solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;cstdio\u0026gt;\n#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;vector\u0026gt;\n\nstatic const int MAXN \u003d 1e5 + 3;\nstatic const int INF32 \u003d 0x7fffffff;\ntypedef long long int64;\n\nstatic int n, l, w;\nstatic int x[MAXN], v[MAXN];\nstatic std::vector\u0026lt;int\u0026gt; pos, neg;\n\ninline int div_floor(int64 a, int b)\n{\n    if (b \u003d\u003d 0) return (a \u0026gt; 0 ? +INF32 : -INF32);\n    if (a % b \u0026lt; 0) a -\u003d (b + a % b);\n    return a / b;\n}\n\nint main()\n{\n    scanf(\u0026quot;%d%d%d\u0026quot;, \u0026amp;n, \u0026amp;l, \u0026amp;w);\n\n    for (int i \u003d 0; i \u0026lt; n; ++i) {\n        scanf(\u0026quot;%d%d\u0026quot;, \u0026amp;x[i], \u0026amp;v[i]);\n        (v[i] \u003d\u003d +1 ? pos : neg).push_back(x[i]);\n    }\n    std::sort(pos.begin(), pos.end());\n    std::sort(neg.begin(), neg.end());\n\n    int64 ans \u003d 0;\n    for (int v : neg) {\n        auto barrier \u003d std::lower_bound(pos.begin(), pos.end(), -v - l);\n        int u_max_0 \u003d div_floor((int64)(v + l) * (w + 1) - 1, w - 1),\n            u_max_1 \u003d div_floor((int64)(v + l) * (w - 1) - 1, w + 1);\n        ans +\u003d\n            (std::upper_bound(pos.begin(), barrier, u_max_0) - pos.begin()) +\n            (std::upper_bound(barrier, pos.end(), std::min(v, u_max_1)) - barrier);\n    }\n\n    printf(\u0026quot;%lld\\n\u0026quot;, ans);\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"989E\"\u003eTutorial is loading...\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eModel solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;cassert\u0026gt;\n#include \u0026lt;cstdio\u0026gt;\n#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;utility\u0026gt;\n#include \u0026lt;vector\u0026gt;\n\nstatic const int MAXN \u003d 202;\nstatic const int LOGM \u003d 15;\n\nstatic int gcd(int a, int b) { return b \u003d\u003d 0 ? a : gcd(b, a % b); }\n\nstruct point {\n    int x, y;\n    point(int x \u003d 0, int y \u003d 0) : x(x), y(y) { }\n};\n\nstruct line {\n    // ax + by + c \u003d 0\n    int a, b, c;\n\n    line() : a(0), b(0), c(0) { }\n    line(const point \u0026amp;p, const point \u0026amp;q)\n        : a(p.y - q.y)\n        , b(q.x - p.x)\n        , c(q.y * p.x - q.x * p.y)\n    {\n        int g \u003d gcd(gcd(a, b), c);\n        if (g !\u003d 1) { a /\u003d g; b /\u003d g; c /\u003d g; }\n        if (a \u0026lt; 0) { a \u003d -a; b \u003d -b; c \u003d -c; }\n    }\n\n    inline bool contains(const point \u0026amp;p) {\n        return a * p.x + b * p.y + c \u003d\u003d 0;\n    }\n\n    // For sorting \u0026amp; duplicate removing\n    inline bool operator \u0026lt; (const line \u0026amp;other) const {\n        return a !\u003d other.a ? a \u0026lt; other.a :\n            b !\u003d other.b ? b \u0026lt; other.b : c \u0026lt; other.c;\n    }\n    inline bool operator \u003d\u003d (const line \u0026amp;other) const {\n        return a \u003d\u003d other.a \u0026amp;\u0026amp; b \u003d\u003d other.b \u0026amp;\u0026amp; c \u003d\u003d other.c;\n    }\n};\n\nstruct mat {\n    static const int N \u003d ::MAXN;\n    int sz;\n    double a[N][N];\n\n    mat(int sz \u003d N, int id \u003d 0) : sz(sz) {\n        for (int i \u003d 0; i \u0026lt; N; ++i)\n            for (int j \u003d 0; j \u0026lt; N; ++j)\n                a[i][j] \u003d (i \u003d\u003d j ? id : 0);\n    }\n\n    inline mat operator * (const mat \u0026amp;other) {\n        assert(other.sz \u003d\u003d this-\u0026gt;sz);\n        mat ret(sz, 0);\n        for (int i \u003d 0; i \u0026lt; sz; ++i)\n            for (int k \u003d 0; k \u0026lt; sz; ++k)\n                for (int j \u003d 0; j \u0026lt; sz; ++j)\n                    ret.a[i][j] +\u003d this-\u0026gt;a[i][k] * other.a[k][j];\n        return ret;\n    }\n\n    inline std::vector\u0026lt;double\u0026gt; operator * (const std::vector\u0026lt;double\u0026gt; \u0026amp;u) {\n        assert(u.size() \u003d\u003d this-\u0026gt;sz);\n        std::vector\u0026lt;double\u0026gt; v(sz);\n        for (int i \u003d 0; i \u0026lt; sz; ++i)\n            for (int j \u003d 0; j \u0026lt; sz; ++j)\n                v[i] +\u003d a[i][j] * u[j];\n        return v;\n    }\n};\n\nstatic int n, q;\nstatic point p[MAXN];\n\nstatic line l[MAXN * MAXN / 2];\n// Lists of lines that pass through points\nstatic std::vector\u0026lt;int\u0026gt; pl[MAXN];\n// Lists of points that lie on lines\nstatic std::vector\u0026lt;int\u0026gt; lp[MAXN * MAXN / 2];\n\nstatic mat A, Ap[LOGM];\n\nint main()\n{\n    scanf(\u0026quot;%d\u0026quot;, \u0026amp;n);\n    for (int i \u003d 0; i \u0026lt; n; ++i) scanf(\u0026quot;%d%d\u0026quot;, \u0026amp;p[i].x, \u0026amp;p[i].y);\n\n    int l_num \u003d 0;\n    for (int i \u003d 0; i \u0026lt; n; ++i)\n        for (int j \u003d i + 1; j \u0026lt; n; ++j)\n            l[l_num++] \u003d line(p[i], p[j]);\n    std::sort(l, l + l_num);\n    l_num \u003d std::unique(l, l + l_num) - \u0026amp;l[0];\n\n    for (int i \u003d 0; i \u0026lt; n; ++i)\n        for (int j \u003d 0; j \u0026lt; l_num; ++j)\n            if (l[j].contains(p[i])) {\n                pl[i].push_back(j);\n                lp[j].push_back(i);\n            }\n\n    A \u003d mat(n, 0);\n    for (int i \u003d 0; i \u0026lt; n; ++i) {\n        for (int j : pl[i])\n            for (int k : lp[j])\n                A.a[i][k] +\u003d 1.0L / (pl[i].size() * lp[j].size());\n    }\n\n    Ap[0] \u003d A;\n    for (int i \u003d 1; i \u0026lt; LOGM; ++i) Ap[i] \u003d Ap[i - 1] * Ap[i - 1];\n\n    scanf(\u0026quot;%d\u0026quot;, \u0026amp;q);\n    std::vector\u0026lt;double\u0026gt; u(n);\n    for (int i \u003d 0, t, m; i \u0026lt; q; ++i) {\n        scanf(\u0026quot;%d%d\u0026quot;, \u0026amp;t, \u0026amp;m); --t;\n\n        std::fill(u.begin(), u.end(), 0);\n        u[t] \u003d 1.0;\n        for (int j \u003d 0; j \u0026lt; LOGM; ++j)\n            if ((m - 1) \u0026amp; (1 \u0026lt;\u0026lt; j)) u \u003d Ap[j] * u;\n\n        double max \u003d -1.0;\n        for (int j \u003d 0; j \u0026lt; l_num; ++j) {\n            double cur \u003d 0.0;\n            for (int k : lp[j]) cur +\u003d u[k];\n            cur /\u003d lp[j].size();\n            max \u003d std::max(max, cur);\n        }\n        printf(\u0026quot;%.12lf\\n\u0026quot;, (double)max);\n    }\n\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003chr /\u003e\u003cp\u003eSee you next time! I hope I\u0027ll be welcomed. Cheers!\u003c/p\u003e\u003c/div\u003e","tags":["487","editorial"]}}