{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1462634120,"rating":28,"authorHandle":"semiexp","modificationTimeSeconds":1462634120,"id":44752,"title":"\u003cp\u003eValid code which gets CE without details\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eDuring our team training on Codeforces Gym, we noticed that a code which can easily be compiled in our computer gets CE (even the details for CE wasn\u0027t shown) on the Codeforces judge system.\u003c/p\u003e\u003cp\u003eAfter the training, I\u0027ve investigated the cause of CE and finally I\u0027ve found that the following code produces CE if compiled with GNU C++11:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;cstdio\u0026gt;\nusing namespace std;\nstruct segtree\n{\n\tpair\u0026lt;int, int\u0026gt; data[1\u0026lt;\u0026lt;20];\n};\nsegtree S;\nint main()\n{\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou may write codes like this when you implement Segment Trees or like.\u003c/p\u003e\u003cp\u003eThis code can easily be compiled with GCC 4.8.4. However, if it is compiled with GCC 5.3.0, the compilation didn\u0027t finish at all. I suppose that compiling it takes much time with GCC 5.1.0 (which is used in Codeforces), too and very long compilation time caused CE without any detail.\u003c/p\u003e\u003cp\u003eApparently, this problem is a bug of GCC; related problem is reported to \u003ca href\u003d\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id\u003d70001\"\u003eGCC Bugzilla\u003c/a\u003e. The bug fix has already been released, so I expect that this problem will be fixed in GCC of later version. But currently we can\u0027t avoid this problem if we use GNU C++11.\u003c/p\u003e\u003cp\u003eMy suggestions are: - Avoid using GNU C++11. The code above could be compiled with other compilers (such as GNU C++). - Avoid using array of std::pair in structs or classes, e.g. define a new struct instead of using std::pair for array members in structs. One of the cause of this problem is that std::pair has a constexpr default constructor.\u003c/p\u003e\u003c/div\u003e","tags":[]}}