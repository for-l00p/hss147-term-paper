{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1527340051,"rating":50,"authorHandle":"radoslav11","modificationTimeSeconds":1527340051,"id":59694,"title":"\u003cp\u003eBubble Cup 2018 Round 2 — Neo\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello!\u003c/p\u003e\u003cp\u003eBubble Cup 2018 Round 2 just finished, so I decided to ask about a correct solution problem \u003ca href\u003d\"http://www.spoj.com/problems/NEO2/\"\u003eNEO\u003c/a\u003e. I guess a lot of people passed it in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/25/81/2581d4be08a4fef6c1f5bac26f84b7e2c6a8288a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e with the C++ pragma optimizations or with some greedy optimizations. My team also passed it like that.\u003c/p\u003e\u003cp\u003eIn this blog I\u0027ll share my idea. If someone has solved it in a similar way I will really appreciate if he shares his code because honestly the idea is really annoying to implement. If anyone has another solution, which is better than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/25/81/2581d4be08a4fef6c1f5bac26f84b7e2c6a8288a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e I will really love to know the idea.\u003c/p\u003e\u003cp\u003eSo the solution I had in mind is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b5/80/b580a52eb85c0fbdd71bddf6b35d7a0390c70bc2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e or \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/49/f5/49f5c67162bf3e8baa212151a543b3ef938fc233.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e depending how we implement our query. First we will have the standard DP: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e \u0026lt; \u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e * \u003ci\u003ei\u003c/i\u003e + \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e * \u003ci\u003ej\u003c/i\u003e - \u003ci\u003ej\u003c/i\u003e * \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ei\u003c/i\u003e * \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e which can be reformed to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e * \u003ci\u003ei\u003c/i\u003e + \u003ci\u003emax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e \u0026lt; \u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e((\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e * \u003ci\u003ej\u003c/i\u003e) + ( - \u003ci\u003ej\u003c/i\u003e * \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e) + ( - \u003ci\u003ei\u003c/i\u003e * \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e))\u003c/span\u003e. Well we can still reform this equation the the following: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9c/8c/9c8c84dd6220c346412db4ac27dab0dec6cc6b67.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eNow basically we only need to implement a data structure for the following operations:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eAdd a vector to our DS.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eGiven a vector, find the one with the largest dot product, when multiplied with it.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eI found a paper which claimed that the following operations can be implemented with a 3D convex hull and another one which claimed that these operations can be converted to dynamic furthest point search, but unfortunately I cannot find the latter again (this happens when you do not bookmark anything). Also both presented data structures/algorithms were really annoying to implement.\u003c/p\u003e\u003cp\u003eSo has anyone solved this problem in a legit way and if yes, can he share his solution. Thanks in advance :)\u003c/p\u003e\u003c/div\u003e","tags":["dp","convex hull","bubble cup","spoj"]}}