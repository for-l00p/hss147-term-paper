{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1517325984,"rating":-1,"authorHandle":"Dekabr","modificationTimeSeconds":1517325984,"id":57438,"title":"\u003cp\u003eL dan R gacha har xil sonlar soni\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n\nusing namespace std;\n#define N 5555555\n#define next lakdsflasd\nint t[N];\nint L[N];\nint R[N];\nint a[N];\nint root[N];\nint last[N];\nint next[N];\n\nint next_free_index\u003d0,n;\n\n\nvoid build(int v,int tl\u003d1,int tr\u003dn) {\n    if (tl\u003d\u003dtr) {\n        if (last[a[tl]]\u003d\u003d0) {\n            t[v]\u003d1;\n            last[a[tl]]\u003dtl;\n        } else {\n            next[last[a[tl]]]\u003dtl;\n            last[a[tl]]\u003dtl;\n            t[v]\u003d0;\n        }\n    } else {\n        int tm\u003d(tl+tr)\u0026gt;\u0026gt;1;\n        L[v]\u003d++next_free_index;\n        R[v]\u003d++next_free_index;\n        build(L[v],tl,tm);\n        build(R[v],tm+1,tr);\n        t[v]\u003dt[L[v]]+t[R[v]];\n    }\n}\n\nvoid update(int v_last, int v,int pos,int delta,int tl\u003d1,int tr\u003dn) {\n    if (tl\u003d\u003dtr) {\n        t[v]\u003ddelta;\n        return;\n    }\n    int tm\u003d(tl+tr)\u0026gt;\u0026gt;1;\n\n    if (pos\u0026lt;\u003dtm) {\n        L[v]\u003d++next_free_index;\n        R[v]\u003dR[v_last];\n\n        update(L[v_last],L[v],pos,delta,tl,tm);\n\n    } else {\n        L[v]\u003dL[v_last];\n        R[v]\u003d++next_free_index;\n\n        update(R[v_last],R[v],pos,delta,tm+1,tr);\n    }\n\n    t[v]\u003dt[L[v]]+t[R[v]];\n}\nint sum(int v,int l,int r,int tl\u003d1,int tr\u003dn) {\n    if (l\u0026gt;tr||r\u0026lt;tl) return 0;\n    if (l\u0026lt;\u003dtl\u0026amp;\u0026amp;tr\u0026lt;\u003dr) return t[v];\n    int tm\u003d(tl+tr)\u0026gt;\u0026gt;1;\n    return (sum(L[v],l,r,tl,tm)+sum(R[v],l,r,tm+1,tr));\n}\n\nint main()\n{\n    cin\u0026gt;\u0026gt;n;\n    for (int i\u003d1;i\u0026lt;\u003dn;i++) cin\u0026gt;\u0026gt;a[i];\n    root[1]\u003d++next_free_index;\n    root[2]\u003droot[1];\n\n    build(root[1]);\n\n    for (int i\u003d2;i\u0026lt;\u003dn;i++) {\n        root[i*2-1]\u003d++next_free_index;\n        update(root[i*2-2],root[i*2-1],i-1,0);\n\n        if (next[i-1]\u003d\u003d0) {\n            root[i*2]\u003droot[i*2-1];\n        } else {\n            root[i*2]\u003d++next_free_index;\n            update(root[i*2-1],root[i*2],next[i-1],1);\n        }\n    }\n    for (int i\u003d1;i\u0026lt;\u003dn;i++) {\n        for (int j\u003d1;j\u0026lt;\u003dn;j++) {\n            if (sum(root[i*2],j,j)) cout\u0026lt;\u0026lt;\u0026quot;@\u0026quot;; else cout\u0026lt;\u0026lt;\u0026quot;_\u0026quot;;\n        } cout\u0026lt;\u0026lt;\u0026quot;\\t\u0026quot;\u0026lt;\u0026lt;sum(root[i*2],1,n)\u0026lt;\u0026lt;endl;\n    }\n    int l,r,k;\n    while (cin\u0026gt;\u0026gt;l\u0026gt;\u0026gt;r) {\n       cout\u0026lt;\u0026lt;sum(root[l*2],l,r)\u0026lt;\u0026lt;endl;\n\n    }\n\n\n    return 0;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["persistent","tree","data structure","sample code"]}}