{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1469603663,"rating":0,"authorHandle":"pulgares","modificationTimeSeconds":1469603663,"id":46293,"title":"\u003cp\u003eTime complexity of dp on tree. Round #322 F\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi,\u003c/p\u003e\u003cp\u003eI was doing some virtuals and found this problem \u003ca href\u003d\"/contest/581/problem/F\" title\u003d\"Codeforces Round 322 (Div. 2)\"\u003e581F - Zublicanes and Mumocrates\u003c/a\u003e \u003c/p\u003e\u003cp\u003eWe need to color each vertex of a tree of either color 0 or color 1, such that # of leaves of color 0 equals # of leaves of color 1 (there is an even number of leaves) and we\u0027re asked to minimize the # of \u0026quot;bad edges\u0026quot;. A bad edge is an edge that connects two vertexes of different colors.\u003c/p\u003e\u003cp\u003eFor solving it I tried a dp, I first rooted the tree at a non-leaf vertex and try \u003cstrong\u003edp\u003c/strong\u003e[\u003cstrong\u003ec\u003c/strong\u003e][\u003cstrong\u003eu\u003c/strong\u003e][\u003cstrong\u003ecnt\u003c/strong\u003e] \u003d minimum number of bad edges that let us paint the sub tree of \u003cstrong\u003eu\u003c/strong\u003e such that \u003cstrong\u003eu\u003c/strong\u003e is colored \u003cstrong\u003ec\u003c/strong\u003e and there are \u003cstrong\u003ecnt\u003c/strong\u003e leaves of color 0. So answer to the problem will be min( \u003cstrong\u003edp\u003c/strong\u003e[0][ROOT][(#leaves)/2], \u003cstrong\u003edp\u003c/strong\u003e[1][ROOT][(#leaves)/2])\u003c/p\u003e\u003cp\u003eFor each node \u003cstrong\u003eu\u003c/strong\u003e I calculate this dp by starting with an empty subtree and adding one child at a time, for each child \u003cstrong\u003ev\u003c/strong\u003e I iterate \u003cstrong\u003ecnt\u003c/strong\u003e over the new size of the subtree of \u003cstrong\u003eu\u003c/strong\u003e, and for each \u003cstrong\u003ecnt\u003c/strong\u003e I iterate \u003cstrong\u003ecntv\u003c/strong\u003e ( \u003cstrong\u003ecntv\u003c/strong\u003e \u003d how many leaves is contributing \u003cstrong\u003ev\u003c/strong\u003e to this \u003cstrong\u003ecnt\u003c/strong\u003e). \u003c/p\u003e\u003cp\u003eHere\u0027s the code: \u003ca href\u003d\"/contest/581/submission/19434646\" title\u003d\"Submission 19434646 by pulgares\"\u003e19434646\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI got accepted with it but this kind of dps always confuses me, I don\u0027t know how to measure time complexity. To me it seems to be not very good, I would say its something like O(N^3) at least but it ran in 109 ms for N\u003d5000. I\u0027ve done other dps like this one before and I think I\u0027m not measuring the time correctly (major reason why I tried sending this code hehe). Could someone give me a reasoning that would led to a better measure?\u003c/p\u003e\u003cp\u003eThanks.\u003c/p\u003e\u003cp\u003eHope I made myself clear.\u003c/p\u003e\u003c/div\u003e","tags":["time complexity","dp on tree","dp","tree"]}}