{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1484579984,"rating":-1,"authorHandle":"t3rminated","modificationTimeSeconds":1484580904,"id":49803,"title":"\u003cp\u003ehelp with research paper on LCS\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI was reading about algorithms to find LCS in O(nlogn) and i came through this research paper — \u003ca href\u003d\"http://dl.acm.org/citation.cfm?id\u003d359603\"\u003elink\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIt claims to find LCS in O((n+r)logn) where r are the number of matching pairs.\u003c/p\u003e\u003cp\u003eBut I can\u0027t understand how the final algorithm is O(n+rlogn) , I guess the algorithm is O(n*r*logn) ,please clear my doubt I can\u0027t understand?\u003c/p\u003e\u003cp\u003ehere\u0027s my code — \u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026quot;bits/stdc++.h\u0026quot;\nusing namespace std;\nchar a[50001];\nchar b[50001];\nint thresh[50001];\nint freq[27];\nint freq1[27][50001];\n\nint main()\n{\n\tscanf(\u0026quot;%s\u0026quot;,a+1);\n\tscanf(\u0026quot;%s\u0026quot;,b+1);\n\t\n\tint c \u003d 0 ;\n\tfor(int i \u003d strlen(b+1); i \u0026gt;\u003d 1; i--)\n\t{\n\t\tfreq1[b[i]-\u0027a\u0027][freq[b[i]-\u0027a\u0027]] \u003d i;\n\t\tfreq[b[i]-\u0027a\u0027]++;\n\t}\n\t\n\tfill(thresh,thresh+max(strlen(a+1)+1,strlen(b+1)+1),10000000);\n\tthresh[0] \u003d 0;\n\t\n\tint N \u003d max(strlen(a+1)+1,strlen(b+1)+1);\n\t\n\tfor(int i \u003d 1; i \u0026lt;\u003d strlen(a+1); i++)\n\t{\n\t\tfor(int j \u003d 0; j \u0026lt; freq[a[i] - \u0027a\u0027]; j++)\n\t\t{\n\t\t\tint k \u003d lower_bound(thresh,thresh + N, freq1[a[i] - \u0027a\u0027][j]) - thresh;\n\t\t\tif(freq1[a[i] - \u0027a\u0027][j] \u0026lt; thresh[k])\n\t\t\t{\n\t\t\t\tthresh[k] \u003d freq1[a[i] - \u0027a\u0027][j];\n\t\t\t}\n\t\t}}\n\t\n\tint max1 \u003d -1;\n\tfor(int i \u003d 0; i \u0026lt; N; i++){\n\t\tif(thresh[i] !\u003d 10000000)\n\t\t\tmax1 \u003d max(max1, thresh[i]);\n\t}\n\tprintf(\u0026quot;LCS is \\n\u0026quot;);\n\tprintf(\u0026quot;%d\u0026quot;,max1);\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["longest","common","subsequence"]}}