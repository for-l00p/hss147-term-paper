{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1429036692,"rating":245,"authorHandle":"DarthPrince","modificationTimeSeconds":1429074262,"id":17401,"title":"\u003cp\u003eCodeforces Round #299 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/535/problem/A\" title\u003d\"Codeforces Round 299 (Div. 2)\"\u003e535A - Tavas and Nafas\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFirst of all check if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is one of the values \u003cspan class\u003d\"tex-span\"\u003e0, 10, 11, …, 19\u003c/span\u003e. Then, let’s have array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e[]\u003c/span\u003e \u003d {\u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;twenty\u0026quot;, \u0026quot;thirty\u0026quot;, …, \u0026quot;ninety\u0026quot;} and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e[]\u003c/span\u003e \u003d {\u0026quot;\u0026quot;, \u0026quot;one\u0026quot;, …, \u0026quot;nine\u0026quot;}.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/f1/79/f179fb20db8769e6767e14d14c32dff0188e9723.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/87/fc/87fcaf0ea43969254b58681ab776111e15446ff5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e \u003ci\u003emodulo\u003c/i\u003e 10\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is not one of the values above, then if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d 0\u003c/span\u003e, print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e, else if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d 0\u003c/span\u003e print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e]\u003c/span\u003e otherwise print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e]\u003c/span\u003e-\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTime complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/mytb2L\"\u003eCode\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/SoroushE\" title\u003d\"Master SoroushE\"\u003eSoroushE\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/CqgNe5\"\u003eAnother Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Candidate Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/dqiMNL\"\u003eAnother Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Haghani\" title\u003d\"Grandmaster Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/6tZmNF\"\u003ePython Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/535/problem/B\" title\u003d\"Codeforces Round 299 (Div. 2)\"\u003e535B - Tavas and SaDDas\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSol1: Consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e digits, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e) \u003d \u003c/span\u003e decimal representation of binary string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e is a binary string of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and its \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003eth\u003c/i\u003e\u003c/span\u003e digit is 0 if and only if the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003eth\u003c/i\u003e\u003c/span\u003e digit of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e. Finally, answer equals to \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e1\u003c/sup\u003e + 2\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + … + 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e - 1\u003c/sup\u003e + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e) + 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTime complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/bf/2f/bf2f5c0cc0c5dc587dc1e6ba53fe8b9d49249f30.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSol2: Count the number of lucky numbers less than or equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e using bitmask (assign a binary string to each lucky number by replacing 4s with 0 and 7s with 1).\u003c/p\u003e\u003cp\u003eTime complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/RTzRZK\"\u003eCode\u003c/a\u003e by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Candidate Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/j6Gamw\"\u003eAnother Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/SoroushE\" title\u003d\"Master SoroushE\"\u003eSoroushE\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/qKbG2Y\"\u003eAnother Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Haghani\" title\u003d\"Grandmaster Haghani\"\u003eHaghani\u003c/a\u003e \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/0fX8LQ\"\u003ePython Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/536/problem/A\" title\u003d\"Codeforces Round 299 (Div. 1)\"\u003e536A - Tavas and Karafs\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eLemma:\u003c/strong\u003e Sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, …, \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003em\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e) - \u003c/span\u003eTavas-Eatable if and only if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, …, \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e) ≤ \u003ci\u003et\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + … + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003em\u003c/i\u003e × \u003ci\u003et\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProof:\u003c/strong\u003e \u003cem\u003eonly if\u003c/em\u003e is obvious (if the sequence is Tavas-Eatable, then it fulfills the condition).\u003c/p\u003e\u003cp\u003eSo we should prove that if the conditions are fulfilled, then the sequence is Tavas-Eatable.\u003c/p\u003e\u003cp\u003eUse induction on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Induction definition: the lemma above is true for every sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e with sum of elements at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. So now we should prove it for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003eh\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ek\u003c/i\u003e + 1\u003c/span\u003e. There are two cases:\u003c/p\u003e\u003cp\u003e1- There are at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e non-zero elements in the sequence. So, the number of elements equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e is at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e (otherwise sum will exceed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e × \u003ci\u003et\u003c/i\u003e\u003c/span\u003e). So, we decrease \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e maximum elements by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. Maximum element will be at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e - 1\u003c/span\u003e and sum will be at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e × \u003ci\u003et\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e \u003d \u003ci\u003em\u003c/i\u003e(\u003ci\u003et\u003c/i\u003e - 1)\u003c/span\u003e. So according to the induction definition, the new sequence is \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003em\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e - 1) - \u003c/span\u003e Tavas-Eatable, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003em\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e) - \u003c/span\u003e Tavas-Eatable.\u003c/p\u003e\u003cp\u003e2- There are less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e non-zero elements in the sequence. We decrease them all by 1. Obviously, the new sequence has maximum element at most equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e - 1\u003c/span\u003e so its sum will be at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e(\u003ci\u003et\u003c/i\u003e - 1)\u003c/span\u003e. So according to the induction definition, the new sequence is \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003em\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e - 1) - \u003c/span\u003e Tavas-Eatable, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003em\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e) - \u003c/span\u003e Tavas-Eatable.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/d0/29/d029fd9b79b8757fab46580002f69667406cf177.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFor this problem, use binary search on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e and use the fact that the sequence is non-decreasing and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/95/43/95431e61fa667f2e6c3db625c7216d28c1ae8e15.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e .\u003c/p\u003e\u003cp\u003eTime complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eqlog\u003c/i\u003e(\u003ci\u003emt\u003c/i\u003e))\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/VyAw9l\"\u003eCode\u003c/a\u003e by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Candidate Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/IEYwEw\"\u003eAnother Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Haghani\" title\u003d\"Grandmaster Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/lcinCr\"\u003eJava Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/536/problem/B\" title\u003d\"Codeforces Round 299 (Div. 1)\"\u003e536B - Tavas and Malekas\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFirst of all you need to find uncovered positions in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e (because rest of them will determine uniquely). If there is no parados in covered positions (a position should have more than one value), then the answer will be \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e, otherwise it’s \u003cspan class\u003d\"tex-span\"\u003e26\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003euncovered\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. To check this, you just need to check that no two consecutive matches in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e have parados. So, for this purpose, you need to check if a prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e is equal to one of its suffixes in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e. You can easily check this with prefix function (or Z function).\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/92/ef/92ef523965127c2331a1cb16a5973c7a69639773.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eTime complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/hdKn12\"\u003eCode\u003c/a\u003e by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Candidate Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/ypEag6\"\u003eAnother Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Haghani\" title\u003d\"Grandmaster Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/AIjZhj\"\u003eJava Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/536/problem/C\" title\u003d\"Codeforces Round 299 (Div. 1)\"\u003e536C - Tavas and Pashmaks\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFor each competitor put the point \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7d/4a/7d4a077005efc687d2b754d4b34649ba8a59c07e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e in the Cartesian plane. So, the time a competitor finishes the match is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/28/1e/281e5a9927000ef89ed493470476cf72d299fb1b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eDetermine their convex hull(with maximum number of points. i.e it doesn’t matter to have \u003cspan class\u003d\"tex-span\"\u003eπ\u003c/span\u003e radians angle). Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e be the leftmost point on this convex hull (if there are more than one, choose the one with minimum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e component). Similarly, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e be the point with minimum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e component on this convex hull (if there are more than one, consider the leftmost).\u003c/p\u003e\u003cp\u003eProof: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cd/32/cd3291aa8c1fec8fb30de7e33946138497e8a72b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is the scalar product that is smaller if the point \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7d/4a/7d4a077005efc687d2b754d4b34649ba8a59c07e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is farther in the direction of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eS\u003c/i\u003e, \u003ci\u003eR\u003c/i\u003e)\u003c/span\u003e. It\u0027s obvious that the farthest points in some direction among the given set lie on a convex hull. \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eS\u003c/i\u003e, \u003ci\u003eR\u003c/i\u003e)\u003c/span\u003e can get any value that is vector in first quadrant. So we need the points on the convex hull that we actually calculate (also we know that the points on the right or top of the convex hull, are not in the answer, because they\u0027re always losers).\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/c6/62/c66212aca04cffa66437f18c5af885b94473de83.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIt’s easy to see that the answer is the points on the path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e on the convex hull (bottom-left arc). i.e the bottom-left part of the convex hull.\u003c/p\u003e\u003cp\u003eTime complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e\u003c/p\u003e\u003cp\u003eIn this problem, we recommend you to use integers. How ? Look at the code below\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/ccMHza\"\u003eCode\u003c/a\u003e by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Candidate Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn this code, function \u003ccode\u003eCROSS\u003c/code\u003e returns \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f7/e4/f7e4fb3beefe4df2fc1e8b99861363126dfeab3c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (it\u0027s from order of \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e16\u003c/sup\u003e\u003c/span\u003e, so there won\u0027t be any overflows.)\u003c/p\u003e\u003cp\u003eIn \u003ccode\u003edouble\u003c/code\u003e version, you should have a very small epsilon.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/pcc5xc\"\u003eCode of double version\u003c/a\u003e by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Candidate Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/PTMgaW\"\u003eAnother Code With Lower Envelope of Lines\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Haghani\" title\u003d\"Grandmaster Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/mGeglg\"\u003eJava Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/536/problem/D\" title\u003d\"Codeforces Round 299 (Div. 1)\"\u003e536D - Tavas in Kansas\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFor each vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, put a point \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003edis\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e), \u003ci\u003edis\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e))\u003c/span\u003e with its point (score) in the Cartesian plane. The first player in his/her turn chooses a vertical line and erases all the points on its left side. Second player in his/her turn chooses a horizontal line and erases all the point below it.\u003c/p\u003e\u003cp\u003eEach player tries to maximize his/her score.\u003c/p\u003e\u003cp\u003eObviously, each time a player chooses a line on the right/upper side of his/her last choice. Imagine that there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e different \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e components \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026lt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u0026lt; … \u0026lt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e different \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e components \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026lt; \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u0026lt; … \u0026lt; \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e among all these lines. So, we can show each state before the game ends with a pair \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003eA\u003c/i\u003e, 1 ≤ \u003ci\u003eb\u003c/i\u003e ≤ \u003ci\u003eB\u003c/i\u003e\u003c/span\u003e It means that in this state a point \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eX\u003c/i\u003e, \u003ci\u003eY\u003c/i\u003e)\u003c/span\u003e is not erased yet if and only if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003eX\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003eY\u003c/i\u003e\u003c/span\u003e).\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/b5/cf/b5cfa7826f37d299b030656c80382411f93c58a0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo, using dp, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ 2\u003c/span\u003e) is the maximum score of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003eth\u003c/i\u003e\u003c/span\u003e player in state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e and it’s \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003eth\u003c/i\u003e\u003c/span\u003e player’s turn. So, consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e is the sum of the scores of all valid points in state \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e is the amount of them. So, \u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 1\u003c/span\u003e then, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e] - \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ec\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e][2])\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≤ \u003ci\u003ec\u003c/i\u003e ≤ \u003ci\u003eA\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e[\u003ci\u003ec\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e] \u0026lt; \u003ci\u003et\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eOtherwise \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e][\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e] - \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003ec\u003c/i\u003e][1])\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e ≤ \u003ci\u003ec\u003c/i\u003e ≤ \u003ci\u003eB\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003ec\u003c/i\u003e] \u0026lt; \u003ci\u003et\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e). \u003c/p\u003e\u003cp\u003eSo we need two backward \u003ccode\u003efor\u003c/code\u003es for our dp and another \u003ccode\u003efor\u003c/code\u003e on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. So, now the only thing that matters is updating the dp. For this purpose, we need two more arrays \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQB\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQA\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e][1] \u003d \u003c/span\u003e the minimum value of pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e][2], \u003ci\u003et\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e])\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQA\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e][2] \u003d \u003c/span\u003e minimum value of pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e][2], \u003ci\u003et\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e])\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e] \u0026gt; \u003ci\u003eQA\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e][1].\u003ci\u003esecond\u003c/i\u003e\u003c/span\u003e in the states we’ve seen so far. Similarly, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQB\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][1] \u003d \u003c/span\u003e the minimum value of pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][1], \u003ci\u003et\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e])\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQB\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][2] \u003d \u003c/span\u003e minimum value of pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][1], \u003ci\u003et\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e])\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] \u0026gt; \u003ci\u003eQB\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][1].\u003ci\u003esecond\u003c/i\u003e\u003c/span\u003e in the states we’ve seen so far. Now updating dp is pretty easy :\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e][1] \u003d \u003ci\u003es\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e] - (\u003ci\u003et\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e] ≤ \u003ci\u003eQA\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e][1].\u003ci\u003esecond\u003c/i\u003e?\u003ci\u003eQA\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e][2].\u003ci\u003efirst\u003c/i\u003e: \u003ci\u003eQA\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e][1].\u003ci\u003efirst\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e][2] \u003d \u003ci\u003es\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e] - (\u003ci\u003et\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e] ≤ \u003ci\u003eQB\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][1].\u003ci\u003esecond\u003c/i\u003e?\u003ci\u003eQB\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][2].\u003ci\u003efirst\u003c/i\u003e: \u003ci\u003eQB\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][1].\u003ci\u003efirst\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAnd updating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQB\u003c/i\u003e\u003c/span\u003e is super easy.\u003c/p\u003e\u003cp\u003eNow, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e \u003d \u003ci\u003edp\u003c/i\u003e[1][1][1]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e be the sum of scores of all points. So, the score of first player is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e and the second one is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e - \u003ci\u003ef\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTime complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/FZ5Ojl\"\u003eCode\u003c/a\u003e by \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/sobhan.miryoosefi\" title\u003d\"Expert sobhan.miryoosefi\"\u003esobhan.miryoosefi\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/QvOITL\"\u003eAnother Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Haghani\" title\u003d\"Grandmaster Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/0JPkPt\"\u003eJava Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/536/problem/E\" title\u003d\"Codeforces Round 299 (Div. 1)\"\u003e536E - Tavas on the Path\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eLet\u0027s call the answer for vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e with edges \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ee\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ee\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e on the path, score of sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e(\u003ci\u003ee\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e), \u003ci\u003ew\u003c/i\u003e(\u003ci\u003ee\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e), ..., \u003ci\u003ew\u003c/i\u003e(\u003ci\u003ee\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eUse heavy-light decomposition. Decompose the edges into chains. So, for each Query, decompose the path into subchains. After solving the problem for them, combine them. Problem for subchains is :\u003c/p\u003e\u003cp\u003eWe have an array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, …, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e queries. Each query gives numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, \u003ci\u003el\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ex\u003c/i\u003e ≤ \u003ci\u003ey\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e) and we should print the goodness of subarray \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e + 1\u003c/sub\u003e, …, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/91/e2/91e2ec0997c59d5c83702748318aab8aaf21259a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFor this problem, we have too choices: 1.Solve offline with a normal segment tree. 2.Solve online using persistent segment tree. Now, I prefer to use the first approach. Sort the array to have a permutation of \u003cspan class\u003d\"tex-span\"\u003e1, 2, …, \u003ci\u003en\u003c/i\u003e\u003c/span\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, …, \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sub\u003e ≥ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sub\u003e ≥ … ≥ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e. Also sort the queries in the decreasing order of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e. No for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - \u003ci\u003eth\u003c/i\u003e\u003c/span\u003e query (in the sorted order) we have information: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, \u003ci\u003el\u003c/i\u003e, \u003ci\u003eindex\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eThen, use two pointers. Keep a \u003ccode\u003epointer \u003d n\u003c/code\u003e and Initially we have a binary string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e with all indices set to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. Then in each query:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor i \u003d 1 to q\n\twhile (pointer \u0026gt; 1 and l[i] \u0026gt;\u003d a[pointer])\n\t\tSet p[pointer]-th bit of b (from left) to 1\n\t\tpointer \u003d pointer - 1\n\tanswer to query number index[i] \u003d T(bx…by)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, we should fins \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e…\u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. For this purpose, we need a segment tree. In each node of the segment tree, we need to keep a package named \u003ccode\u003enode\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estruct node{\n\tint p, s, cnt, tot;\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eA package \u003ccode\u003enode\u003c/code\u003e is used for calculating \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e of a binary string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d \u003c/span\u003e the number of leading 1s, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u003d \u003c/span\u003e the number of trading 1s, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e \u003d \u003c/span\u003e the total number of 1s, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etot\u003c/i\u003e \u003d \u003c/span\u003e the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e value of the binary string after deleting its leading and trading 1s.\u003c/p\u003e\u003cp\u003eMerging two nodes is really easy. Also after reversing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, we just need to swap \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSo, we can determine the \u003ccode\u003enode\u003c/code\u003e of this subarray in subchains. \u003c/p\u003e\u003cp\u003eAfter solving these offline for subchains it\u0027s time for combining.\u003c/p\u003e\u003cp\u003eMerge the \u003ccode\u003enode\u003c/code\u003e of subchains in the path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eLCA\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e, \u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e then merge the result with the reverse of the \u003ccode\u003enode\u003c/code\u003es of answers in the subchains in path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eLCA\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e, \u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTime complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e((\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003ci\u003elog\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/N0Vb7e\"\u003eCode\u003c/a\u003e by \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/PrinceOfPersia\" title\u003d\"Candidate Master PrinceOfPersia\"\u003ePrinceOfPersia\u003c/a\u003e (This was one of the hardest codes I ever wrote in competitive programming :D)\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/7blKHl\"\u003eShorter Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Haghani\" title\u003d\"Grandmaster Haghani\"\u003eHaghani\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/d2s583\"\u003eJava Code\u003c/a\u003e by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Zlobober\" title\u003d\"Grandmaster Zlobober\"\u003eZlobober\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"//assets.codeforces.com/rounds/535/92293431633759516939.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIf there\u0027s any suggestion or error, just let me know.\u003c/p\u003e\u003c/div\u003e","tags":["editorial","cf-round","299","tavas"]}}