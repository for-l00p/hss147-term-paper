{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1428835686,"rating":38,"authorHandle":"IAmNotDaniil","modificationTimeSeconds":1429091206,"id":17365,"title":"\u003cp\u003eCodeforces Round #298 (Div. 2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/534/problem/A\" title\u003d\"Codeforces Round 298 (Div. 2)\"\u003e534A - Exam\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIs easy to see that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≥ 4\u003c/span\u003e. There are many algorithms that can be used to build a correct sequence of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≥ 4\u003c/span\u003e. For example, students can be seated from left to right with the first to seat students with odd numbers in decreasing order starting with largest odd number. Then similary to seat students with even numbers. In this sequence the absolute difference between two adjacent odd (or even) numbers equal to 2. And the difference between odd and even numbers greater or equal 3 (because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≥ 4\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eCases \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 2\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 3\u003c/span\u003e are considered separately. Solution complexity — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/534/submission/10691992\" title\u003d\"Submission 10691992 by Ne0n25\"\u003e10691992\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/534/problem/B\" title\u003d\"Codeforces Round 298 (Div. 2)\"\u003e534B - Covered Path\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIt can be easily proved that every second \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e0 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003et\u003c/i\u003e - 1\u003c/span\u003e) the maximum possible speed is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fb/09/fb0988707a0b9a8c9c63bf60273c3d48717af27e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. You can iterate through \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e - 1\u003c/span\u003e and the values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eSolution complexity — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003et\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAlso you can use next fact. If current speed equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e and left \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e seconds then there is a way to get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e speed at the end only if \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003eu\u003c/i\u003e - \u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e| ≤ \u003ci\u003et\u003c/i\u003e·\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. Consider this criteria, one can simply try to change speed to maximum possible (from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e + \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e down to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e - \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e), choosing first giving a way to reach the end of the path.\u003c/p\u003e\u003cp\u003eJury\u0027s solutions: \u003ca href\u003d\"/contest/534/submission/10692136\" title\u003d\"Submission 10692136 by Ne0n25\"\u003e10692136\u003c/a\u003e и \u003ca href\u003d\"/contest/534/submission/10692160\" title\u003d\"Submission 10692160 by Ne0n25\"\u003e10692160\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/534/problem/C\" title\u003d\"Codeforces Round 298 (Div. 2)\"\u003e534C - Polycarpus\u0027 Dice\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eSolution uses next fact. With \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e dice \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e you can dial any sum from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4e/86/4e866f8dc5aab6c0a6a2bae43fa2ab2d1bba5a25.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. This is easily explained by the fact that if there is a way to get the amount of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e \u0026gt; \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, then there is a way to dial the sum equal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e - 1\u003c/span\u003e, which is obtained by decreasing the value of one die by one. \u003c/p\u003e\u003cp\u003eLet\u0027s denote sum of all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e dice as \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/60/4e/604e28e1f8b680b9e627b9ad6b7b0e4a4684297e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Fix the dice \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (value on it denote as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ex\u003c/i\u003e ≤ \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e). Using the other dice we can select \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1 ≤ \u003ci\u003es\u003c/i\u003e ≤ \u003ci\u003eS\u003c/i\u003e - \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e). We know that average value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1 ≤ \u003ci\u003eA\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e ≤ \u003ci\u003eS\u003c/i\u003e - \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, giving \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e - (\u003ci\u003en\u003c/i\u003e - 1) ≥ \u003ci\u003ex\u003c/i\u003e ≥ \u003ci\u003eA\u003c/i\u003e - (\u003ci\u003eS\u003c/i\u003e - \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eUsing facts described above, for every dice one can calculate a possible values segment, giving the answer for the count of impossible values of that dice. Solution asymptotic — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/534/submission/10692192\" title\u003d\"Submission 10692192 by Ne0n25\"\u003e10692192\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/534/problem/D\" title\u003d\"Codeforces Round 298 (Div. 2)\"\u003e534D - Handshakes\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eFrom here we will not consider resulting permutation but correct handshakes sequence (rearranged given sequence). Formally, the sequence of handshakes count \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is correct if and only if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e ≤ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e ≡ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1 ± \u003ci\u003eod\u003c/i\u003e{\u003ci\u003em\u003c/i\u003e}\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u003d 0\u003c/span\u003e. To form correct sequence, we can use following greedy algorithm.\u003c/p\u003e\u003cp\u003eFirst, place 0 as the first number. Next, for every following number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e we will select maximum possible number from numbers left, matching above constraints (in simple case it will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1\u003c/span\u003e, otherwise we will check if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 2\u003c/span\u003e left, e.t.c).\u003c/p\u003e\u003cp\u003eThe solution may divide given sequence into three parts (depending on modulo by 30), and using, for example, data structure \u0027\u0027set\u0027\u0027, quickly find the next number to place into resulting sequence. Such solution will work in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5d/1f/5d1f29f648247e77966a5b1703590aea2a6a75b6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. There is also possible to get \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e asymptotics using path compression technique.\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/534/submission/10692252\" title\u003d\"Submission 10692252 by Ne0n25\"\u003e10692252\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/534/problem/E\" title\u003d\"Codeforces Round 298 (Div. 2)\"\u003e534E - Berland Local Positioning System\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eSuppose that the bus started his way from the stop with number 1 and modulate its way during \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e stops. For every stop we will calculate how many times this stop was visited by the bus at that way. Check if that counts match counts in the input and update the answer if needed. Then we will try to move the start stop to stop with number 2. It\u0027s easy to see that the last visited stop (as long as bus must visit \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e stops) will move to the next stop. So we need to modulate bus way to another one stop from first stop and from last stop to change the starting stop to another (it makes maximum of four counts to be updated). It could be done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e time.\u003c/p\u003e\u003cp\u003eThis way we need to move starting stop to every variant (its count is equal to \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003en\u003c/i\u003e - 2\u003c/span\u003e) and for every variant update the answer if needed. Average solution works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e time.\u003c/p\u003e\u003cp\u003eJury\u0027s solution: \u003ca href\u003d\"/contest/534/submission/10705354\" title\u003d\"Submission 10705354 by IAmNotDaniil\"\u003e10705354\u003c/a\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/534/problem/F\" title\u003d\"Codeforces Round 298 (Div. 2)\"\u003e534F - Simplified Nonogram\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eThis task has several solution algorithms.\u003c/p\u003e\u003cp\u003eOne of them could be described next way. Let\u0027s divide \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003ci\u003em\u003c/i\u003e\u003c/span\u003e field into two parts with almost same number of columns (it will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × (\u003ci\u003em\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e). Let\u0027s solve the puzzle for every part of the field with brute-force algorithm (considering column constraints on number of blocks) with memorization (we do not need same solutions with same number of blocks in rows). Then we will use meet-in-the-middle approach to match some left part with right part to match constraints on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003ci\u003em\u003c/i\u003e\u003c/span\u003e field.\u003c/p\u003e\u003cp\u003eAnother solution could be profile dynamic programming, where the profile is the number of blocks in the row.\u003c/p\u003e\u003cp\u003eJury\u0027s solution uses both ideas: \u003ca href\u003d\"/contest/534/submission/10705343\" title\u003d\"Submission 10705343 by IAmNotDaniil\"\u003e10705343\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["codeforces","editorial","round","298","300 is close"]}}