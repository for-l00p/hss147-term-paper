{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1508601943,"rating":0,"authorHandle":"pabloskimg","modificationTimeSeconds":1508730022,"id":55331,"title":"\u003cp\u003eFind odd length path between two nodes in undirected graph (multiple queries)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI\u0027m trying to solve the following problem (Electrical Pollution): \u003ca href\u003d\"https://www.urionlinejudge.com.br/judge/en/problems/view/1334\"\u003ehttps://www.urionlinejudge.com.br/judge/en/problems/view/1334\u003c/a\u003e (please read the problem statement). So basically we are given many 2 variable (x + y \u003d c) and 1 variable (x \u003d c) linear equations, i.e measurements, and then we are given multiple 2 variable (w + z \u003d ?) and 1 variable (w \u003d ?) queries and we have to either give the exact result if the answer can be inferred from the previous measurements, or * otherwise.\u003c/p\u003e\u003cp\u003eMy idea is to build a graph where the nodes are the variables and the edges are the 2-variable equations connecting them.\u003c/p\u003e\u003cp\u003e1) As a first step, we already know the values of the variables in the 1-variable measurements, and starting from them we can propagate and infer the values of all the other variables connected with BFS over the graph.\u003c/p\u003e\u003cp\u003e2) As a second step, we can solve equation systems with an odd number of equations where there are the same number of equations and variables. Basically we can run DFS, find loops (backward edges), if the loop has an odd length then we can easily solve the equation system of the edges in that loop (say, we solve for the first variable in the loop) and then we propagate to the whole connected component with BFS (as in 1).\u003c/p\u003e\u003cp\u003e3) It turns out that 1) and 2) are not enough, because it\u0027s not necessary to know the exact values of both variables to be able to know the value of their sum. In fact, given a 2-variable query (x + y \u003d ?), if we can find a path (not necessarily a loop) of odd length, and if we enumerate the measurements along that path with 1, 2, 3, ..., n, then we can solve the equation (x + y \u003d ?) by adding the measurements with odd index and subtracting the measurements with even index along that path. Moreover, any odd-length path would do the trick, because the final result will be the sum of the variables at both ends of the path, and variables in between just cancel each other (like a sort of telescoping sum \u003ca\u003ehttp://mathworld.wolfram.com/TelescopingSum.html)\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eMy question is basically about how to implement point 3). Right know I\u0027m not sure about how to do it. I guess it shouldn\u0027t be necessary to find a specific path, because the final result will not depend on the exact path taken, just on the end points. Maybe precomputing partial sums and combining them using LCA somehow or something like that could work, but I cannot see how to exactly do the combination.\u003c/p\u003e\u003cp\u003eAny help will be deeply appreciated :)\u003c/p\u003e\u003cp\u003eThanks in advance\u003c/p\u003e\u003c/div\u003e","tags":["graph","dfs","bfs","path query"]}}