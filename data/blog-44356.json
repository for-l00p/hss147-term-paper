{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1460651670,"rating":81,"authorHandle":"royappa","modificationTimeSeconds":1460651670,"id":44356,"title":"\u003cp\u003eWhy do top guys favor array-based versus recursive DP?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThis is a question about psychology, not about the best way to program something.\u003c/p\u003e\u003cp\u003eI have often felt that the top contestants seem to prefer writing DP solutions using for-loops and arrays, instead of memoized recursive functions.\u003c/p\u003e\u003cp\u003eCertainly there are times when one or the other method is \u0026quot;right\u0026quot; based on the density of the search space, depth of recursion etc. But often it doesn\u0027t matter, and in those cases, the top programmers overwhelmingly use loop+array. This seems counterintuitive to me because the loop+array approach often has corner cases to think about regarding array initialization and loop boundaries. Programming with a recursive function, on the other hand, seems to correspond more \u0026quot;naturally\u0026quot; with a mathematical expression of a recursive formula. The base cases are much simpler and correspond more directly with the math of the problem.\u003c/p\u003e\u003cp\u003eFor a silly example, take f(n) \u003d { if (n \u003d\u003d 0) return 1; else return n*f(n-1); }, this is almost like the mathematical way of writing it (like \u003ca href\u003d\"https://gyazo.com/abfdc12b78cbcd2d9d1cf20678546014\"\u003ethis notation\u003c/a\u003e from Wikipedia ). \u003c/p\u003e\u003cp\u003eBut in no math book would you see f[0] \u003d 1; for (int i \u003d 1; i \u0026lt;\u003d n; i++) { f[i] \u003d i*f[i-1]; }. That loop is not \u0026quot;the math way\u0026quot;. Yet the top programmers seem to favor loops.\u003c/p\u003e\u003cp\u003eTo test this theory I performed a rigorous scientific experiment. Here is the problem for topcoder TCHS 44 medium: \u003ca href\u003d\"https://community.topcoder.com/stat?c\u003dproblem_statement\u0026amp;pm\u003d8250\u0026amp;rd\u003d10795\"\u003ehttps://community.topcoder.com/stat?c\u003dproblem_statement\u0026amp;pm\u003d8250\u0026amp;rd\u003d10795\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIt has a simple recursive solution. I then looked at ALL the red user submissions in the practice room, 32 total. This screenshot shows that \u003ca href\u003d\"https://gyazo.com/8b3fca880d8951a4bfed2778c1d6ce8c\"\u003ethe top 12 all used array+loop\u003c/a\u003e. The 13th used memoization (and his solution was faster â€” because even for those guys I think saving a few seconds thought on boundary cases makes a difference).\u003c/p\u003e\u003cp\u003eOf the 32 \u0026quot;red\u0026quot; solutions, only 6 used recursive functions.\u003c/p\u003e\u003cp\u003eWe know the top guys are highly mathematically minded, so why don\u0027t they favor that style in their programming? Do they start out that way and then turn to array/loops after practicing lots of problems? Or do they start out writing like that the moment they encounter recursive solutions because that is the way their mind things? (bottom-up instead of top-down)? Do they hate writing a separate function when you can do everything in the main() ?\u003c/p\u003e\u003cp\u003eWould be curious to get anybody\u0027s thoughts, if they more naturally write loop+array, why they do so. And I don\u0027t know if it\u0027s just \u0026quot;top\u0026quot; programmers who do this or some set of people across all ranks. I mainly study top programmers solutions to learn, so my sample is obviously biased.\u003c/p\u003e\u003c/div\u003e","tags":["programming","dp","recursion"]}}