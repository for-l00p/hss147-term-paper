{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1467833452,"rating":113,"authorHandle":"reality420","modificationTimeSeconds":1472491371,"id":45912,"title":"\u003cp\u003eCodeforces Round #361 (Div. 2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/689/problem/A\"\u003eA.Mike and Cellphone\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAuthor:\u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/dans\" title\u003d\"International master dans\"\u003edans\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eDeveloped:\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/reality\" title\u003d\"Candidate Master reality\"\u003ereality\u003c/a\u003e,\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ThatMathGuy\" title\u003d\"Candidate Master ThatMathGuy\"\u003eThatMathGuy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can try out all of the possible starting digits, seeing if we will go out of bounds by repeating the same movements. If it is valid and different from the correct one, we output \u0026quot;NO\u0026quot;, otherwise we just output \u0026quot;YES\u0026quot;.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003epair \u0026lt; int , int \u0026gt; s[55][55];\nint v[55][55];\npair \u0026lt; int , int \u0026gt; where[55];\nint main(void)\n{\n    for (int i \u003d 1;i \u0026lt;\u003d 10;++i)\n        for (int j \u003d 1;j \u0026lt;\u003d 10;++j)\n            v[i][j] \u003d -1;\n    v[1][1] \u003d 1;\n    v[1][2] \u003d 2;\n    v[1][3] \u003d 3;\n    v[2][1] \u003d 4;\n    v[2][2] \u003d 5;\n    v[2][3] \u003d 6;\n    v[3][1] \u003d 7;\n    v[3][2] \u003d 8;\n    v[3][3] \u003d 9;\n    v[4][2] \u003d 0;\n    for (int k \u003d 0;k \u0026lt;\u003d 9;++k)\n        for (int i \u003d 1;i \u0026lt;\u003d 4;++i)\n            for (int j \u003d 1;j \u0026lt;\u003d 4;++j)\n                if (v[i][j] \u003d\u003d k) where[k] \u003d {i,j};\n    for (int i \u003d 0;i \u0026lt;\u003d 9;++i)\n        for (int j \u003d 0;j \u0026lt;\u003d 9;++j)\n            s[i][j] \u003d {where[i].x - where[j].x,where[i].y - where[j].y};\n    string number;\n    int len;\n    fi\u0026gt;\u0026gt;len;\n    fi\u0026gt;\u0026gt;number;\n    vector \u0026lt; string \u0026gt; ans;\n    for (int k \u003d 0;k \u0026lt;\u003d 9;++k)\n        if (k !\u003d number[0] - \u00270\u0027)\n        {\n            string cnt \u003d \u0026quot;\u0026quot;;\n            cnt +\u003d k + \u00270\u0027;\n            auto pos \u003d where[k];\n            for (int i \u003d 0;i \u0026lt; len - 1;++i)\n            {\n                pos.x +\u003d s[number[i+1] - \u00270\u0027][number[i] - \u00270\u0027].x;\n                pos.y +\u003d s[number[i+1] - \u00270\u0027][number[i] - \u00270\u0027].y;\n                if (1 \u0026lt;\u003d pos.x \u0026amp;\u0026amp; pos.x \u0026lt;\u003d 4 \u0026amp;\u0026amp; 1 \u0026lt;\u003d pos.y \u0026amp;\u0026amp; pos.y \u0026lt;\u003d 3 \u0026amp;\u0026amp; v[pos.x][pos.y] !\u003d -1)\n                    cnt +\u003d v[pos.x][pos.y] + \u00270\u0027;\n                else break;\n            }\n            if (cnt.length() \u003d\u003d len) \n            {\n                fo \u0026lt;\u0026lt; \u0026quot;NO\\n\u0026quot;;\n                return 0;\n            }\n        }\n    puts(\u0026quot;YES\u0026quot;);\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAnother C++ code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003epair\u0026lt;int, int\u0026gt; pos[10];\nint n;\nchar a[100]; pair\u0026lt;int, int\u0026gt; v[100];\npair\u0026lt;int, int\u0026gt; operator - (pair\u0026lt;int, int\u0026gt; a, pair\u0026lt;int, int\u0026gt; b){\n    return mp(a.first - b.first, a.second - b.second);\n}\npair\u0026lt;int, int\u0026gt; operator + (pair\u0026lt;int, int\u0026gt; a, pair\u0026lt;int, int\u0026gt; b){\n    return mp(a.first + b.first, a.second + b.second);\n}\nbool inside(pair\u0026lt;int, int\u0026gt; pos){\n    return (pos.first \u0026lt;\u003d 3 \u0026amp;\u0026amp; 1 \u0026lt;\u003d pos.first \u0026amp;\u0026amp; pos.second \u0026lt;\u003d 3 \u0026amp;\u0026amp; pos.second \u0026gt;\u003d 1) || pos \u003d\u003d (mp(4, 2));\n}\nint main(){\n    int cnt \u003d 0;\n    FOR(x, 1, 3){\n        FOR(y, 1, 3){\n            cnt++;\n            pos[cnt] \u003d mp(x, y);\n        }\n    }\n    pos[0] \u003d mp(4, 2);\n    cin \u0026gt;\u0026gt; n;\n    scanf(\u0026quot;%s\u0026quot;, a+1);\n    FOR(i, 1, n-1){\n        v[i] \u003d pos[a[i+1] - \u00270\u0027] - pos[a[i] - \u00270\u0027];\n    }\n    if(n \u003d\u003d 1) return cout \u0026lt;\u0026lt; \u0026quot;NO\u0026quot;, 0;\n    int c \u003d 0;\n    FOR(i, 0, 9){\n        bool ok \u003d true;\n        pair\u0026lt;int, int\u0026gt; curr_pos \u003d pos[i];\n        FOR(i, 1, n-1){\n            curr_pos \u003d curr_pos + v[i];\n            if(!inside(curr_pos)) ok \u003d false;\n        }\n        if(ok) c++;\n    }\n    if(c \u003d\u003d 1) return cout \u0026lt;\u0026lt; \u0026quot;YES\u0026quot;, 0;\n    cout \u0026lt;\u0026lt; \u0026quot;NO\u0026quot;;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAnother C++ code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include\u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\ntypedef long long ll;\n \nbool mark[11];\nbool flag1,flag2;\n \nint main()\n{\n    ll n;\n    string s;\n    cin\u0026gt;\u0026gt;n;\n    cin\u0026gt;\u0026gt;s;\n    for(int i\u003d0;i\u0026lt;n;i++){\n        mark[s[i]-\u00270\u0027]\u003dtrue;\n    }\n    if((mark[1]||mark[2]||mark[3])\u0026amp;\u0026amp;(mark[7]||mark[9]))\n        flag1\u003dtrue;\n    if((mark[1]||mark[4]||mark[7])\u0026amp;\u0026amp;(mark[3]||mark[6]||mark[9]))\n        flag2\u003dtrue;\n    if((mark[1]||mark[2]||mark[3])\u0026amp;\u0026amp;mark[0]){\n        cout\u0026lt;\u0026lt;\u0026quot;YES\u0026quot;;\n        return 0;\n    }\n    if(flag1\u0026amp;\u0026amp;flag2){\n        cout\u0026lt;\u0026lt;\u0026quot;YES\u0026quot;;\n        return 0;\n    }\n    cout\u0026lt;\u0026lt;\u0026quot;NO\u0026quot;;\nreturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ePython code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003en \u003d int(raw_input())\ns \u003d raw_input()\na \u003d []\nfor i in range(10):\n\ta.append(True)\nfor i in range(n):\n\tc \u003d int(s[i])\n\ta[c] \u003d False\ninc \u003d 0\nif a[1] and a[2] and a[3]:\n\tinc \u003d -3\nif a[7] and a[9] and a[0]:\n\tinc \u003d +3\nif a[1] and a[4] and a[7] and a[0]:\n\tinc \u003d -1\nif a[3] and a[6] and a[9] and a[0]:\n\tinc \u003d +1\nif inc \u003d\u003d 0:\n\tprint(\u0026quot;YES\u0026quot;)\nelse:\n\tprint(\u0026quot;NO\u0026quot;)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/689/problem/B\"\u003eB. Mike and Shortcuts\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAuthor:\u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/dans\" title\u003d\"International master dans\"\u003edans\u003c/a\u003e,\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/reality\" title\u003d\"Candidate Master reality\"\u003ereality\u003c/a\u003e\u003c/p\u003e\u003cp\u003eDeveloped:\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/reality\" title\u003d\"Candidate Master reality\"\u003ereality\u003c/a\u003e,\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ThatMathGuy\" title\u003d\"Candidate Master ThatMathGuy\"\u003eThatMathGuy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can build a complete graph where the cost of going from point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ei\u003c/i\u003e - \u003ci\u003ej\u003c/i\u003e|\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e! \u003d \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e.The we can find the shortest path from point 1 to point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.One optimisation is using the fact that there is no need to go from point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e ≠ \u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e,\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e ≠ \u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e,\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e ≠ \u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e so we can add only edges \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e + 1)\u003c/span\u003e,\u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e - 1)\u003c/span\u003e,\u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003es\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e])\u003c/span\u003e with cost 1 and then run a bfs to find the shortest path for each point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eYou can also solve the problem by taking the best answer from left and from the right and because \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e then we can just iterate for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e form \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and get the best answer from left and maintain a deque with best answer from right. \u003c/p\u003e\u003cp\u003eComplexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ code with queue\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eint d[1 \u0026lt;\u0026lt; 20];\nint s[1 \u0026lt;\u0026lt; 20];\nqueue \u0026lt; int \u0026gt; Q;\nvoid go(int k,int val)\n{\n    if (d[k]) return;\n    d[k] \u003d val;\n    Q.push(k);\n}\nint main(void)\n{\n    int n;\n    scan(n);//scan integer\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i) scan(s[i]);\n    go(1,1);\n    while (!Q.empty())\n    {\n        int node \u003d Q.front();\n        Q.pop();\n        go(s[node],d[node] + 1);\n        if (node \u0026gt; 1) go(node - 1,d[node] + 1);\n        if (node \u0026lt; n) go(node + 1,d[node] + 1);\n    }\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i) print(d[i] - 1);\n    eol;\n    return 0;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ code with deque\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nconst int N \u003d int(1e6) + 5;\nint n, d[N], a[N], bd[N];\n\nint main() {\n\tassert(cin \u0026gt;\u0026gt; n);\n\tfor (int i \u003d 0; i \u0026lt; n; ++i) {\n\t\tassert(scanf(\u0026quot;%d\u0026quot;, \u0026amp;a[i]) \u003d\u003d 1);\n\t\ta[i]--;\n\t\td[i] \u003d i;\n\t}\n\t\n\tfor (int i \u003d 0; i \u0026lt; n; ++i)\n\t\tbd[i] \u003d int(1e9);\n\n\tdeque \u0026lt;int\u0026gt; st;\n\n\tfor (int i \u003d 0; i \u0026lt; n; ++i) {\n\t\tif (i)\n\t\t\td[i] \u003d min(d[i], d[i - 1] + 1);\n\n\t\twhile (!st.empty() \u0026amp;\u0026amp; st.front() \u0026lt; i)\n\t\t\tst.pop_front();\n\n\t\tif (!st.empty())\n\t\t\td[i] \u003d min(d[i], bd[st.front()] - i);\n\n\t\td[a[i]] \u003d min(d[a[i]], d[i] + 1);\n\t\tbd[a[i]] \u003d a[i] + d[a[i]];\n\n\t\twhile (!st.empty() \u0026amp;\u0026amp; bd[a[i]] \u0026lt;\u003d bd[st.back()])\n\t\t\tst.pop_back();\n\n\n\t\tst.push_back(a[i]);\n\t}\n\n\tfor (int i \u003d 0; i \u0026lt; n; ++i) {\n\t\tif (i)\n\t\t\tputchar(\u0027 \u0027);\n\t\tprintf(\u0026quot;%d\u0026quot;, d[i]);\n\t}\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ePython code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport Queue\nn \u003d int(raw_input())\na \u003d raw_input().split(\u0027 \u0027)\nused \u003d []\nd \u003d []\nfor i in range(0, n):\n    used.append(False)\n    d.append(-1)\nq \u003d Queue.Queue()\nq.put(0)\nd[0] \u003d 0\nwhile not(q.empty()):\n    v \u003d q.get()\n    for dl in range(-1, +2):\n        u \u003d v + dl\n        if 0 \u0026lt;\u003d u and u \u0026lt; n and d[u] \u003d\u003d -1:\n            d[u] \u003d d[v] + 1\n            q.put(u)\n    u \u003d int(a[v]) - 1\n    if d[u] \u003d\u003d -1:\n        d[u] \u003d d[v] + 1\n        q.put(u)\nfor i in range(0, n):\n    print(d[i])\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/0b/290b2e73e20a20cad9bf323c527cc82c6dd9980a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e What if you have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e queries \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e ≤ 2 × 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e of type \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e and you have to answer the minimal distance from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/689/problem/C\"\u003eC. Mike and Chocolate Thieves\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAuthor:\u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/dans\" title\u003d\"International master dans\"\u003edans\u003c/a\u003e,\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/reality\" title\u003d\"Candidate Master reality\"\u003ereality\u003c/a\u003e\u003c/p\u003e\u003cp\u003eDeveloped:\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/reality\" title\u003d\"Candidate Master reality\"\u003ereality\u003c/a\u003e,\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ThatMathGuy\" title\u003d\"Candidate Master ThatMathGuy\"\u003eThatMathGuy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSuppose we want to find the number of ways for a fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e, \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e ( \u003cspan class\u003d\"tex-span\"\u003e0 \u0026lt; \u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e \u0026lt; \u003ci\u003ec\u003c/i\u003e \u0026lt; \u003ci\u003ed\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e ) be the number of chocolates the thieves stole. By our condition, they have the form \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d \u003ci\u003eak\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e \u003d \u003ci\u003eak\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e, \u003ci\u003ed\u003c/i\u003e \u003d \u003ci\u003eak\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e\u003c/span\u003e,where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is a positive integer. We can notice that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d5/d7/d5d73aa1fd96d71d697b5ae181b6d01f4dd4eb9d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e , so for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e we can count how many \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e satisfy the conditions \u003cspan class\u003d\"tex-span\"\u003e0 \u0026lt; \u003ci\u003ea\u003c/i\u003e \u0026lt; \u003ci\u003eak\u003c/i\u003e \u0026lt; \u003ci\u003eak\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e \u0026lt; \u003ci\u003eak\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, their number is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ee/0a/ee0a9aac5fe6339f9a48c3763225d6a5fa7c41a9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Considering this, the final answer is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1d/78/1d78a826d41915a97861e216210b98bb3b0d1c22.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eNotice that this expression is non-decreasing as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e grows, so we can run a binary search for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTotal complexity: Time ~ \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/66/19/6619c4b63835dd52e4fb76ea839cf8a79e90347d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, Space: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003ell get(ll x)\n{\n    ll ans \u003d 0;\n    for (int i \u003d 2;1ll * i * i * i \u0026lt;\u003d x;++i)\n        ans +\u003d x / (1ll * i * i * i);\n    return ans;\n}\nint main(void)\n{\n    ll m;\n    fi\u0026gt;\u0026gt;m;\n    ll n \u003d 0;\n    for (ll k \u003d 1ll \u0026lt;\u0026lt; 60;k;k /\u003d 2)\n        if (n + k \u0026lt;\u003d 1e16 \u0026amp;\u0026amp; get(n+k) \u0026lt; m) n +\u003d k;\n    ++n;\n    if (get(n) \u003d\u003d m) fo \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0027\\n\u0027;\n    else fo \u0026lt;\u0026lt; \u0026quot;-1\\n\u0026quot;;\n    return 0;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAnother C++ code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e# include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nlong long get(long long n)\n{\n    long long ans \u003d 0;\n    for (long long i \u003d 2; i * i * i \u0026lt;\u003d n;++i)\n        ans +\u003d n / (1ll*i * i * i);\n    return ans;\n}\n\nint main()\n{\n    long long m,n\u003d-1;\n    cin\u0026gt;\u0026gt;m;\n    \n    long long l\u003d0,r\u003d5e15;\n    while (l\u0026lt;r)\n    {\n        long long mid \u003d (l+r)/2;\n        if (get(mid)\u0026lt;m) l\u003dmid+1;\n        else r\u003dmid;\n    }\n    \n    if (get(l)\u003d\u003dm) n\u003dl;\n\n    cout \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0027\\n\u0027;\n    return 0;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/689/problem/D\"\u003eD. Friends and Subsequences\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAuthor:\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/reality\" title\u003d\"Candidate Master reality\"\u003ereality\u003c/a\u003e\u003c/p\u003e\u003cp\u003eDeveloped:\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/reality\" title\u003d\"Candidate Master reality\"\u003ereality\u003c/a\u003e,\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ThatMathGuy\" title\u003d\"Candidate Master ThatMathGuy\"\u003eThatMathGuy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst of all it is easy to see that if we fix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e then have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ae/ad/aeadc2b17d311de8d137ae195044a8a6252cf2f5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. So we can just use binary search to find the smallest index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and biggest index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e that satisfy the equality and add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/sub\u003e + 1\u003c/span\u003e to our answer. To find the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/span\u003e values on a segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e we can use Range-Minimum Query data structure.\u003c/p\u003e\u003cp\u003eThe complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e space.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ code O(N)\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nint n, a[200001], b[200001];\nlong long ans;\ndeque\u0026lt;int\u0026gt; mx, mn;\nint main() {\n    scanf(\u0026quot;%d\u0026quot;,\u0026amp;n);\n    for(int i \u003d 1; i \u0026lt;\u003d n; i++) scanf(\u0026quot;%d\u0026quot;, \u0026amp;a[i]);\n    for(int i \u003d 1; i \u0026lt;\u003d n; i++) scanf(\u0026quot;%d\u0026quot;, \u0026amp;b[i]);\n    for(int i \u003d 1, j \u003d 1; i \u0026lt;\u003d n; i++) {\n        while(!mx.empty() and a[mx.back()] \u0026lt;\u003d a[i]) mx.pop_back();\n        while(!mn.empty() and b[mn.back()] \u0026gt;\u003d b[i]) mn.pop_back();\n        mx.push_back(i);\n        mn.push_back(i);\n        while(j \u0026lt;\u003d i and a[mx.front()] - b[mn.front()] \u0026gt; 0) {\n            j++;\n            while(!mx.empty() and mx.front() \u0026lt; j) mx.pop_front();\n            while(!mn.empty() and mn.front() \u0026lt; j) mn.pop_front();\n        }\n        if(!mx.empty() and !mn.empty() and a[mx.front()] \u003d\u003d b[mn.front()]) ans +\u003d min(mx.front(), mn.front()) - j + 1;\n    }\n    printf(\u0026quot;%lld\u0026quot;, ans);\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ code O(N log N)\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e# include \u0026lt;bits/stdc++.h\u0026gt;\n# define scan(x) scanf(\u0026quot;%d\u0026quot;,\u0026amp;x)\nusing namespace std;\n# define fi cin\n# define fo cout\nint dx[20][1 \u0026lt;\u0026lt; 20];\nint dy[20][1 \u0026lt;\u0026lt; 20];\nint lg[1 \u0026lt;\u0026lt; 20];\nint mx(int l,int r)\n{\n    int p \u003d lg[r - l + 1];\n    return max(dx[p][l],dx[p][r - (1 \u0026lt;\u0026lt; p) + 1]);\n}\nint mn(int l,int r)\n{\n    int p \u003d lg[r - l + 1];\n    return min(dy[p][l],dy[p][r - (1 \u0026lt;\u0026lt; p) + 1]);\n}\nint main(void)\n{\n    int n;\n    scan(n);\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i) scan(dx[0][i]);\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i) scan(dy[0][i]);\n    for (int p \u003d 1;(1 \u0026lt;\u0026lt; p) \u0026lt;\u003d n;++p)\n        for (int i \u003d 1;i + (1 \u0026lt;\u0026lt; p) - 1 \u0026lt;\u003d n;++i)\n            dx[p][i] \u003d max(dx[p-1][i],dx[p-1][i + (1 \u0026lt;\u0026lt; (p-1))]),\n            dy[p][i] \u003d min(dy[p-1][i],dy[p-1][i + (1 \u0026lt;\u0026lt; (p-1))]);\n    for (int i \u003d 2;i \u0026lt;\u003d n;++i)\n        lg[i] \u003d lg[i \u0026gt;\u0026gt; 1] + 1;\n    long long ans \u003d 0;\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i)\n    if (mx(i,i) \u0026lt;\u003d mn(i,i))\n    {\n        int l \u003d i-1,r \u003d i;\n        for (int p \u003d 1 \u0026lt;\u0026lt; lg[n - i + 1];p;p \u0026gt;\u0026gt;\u003d 1)\n            {\n                if (p + l \u0026lt;\u003d n \u0026amp;\u0026amp; mx(i,l+p) \u0026lt; mn(i,l+p)) l +\u003d p;\n                if (p + r \u0026lt;\u003d n \u0026amp;\u0026amp; mx(i,r+p) \u0026lt;\u003d mn(i,r+p)) r +\u003d p;\n            }\n        ans +\u003d r - l;\n    }\n    fo \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; \u0027\\n\u0027;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ code O(N log ^ 2 N)\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003eint a[1 \u0026lt;\u0026lt; 20];\nint b[1 \u0026lt;\u0026lt; 20];\nint Sa[1 \u0026lt;\u0026lt; 20];\nint Sb[1 \u0026lt;\u0026lt; 20];\nint n;\nint lg[1 \u0026lt;\u0026lt; 20];\nvoid updA(int i,int val)\n{\n    for (;i \u0026lt;\u003d n;i +\u003d i\u0026amp;(-i)) Sa[i] \u003d max(Sa[i],val);\n}\nint quA(int i)\n{\n    int ans \u003d -(1e9+1);\n    for (;i;i -\u003d i\u0026amp;(-i)) ans \u003d max(ans,Sa[i]);\n    return ans;\n}\nvoid updB(int i,int val)\n{\n    for (;i \u0026lt;\u003d n;i +\u003d i\u0026amp;(-i)) Sb[i] \u003d min(Sb[i],val);\n}\nint quB(int i)\n{\n    int ans \u003d (1e9+1);\n    for (;i;i -\u003d i\u0026amp;(-i)) ans \u003d min(ans,Sb[i]);\n    return ans;\n}\nint mx(int T)\n{\n    return quA(T);\n}\nint mn(int T)\n{\n    return quB(T);\n}\nint main(void)\n{\n    for (int i \u003d 2;i \u0026lt;\u003d 1e6;++i) lg[i] \u003d lg[i/2] + 1;\n    scan(n);\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i) scan(a[i]),Sa[i] \u003d-(1e9+1);\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i) scan(b[i]),Sb[i] \u003d (1e9+1);\n    ll ans \u003d 0;\n    for (int i \u003d n;i;--i)\n    {\n        updA(i,a[i]);\n        updB(i,b[i]);\n        if (mx(i) \u0026gt; mn(i)) continue;\n        int l \u003d i-1,r \u003d i;\n        for (int p \u003d 1 \u0026lt;\u0026lt; lg[n - i + 1];p;p \u0026gt;\u0026gt;\u003d 1)\n            {\n                if (p + l \u0026lt;\u003d n \u0026amp;\u0026amp; mx(l+p) \u0026lt; mn(l+p)) l +\u003d p;\n                if (p + r \u0026lt;\u003d n \u0026amp;\u0026amp; mx(r+p) \u0026lt;\u003d mn(r+p)) r +\u003d p;\n            }\n        ans +\u003d r - l;\n    }\n    fo \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; \u0027\\n\u0027;\n    return 0;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAnother C++ code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nconst int N \u003d int(1e6) + 5;\nint a[N], b[N], n;\nint lfa[N], rga[N], lfb[N], rgb[N], nxt[N];\n\nvoid calc_max(int *a, int *lf, int *rg) {\n\tstack \u0026lt;int\u0026gt; st;\n\ta[n] \u003d int(1e9) + 1;\n\n\tfor (int i \u003d 0; i \u0026lt;\u003d n; ++i) {\n\t\twhile (!st.empty() \u0026amp;\u0026amp; a[st.top()] \u0026lt; a[i]) {\n\t\t\trg[st.top()] \u003d i;\n\t\t\tst.pop();\n\t\t}\n\n\t\tlf[i] \u003d st.empty() ? -1 : st.top();\n\t\tst.push(i);\n\t}\n}\n\nint naive() {\n\tint res \u003d 0;\n\tfor (int i \u003d 0; i \u0026lt; n; ++i)\n\t\tfor (int j \u003d i; j \u0026lt; n; ++j)\n\t\t\tif (*max_element(a + i, a + j + 1) \u003d\u003d *min_element(b + i, b + j + 1))\n\t\t\t\tres++;\n\treturn res;\n}\n\nbool read() {\n\n\tif (!(cin \u0026gt;\u0026gt; n))\n\t\treturn false;\n\n\tfor (int i \u003d 0; i \u0026lt; n; ++i)\n\t\tassert(scanf(\u0026quot;%d\u0026quot;, \u0026amp;a[i]) \u003d\u003d 1);\n\tfor (int i \u003d 0; i \u0026lt; n; ++i)\n\t\tassert(scanf(\u0026quot;%d\u0026quot;, \u0026amp;b[i]) \u003d\u003d 1);\n}\n\nvoid solve() {\n\tcalc_max(a, lfa, rga);\n\n\tfor (int i \u003d 0; i \u0026lt; n; ++i)\n\t\tb[i] \u003d -b[i];\n\tcalc_max(b, lfb, rgb);\n\n\tmap \u0026lt;int, int\u0026gt; pos, last;\n\n\tfor (int i \u003d 0; i \u0026lt; n; ++i) {\n\t\tb[i] \u003d -b[i];\n\t\tnxt[i] \u003d n;\n\n\t\tif (!pos.count(b[i]))\n\t\t\tpos[b[i]] \u003d i;\n\t\telse\n\t\t\tnxt[last[b[i]]] \u003d i;\n\t\tlast[b[i]] \u003d i;\n\t}\n\n\tlong long res \u003d 0;\n\t\n\tfor (int i \u003d 0; i \u0026lt; n; ++i) {\n\t\tif (!pos.count(a[i]))\n\t\t\tcontinue;\n\n\t\tint pb \u003d pos[a[i]];\n\n\t\twhile (nxt[pb] \u0026lt;\u003d i) {\n\t\t\tpb \u003d nxt[pb];\n\t\t\tif (lfb[pb] !\u003d -1 \u0026amp;\u0026amp; b[lfb[pb]] \u003d\u003d b[pb])\n\t\t\t\tlfb[pb] \u003d lfb[lfb[pb]];\n\t\t}\n\t\tpos[a[i]] \u003d pb;\n\n\t\tfor (int t \u003d 0; t \u0026lt; 2 \u0026amp;\u0026amp; pb \u0026lt; n; ++t, pb \u003d nxt[pb]) {\n\t\t\tint lf \u003d max(lfa[i], lfb[pb]);\n\t\t\tint rg \u003d min(rga[i], rgb[pb]);\n\n\t\t\tif (lf \u0026lt; min(i, pb) \u0026amp;\u0026amp; max(i, pb) \u0026lt; rg)\n\t\t\t\tres +\u003d (min(i, pb) - lf) * 1ll * (rg - max(i, pb));\n\t\t}\n\t}\n\n\tcout \u0026lt;\u0026lt; res \u0026lt;\u0026lt; endl;\n}\n\nint main() {\n\twhile (read())\n\t\tsolve();\n\treturn 0;\n}\n\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/0b/290b2e73e20a20cad9bf323c527cc82c6dd9980a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e What if you need to count \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e), 1 ≤ \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e ≤ \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e ≤ \u003ci\u003en\u003c/i\u003e, 1 ≤ \u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e ≤ \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cc/fe/ccfeb17e7a680587c80be0e6c4f3909b6157f4fa.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eHint:\u003ca href\u003d\"//codeforces.com/contest/602/problem/D\"\u003eTake idea from this problem\u003c/a\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ code for Bonus\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003econst int mod \u003d 1e9 + 7;\nint a[1 \u0026lt;\u0026lt; 20];\nint b[1 \u0026lt;\u0026lt; 20];\nint st[1 \u0026lt;\u0026lt; 20];\nint dr[1 \u0026lt;\u0026lt; 20];\nmap \u0026lt; int , ll \u0026gt; A,B;\nint main(void)\n{\n    int n;\n    IOS;\n    fi\u0026gt;\u0026gt;n;\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i) fi\u0026gt;\u0026gt;a[i];\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i) fi\u0026gt;\u0026gt;b[i];\n    deque \u0026lt; int \u0026gt; d;\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i)\n    {\n        while (!d.empty() \u0026amp;\u0026amp; a[d.back()] \u0026lt; a[i]) d.pop_back();\n        if (d.empty()) st[i] \u003d 0;\n        else st[i] \u003d d.back();\n        d.push_back(i);\n    }\n    d.clear();\n    for (int i \u003d n;i;--i)\n    {\n        while (!d.empty() \u0026amp;\u0026amp; a[d.back()] \u0026lt;\u003d a[i]) d.pop_back();\n        if (d.empty()) dr[i] \u003d n+1;\n        else dr[i] \u003d d.back();\n        d.push_back(i);\n    }\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i)\n        A[a[i]] +\u003d 1ll * (i - st[i]) * (dr[i] - i);\n    while (!d.empty()) d.pop_back();\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i)\n    {\n        while (!d.empty() \u0026amp;\u0026amp; b[d.back()] \u0026gt; b[i]) d.pop_back();\n        if (d.empty()) st[i] \u003d 0;\n        else st[i] \u003d d.back();\n        d.push_back(i);\n    }\n    d.clear();\n    for (int i \u003d n;i;--i)\n    {\n        while (!d.empty() \u0026amp;\u0026amp; b[d.back()] \u0026gt;\u003d b[i]) d.pop_back();\n        if (d.empty()) dr[i] \u003d n+1;\n        else dr[i] \u003d d.back();\n        d.push_back(i);\n    }\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i)\n        B[b[i]] +\u003d 1ll * (i - st[i]) * (dr[i] - i);\n    for (auto \u0026amp;it : A) it.y %\u003d mod;\n    for (auto \u0026amp;it : B) it.y %\u003d mod;\n    int ans \u003d 0;\n    for (auto it : A)\n        ans \u003d (ans + 1ll * it.y * B[it.x]) % mod;\n    fo \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; \u0027\\n\u0027;\n    return 0;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/689/problem/E\"\u003eE. Mike and Geometry Problem\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAuthor:\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/reality\" title\u003d\"Candidate Master reality\"\u003ereality\u003c/a\u003e\u003c/p\u003e\u003cp\u003eDeveloped:\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/reality\" title\u003d\"Candidate Master reality\"\u003ereality\u003c/a\u003e,\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ThatMathGuy\" title\u003d\"Candidate Master ThatMathGuy\"\u003eThatMathGuy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet define the following propriety:if the point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is intersected by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e segments then in our sum it will be counted \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ec/2d/ec2d5e16af43383b6cef6010c1db7c9d4bbef019.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e times,so our task reduce to calculate how many points is intersected by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e intervals \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e.Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e be the number of points intersected by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e intervals.Then our answer will be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/aa/73/aa73d271ff287eb7129486648db2dc853dc31650.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. We can easily calculate array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003c/span\u003e using a map and partial sum trick,\u003ca href\u003d\"//codeforces.com/contest/612/problem/D\"\u003ehere you can find about it\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe complexity and memory is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e# include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n# define fi cin\n# define fo cout\n# define x first\n# define y second\nconst int nmax \u003d 2e5 + 5;\nconst int mod \u003d 1e9 + 7;\nint pow(int a,int b,int mod)\n{\n    int ans \u003d 1;\n    while (b)\n    {\n        if (b\u0026amp;1) ans \u003d (1ll * ans * a) % mod;\n        a \u003d (1ll * a * a) % mod;\n        b /\u003d 2;\n    }\n    return ans;\n}\nint f[nmax];//factorial\nint c[nmax];//inverse of factorial\nmap \u0026lt; int , int \u0026gt; s;\nint C(int n,int k) // combination\n{\n    int ans \u003d (1ll * f[n] * c[k]) % mod;\n    return (1ll * ans * c[n - k]) % mod;\n}\nmain(void)\n{\n    int n,k;\n    int ans \u003d 0;\n    ios_base :: sync_with_stdio(0);\n    fi\u0026gt;\u0026gt;n\u0026gt;\u0026gt;k;assert(1 \u0026lt;\u003d k \u0026amp;\u0026amp; k \u0026lt;\u003d n \u0026amp;\u0026amp; n \u0026lt;\u003d 2e5);\n    f[0] \u003d c[0] \u003d 1;\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i) f[i] \u003d (1ll * f[i-1] * i) % mod,c[i] \u003d pow(f[i],mod-2,mod);\n    for (int i \u003d 1;i \u0026lt;\u003d n;++i)\n    {\n        int a,b;\n        fi\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b;\n        assert(-1e9 \u0026lt;\u003d a \u0026amp;\u0026amp; a \u0026lt;\u003d b \u0026amp;\u0026amp; b \u0026lt;\u003d 1e9);\n        ++s[a];--s[b+1];\n    }\n    int l \u003d s.begin()-\u0026gt;x;\n    int sum \u003d 0;\n    for (auto it : s)\n    {\n        int dist \u003d it.x - l;\n        if (sum \u0026gt;\u003d k) ans +\u003d (1ll * C(sum,k) * dist) % mod;\n        ans \u003d (ans \u0026gt;\u003d mod ? ans - mod : ans);\n        sum +\u003d it.y;\n        l \u003d it.x;\n    }\n    return fo \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; \u0027\\n\u0027,0;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eAnother C++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n\n#define ll long long\n#define ld long double\n\nusing namespace std;\n\nconst int mod \u003d 1e9+7;\n\nll pp(ll x, int y)\n{\n\tif (!y) return 1;\n\tll t \u003d pp(x,y/2);\n\tt \u003d 1ll*t*t;\n\tt%\u003dmod;\n\tif (y%2) t*\u003d1ll*x;\n\tt%\u003dmod;\n\treturn t;\n}\n\nint n,k;\n\nstruct s\n{\n\tint x;\n\tint y;\n};\n\ns a[2*200000];\n\nll c[200001];\n\nvoid gen()\n{\n\tll b \u003d 1;\n\t\n\tc[k] \u003d 1;\n\tfor (int i\u003dk+1; i\u0026lt;\u003dn; i++)\n\t\tb*\u003d\ti,b%\u003dmod,b*\u003dpp(i-k,mod-2),b%\u003dmod,c[i]\u003db;\n}\n\n\nll ans \u003d 0;\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n\n\tcin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;k;\n\t\n\tgen();\n\t\n\tfor (int i\u003d0; i\u0026lt;n; i++)\n\t\tcin\u0026gt;\u0026gt;a[2*i].x\u0026gt;\u0026gt;a[2*i+1].x,a[2*i].y \u003d 1,a[2*i+1].y\u003d-1,a[2*i+1].x++;\n\t\t\n\tsort(a,a+2*n, [] (s x, s y) { if (x.x!\u003dy.x) return (x.x\u0026lt;y.x); return (x.y\u0026gt;y.y);});\n\t\n\tint last \u003d a[0].x;\n\tint now \u003d 0;\n\t\n\tfor (int i\u003d0; i\u0026lt;2*n;)\n\t{\n\t\tint d \u003d a[i].x;\n\t\tans +\u003d 1ll * c[now] * (d-last);\n\t\tans%\u003dmod;\n\t\twhile (a[i].x\u003d\u003dd)\n\t\t\tnow+\u003da[i].y,i++;\n\t\tlast \u003d d;\n\t}\n\t\n\tcout\u0026lt;\u0026lt;ans;\n\t\t\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/0b/290b2e73e20a20cad9bf323c527cc82c6dd9980a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e what if \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/8f/908f49c3709d1f97dba9f36cfcf6fd5f7be110ad.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e\u003c/span\u003e are given in input. \u003c/p\u003e\u003cp\u003eI\u0027m really sorry that problem \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e was harder than ussually.\u003c/p\u003e\u003c/div\u003e","tags":[]}}