{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1400010254,"rating":2,"authorHandle":"yermak0v","modificationTimeSeconds":1400064970,"id":12289,"title":"\u003cp\u003eНаибольший общий префикс нескольких строк в онлайне\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eТолько что я сидел разбирался с суффиксным автоматом (вроде бы все понятно и пишу норм, но если долго не писать забывается) и в примере задач увидел задачу из заголовка.\u003cbr /\u003eСсылка на статью на \u003ca href\u003d\"http://e-maxx.ru/algo/suffix_automata\"\u003ee-maxx\u0027e\u003c/a\u003e, там в примере задач она последняя.\u003cbr /\u003eНу в общем убил я где-то минут 30-40 на то чтоб понять это, но толку нет. Не все так просто как казалось. Увы...\u003cbr /\u003eНо буквально пару минут я вспомнил о боре, и подумал: \u0026quot;а чего я хочу этого именно от суффиксного автомата, если это можно сделать в разы проще бором?\u0026quot;\u003cbr /\u003eМоя идея в том чтобы просто забросить все строчки в бор, а потом обходом в глубину (хотя зачем?) просто переходить по состояниям пока есть переход только по одной букве, иначе понятно, что уже общего префикса не будет. Идея проще простого, да и написать это очень легко.\u003cbr /\u003eВот \u003ca href\u003d\"http://ideone.com/dR87x8\"\u003eкод\u003c/a\u003e.\u003cbr /\u003eUpd. Как же я люблю тупить... На e-maxx\u0027e описано решение задачи о нахождении наибольшей общей подстроки. А префикс можно искать намного проще даже втупую, хотя втупую придется каждый раз пробегать за количество строк, чтобы сравнить равны ли соответствующие символы. Но все же этот алгоритм вполне можно использовать.\u003cbr /\u003eИзвиняюсь за тупку, не судите строго.\u003cbr /\u003eUpd2. Да и идея наверное далеко не новая.\u003cbr /\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003cbr /\u003eИ пользуясь моментом пару вопросов о автомате:\u003cbr /\u003e-Где можно было бы почитать о наибольшей общей подстроке нескольких строк, чтобы точно понять это?\u003cbr /\u003e-И раз уж пошел разговор о автомате, то можно ли, и как, сделать его персистентным? Т.е. добавлять символы очень удобно, но хотелось бы и уметь удалять их, хотя бы для начала по одному.\u003cbr /\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003cbr /\u003eУра, я таки нашел в чем польза от этого способа. Немного изменив код, я пришел к онлайновости этого алгоритма. Каждый раз у меня будет хранится наибольший общий префикс для строк, которые у меня есть, а при добавлении новой, все пересчитывается во время добавления ее в бор. \u003ca href\u003d\"http://ideone.com/aAlQQu\"\u003eКод.\u003c/a\u003e\u003cbr /\u003eЕсли это такой же бесполезный алгоритм, скажите мне, как можно достичь такого же эффекта с онлайностью проще?\u003c/p\u003e\u003c/div\u003e","tags":["суффиксный автомат","строки","преффикс","бор","lcp","тупка","никто","не","читает"]}}