{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1462644578,"rating":109,"authorHandle":"Radewoosh","modificationTimeSeconds":1465314925,"id":44754,"title":"\u003cp\u003eVK Cup 2016 — Round 3 — Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eEditorial was created by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Errichto\" title\u003d\"International Grandmaster Errichto\"\u003eErrichto\u003c/a\u003e, but he said that he has enough contribution, so I\u0027m posting it for you. ;)\u003c/p\u003e\u003ch1\u003e1 \u003ca href\u003d\"/contest/673/problem/A\" title\u003d\"Codeforces Round 351 (VK Cup 2016 Round 3, Div. 2 Edition)\"\u003e673A - Bear and Game\u003c/a\u003e\u003c/h1\u003e\u003cp\u003e(invented by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/GlebsHP\" title\u003d\"Grandmaster GlebsHP\"\u003eGlebsHP\u003c/a\u003e — thanks!)\u003c/p\u003e\u003cp\u003eYou are supposed to implement what is described in the statement. When you read numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, check if two consecutive numbers differ by more than \u003cspan class\u003d\"tex-span\"\u003e15\u003c/span\u003e (i.e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e \u0026gt; 15\u003c/span\u003e). If yes then you should print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e + 15\u003c/span\u003e. You can assume that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u003d 0\u003c/span\u003e and then you don\u0027t have to care about some corner case at the beginning. Also, you can assume that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/sub\u003e \u003d 91\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/sub\u003e \u003d 90\u003c/span\u003e (both should work — do you see why?). If your program haven\u0027t found two consecutive numbers different by more than \u003cspan class\u003d\"tex-span\"\u003e15\u003c/span\u003e then print \u003cspan class\u003d\"tex-span\"\u003e90\u003c/span\u003e. If you still have problems to solve this problem then check codes of other participants.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/673/submission/18286606\" title\u003d\"Submission 18286606 by Radewoosh\"\u003e18286606\u003c/a\u003e\u003c/p\u003e\u003ch1\u003e2 \u003ca href\u003d\"/contest/673/problem/B\" title\u003d\"Codeforces Round 351 (VK Cup 2016 Round 3, Div. 2 Edition)\"\u003e673B - Problems for Round\u003c/a\u003e\u003c/h1\u003e\u003cp\u003e(invented by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Errichto\" title\u003d\"International Grandmaster Errichto\"\u003eErrichto\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eSome prefix of problems must belong to one division, and the remaining suffix must belong to the other division. Thus, we can say that we should choose the place (between two numbers) where we split problems. Each pair \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (let\u0027s say that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e) means that the splitting place must be between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. In other words, it must be on the right from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and on the left from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor each pair if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e then we swap these two numbers. Now, the splitting place must be on the right from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, so it must be on the right from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. In linear time you can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, and similarly calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e \u003d \u003ci\u003emin\u003c/i\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, ..., \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. Then, the answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e - \u003ci\u003eA\u003c/i\u003e\u003c/span\u003e. It may turn out that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e \u0026gt; \u003ci\u003eB\u003c/i\u003e\u003c/span\u003e though but we don\u0027t want to print a negative answer. So, we should print \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(0, \u003ci\u003eB\u003c/i\u003e - \u003ci\u003eA\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/673/submission/18286633\" title\u003d\"Submission 18286633 by Radewoosh\"\u003e18286633\u003c/a\u003e\u003c/p\u003e\u003ch1\u003e3 \u003ca href\u003d\"/contest/673/problem/C\" title\u003d\"Codeforces Round 351 (VK Cup 2016 Round 3, Div. 2 Edition)\"\u003e673C - Bear and Colors\u003c/a\u003e\u003c/h1\u003e\u003cp\u003e(invented by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Errichto\" title\u003d\"International Grandmaster Errichto\"\u003eErrichto\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eWe are going to iterate over all intervals. Let\u0027s first fix the left end of the interval and denote it by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Now, we iterate over the right end \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. When we go from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/span\u003e then we get one extra ball with color \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e. In one global array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e we can keep the number of occurrences of each color (we can clear the array for each new \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e). We should increase by one \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/sub\u003e]\u003c/span\u003e and then check whether \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e becomes a new dominant color. But how to do it?\u003c/p\u003e\u003cp\u003eAdditionally, let\u0027s keep one variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebest\u003c/i\u003e\u003c/span\u003e with the current dominant color. When we go to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/span\u003e then we should whether \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/sub\u003e] \u0026gt; \u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ebest\u003c/i\u003e]\u003c/span\u003e or (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/sub\u003e] \u003d  \u003d \u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ebest\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e + 1\u003c/sub\u003e \u0026lt; \u003ci\u003ebest\u003c/i\u003e\u003c/span\u003e). The second condition checks which color has smaller index (in case of a tie). And we must increase \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eanswer\u003c/i\u003e[\u003ci\u003ebest\u003c/i\u003e]\u003c/span\u003e by one then because we know that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebest\u003c/i\u003e\u003c/span\u003e is dominant for the current interval. At the end, print values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eanswer\u003c/i\u003e[1], \u003ci\u003eanswer\u003c/i\u003e[2], ..., \u003ci\u003eanswer\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/643/submission/18286663\" title\u003d\"Submission 18286663 by Radewoosh\"\u003e18286663\u003c/a\u003e\u003c/p\u003e\u003ch1\u003e4 \u003ca href\u003d\"/contest/673/problem/D\" title\u003d\"Codeforces Round 351 (VK Cup 2016 Round 3, Div. 2 Edition)\"\u003e673D - Bear and Two Paths\u003c/a\u003e\u003c/h1\u003e\u003cp\u003e(invented by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Errichto\" title\u003d\"International Grandmaster Errichto\"\u003eErrichto\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eThere is no solution if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 4\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. But for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≥ 5\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≥ \u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e you can construct the following graph:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/74/7c/747c733d8af335caaf82f3061ce443056ad12cc9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eHere, cities \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e1, \u003ci\u003ex\u003c/i\u003e2, ..., \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 4\u003c/sub\u003e)\u003c/span\u003e denote other cities in any order you choose (cities different than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e, \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e). You should print \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e1, \u003ci\u003ex\u003c/i\u003e2, ..., \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 4\u003c/sub\u003e, \u003ci\u003ed\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e in the first line, and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ec\u003c/i\u003e, \u003ci\u003ea\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e1, \u003ci\u003ex\u003c/i\u003e2, ..., \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e - 4\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e, \u003ci\u003ed\u003c/i\u003e)\u003c/span\u003e in the second line.\u003c/p\u003e\u003cp\u003eTwo not very hard challenges for you. Are you able to prove that the answer doesn\u0027t exist for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e? Can you solve the problem if the four given cities don\u0027t have to be distinct but it\u0027s guaranteed that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≠ \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e ≠ \u003ci\u003ed\u003c/i\u003e\u003c/span\u003e?\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/643/submission/18286683\" title\u003d\"Submission 18286683 by Radewoosh\"\u003e18286683\u003c/a\u003e\u003c/p\u003e\u003ch1\u003e5 \u003ca href\u003d\"/contest/673/problem/E\" title\u003d\"Codeforces Round 351 (VK Cup 2016 Round 3, Div. 2 Edition)\"\u003e673E - Levels and Regions\u003c/a\u003e\u003c/h1\u003e\u003cp\u003e(invented by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Stonefeang\" title\u003d\"International Grandmaster Stonefeang\"\u003eStonefeang\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eWhen we repeat something and each time we have probability \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e to succeed then the expected number or tries is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/11/41/11417d95739f45aa0ca8d578e3365253f2559e14.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, till we succeed. How to calculate the expected time for one region \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003elow\u003c/i\u003e, \u003ci\u003ehigh\u003c/i\u003e]\u003c/span\u003e? For each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in some moment we will try to beat this level and then there will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e \u003d \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003elow\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003elow\u003c/i\u003e + 1\u003c/sub\u003e + ... + \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e tokens in the bag, including \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e tokens allowing us to beat this new level. The probability to succeed is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7d/5a/7d5a1e718eec00fb90a64d2e1c4bd16c86b660f2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, so the expected time is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7e/21/7e21efc6a3cc0d592b0ff66a601c3299a2af75a0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. So, in total we should sum up values \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e9/b4/e9b4efd86eeee0406c7fa32d7cac8f807cffb19f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u0026lt; \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Ok, we managed to understand the actual problem. You can now stop and try to find a slow solution in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e·\u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e. Hint: use the dynamic programming.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e denote the optimal result for prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e levels, if we divide them into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e regions.\u003c/li\u003e   \u003cli\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epre\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e denote the result for region containing levels \u003cspan class\u003d\"tex-span\"\u003e1, 2, ..., \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e (think how to calculate it easily with one loop).\u003c/li\u003e   \u003cli\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e denote the sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.\u003c/li\u003e   \u003cli\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erev\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e denote the sum of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ba/4d/ba4dc1db2b42181258933d9d543fd067b11187f2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for all \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eNow let\u0027s write formula for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e, as the minimum over \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e denoting the end of the previous region:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7d/db/7ddbb4d624eeb859ad374d59428f2d1ddc3f2090.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c9/7a/c97acae706b03143e850f3126bf73e4d5bc82aad.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d8/72/d872bbf25d0b0c9635d4142f830015279ac17b70.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eSo we can use convex hull trick to calculate it in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e·\u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e. You should also get AC with a bit slower divide\u0026amp;conquer trick, if it\u0027s implemented carefully.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/643/submission/18286696\" title\u003d\"Submission 18286696 by Radewoosh\"\u003e18286696\u003c/a\u003e\u003c/p\u003e\u003ch1\u003e6 \u003ca href\u003d\"/contest/673/problem/F\" title\u003d\"Codeforces Round 351 (VK Cup 2016 Round 3, Div. 2 Edition)\"\u003e673F - Bearish Fanpages\u003c/a\u003e\u003c/h1\u003e\u003cp\u003e(invented by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Stonefeang\" title\u003d\"International Grandmaster Stonefeang\"\u003eStonefeang\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eLet\u0027s say that every company has one parent (a company it follows). Also, every copmany has some (maybe empty) set of children. It\u0027s crucial that sets of children are disjoint.\u003c/p\u003e\u003cp\u003eFor each company let\u0027s keep (and always update) one value, equal to the sum of:\u003c/p\u003e \u003cul\u003e   \u003cli\u003ethe income from its own fanpage\u003c/li\u003e   \u003cli\u003ethe income from its children\u0027s fanpages\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eIt turns out that after each query only the above sum changes only for a few values. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e starts to follows \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e then you should care about \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e, \u003ci\u003epar\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e], \u003ci\u003epar\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e], \u003ci\u003epar\u003c/i\u003e[\u003ci\u003epar\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e]]\u003c/span\u003e. And maybe \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epar\u003c/i\u003e[\u003ci\u003epar\u003c/i\u003e[\u003ci\u003eb\u003c/i\u003e]]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epar\u003c/i\u003e[\u003ci\u003epar\u003c/i\u003e[\u003ci\u003epar\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e]]]\u003c/span\u003e if you want to be sure. You can stop reading now for a moment and analyze that indeed other companies will keep the same sum, described above.\u003c/p\u003e\u003cp\u003eOk, but so far we don\u0027t count the income coming from parent\u0027s fanpage. But, for each company we can store all its children in one set. All children have the same \u0026quot;income from parent\u0027s fanpage\u0026quot; because they have the same parent. So, in set you can keep children sorted by the sum described above. Then, we should always puts the extreme elements from sets in one global set. In the global set you care about the total income, equal to the sum described above and this new \u0026quot;income from parent\u0026quot;. Check codes for details. The complexity should be \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ba/47/ba479d6d99ed350ffc721db1602421ae38eef6b1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, with big constant factor.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/643/submission/18286747\" title\u003d\"Submission 18286747 by Radewoosh\"\u003e18286747\u003c/a\u003e\u003c/p\u003e\u003ch1\u003e7 \u003ca href\u003d\"/contest/674/problem/E\" title\u003d\"Codeforces Round 351 (VK Cup 2016 Round 3, Div. 1 Edition)\"\u003e674E - Bear and Destroying Subtrees\u003c/a\u003e\u003c/h1\u003e\u003cp\u003e(invented by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Errichto\" title\u003d\"International Grandmaster Errichto\"\u003eErrichto\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e][\u003ci\u003eh\u003c/i\u003e]\u003c/span\u003e denote the probability that subtree \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e (if attacked now) would have height at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e. The first observation is that we don\u0027t care about big \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e because it\u0027s very unlikely that a path with e.g. 100 edges will survive. Let\u0027s later talk about choosing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e and now let\u0027s say that it\u0027s enough to consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e\u003c/span\u003e up to \u003cspan class\u003d\"tex-span\"\u003e60\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWhen we should answer a query for subtree \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e then we should sum up \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e·(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e][\u003ci\u003eh\u003c/i\u003e] - \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e][\u003ci\u003eh\u003c/i\u003e - 1])\u003c/span\u003e to get the answer. The other query is harder.\u003c/p\u003e\u003cp\u003eLet\u0027s say that a new vertex is attached to vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. Then, among \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e][0], \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e][1], \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e][2], ...\u003c/span\u003e only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e][0]\u003c/span\u003e changes (other values stay the same). Also, one value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003epar\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e]][1]\u003c/span\u003e changes, and so does \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003epar\u003c/i\u003e[\u003ci\u003epar\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e]]][2]\u003c/span\u003e and so on. You should iterate over \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMAX\u003c/i\u003e_\u003ci\u003eH\u003c/i\u003e\u003c/span\u003e vertices (each time going to parent) and update the corresponding value. TODO — puts here come formula for updating value.\u003c/p\u003e\u003cp\u003eThe complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eq\u003c/i\u003e·\u003ci\u003eMAX\u003c/i\u003e_\u003ci\u003eH\u003c/i\u003e)\u003c/span\u003e. You may think that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMAX\u003c/i\u003e_\u003ci\u003eH\u003c/i\u003e \u003d 30\u003c/span\u003e is enough because \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8b/b7/8bb7f03529158ecc1533bd030e19d7300c0f1077.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is small enough. Unfortunately, there exist malicious tests. Consider a tree with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/91/e3/91e3674052e4bba9a10a2178250669c6a85d4859.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e paths from root, each with length \u003cspan class\u003d\"tex-span\"\u003e31\u003c/span\u003e. Now, we talk about the probability of magnitude:\u003c/p\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003e1 - (1 - (1 / 2)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/sup\u003e)\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eN\u003c/i\u003e / \u003ci\u003ed\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e\u003c/center\u003e\u003cp\u003ewhich is more than \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e - 6\u003c/sup\u003e\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e \u003d 30\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca\u003ehttp://www.wolframalpha.com/input/?i\u003d1+-+(1-(1%2F2)%5Ed)%5E(N%2Fd)+for+N+%3D+500000+and+d+%3D+30\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/643/submission/18286721\" title\u003d\"Submission 18286721 by Radewoosh\"\u003e18286721\u003c/a\u003e\u003c/p\u003e\u003ch1\u003e8 \u003ca href\u003d\"/contest/674/problem/F\" title\u003d\"Codeforces Round 351 (VK Cup 2016 Round 3, Div. 1 Edition)\"\u003e674F - Bears and Juice\u003c/a\u003e\u003c/h1\u003e\u003cp\u003e(invented by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Stonefeang\" title\u003d\"International Grandmaster Stonefeang\"\u003eStonefeang\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eLet\u0027s start with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eq\u003c/i\u003e·\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e approach, with the dynamic programming. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003edays\u003c/i\u003e][\u003ci\u003ebeds\u003c/i\u003e]\u003c/span\u003e denote the maximum number of barrels to win if there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edays\u003c/i\u003e\u003c/span\u003e days left and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebeds\u003c/i\u003e\u003c/span\u003e places to sleep left. Then:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/38/e4/38e472bfed1496367f8a5d3017920a81f45bf065.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eHere, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e represents the number of bears who will go to sleep. If the same \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e bears drink from the same \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e barrels and this exact set of bears go to sleep then on the next day we only have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e barrels to consider (wine is in one of them). And for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e \u003d \u003ci\u003edp\u003c/i\u003e[\u003ci\u003edays\u003c/i\u003e - 1][\u003ci\u003ebeds\u003c/i\u003e - \u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e we will manage to find the wine then.\u003c/p\u003e\u003cp\u003eAnd how to compute the dp faster? Organizers have ugly solution with something similar to meet in the middle. We calculate dp for first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2 / 3\u003c/sup\u003e\u003c/span\u003e days and later we use multiply vectors by matrix, to get further answers faster. The complexity is equivalent to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e·\u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e but only because roughly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e \u003d \u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e\u003c/span\u003e. We saw shortest codes though. How to do it guys?\u003c/p\u003e\u003cp\u003eYou may wonder why there was \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e32\u003c/sup\u003e\u003c/span\u003e instead of \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e + 7\u003c/span\u003e. It was to fight with making the brute force faster. For \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e + 7\u003c/span\u003e you could add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e +  \u003d \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e][\u003ci\u003eb\u003c/i\u003e]·\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ec\u003c/i\u003e][\u003ci\u003ed\u003c/i\u003e]\u003c/span\u003e about \u003cspan class\u003d\"tex-span\"\u003e15\u003c/span\u003e times (using unsigned long long\u0027s) and only then compute modulo. You would then get very fast solution.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/643/submission/18286766\" title\u003d\"Submission 18286766 by Radewoosh\"\u003e18286766\u003c/a\u003e\u003c/p\u003e\u003ch1\u003e9 \u003ca href\u003d\"/contest/674/problem/G\" title\u003d\"Codeforces Round 351 (VK Cup 2016 Round 3, Div. 1 Edition)\"\u003e674G - Choosing Ads\u003c/a\u003e\u003c/h1\u003e\u003cp\u003e(invented by \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/qwerty787788\" title\u003d\"Grandmaster qwerty787788\"\u003eqwerty787788\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eLet\u0027s first consider a solution processing query in O(n) time, but using O(1) extra memory. If p \u003d 51%, it\u0027s a well known problem. We should store one element and some balance. When processing next element, if it\u0027s equal to our, we increase balance. If it\u0027s not equal, and balance is positive, we decrease it. If it is zero, we getting new element as stored, and setting balance to 1.\u003c/p\u003e\u003cp\u003eTo generalize to case of elements, which are at least 100/k%, we will do next. Let\u0027s store k elements with balance for each. When getting a new element, if it\u0027s in set of our 5, we will add 1 to it\u0027s balance. If we have less, than 5 elements, just add new element with balance 1. Else, if there is element with balance 0, replace it by new element with balance one. Else, subtract 1 from each balance. The meaning of such balance becomes more mysterious, but it\u0027s not hard to check, that value is at least 100/k% of all elements, it\u0027s balance will be positive.\u003c/p\u003e\u003cp\u003eTo generalize even more, we can join two of such balanced set. To do that, we sum balances of elements of all sets, than join sets to one, and then removing elements with smallest balance one, by one, untill there is k elements in set. To remove element, we should subtract it\u0027s balance from all other balances.\u003c/p\u003e\u003cp\u003eAnd now, we can merge this sets on segment, using segment tree. This solution will have complexity like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e * \u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) * \u003ci\u003eMERGE\u003c/i\u003e\u003c/span\u003e, where MERGE is time of merging two structures. Probably, when k is 5, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e / 2\u003c/span\u003e is fastest way. But the profit is we don\u0027t need complex structures to check which elements are really in top, so solution works much faster.\u003c/p\u003e\u003c/div\u003e","tags":[]}}