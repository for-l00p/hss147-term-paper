{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1527109882,"rating":217,"authorHandle":"darry140","modificationTimeSeconds":1527129865,"id":59650,"title":"\u003cp\u003eAPIO 2018 pA \u0026amp; pB Editorial \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi Codeforces! I\u0027m the author of the first two tasks in APIO 2018. Although the official site posted only the solution codes, I think the task analyses are equally appreciable, so I decided to publish them here.\u003c/p\u003e\u003cp\u003eHere\u0027s the \u003ca href\u003d\"http://apio2018.ru/competition/olympiad-materials/\"\u003elink\u003c/a\u003e to the problem statements if you haven\u0027t seen them yet.\u003c/p\u003e\u003ch3\u003eProblem A. New Home \u003cspan class\u003d\"tex-span\"\u003e \u003c/span\u003e\u003c/h3\u003e\u003ch4\u003eSubtask 1\u003c/h4\u003e\u003cp\u003eNaive solution will work.\u003c/p\u003e\u003ch4\u003eSubtask 2\u003c/h4\u003e\u003cp\u003eSimulate all the events (store open/store close/query) in chronological order. Maintain \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e BSTs, one per each (store-)type. During a query, for each type, check the two neighboring stores of the location. This solution runs in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/91/f7/91f7a460222e9b956ddad1e0a60bee90a5fea0f6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch4\u003eSubtask 3\u003c/h4\u003e\u003cp\u003eWithout the time constraint, the problem becomes querying the maximum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e distance functions, each of which is composed of some segments with slope \u003cspan class\u003d\"tex-span\"\u003e \u003d  ± 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/d4/9a/d49a5993beb91e8191b043e14237d158909bf079.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFig. 1: Two types of stores locating at \u003cspan class\u003d\"tex-span\"\u003e{1, 6, 8}\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e{2, 4, 7}\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/39/5d/395ddeed976982f8b7e431db3e574845c6428e20.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFig. 2: The maximum of the two functions\u003c/p\u003e\u003cp\u003eThe key here is to deal with the positive-slope and the negative-slope segments separately, and then combine their results afterwards. (Since they are symmetric, I\u0027ll just focus on the negative case.) There are many ways to do this (e.g. with segment tree/priority queue/BST/etc.), but the fastest and easiest way is to perform a mergesort-like scan for the queries and the segments from left to right.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/ce/3e/ce3ebf25c6d3af3e95077a9f8be4ac135a2a57ca.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFig. 3: The negative-slope segments from the previous example, with query points \u003cspan class\u003d\"tex-span\"\u003e{2.5, 5, 5.5}\u003c/span\u003e. Note that we can let the segments extend below the x-axis (i.e. view them as rays), as this won\u0027t affect the correctness. This way, we only need to store one value (the x-intercept) when scanning and don\u0027t need to \u0026quot;pop\u0026quot; the segments.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/53/3b/533b8e66fde56ccecf7a0a57668e4949f9d23e4e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFig. 4: The resulting (maximum) function. The query points yield result \u003cspan class\u003d\"tex-span\"\u003e{ - 0.5, 1, 1.5}\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSo this subtask can be solved in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2f/10/2f1016d69bf9ff11e9f900cc40acc8199e5e4f45.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch4\u003eSubtask 4\u003c/h4\u003e\u003cp\u003eIn this subtask, stores only get removed. When a store is removed, a partial upshift will occur in the distance function, and two new segments are generated.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/02/c4/02c48aa72db79eec29da67cc56fd91e0dbc8630e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFig. 5: Removing the red point results in the distance function’s partial upshift into two new segments.\u003c/p\u003e\u003cp\u003eNotice the new segments are always weakly higher than the old ones. Since we\u0027re calculating the maximum function, we don\u0027t have to remove the old segments (and/or their contributions) when adding in the new ones. Therefore, to answer a query, we can simply take into account all the segments added before it. This leads to a divide-and-conquer approach, where in each level, we use the previous mergesort-like method to calculate the segment-to-query contributions that cross mid-time. The naive implementation runs in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6b/e4/6be43ce7eede5a330884ff46861a3940bbc80ba4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, but can be easily improved to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2f/10/2f1016d69bf9ff11e9f900cc40acc8199e5e4f45.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e if the queries and segments are pre-sorted in spacial order. Another approach is to maintain along the x-axis a segment tree/BIT that stores the highest segment at a coordinate. This leads to a \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2f/10/2f1016d69bf9ff11e9f900cc40acc8199e5e4f45.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (or \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2e/a3/2ea3986a0f6e1b8ed6a2c6b00141c5e5e81025a5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e) solution.\u003c/p\u003e\u003ch4\u003eSubtask 5\u003c/h4\u003e\u003cp\u003eThere are (I know at least) two kinds of approaches to this subtask. The first kind is based on the classic \u0026quot;\u003ca href\u003d\"https://uva.onlinejudge.org/index.php?option\u003dcom_onlinejudge\u0026amp;Itemid\u003d8\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d3767\"\u003eNumber of Distinct Elements in an Interval\u003c/a\u003e\u0026quot; problem, which can be solved in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6b/e4/6be43ce7eede5a330884ff46861a3940bbc80ba4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. For each query, binary search the answer and solve the NDEI problem for the corresponding interval. This kind of solution runs in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7a/d1/7ad14681d99a09d2915c133520060484a53c0522.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eThe second kind is based on sqrt decomposition. If we split the events (store open/store close/query) into \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2f/ed/2fed158f0ba0638fa3b78a48793d94514f11860f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e chucks, since there are only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eC\u003c/i\u003e)\u003c/span\u003e types that are modified in the chunk, we can deal with the unmodified types with the Subtask 3 solution and modified types with Subtask 2. Depending on the implementation, this kind of solution runs in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/15/c4/15c4fbd7b3e39395b7d980d5ab6c7075a92c9166.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f9/35/f9355cf2f808092fc4e0e52671dfd3118d16cc67.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e1.5\u003c/sup\u003e)\u003c/span\u003e, and may require some parameter tuning.\u003c/p\u003e\u003ch4\u003eSubtask 6\u003c/h4\u003e\u003cp\u003eThe key observation for this subtask is that when a store is inserted/removed, there are only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e new segments/rays created. This means that in total, there are at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e different segments/rays, each having its own existing timeframe. We can use the \u0026quot;segment tree D\u0026amp;C\u0026quot; method to solve this. That is, we insert the segments/rays into a \u0026quot;time\u0026quot; segment tree, with its timeframe representing the \u0026quot;interval\u0026quot;. And, each query is a leaf node in this \u0026quot;time\u0026quot; segment tree, so we run DFS on this tree while running Subtask 3 solution in each node to calculate the contributions. This solution runs in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2f/10/2f1016d69bf9ff11e9f900cc40acc8199e5e4f45.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e if the queries and segments are pre-sorted in spacial order. My implementation of this solution can be found in the APIO 2018 material package.\u003c/p\u003e\u003cp\u003eThere are many variants of this solution. However, the \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6b/e4/6be43ce7eede5a330884ff46861a3940bbc80ba4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ones are usually not fast enough, unless it has small constants.\u003c/p\u003e\u003ch3\u003eProblem B. Circle Selection\u003c/h3\u003e\u003ch4\u003eSubtask 1\u003c/h4\u003e\u003cp\u003eNaive solution will work. Note that the formula for circle intersection is \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + (\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e ≤ (\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003eSubtask 2\u003c/h4\u003e\u003cp\u003eThe problem becomes a one-dimensional interval-intersecting problem — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e intersects with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e iff \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e intersects with \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e. Therefore, we transform each circle into its corresponding interval. A handy property is that an eliminating interval is weakly larger than any of its corresponding eliminated intervals, so one of the endpoints of latter must lie in the former. With this in mind, we can do the procedure online with some \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/38/fb/38fb4cb315633ef4d35ba82b8b1e4dafa30fe822.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e interval querying data structure (e.g. segment tree/BST). This solution runs in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2f/10/2f1016d69bf9ff11e9f900cc40acc8199e5e4f45.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch4\u003eSubtask 3\u003c/h4\u003e\u003cp\u003eThis subtask can be solved with the sweeping line technique. Say the line is horizontal \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eL\u003c/i\u003e: \u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e)\u003c/span\u003e and moves downward \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e↓)\u003c/span\u003e. When the line meets a circle \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u003d \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, we put a \u0026quot;marker\u0026quot; at coordinate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e \u003d \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e on the line, and we remove the marker when the line leaves the circle \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u003d \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. It can be shown that if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e intersects with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, there must be some instance \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e \u003d \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003c/sup\u003e * \u003c/span\u003e such that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/91/55/9155544713b3f65cb9d51c355e4632eee74aa4a6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/24/ba/24ba481294fc7ef4ecbec3186bce832b944c2d94.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e are adjacent. So we only need to check circle intersections between neighboring markers. If we maintain a BST of markers, we only need to check \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f1/3f/f13f6c4d21a098b56cc17fd3fc99a0cde43a302b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/af/0d/af0da06b3c47643a548437691b5d48cb4f33dfa4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e when \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/91/55/9155544713b3f65cb9d51c355e4632eee74aa4a6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is inserted, and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ac/0b/ac0b6505b6e7e2c803fedad88cfe96b56ef14dea.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e when \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/91/55/9155544713b3f65cb9d51c355e4632eee74aa4a6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is removed. This gives an \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2f/10/2f1016d69bf9ff11e9f900cc40acc8199e5e4f45.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution.\u003c/p\u003e\u003ch4\u003eSubtask 4\u003c/h4\u003e\u003cp\u003eFrom now on, we will call the chosen circle in an iteration of the loop the \u003cstrong\u003eeliminator\u003c/strong\u003e, the corresponding eliminated circles \u003cstrong\u003eeliminatees\u003c/strong\u003e, and the action of plugging in information of two circles into the intersection formula to check intersection a \u003cstrong\u003equery\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eIn a sense, it is quite silly for an eliminator to query distant circles, since only the nearby ones have chance of being removed. The problem here is how to systematically define “nearby”. My approach is to grid the plane into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e-by-\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e unit squares, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e is the radius of the circles.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProperty 1.\u003c/strong\u003e \u003cem\u003eThe eliminatees’ origins must lie in the 5-by-5 region centered at the unit square containing the eliminator’s origin.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/37/cb/37cbd18af2603ed00db18b0791f52ecc143bf916.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFig. 6: An example showing Property 1. (Red origin \u003d eliminator; Green origin \u003d potential eliminatees; Blue origin \u003d distant circles)\u003c/p\u003e\u003cp\u003eFrom Property 1, if we represent the grid as a 2D array having each element as a set of origins within the corresponding unit square, we only need to check at most \u003cspan class\u003d\"tex-span\"\u003e25 \u003d \u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e sets of circles per eliminator. One may use hash table to implement this 2D array, but I used \u003ccode\u003evector\u0026lt;vector\u0026lt;Point\u0026gt;\u0026gt;\u003c/code\u003e, with the first dimension be in discretized x-coordinate order and the second raw y-coordinate order. Under this implementation, we can access the \u003cspan class\u003d\"tex-span\"\u003e25\u003c/span\u003e squares with binary search, so every loop iteration (in the problem description) can be done in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4f/1a/4f1a76248aa78a5ec3621e8b2b24abb073813706.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e denotes the number of origins in the 5-by-5 region in that iteration, and the total time complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8b/83/8b83bf42f4d369b25a377fcae310888a478d9012.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProperty 2a.\u003c/strong\u003e \u003cem\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d0/4c/d04c5f40882917083e37c5762a2dc22f05d970e1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eProof. We calculate the sum from the perspective of an eliminatee. Note that for an eliminator to query the eliminatee, its origin must locate in the 5x5 region centered at the eliminatee\u0027s unit square.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/4f/2f/4f2fa34357d175bc8096c809de68ea68b06eb810.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFig 7: An eliminatee\u0027s origin and an example set of eliminators.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProperty 3.\u003c/strong\u003e The eliminators are disjoint. \u003cstrong\u003eProperty 4a.\u003c/strong\u003e A 5x5 region contains at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e disjoint unit circles.\u003c/p\u003e\u003cp\u003eSo the sum is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e9/ae/e9aebc5e733d49b33034db67b277aa4586ab5439.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and the total time complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2f/10/2f1016d69bf9ff11e9f900cc40acc8199e5e4f45.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003ch4\u003eSubtask 5 \u0026amp; 6\u003c/h4\u003e\u003cp\u003eUnfortunately, Property 2a doesn’t apply to arbitrarily sized circles. But notice the size of the eliminators are weakly decreasing. If we start with square size \u003d \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e denotes the largest radius on the plane, the procedure will become more and more inefficient as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e decreases. So when this radius becomes less then half of the gridding length, we split each unit square into four, halving the length.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/4a/c0/4ac0f3f3a092d32caaa4c7187c7e760abdeafe25.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFig 8: When \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e becomes sufficiently small, we rescale the grid.\u003c/p\u003e\u003cp\u003eSince the gridding length \u003cspan class\u003d\"tex-span\"\u003e ≥ \u003c/span\u003e eliminator’s radius \u003cspan class\u003d\"tex-span\"\u003e ≥ \u003c/span\u003e eliminatees’ radius, Property 1 still holds. Therefore the time complexity of our new solution is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/85/b7/85b7ac90ae20b797b06a1547150aad31ab2d1311.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and because rescaling can be done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e (by splitting an existing \u003ccode\u003evector\u0026lt;Point\u0026gt;\u003c/code\u003e into two), the second term is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/12/a2/12a298f2985b2accf3dad2b1d12f41d5660d9ce3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProperty 2b.\u003c/strong\u003e \u003cem\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1d/ed/1dedc1759671b6b0d0ec278584710e9dc9ae8eb1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eProof. Consider the eliminators with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ae/88/ae8855d2f8de51dd7f090461be42d6e3ef7a15cb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e denotes the gridding length.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProperty 3.\u003c/strong\u003e The eliminators are disjoint. \u003cstrong\u003eProperty 4b.\u003c/strong\u003e A 5x5 region contains at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e disjoint at-least-half-unit circles.\u003c/p\u003e\u003cp\u003eSo the contribution of the same-ordered eliminators is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. There are \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d6/ab/d6ab25f4e78a7ee6f85c37e2b25adc71683bdf16.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e different orders, therefore the sum, and the final time complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/61/45/6145d631f6b3cea94df086de0e2681fcae96fc69.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Again, you can find my implementation in the APIO 2018 material package.\u003c/p\u003e\u003c/div\u003e","tags":["apio 2018","apio","editoral","analysis","tutorial"]}}