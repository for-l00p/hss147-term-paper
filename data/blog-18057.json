{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1432390199,"rating":0,"authorHandle":"arsijo","modificationTimeSeconds":1432390460,"id":18057,"title":"\u003cp\u003eРозбір\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eЧасткове рішення за 3^n\u003c/p\u003e\u003cp\u003eВикористаємо рекурсивний метод розв\u0027язку. Параметри:\u003c/p\u003e \u003col\u003e   \u003cli\u003eіндекс числа, яке потрібно обробити\u003c/li\u003e   \u003cli\u003eсума попередніх чисел\u003c/li\u003e   \u003cli\u003eкількість використаних збільшень\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eДля кожної позиції є три можливі подальші ходи:\u003c/p\u003e \u003col\u003e   \u003cli\u003eпіти далі, без додаванням числа\u003c/li\u003e   \u003cli\u003eпіти далі, з додаванням числа\u003c/li\u003e   \u003cli\u003eпіти далі, з додаванням збільшеного числа (не завжди)\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eЯкщо у якісь позиції сума більша з \u003cstrong\u003eS\u003c/strong\u003e, то іти далі немає сенсу. Відповіддю буде кількість таких позицій, в яких сума дорівнює \u003cstrong\u003eS\u003c/strong\u003e. При цьому нам потрібно враховувати лише ті позиції, в яких попередній хід був з додаванням числа.\u003c/p\u003e\u003cp\u003eПовне рішення за 3^(n/2) \u003c/p\u003e\u003cp\u003eВикористаємо meet-in-the-middle і динамічне програмування. Розіб\u0027ємо масив на дві рівні частини (якщо \u003cstrong\u003en\u003c/strong\u003e – непарне, то у першій частині буде на 1 більше). Спочатку обробимо першу частину схожим алгоритмом, як у часткового рішення. Але будемо зберігати числа та їх кількість, які можна отримати, використавши рівно \u003cstrong\u003ek\u003c/strong\u003e збільшень. У C++ і Java можна використати масив map. Після цього обробляємо другу частину за схожим алгоритмом. Для кожного позиції з сумою \u003cstrong\u003esum\u003c/strong\u003e і кількістю збільшень \u003cstrong\u003ek\u003c/strong\u003e, потрібно порахувати суму усіх map[i][S — sum] (0 \u0026lt;\u003d i \u0026lt;\u003d (m – k)). Відповідь буде сума усіх позицій.\u003c/p\u003e\u003c/div\u003e","tags":[]}}