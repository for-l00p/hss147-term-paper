{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1512629664,"rating":150,"authorHandle":"MikeMirzayanov","modificationTimeSeconds":1512632419,"id":56204,"title":"\u003cp\u003eMy Course \u0026quot;Advanced Algorithms and Data Structures\u0026quot; at Harbour.Space University\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cimg src\u003d\"/predownloaded/c0/52/c052c92fc998292e9705f9924413b581d13515ba.jpg\" style\u003d\"float: right;margin: 0 1.0em;max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eHi, Codeforces!\u003c/p\u003e\u003cp\u003eThis is not an ordinary post from me. This is not an announcement of new features or a championship, but I\u0027m no less enthusiastic.\u003c/p\u003e\u003cp\u003eI am glad to inform you that from January 29 to February 16, 2018 I will be giving the course \u003ca href\u003d\"https://goo.gl/u5nTmk\"\u003e\u0026quot;Advanced Algorithms and Data Structures\u0026quot;\u003c/a\u003e in \u003ca href\u003d\"https://goo.gl/zDSsaQ\"\u003eHarbour.Space University (Barcelona, Spain)\u003c/a\u003e. The course will be in English. The students of this course will not only be students of Harbour.Space, but is open to all! Who wants to join?\u003c/p\u003e\u003cp\u003eThis course isn\u0027t just for Harbour.Space students, it is also open to Codeforces participants, who will be offered a special price, 1000 EUR. The cost does not include travel or accommodation.\u003c/p\u003e \u003ccenter style\u003d\"margin: 20.0px;\"\u003e \u003ca href\u003d\"https://goo.gl/u5nTmk\" style\u003d\"font-size: 24.0px;padding: 8.0px 14.0px;background-color: rgb(103,58,183);color: white;\"\u003eRegister for the Course →\u003c/a\u003e \u003c/center\u003e\u003cp\u003eIn my plans there is a detailed story about some algorithms and data structures, a lot of practical exercises and emphasis not only on the correctness, but also the beauty and structure of the code. My goal is to make useful and interesting classes for both those who want to understand the fundamental CS, and for those interested in programming competitions. And of course, we will have the opportunity to meet and talk. I\u0027m happy to share stories about the history of Codeforces and development plans.\u003c/p\u003e\u003cp\u003eThe course will consist of three weeks of training, 5 training days in each week. The program includes daily lectures and practical exercises. It will not be boring for sure!\u003c/p\u003e\u003cp\u003eHere is the expected course outline:\u003c/p\u003e \u003ctable\u003e   \u003cthead\u003e     \u003ctr\u003e       \u003cth\u003eWeek \u003c/th\u003e       \u003cth\u003eDay \u003c/th\u003e       \u003cth\u003eTopics\u003c/th\u003e     \u003c/tr\u003e   \u003c/thead\u003e   \u003ctbody\u003e     \u003ctr\u003e       \u003ctd\u003e1 \u003c/td\u003e       \u003ctd\u003e1 \u003c/td\u003e       \u003ctd\u003eHeap data structure, heap properties and operations. HeapSort. Priority queue. Other heap applications. Mergeable heaps: binomial heap, pairing heap, randomised meldable heap.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e1 \u003c/td\u003e       \u003ctd\u003e2 \u003c/td\u003e       \u003ctd\u003eFenwick tree. Description and motivation. Implementation of Fenwick tree. Generalisation for higher dimensions. Skip list data structure. Implementation details. Indexable skiplist.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e1 \u003c/td\u003e       \u003ctd\u003e3 \u003c/td\u003e       \u003ctd\u003eSegment trees. Top-down implementation. Bottom-up implementation. Segment trees applications. Persistent data structures. Persistent stack, persistent array. Persistent Fenwick and segment trees.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e1 \u003c/td\u003e       \u003ctd\u003e4 \u003c/td\u003e       \u003ctd\u003eCartesian trees, treap data structure. Merge and split operations. Treap implementation in detail. Treap applications.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e1 \u003c/td\u003e       \u003ctd\u003e5 \u003c/td\u003e       \u003ctd\u003eTreaps with implicit keys. Ropes. Segment reverse operation. Examples of problems.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e2 \u003c/td\u003e       \u003ctd\u003e6 \u003c/td\u003e       \u003ctd\u003eIntroduction to strings. String searching (matching) problem. Pattern pre processings. Z-function, prefix-function. Their applications. Knuth–Morris–Pratt algorithm. Matching finite state machine.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e2 \u003c/td\u003e       \u003ctd\u003e7 \u003c/td\u003e       \u003ctd\u003eMultiple pattern matching. Trie data structure. Aho-Corasick algorithm. Implementation details. Dynamic programming on a trie.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e2 \u003c/td\u003e       \u003ctd\u003e8 \u003c/td\u003e       \u003ctd\u003eString hashing. Rabin-Karp algorithm. Fast substrings comparison with hashes. Suffix array. LCP array. Efficient construction algorithm. Applications.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e2 \u003c/td\u003e       \u003ctd\u003e9 \u003c/td\u003e       \u003ctd\u003eSuffix tree. Ukkonen\u0027s algorithm. Suffix tree construction from LCP array. Suffix tree applications.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e2 \u003c/td\u003e       \u003ctd\u003e10 \u003c/td\u003e       \u003ctd\u003eSuffix automaton. Size bounds. Linear Algorithm. Using suffix automata as an index for approximate string searches.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e3 \u003c/td\u003e       \u003ctd\u003e11 \u003c/td\u003e       \u003ctd\u003eIntroduction to automata theory. Formal languages. Context-free languages. Formal grammars. Context-free grammars. NFA, DFA, convert NFA to DFA. Build automaton by regular expression.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e3 \u003c/td\u003e       \u003ctd\u003e12 \u003c/td\u003e       \u003ctd\u003eLL(1) parser. Arithmetic expressions parsing. Shunting-yard algorithm. Simplified Pascal language parsing and interpretation.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e3 \u003c/td\u003e       \u003ctd\u003e13 \u003c/td\u003e       \u003ctd\u003eAlgorithms for traversing a graph. DFS. Properties. DFS search tree. Edges classification. Linear bridge-finding algorithm. Linear articulation points finding algorithm. Strongly connected components. Tarjan\u0027s strongly connected components algorithm.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e3 \u003c/td\u003e       \u003ctd\u003e14 \u003c/td\u003e       \u003ctd\u003eTree problems. Bottom-up approach. LCA problem. LCA algorithms.\u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003e3 \u003c/td\u003e       \u003ctd\u003e15 \u003c/td\u003e       \u003ctd\u003eBipartite graphs. König’s criterion. Problems: maximum matching, minimum edge cover, maximum independent vertex set, minimum vertex cover. Connection of the problems. Berge\u0027s lemma. Kuhn algorithm. Kuhn algorithm properties. Minimal vertex cover by maximum matching. Cover DAG by minimal number of paths.\u003c/td\u003e     \u003c/tr\u003e   \u003c/tbody\u003e \u003c/table\u003e\u003cp\u003e\u003ca href\u003d\"https://goo.gl/zDSsaQ\"\u003eHarbor.Space University\u003c/a\u003e is located in Barcelona (Spain). For users of Codeforces, Harbour.Space is known for active participation in the life of the community of sports programming (partnership with Codeforces in the framework of \u003ca href\u003d\"//codeforces.com/blog/entry/51208\"\u003eEducational Rounds\u003c/a\u003e). The main activity of the university is teaching (there are bachelor\u0027s and master\u0027s programs) in the following areas:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eMaths as a Second Language\u003c/li\u003e   \u003cli\u003eComputer Science\u003c/li\u003e   \u003cli\u003eData Science\u003c/li\u003e   \u003cli\u003eCyber Security\u003c/li\u003e   \u003cli\u003eInteraction Design\u003c/li\u003e   \u003cli\u003eDigital Marketing\u003c/li\u003e   \u003cli\u003eHigh Tech Entrepreneurship\u003c/li\u003e   \u003cli\u003eFinTech\u003c/li\u003e   \u003cli\u003eBioTech\u003c/li\u003e   \u003cli\u003eAerospace Engineering\u003c/li\u003e   \u003cli\u003eSuperCities UrbanTech\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eRegister for my upcoming course \u003ca href\u003d\"https://goo.gl/u5nTmk\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eMike Mirzayanov\u003c/p\u003e\u003c/div\u003e","tags":["harbourspace"]}}