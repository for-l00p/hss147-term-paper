{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1483709620,"rating":44,"authorHandle":"zscoder","modificationTimeSeconds":1483709680,"id":49619,"title":"\u003cp\u003eWeekly Training Farm 20 — Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eCongratulations to the winners! \u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/spentplaying\" title\u003d\"Candidate Master spentplaying\"\u003espentplaying\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/0w1\" title\u003d\"Expert 0w1\"\u003e0w1\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/lawfung\" title\u003d\"Candidate Master lawfung\"\u003elawfung\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eAlso special props to \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/biGinNer\" title\u003d\"Candidate Master biGinNer\"\u003ebiGinNer\u003c/a\u003e for solving the last 3 problems (and the only one to solve F during contest)\u003c/p\u003e\u003cp\u003eHere are the editorials :\u003c/p\u003e\u003ch2\u003eProblem A.\u003c/h2\u003e\u003cp\u003eThis is a simple problem. First, we calculate the position Harry ends in after making the moves \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e time. This can be done by directly simulating the moves Harry make. Now, suppose Harry is at \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e after \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e iteration. Note that after every iteration, Harry will move \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e units to the right and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e units up, so after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e moves he will end up in \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003enx\u003c/i\u003e, \u003ci\u003eny\u003c/i\u003e)\u003c/span\u003e. The complexity of the solution is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003es\u003c/i\u003e|)\u003c/span\u003e.\u003c/p\u003e\u003ch2\u003eProblem B.\u003c/h2\u003e\u003cp\u003eThis is a dp problem. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e be the maximum possible sum of the remaining numbers in the range \u003cspan class\u003d\"tex-span\"\u003e[1..\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. For \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003ek\u003c/i\u003e - 1\u003c/span\u003e the value is just the sum of the numbers in the range. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[0] \u003d 0\u003c/span\u003e. For \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≥ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, we may choose to keep the element \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e or remove a subsegment of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e which ends at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Thus, we arrive at the recurrence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1] + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e])\u003c/span\u003e. We can calculate the dp values in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch2\u003eProblem C.\u003c/h2\u003e\u003cp\u003eObserve that we can consider each prime factor separately. For each prime \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e that appears in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e, let\u0027s see what prime power \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sup\u003e\u003c/span\u003e should we pick from each number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e so that the sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is equal to the power of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e in the prime factorization of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e. Firstly, we need to prime factorize all the numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. We can use Sieve to find the primes and the factorization can be done in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/48/dd/48dd48cc7c129a110347d9d086f5406156b6f824.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. From now on, we\u0027ll focus on a specific prime \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e. Now, we know the maximum prime power \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e we can take from each number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e (so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e). From here, we can use a greedy method to decide what to take from each number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ 20\u003c/span\u003e because \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e20\u003c/sup\u003e \u003d 1048576 \u0026gt; 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e. So, for each number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, we know the cost needed if we take \u003cspan class\u003d\"tex-span\"\u003e1, 2, ..., \u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e factors of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. We can store a vector and for each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, we push \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003ci\u003ep\u003c/i\u003e, \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e - \u003ci\u003ep\u003c/i\u003e), \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e - \u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e), ..., \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/sup\u003e - \u003ci\u003ep\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1\u003c/sup\u003e)\u003c/span\u003e into the vector. Now, we sort the vector and take the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e elements, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is the power of prime \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e in the prime factorization of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e. If we can\u0027t take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e elements, the answer is \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e. We can repeat this for all primes and solve the problem in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e6/f6/e6f62029c79b3250eb5c383e8c1d0f9ee3b1ad51.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time.\u003c/p\u003e\u003ch2\u003eProblem D.\u003c/h2\u003e\u003cp\u003eTo solve this problem, you need to know a bit about permutations. First, we need to determine how to find the minimum number of swaps to sort a permutation. This is a well-known problem. Let the permutation be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e \u003d \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Construct a graph by drawing edges from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for all \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Note that the graph is formed by disjoint cycles. You can easily see swapping two elements can either split a cycle into two smaller cycles, or merge two cycles into one cycle. Since the identity permutation is formed by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e cycles, the optimal way is to keep splitting cycles into two and increase the total number of cycles by \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e each step. Thus, if we denote \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e as the number of cycles in the current permutation, the number of moves needed to sort the permutation is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. Harry wins if and only if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e is odd.\u003c/p\u003e\u003cp\u003eThe key observation is that whenever there are exactly two question marks left, the first player will always win. Why? Consider how the current graph of the permutation looks like. It will be a union of few cycles and \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e chains (we consider the singleton, a component formed by a single vertex, as a chain). Now, the first player can either choose to close off one of the chains, or join the two chains together. The latter will leave exactly \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e less number of cycles than the former. So, one of them will guarantee the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e to be odd. Thus, the first player only have to choose the correct move. This implies that if the number of question marks \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e is at least \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, then Harry wins if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e is even and loses otherwise.\u003c/p\u003e\u003cp\u003eNow, the only case left is when there\u0027re only \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e question mark in the beginning. This means that Harry only have \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e possible move and we\u0027re left with the problem of deciding whether the final permutation have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e odd. Thus, it is enough to count the number of cycles in the formed graph. This can be done by dfs. The complexity of the solution is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch2\u003eProblem E.\u003c/h2\u003e\u003cp\u003eFirst, we form a trie of the given words. Now, the game is equivalent to the following :\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eStart from the root of the trie.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eEach player can either move to one of the children of the current node, or delete one edge connecting the current node to one of the children.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eThe one who can\u0027t move loses. This reduced game can be solved with Tree DP. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eu\u003c/i\u003e]\u003c/span\u003e denote the winner of the game if the first player starts at node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e. The leaves have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eu\u003c/i\u003e] \u003d 2\u003c/span\u003e. Our goal is to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[0]\u003c/span\u003e (where \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e is the root). The recurrence is simple. Suppose we\u0027re finding \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eu\u003c/i\u003e]\u003c/span\u003e and the children of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. If one of the children has dp value of \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, then Player 1 can just move to that children and win. Otherwise, all children have dp value of \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. Thus, both players will try not to move down unless forced to. So, they\u0027ll keep deleting edges. If there are an even number of children, Player 2 will win, as he will either delete all edges or force Player 1 to move down. Otherwise, Player 1 wins. This gives a simple \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e tree dp solution.\u003c/p\u003e\u003ch2\u003eProblem F.\u003c/h2\u003e\u003cp\u003eFirstly, we make the same observations as problem C. Swapping two elements will either split a cycle into two or merge two cycles. Note that if we swap two elements from the same cycle, the cycle will split into two. If we swap two elements from different cycles, the two cycles will combine. Also note that for a cycle of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, we can always split it into two cycles \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e \u0026gt; 0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e + \u003ci\u003eb\u003c/i\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e by choosing the appropriate two elements to swap from the cycle. Now, the game reduces to choose \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e possibly equal elements from one cycle, swap them, and delete one of the resulting cycles. So, for a given permutation, if the cycle sizes are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, then each move we can choose one of the sizes and the operation is equivalent to changing the size into any nonnegative number strictly smaller than it. Thus, we have reduced the problem to playing a game of Nim on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Since Harry goes second, he wins if and only if the xor values of all the cycle sizes is \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. (This is a well-known fact)\u003c/p\u003e\u003cp\u003eThus, we\u0027ve reduced the problem into finding the number of permutations of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e which have the xor of all cycle sizes equal to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e. To do so, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e denote the number of permutations with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and xor of all cycle sizes equal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. The dp transitions can be done by iterating through all possible sizes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e of the cycle containing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. For each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e, there are \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0e/60/0e605f54b85c216d36b15689c1dad46459dfcca1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ways to choose the remaining elements of the cycle containing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003es\u003c/i\u003e - 1)!\u003c/span\u003e ways to permute them. Thus, we can sum up the values of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/68/5c/685ce8525b932786b23f9134fcd42732644f2188.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for all \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003es\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. The whole solution works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e time.\u003c/p\u003e\u003c/div\u003e","tags":[]}}