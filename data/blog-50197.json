{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1486024553,"rating":1,"authorHandle":"Ahmad_Elsagheer","modificationTimeSeconds":1486048141,"id":50197,"title":"\u003cp\u003e[Editorial] Practice 5.2\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jZ6pOtEeX9/contest/211504/problem/A\"\u003eProblem A: Circular RMQ\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eStandard problem with segment trees. For circularity, we can split the query into two queries: a prefix query and a suffix query.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/52/submission/20651146\"\u003eJava Implementation\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/52/submission/4398591\"\u003eC++ Implementation\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jZ6pOtEeX9/contest/211504/problem/B\"\u003eProblem B: Xenia and Bit Operations\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eOriginal editorial: \u003ca href\u003d\"//codeforces.com/blog/entry/8725\"\u003elink\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/339/submission/18271983\"\u003eJava Implementation\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/339/submission/4346442\"\u003eC++ Implementation\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jZ6pOtEeX9/contest/211504/problem/C\"\u003eProblem C: Babaei and Birthday Cake\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eOriginal editorial: \u003ca href\u003d\"//codeforces.com/blog/entry/43227\"\u003elink\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/629/submission/16245469\"\u003eJava Implementation\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/629/submission/16238487\"\u003eC++ Implementation\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jZ6pOtEeX9/contest/211504/problem/D\"\u003eProblem D: Sereja and Brackets\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eOriginal editorial: \u003ca href\u003d\"//codeforces.com/blog/entry/10363\"\u003elink\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/380/submission/18363712\"\u003eJava Implementation\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/380/submission/18024502\"\u003eC++ Implementation\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jZ6pOtEeX9/contest/211504/problem/E\"\u003eProblem E: Ant colony\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eOriginal editorial: \u003ca href\u003d\"//codeforces.com/blog/entry/14136\"\u003elink\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/474/submission/19829737\"\u003eJava Implementation\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/474/submission/8123766\"\u003eC++ Implementation\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jZ6pOtEeX9/contest/211504/problem/F\"\u003eProblem F: Pharaoh\u0027s Bank\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eWe will build a segment tree on the given array where every node will hold a set of attributes\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epreMax\u003c/i\u003e\u003c/span\u003e: maximum prefix sum\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epreLen\u003c/i\u003e\u003c/span\u003e: length of maximum prefix sum\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufMax\u003c/i\u003e\u003c/span\u003e: maximum suffix sum\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufLen\u003c/i\u003e\u003c/span\u003e: length of maximum suffix sum\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e: ans for the whole segment (maximum sum of a contiguous subsegment)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eansLen\u003c/i\u003e\u003c/span\u003e: length of the answer\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e\u003c/span\u003e: sum of all elements in the segment\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumLen\u003c/i\u003e\u003c/span\u003e: length of the whole segment\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eWe will query the segment tree for the input interval. In case of a split, we will need to combine (merge) answers from two different segments \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e (left), \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e (right) into one segment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e using the following formulas:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epreMax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003epreMax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003epreMax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epreLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003epreLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003epreLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e depending on the maximum in formula 1.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufMax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003esufMax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003esufMax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003esufLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003esufLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e depending on the maximum in formula 3.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eans\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003esufMax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003epreMax\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eansLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eansLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eansLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esufLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003epreLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e depending on the maximum in formula 5.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003esum\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esumLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003esumLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003esumLen\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/FVj0C3\"\u003eJava Implementation\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/Vx1imu\"\u003eC++ Implementation\u003c/a\u003e\u003c/p\u003e \u003chr /\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/group/jZ6pOtEeX9/contest/211504/problem/G\"\u003eProblem G: Little Artem and Time Machine\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eOriginal editorial: \u003ca href\u003d\"//codeforces.com/blog/entry/44538\"\u003elink\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/669/submission/17516233\"\u003eC++ Implementation\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}