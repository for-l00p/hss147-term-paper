{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1501837882,"rating":-39,"authorHandle":"liaoyulei","modificationTimeSeconds":1501837882,"id":53671,"title":"\u003cp\u003e树状数组（#427 div2 C）\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e树状数组数据是从1开始保存的，update用于更新，getsum用于查询。每个更新、查询的复杂度均为logn\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include\u0026lt;stdio.h\u0026gt;\n#include\u0026lt;stdlib.h\u0026gt;\ntypedef struct st{\n    int t,x1,y1,x2,y2,idx;\n}st;\nst stu[100005];\nint c[105][105],x[100005],y[100005],s[100005],ans[100005];\nint lowbit(int x){\n\treturn x\u0026amp;-x;\n}\nvoid update(int x,int y,int delta){\n\tint i,j;\n\tfor(i\u003dx;i\u0026lt;\u003d100;i+\u003dlowbit(i)){\n\t\tfor(j\u003dy;j\u0026lt;\u003d100;j+\u003dlowbit(j)){\n\t\t\tc[i][j]+\u003ddelta;\n\t\t}\n\t}\n}\nint getsum(int x,int y){\n\tint i,j,sum\u003d0;\n\tif(!x||!y){\n\t\treturn 0;\n\t}\n\tfor(i\u003dx;i\u0026gt;0;i-\u003dlowbit(i)){\n\t\tfor(j\u003dy;j\u0026gt;0;j-\u003dlowbit(j)){\n\t\t\tsum+\u003dc[i][j];\n\t\t}\n\t}\n\treturn sum;\n}\nint compare(const void *a,const void *b){\n    st *p\u003d(st *)a,*q\u003d(st *)b;\n    return p-\u0026gt;t!\u003dq-\u0026gt;t?p-\u0026gt;t-q-\u0026gt;t:p-\u0026gt;idx-q-\u0026gt;idx;\n}\nint main(){\n    int i,j,n,q,c,tmp;\n    scanf(\u0026quot;%d%d%d\u0026quot;,\u0026amp;n,\u0026amp;q,\u0026amp;c);\n    for(i\u003d1;i\u0026lt;\u003dn;++i){\n        scanf(\u0026quot;%d%d%d\u0026quot;,x+i,y+i,s+i);\n        update(x[i],y[i],s[i]);\n    }\n    for(i\u003d1;i\u0026lt;\u003dq;++i){\n        scanf(\u0026quot;%d%d%d%d%d\u0026quot;,\u0026amp;stu[i].t,\u0026amp;stu[i].x1,\u0026amp;stu[i].y1,\u0026amp;stu[i].x2,\u0026amp;stu[i].y2);\n        stu[i].t%\u003dc+1;\n        stu[i].idx\u003di;\n    }\n    qsort(stu+1,q,sizeof(st),compare);\n    for(i\u003d1;i\u0026lt;\u003dq;++i){\n\t\tif(stu[i].t\u0026gt;stu[i-1].t){\n\t\t\tfor(j\u003d1;j\u0026lt;\u003dn;++j){\n\t\t\t\ttmp\u003d(s[j]+stu[i].t-stu[i-1].t)%(c+1);\n\t\t\t\tupdate(x[j],y[j],tmp-s[j]);\n\t\t\t\ts[j]\u003dtmp;\n\t\t\t}\n\t\t}\n\t\tans[stu[i].idx]\u003dgetsum(stu[i].x2,stu[i].y2)-getsum(stu[i].x1-1,stu[i].y2)-getsum(stu[i].x2,stu[i].y1-1)+getsum(stu[i].x1-1,stu[i].y1-1);\n\t}\n    for(i\u003d1;i\u0026lt;\u003dq;++i){\n        printf(\u0026quot;%d\\n\u0026quot;,ans[i]);\n    }\n    return 0;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["#algorithms","2d binary indexed tree"]}}