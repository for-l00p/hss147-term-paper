{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1516135543,"rating":4,"authorHandle":"neutron-byte","modificationTimeSeconds":1516135904,"id":57167,"title":"\u003cp\u003eMath Problem: Hanoi Tower Troubles Again!\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"https://uva.onlinejudge.org/index.php?option\u003donlinejudge\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d1217\"\u003eHanoi Tower Troubles Again\u003c/a\u003e is a problem I recently discovered in \u0026quot;Programming Challenges\u0026quot; by Skiena and Revilla. It seems to be quite popular, because some (bad!) solutions can be found on various websites. I want to proof a nice explicit form here (see below).\u003c/p\u003e\u003cp\u003eIt\u0027s trivial to solve this using (greedy) simulation (*). But Skiena and Revilla provide a short hint:\u003c/p\u003e\u003cp\u003e\u003cem\u003eCan the constraints be usefully modeled using a DAG?\u003c/em\u003e\u003c/p\u003e\u003cp\u003eI thought about constructing a DAG where longest path corresponds to optimal solution. Unfortunately, my best approach is to use \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e as state where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e denotes number on ball on top of peg \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e; exponential number of vertices is bad. How to use this hint in a suitable way?\u003c/p\u003e\u003cp\u003eConsidering small cases, one find the answers\u003c/p\u003e\u003cp\u003e\u003cem\u003e1, 3, 7, 11, 17, 23, 31, 39, 49, 59, ...\u003c/em\u003e\u003c/p\u003e\u003cp\u003efor 1, 2, 3, ... pegs respectively. I conjecture that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/72/f4/72f4adec841e3d1e94caedea7fbe8c74f384cf17.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is the answer in general.\u003c/p\u003e\u003cp\u003eCrawling through roughly a dozen websites with trivial simulation and no comments, I encountered a \u003ca href\u003d\"http://blog.csdn.net/tigerisland45/article/details/73196532\"\u003echinese article\u003c/a\u003e where a recurrence relation is given but not proven: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e(1) \u003d 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e(2) \u003d 3\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e) \u003d \u003ci\u003eh\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1) + \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e for even \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e) \u003d \u003ci\u003eh\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1) + \u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e for odd \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFinally, there are two questions:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eHow to utilize a DAG suitable?\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eHow to prove the recurrence and/or explicit form (if correct)?\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eAny kind of help and interesting ideas are appreciated!\u003c/p\u003e\u003cp\u003e(*) It\u0027s not immediately clear that solution is bounded and greedy simulation is correct.\u003c/p\u003e\u003c/div\u003e","tags":["combinatorics","proof","#algorithms"]}}