{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1470413109,"rating":70,"authorHandle":"Eran","modificationTimeSeconds":1470594591,"id":46434,"title":"\u003cp\u003eCodeforces Round #365 (Div. 2) Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch4\u003e\u003ca href\u003d\"//codeforces.com/contest/703/problem/A\"\u003e703A — Mishka and Game\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eIn this problem you had to do use the following algo. If Mishka wins Chris in the current round, then increase variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecountM\u003c/i\u003e\u003c/span\u003e by 1. Otherwise (if Chris wins Mishka) increase variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecountC\u003c/i\u003e\u003c/span\u003e. After that you had to compare this values and print the answer.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"//codeforces.com/contest/703/problem/B\"\u003e703B — Mishka and trip\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eLet\u0027s look at the first capital. Note that the total cost of the outgoing roads is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e[\u003ci\u003eid\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e] · (\u003ci\u003esum\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e[\u003ci\u003eid\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e])\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e\u003c/span\u003e — summary beauty of \u003cstrong\u003eall\u003c/strong\u003e cities. Thus iterating through the capitals we can count the summary cost of roads between capitals and all the other cities. But don\u0027t forget that in this case we count the roads between pairs of capitals twice. To avoid this on each step we should update \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e \u003d \u003ci\u003esum\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e[\u003ci\u003eid\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/sub\u003e] \u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eid\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ecur\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the position of current capital. In the end we should add to the answer the cost of roads between \u0026quot;non-capital\u0026quot; neighbour cities.\u003c/p\u003e\u003cp\u003eComplexity — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"//codeforces.com/contest/703/problem/C\"\u003e703C — Chris and Road\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eImagine that the bus stands still and we move \u0026quot;to the right\u0026quot; with a constant speed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. Then it\u0027s not hard to see that movement along the line \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e \u003d (\u003ci\u003eu\u003c/i\u003e / \u003ci\u003ev\u003c/i\u003e) · (\u003ci\u003ex\u003c/i\u003e  -  \u003ci\u003ev\u003c/i\u003e · \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e)\u003c/span\u003e is optimal, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e — time in which we begin our movement. In this way answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e \u003d \u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e + (\u003ci\u003ew\u003c/i\u003e / \u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e \u003d 0\u003c/span\u003e, then we start our movement immediately. In this case we need to check that our line doesn\u0027t intersect polygon (either we can cross the road in front of a bus, or the bus is gone).\u003c/p\u003e\u003cp\u003eOtherwise we need to find such minimal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e that our line is tangent to the polygon. It can be done with binary search.\u003c/p\u003e\u003cp\u003eComplexity — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e \u003ci\u003elog\u003c/i\u003e \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eExercise: Solve this problem in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"//codeforces.com/contest/703/problem/D\"\u003e703D — Mishka and Interesting sum\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eEasy to see, that the answer for query is XOR-sum of \u003cstrong\u003eall\u003c/strong\u003e elements in the segment xored with XOR-sum of \u003cstrong\u003edistinct\u003c/strong\u003e elements in the segment. XOR-sum of all numbers we can find in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e using partial sums. As for the XOR-sum of distinct numbers... Let\u0027s solve easier problem.\u003c/p\u003e\u003cp\u003eLet the queries be like \u0026quot;find the number of distinct values in a segment\u0026quot;. Let\u0027s sort all the queries according to their right bounds and iterate through all elements of our array. We also need to make a list \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elast\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elast\u003c/i\u003e[\u003ci\u003evalue\u003c/i\u003e]\u003c/span\u003e is the last position of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003evalue\u003c/i\u003e\u003c/span\u003e on the processed prefix of array. Assume we are at position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e. Then the answer for the query in the segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e,  \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e ≤ \u003ci\u003er\u003c/i\u003e\u003c/span\u003e) is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a1/70/a1704df3a9ac7f6da7a9f50f6f37086d4b589e40.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 1\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elast\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e] \u003d \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e otherwise. It\u0027s easy to store and update such values in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e. When moving to the next position we have to make the following assignments: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003elast\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]] \u003d 0, \u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 1, \u003ci\u003elast\u003c/i\u003e[\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e] \u003d \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. To get described sum in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e we can use segment tree (or Fenwick tree) instead of standard array.\u003c/p\u003e\u003cp\u003eNow let\u0027s turn back to our problem. Everything we have to do is to change assignment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and count XOR-sum instead of sum. Now we can solve this problem in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e \u003ci\u003elog\u003c/i\u003e \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastie.org/10931832\"\u003eSolution (with Fenwick)\u003c/a\u003e\u003c/p\u003e\u003cp\u003eP.S.: Also there is a solution with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e \u003ci\u003esqrt\u003c/i\u003e \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e complexity (using Mo\u0027s algo), but we tried to kill it :D\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"//codeforces.com/contest/703/problem/E\"\u003e703E — Мишка и делители\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eLet\u0027s use dp to solve this problem.\u003c/p\u003e\u003cp\u003eSuppose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ed\u003c/i\u003e]\u003c/span\u003e is the minimal number of elements on prefix of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, that their product is divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. It\u0027s easy to see that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ed\u003c/i\u003e] \u003d \u003ci\u003emin\u003c/i\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e  -  1][\u003ci\u003ed\u003c/i\u003e],  \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e  -  1][\u003ci\u003ed\u003c/i\u003e  /  \u003ci\u003egcd\u003c/i\u003e(\u003ci\u003ed\u003c/i\u003e,  \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)]  +  1)\u003c/span\u003e. That is so because it\u0027s optimal to take as much divisors of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as possible. Answer — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s imrove our solution. Notice, that as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e we should use only divisors of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e (which \u003cstrong\u003ein the worst\u003c/strong\u003e case would be 6720). As for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egcd\u003c/i\u003e\u003c/span\u003e, we can easily find it in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eprimes\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e))\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eprimes\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e — number of primes in decomposition of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. We also need to renumber our divisors according to their prime decomposition.\u003c/p\u003e\u003cp\u003eTo get AC in this problem you had to optimize described dp and add minimization of used elements\u0027 sum. Final complexity — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e · \u003ci\u003edivs\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e) · \u003ci\u003eprimes\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e))\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastie.org/10930676\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["editorial","703"]}}