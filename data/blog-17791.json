{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1431101342,"rating":0,"authorHandle":"1e9","modificationTimeSeconds":1431101669,"id":17791,"title":"\u003cp\u003eUVA 10261, ferry loading, best Solution?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThe problem is similar to asking, you have 2 boxes each having capacity of \u003cstrong\u003eW\u003c/strong\u003e(\u0026lt;10000). And you have given a list of item of some capacity \u003cstrong\u003ec\u003c/strong\u003e( 100 \u0026lt;\u003d c \u0026lt;\u003d 3000). List can contain at max \u003cstrong\u003en\u003c/strong\u003e (\u0026lt;\u003d 200) items. Now you have to access the list in FIFO order and put those items in any of the two boxes until addition of item overflow each of the boxes. Note: You can not skip any item during processing, if it does not fit stop the process.\u003c/p\u003e\u003cp\u003eI did O(Wn) for each test case. My java solution run in 2 sec approx. \u003c/p\u003e\u003cp\u003eIs there any better solution than this? I thought of greedy but instantly got counter case.\u003c/p\u003e\u003c/div\u003e","tags":["dynamic programming","online judge","uva"]}}