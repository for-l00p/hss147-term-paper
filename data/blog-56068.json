{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1511972216,"rating":3,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1511972216,"id":56068,"title":"\u003cp\u003eNotes on Codeforces Beta Round #96, Div2-A, B, C, D, E, Div1-D\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/133/problem/A\" title\u003d\"Codeforces Beta Round 96 (Div. 2)\"\u003e133A - HQ9+\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIf the given string contains the required characters except for \u0027+\u0027, the answer is yes.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/133/problem/B\" title\u003d\"Codeforces Beta Round 96 (Div. 2)\"\u003e133B - Unary\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can construct the binary sequence according to the requirement, and then calculate its value in decimal form.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/133/problem/C\" title\u003d\"Codeforces Beta Round 96 (Div. 2)\"\u003e133C - Turing Tape\u003c/a\u003e\u003c/p\u003e\u003cp\u003eInverse the binary form and then compute the value...\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/133/problem/D\" title\u003d\"Codeforces Beta Round 96 (Div. 2)\"\u003e133D - Piet\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is in fact a straightforward implementation problem, but we should complete some pre-processing in order to avoid TLE. \u003c/p\u003e\u003cp\u003eThe main issue that might lead to TLE is that we have to move to one of the four corners within one group. One group may consist of many squares with the same color, and according to DP and CP pointers, after we enter such a group, we must first determine the corner and then move to the next square (or group). This sub-problem can be solved based on DP algorithm. For instance, we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[0][\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e to denote that if we are in the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th row and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-column and facing to the right, then we should move to position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[0][\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e, which assembles the prefix or suffix idea. Similarly, we implement the same pre-processing for the other three directions.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/133/problem/E\" title\u003d\"Codeforces Beta Round 96 (Div. 2)\"\u003e133E - Logo Turtle\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis problem can be solved by adopting a three dimensional DP. We use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][0]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][1]\u003c/span\u003e to denote the maximum distance that we can reach, under the state that we have completed the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e commands, and implememted \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e changes, while facing to the right and left, respectively. For \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][0]\u003c/span\u003e, it can transfer to states \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e + \u003ci\u003enextj\u003c/i\u003e][0]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e + \u003ci\u003enextj\u003c/i\u003e][1]\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enextj\u003c/i\u003e ≥ 0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e + \u003ci\u003enextj\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. The detailed formula of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][0]\u003c/span\u003e can be represented as follows, while \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][1]\u003c/span\u003e can be derived in a similar manner.\u003c/p\u003e\u003cp\u003e1) the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e-th command is \u0027F\u0027 and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enextj\u003c/i\u003e\u003c/span\u003e is an even number: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e + \u003ci\u003enextj\u003c/i\u003e][0] \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e + \u003ci\u003enextj\u003c/i\u003e][0], \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][0] + 1)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e2) the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e-th command is \u0027T\u0027 and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enextj\u003c/i\u003e\u003c/span\u003e is an odd number: the same as 1)\u003c/p\u003e\u003cp\u003e3) the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e-th command is \u0027F\u0027 ans \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enextj\u003c/i\u003e\u003c/span\u003e is an odd number: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e + \u003ci\u003enextj\u003c/i\u003e][0] \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e + 1][\u003ci\u003ej\u003c/i\u003e + \u003ci\u003enextj\u003c/i\u003e][0], \u003ci\u003edp\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][1])\u003c/span\u003e\u003c/p\u003e\u003cp\u003e4) the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e-th command is \u0027T\u0027 and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enextj\u003c/i\u003e\u003c/span\u003e is an odd number: the same as 3)\u003c/p\u003e\u003cp\u003eHowever, it is still not done here, since the maximum distance may be “negative”. In other words, we can achieve the maximum distance by moving to the left. Thus, we should implement DP again, but replace \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/span\u003e. After all of the above steps, we will finally obtain the answer.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/132/problem/D\" title\u003d\"Codeforces Beta Round 96 (Div. 1)\"\u003e132D - Constants in the language of Shakespeare\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWell, I searched on the Internet and found that it can be solved with a greedy algorithm. Nevertheless, I did not figure out how to prove it...\u003c/p\u003e\u003cp\u003eWe start from the right bit and move to left. We will always try to find a subsequence consisting of consecutive 1s. If there is only one 1, we should assign a \u003cspan class\u003d\"tex-span\"\u003e + 2^\u003c/span\u003e to this position; otherwise, we should assign a \u003cspan class\u003d\"tex-span\"\u003e - 2^\u003c/span\u003e instead, while deleting these consecutive 1s but changing the next 0 into 1, which indicates that we add a \u003cspan class\u003d\"tex-span\"\u003e + 2^\u003c/span\u003e to that position, temporarily.\u003c/p\u003e\u003cp\u003eWe give s\u003d10011011 as a simple example. We scan from right to left and first find 11. Then, we assign \u003cspan class\u003d\"tex-span\"\u003e - 2\u003csup class\u003d\"upper-index\"\u003e0\u003c/sup\u003e\u003c/span\u003e and modify it as s\u003d10011100, and find 111. Now, we assign \u003cspan class\u003d\"tex-span\"\u003e - 2\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e, and change it into s\u003d10100000. Next, we assign \u003cspan class\u003d\"tex-span\"\u003e + 2\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e + 2\u003csup class\u003d\"upper-index\"\u003e7\u003c/sup\u003e\u003c/span\u003e. As a result, we obtain \u003cspan class\u003d\"tex-span\"\u003e - 2\u003csup class\u003d\"upper-index\"\u003e0\u003c/sup\u003e - 2\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 2\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e + 2\u003csup class\u003d\"upper-index\"\u003e7\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}