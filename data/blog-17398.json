{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1429021196,"rating":0,"authorHandle":"robinyu","modificationTimeSeconds":1446641924,"id":17398,"title":"\u003cp\u003eAd Hoc Problems\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eAd hoc problems, or simulation problems, just require you to simulate the process given in the problem statement. These are usually (but not always) the easiest problems in a problem set, and most contests have at least one of them. Usually, when this type of problem appears in a contest, it tests the contestant\u0027s ability to quickly read through a long problem statement and implement accurate and bug-free code according to the rules. Most ad hoc problems don\u0027t need any advanced knowledge in specialized data structures. Note that often, even ad hoc problems will require some sort of (not too hard) insight in order to avoid a purely brute-force solution. For example, consider the very simple problem:\u003c/p\u003e\u003cp\u003e\u003cem\u003eYou have N integers on an array, all with an initial value of zero. You have Q queries of the form \u003ccode\u003eL R V\u003c/code\u003e , which means you should add V to all the integers in the closed interval [L, R]. After all the queries, find the sum of the elements in a range [L, R].\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003e1 ≤ N, Q ≤ 10\u003csup\u003e6\u003c/sup\u003e\u003c/em\u003e\u003cbr /\u003e \u003cem\u003e1 ≤ L ≤ R ≤ N\u003c/em\u003e\u003cbr /\u003e \u003cem\u003e1 ≤ V ≤ 10\u003csup\u003e5\u003c/sup\u003e\u003c/em\u003e\u003cbr /\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInput:\n5 3\n1 5 100\n2 3 50\n2 4 20\n1 2\n\nOutput:\n270\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOf course, it\u0027s easy to see that just simulating the queries as is will take 10\u003csup\u003e6\u003c/sup\u003e*10\u003csup\u003e6\u003c/sup\u003e\u003d10\u003csup\u003e12\u003c/sup\u003e operations in the worst case, which is obviously too much. So, it\u0027s usually necessary to think of an alternative solution in this case. Even then, it doesn\u0027t require any hard data structures, and a solution is possible using only clever manipulation of arrays and simple math. Try to think of the O(N + Q) solution! (If you\u0027re up for a challenge, there is also O(Q log Q) and even O(Q) solution independent of N.)\u003c/p\u003e\u003cp\u003eTo practice your skill of solving ad hoc problems, consider solving the following:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/373/A\"\u003e373A - Collecting Beats is Fun\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/496/B\"\u003e496B - Secret Combination\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/508/B\"\u003e508B - Anton and currency you all know\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/382/C\"\u003e382C - Arithmetic Progression\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/400/C\"\u003e400C - Inna and Huge Candy Matrix\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/problemset/problem/208/D\"\u003e208D - Prizes, Prizes, more Prizes\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/noi-ph-mock/challenges/the-slippery-slope\"\u003eNOI.PH 2014 Mock - The Slippery Slope\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/noi-ph/challenges/color-grid\"\u003eNOI.PH 2014 Eliminations - Color Grid\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/noi-ph-finals/challenges/xoxo\"\u003eNOI.PH 2014 Finals - xoxo\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/noi-ph-2015-practice/challenges/make-gawa-this-program\"\u003eNOI.PH 2015 Practice - Make Gawa This Program\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/noi-ph-2015-finals-1/challenges/running-sam\"\u003eNOI.PH 2015 Finals (Day 1)  - Running Sam\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/noi-ph-2015-finals-2/challenges/schwelve\"\u003eNOI.PH 2015 Finals (Day 2)  - The Final Schwelve\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://www.hackerrank.com/contests/cp-entrance-2015/challenges/counting-people\"\u003eCPEC 2015 - Counting People\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eIf you can \u003cem\u003eonly\u003c/em\u003e solve ad hoc problems, you cannot do well in a contest! You also need to be able to solve many other types of problems, such as those requiring data structures, graph and mathematics, to be able to have any chance at winning a programming contest. So, you need to be able to quickly identify and solve the ad hoc problem, so that you have more time for the other, more challenging ones.\u003c/p\u003e\u003c/div\u003e","tags":["ad hoc","implementation"]}}