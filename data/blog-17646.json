{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1430439149,"rating":19,"authorHandle":"xmachadox","modificationTimeSeconds":1430439180,"id":17646,"title":"\u003cp\u003eTAKE OUR TECH CHALLENGE!\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/87/b0/87b0787bb209727f1a9b19cc34b6e539edff6533.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eYour challenge is to write a program that begins with an incomplete grid and covers it exactly with squares of any sizes. Cover it with as few squares as you can, and solve each puzzle as fast as you can! Your solution receives a higher score as your number of squares decreases.\u003c/p\u003e\u003cp\u003eWe\u0027ll supply the puzzles: just call our Puzzle API, described below. Your program must request and solve at least 400 individual puzzles to be considered for a prize.\u003c/p\u003e\u003cp\u003ePRIZES\u003c/p\u003e\u003cp\u003eGrand prize: $10,000 (Ten thousand US dollars)!\u003c/p\u003e\u003cp\u003eHonorable mentions: Up to ten prizes of $1,000 (one thousand US dollars) each.\u003c/p\u003e\u003cp\u003eSee judging for more details.\u003c/p\u003e\u003cp\u003eTHE DETAILS You are given an N x M grid of unit squares, with any grid elements missing. Here is an example:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/6b/3f/6b3f79ef12d7fdf9f9b074813195e3e771c6cc3e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThe grid is numbered on the X axis from 0..N-1 and on the Y axis from 0..M-1. The origin (0,0) is in the upper left corner. The integers N and M may range from 1 to 100 inclusive.\u003c/p\u003e\u003cp\u003eIn code, a puzzle is a two-dimensional array of Booleans. The value true represents a unit square that must be covered, and false represents an empty grid cell that is a non-coverable obstacle. For example, the following puzzle:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/cc/99/cc99a26e7949c35ff820542a735d034416fbe881.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e[  [true, false, true],  [true, true, true],  [true, true, false] ]\u003c/p\u003e\u003cp\u003eOur Puzzle API will hand you randomly-generated puzzles. Any grid elements may be missing.\u003c/p\u003e\u003cp\u003eYOUR CHALLENGE Cover the grid exactly using squares of any size. Squares may not overlap. Here is an example covering with 19 squares:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/7c/ff/7cff2dafa85351fd87f5bbed56c640e5a073f22a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIn code, your solution must be represented by an array of squares, where each square is a set of three key/value pairs:\u003c/p\u003e\u003cp\u003eX and Y, the grid coordinates of the upper-left corner of the covering square Size, the side length of the covering square For example, the following solution:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/67/34/67343eb79db507671c8ee4916703688e8a69e6b1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003ewould be represented in code by this JSON array of objects:\u003c/p\u003e\u003cp\u003e[  { X : 0, Y : 0, Size : 1 },  { X : 2, Y : 0, Size : 1 },  { X : 0, Y : 1, Size : 2 },  { X : 2, Y : 1, Size : 1 }, ]\u003c/p\u003e\u003cp\u003eWRITING YOUR PROGRAM Your program may be written in any language. It must communicate with our Puzzle API to:\u003c/p\u003e\u003cp\u003eRequest puzzles one at a time Submit solutions to those puzzles one at a time You must register for the contest in order to enter. We\u0027ll give you a 32-digit Registration Key that your code must use when calling the Puzzle API. Copy this key to a safe place! (If you lose your key, you can register again and get a new key, but you will lose any puzzle solutions you have already submitted.)\u003c/p\u003e\u003cp\u003eThen, download our Developer Pack that includes full instructions for interacting with the Puzzle API. It also includes working examples in PHP, Python, and Ruby.\u003c/p\u003e\u003cp\u003eJUDGING The contest opens on April 27, 2015 at 12:01am Eastern time. It closes on May 25, 2015 at 11:59pm Eastern time. The finalist round (see below) will take place during the week of June 1-8.\u003c/p\u003e\u003cp\u003eAll solutions will be judged on:\u003c/p\u003e\u003cp\u003eCorrectness Number of covering squares (fewer is better) Speed of solution Quality of code (only for our finalists -- see below) All contestants may compete until the contest end date. At that time, we will choose 10-15 finalists, based on their scores from the Puzzle API, who will compete for the prizes. Your program must request and solve at least 400 individual puzzles to be eligible to be a finalist.\u003c/p\u003e\u003cp\u003eWe will contact the finalists using the email address provided during registration. Finalists will run their programs to request and solve another 400 individual puzzles. Finalists will also email their source code to us.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://cimpress.com/techchallenge/legal\"\u003eSITE OFFICIAL\u003c/a\u003e \u003ca href\u003d\"http://cimpress.com/techchallenge/register\"\u003eRegister now.\u003c/a\u003e \u003ca href\u003d\"http://cimpress.com/techchallenge/developerpack\"\u003eDownload our Developer Pack.\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["competitive programming","prize"]}}