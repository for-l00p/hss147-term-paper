{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1407601201,"rating":113,"authorHandle":"MinakoKojima","modificationTimeSeconds":1407613283,"id":13341,"title":"\u003cp\u003eThinking on Hacking\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003ePeople always hope strong pretests. There\u0027s reasons: it will be a huge lost if someone get the correct solution but fail by tricks (Especially for hard problem). But is that a good taste if we remain all tests in the pretest? Well, I don\u0027t think so, there will be no difference between ACM-ICPC rules if we do so.\u003c/p\u003e\u003cp\u003eThe question is, the reward of hacking is uncertain while the cost is high. Not only the time, but also it will stop you from resubmitting. Imagine that you solve a problem and found a trick in it, will you lock it immediately? Well, since I do not know whether the trick is involved in the pretests. I prefer only to do hacking until there is no solvable problem.\u003c/p\u003e\u003cp\u003eIn \u003ca href\u003d\"//codeforces.com/contest/346/standings\"\u003eRound #201\u003c/a\u003e, \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/cgy4ever\" title\u003d\"Гроссмейстер cgy4ever\"\u003ecgy4ever\u003c/a\u003e resubmit the problem C, thus he knew the trick is not involved in the pretests definitely, this is a rare case. \u003c/p\u003e\u003cp\u003eSo, what I suggest is, involved some things called \u003cstrong\u003edetect submission\u003c/strong\u003e. It won\u0027t increased the penalty and will skip during the system test. What the “detect submission” do is to tell you whether a trick is involved in the pretests, it can be only used after you pass the pretests.\u003c/p\u003e\u003cp\u003eWith this feature, the risk of hacking could be reduce to a certain extent. So it will also benefit to other participant who doesn\u0027t do hacking without excessive strong pretests. Just a imagination, waiting for hear something better then this.\u003c/p\u003e\u003c/div\u003e","tags":[]}}