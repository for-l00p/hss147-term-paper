{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1504031800,"rating":101,"authorHandle":"TooNewbie","modificationTimeSeconds":1516794474,"id":54154,"title":"\u003cp\u003e[Tutorial] Recurrent Sequences — Application of combinatorics in DP (basics)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello Codeforces community! I decided to write tutorial about recurrent sequences, tutorial is about very basics of that topic. If you have little combinatorics knowledge, you will understand this tutorial easily. This is my first tutorial, so this can be easy for you and there can be mistakes. Probably all Div1 users knows all things in this tutorial :) Hope this tutorial will help you. If you have any questions/suggestions please write in comments.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eRecurrent Sequences — Application of combinatorics in DP\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eLet’s start with a problem to this topic.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem.\u003c/strong\u003e In how many different ways you can write 8 (+) and 5 (-) signs consecutively such that no two (-) signs are adjacent are adjacent.\u003c/p\u003e\u003cp\u003eSolution of problem is easy. Let’s write (+) signs after 9 \u003ccode\u003em\u003c/code\u003es:\u003c/p\u003e\u003cp\u003e\u003ccode\u003em + m + m + m + m + m + m + m + m\u003c/code\u003e\u003c/p\u003e\u003cp\u003eNow let\u0027s change 5 of \u003ccode\u003em\u003c/code\u003es to (-) sign. Actually, problem has been solved, no 2 (-) signs are consecutive. So, answer is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/83/92/83924e30f6b35da7188871cbe7e6d77e072a3d5b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e (because there are 9 \u003ccode\u003em\u003c/code\u003es and we have to choose 5 of them). Generally, if we have k (+) signs and r (-) signs, we can make \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/50/b9/50b9827e4313223b735c172578056ddc3aa668fd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e sequences such that no two (-) signs are consecutive.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem.\u003c/strong\u003e There are 10 signs are written on the board consecutively. How many different sequences we can create if some of them are (+) and some of them are (-) signs such that no two (-) signs are adjacent.\u003c/p\u003e\u003cp\u003eLet\u0027s think all situations:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"tutorial\" border\u003d\"0\" src\u003d\"/predownloaded/c8/0b/c80b2e2e97e6474377cd16246c2086ccbc53ed94.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWith formula we found in previous problem answer is:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/74/70/74705dbb7c1c6a24d283e5b755165f21c893189e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eGeneralized version of problem: If we have x signs which some of them are (+) and some of them are (-) signs, how many sequences we can create such that no two (-) signs are adjacent.\u003c/p\u003e\u003cp\u003eSo, answer for this problem is \u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/26/35/2635e4b6aef604466070a2888552a084db6247f4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s write some few terms of S(n):\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6b/fb/6bfb4db28b0a72ab7eda829cacc8c62c20cd42dc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bf/58/bf58abfccf3319171f5b1d474f13fb6b7fc9e71a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/65/4b/654b1efb0384cc013c419bbb033621b5d23ee257.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/05/01/05018fa8bdfb960a4b32e4574ecc8371ff61a9c4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e(3) \u003d 5, \u003ci\u003eS\u003c/i\u003e(4) \u003d 8\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e(5) \u003d 13\u003c/span\u003e etc.\u003c/p\u003e\u003cp\u003eIt remembered you something? Yes, Fibonacci numbers! Let\u0027s prove they are really Fibonacci numbers:\u003c/p\u003e\u003cp\u003eThere are some proofs with Binet\u0027s formula, but we will prove this by \u003ca href\u003d\"https://brilliant.org/wiki/strong-induction/\"\u003estrong induction\u003c/a\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/01/50/0150ea0606a488b7945b776d458e871707b76116.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWe verified some first terms. Assume it is true for \u003cspan class\u003d\"tex-span\"\u003e - 1, 0, 1, .., \u003ci\u003en\u003c/i\u003e\u003c/span\u003e and we want to show that it is true for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e + 1\u003c/span\u003e:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/39/80/398008bab9dfd07fca08dd70ec87cfa33fa7d3a4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem.\u003c/strong\u003e In how many different ways rabbit can go 10th step if it can jump 1 or 2 steps?\u003c/p\u003e\u003cp\u003eWell, we can solve this problem by analyzing some cases, but it will be hard way for calculating answer. So, let\u0027s think a little different. We can go 10th step from 9th step or 8th step, then answer for going 10th step is sum of answers for 9th step and 8th step. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e is answer for going n\u0027th step, we can calculate it by this recursive formula: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) \u003d \u003ci\u003eF\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1) + \u003ci\u003eF\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 2)\u003c/span\u003e with base cases \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(1) \u003d 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(2) \u003d 2\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem. (Hanoi towers)\u003c/strong\u003e As you can see below there are 8 discs and 3 sticks. We can change places of discs with some rules: \u003cem\u003eOnly one disk can be moved at a time. Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack. No disk may be placed on top of a smaller disk.\u003c/em\u003e Find minimum moves to move all discs to 3rd (left) stick.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"tutorial1\" border\u003d\"0\" src\u003d\"/predownloaded/f2/b5/f2b51b6aebe02846ad580f00791746ab23aa22a6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFor solving this problem, let\u0027s think little cases firstly. If we had 1 discs, we could solve problem in 1 step. If we had 2 discs, first we put little disc to middle stick, then big disc to left stick, then little disc to left stick, so in 3 moves we could do it. There is a gif for doing this for 3 discs:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/7a/65/7a65487fa0a53a7c0033562f1d7e82ee825107e9.gif\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo, if we have n discs, we can solve problem like this:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eMove (n-1) smaller than biggest discs to middle stick (*)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eMove biggest disc to 3rd (left) stick (**)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eMove (n-1) smaller than biggest discs to 3rd (left) stick (***)\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eWe can\u0027t move biggest disc without taking other. If 3rd (left) stick is not empty, we can\u0027t put biggest on it. So, using this 2 facts it is the best strategy to solve problem. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e be answer for n discs. Then we can do (*) and (***) in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1)\u003c/span\u003e steps and (**) in 1 step. So, we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e by this recursive formula: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/89/69/89696d14dfe679035779d14a71a79f6f8abe01fd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eSo, we can solve this problem in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e easily. But, what about if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is very big, like \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e18\u003c/sup\u003e\u003c/span\u003e, for this constraint we have to make faster algorithm. Let\u0027s write first few terms of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(1) \u003d 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(2) \u003d 2 * \u003ci\u003eH\u003c/i\u003e(1) + 1 \u003d 3\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(3) \u003d 2 * \u003ci\u003eH\u003c/i\u003e(2) + 1 \u003d 7\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(4) \u003d 2 * \u003ci\u003eH\u003c/i\u003e(3) + 1 \u003d 15\u003c/span\u003e etc.\u003c/p\u003e\u003cp\u003eIt is not hard so see \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e, so let\u0027s prove it by induction:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eWe show it is correct for first few terms\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eAssume that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1) \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/sup\u003e - 1\u003c/span\u003e and show \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eH\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e - 1\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0b/9a/0b9a8c296d9155c076eae6963a8e581b38a9b73e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eProve is done!\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem.\u003c/strong\u003e There is a park station such just Cadillac, Continental and Porsche (yeah, very expensive station) can park there. Cadillac and Continental are big cars, so they need 2 \u0026quot;car place\u0026quot; to park and Porsche needs 1 \u0026quot;car place\u0026quot; to park. If there are n \u0026quot;car places\u0026quot; in park station find out in how many different ways cars can park at station. (It is not important to park all types of cars).\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e be answer for n \u0026quot;car places\u0026quot;. If Porsche parks at first \u0026quot;car place\u0026quot;, answer for remaining (n-1) places is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1)\u003c/span\u003e. If Cadillac parks at first two \u0026quot;car places\u0026quot;, answer for remaining (n-2) places is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 2)\u003c/span\u003e , same thing for Continental. So our recurrence relation is:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) \u003d \u003ci\u003eP\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1) + 2 * \u003ci\u003eP\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 2)\u003c/span\u003e and bases cases are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(1) \u003d 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(2) \u003d 3\u003c/span\u003e (easy to show).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge Problem.\u003c/strong\u003e Write code which solves previous problem for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e18\u003c/sup\u003e\u003c/span\u003e constraint.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eChallenge Problem.\u003c/strong\u003e n runners will do a race. Some runners can pass finish line at the same time, for example, 6th runner finished race 1st, 2nd and 5th runners finished race 2nd and other 3rd. How many different results of race can be there?\u003c/p\u003e\u003cp\u003eP.S. Finally, I finished this tutorial :) Writing tutorial is really hard. I\u0027m really sorry for some mistakes, please write if you have question.\u003c/p\u003e\u003c/div\u003e","tags":["combinatorics","#dp","recurrence relation"]}}