{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1484511275,"rating":-32,"authorHandle":"cegprakash","modificationTimeSeconds":1484512217,"id":49794,"title":"\u003cp\u003eFacebook hacker cup round 1 Editorials first 3 problems\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eProblem 1:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e1) You need to buy exactly n pies where n is no. of days\u003c/p\u003e\u003cp\u003e2) You must have bought at least i pies after ith day\u003c/p\u003e\u003cp\u003e3) If you buy x pies on a day, you\u0027ll have to spend sum of cost of pies + x*x\u003c/p\u003e\u003cp\u003eWithin a day, you can greedily pick the smallest pies.\u003c/p\u003e\u003cp\u003ePutting them into a DP of two states where DP[i][j] means optimal cost of buying j pies starting from day i will give an AC.\u003c/p\u003e\u003cp\u003eComplexity : O(days * days * days)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem 2:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eWe can move the points inside a random circle of any radius into the resultant square. (but each point gets translated by dx,dy)\u003c/p\u003e\u003cp\u003eThe final answer is the number of points inside a square of given side length which we need to maximize.\u003c/p\u003e\u003cp\u003eOne of the optimal ways is that the circle is chosen such that it is bigger than the resultant square.\u003c/p\u003e\u003cp\u003eSuppose if we have two squares of same side length, we can move all the points from one square to another square. We can always draw a circle outside one of these squares and move to other square and it\u0027ll not affect the result.\u003c/p\u003e\u003cp\u003eTwo loops from 0 to n-1 to find a square from any two points.\u003c/p\u003e\u003cp\u003eAnother two loops from 0 to n-1 to find a square from any two points.\u003c/p\u003e\u003cp\u003eFinal loop to count the number of points inside these two squares.\u003c/p\u003e\u003cp\u003eThis is an O(n^5) solution and is not optimal one. Feel free to comment optimal methods if any.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProblem 3\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eWe need the shortest distance between any two nodes before we can proceed. This can be found using Floyd Warshall in O(n^3).\u003c/p\u003e\u003cp\u003eLets assume we are currently at node currNode and the truck is loaded with L items and already delivered to D families.\u003c/p\u003e\u003cp\u003eThis 3 variables currNode, L, D forms a state\u003c/p\u003e\u003cp\u003eDP[currNode][L][D] denotes the optimal way from currentNode when the truck is already loaded with L family items and D families are yet to be served.\u003c/p\u003e\u003cp\u003eWhen L \u003d 0, we cannot deliver anything. i.e. we must load from next family.\u003c/p\u003e\u003cp\u003eWhen L \u003d 2, we cannot load anything. i.e. we must deliver the first loaded family.\u003c/p\u003e\u003cp\u003eWhen L \u003d 1, we can either deliver or load.\u003c/p\u003e\u003cp\u003eOverall complexity : O(n^3 + n * families)\u003c/p\u003e\u003c/div\u003e","tags":[]}}