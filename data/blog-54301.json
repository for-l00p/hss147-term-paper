{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1504518586,"rating":-16,"authorHandle":"newbie_guy","modificationTimeSeconds":1504518586,"id":54301,"title":"\u003cp\u003eDerivation in dynamic programming\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI have noticed that there are two deriving method in DP:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eWe now standing at status i,we use status which is already known(e.g. 1 to i â€” 1) to calculate status i.It seems that this method is most used.For example,in traditional 0-1 knapsack problem(target function is max value),we can use this method.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eWe now standing at status i,on the time we arriving this status,the value of this status is already calculated,and we calculate this status\u0027s contribution to other status(e.g i + 1 to n).For example,in knapsack capacity reachability problem(we need to answer whether a capacity is reachable using given items),we can use this method.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eNow I am very confused that when to use the first one and when to use the second one? The difference between questions that should use the first method to solve and should use the second method to solve? Is there any post have summary over this problem?Thank you in advance!\u003c/p\u003e\u003c/div\u003e","tags":["dynamic programming"]}}