{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1474667694,"rating":87,"authorHandle":"_XuMuk_","modificationTimeSeconds":1474812696,"id":47314,"title":"\u003cp\u003eCodeforces Round #373 — Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSpecial thanks to \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Seyaua\" title\u003d\"International master Seyaua\"\u003eSeyaua\u003c/a\u003e for help with translation.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/contest/719/problem/A\"\u003eDiv. 2 A — Vitya in the Countryside\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/_XuMuk_\" title\u003d\"Expert _XuMuk_\"\u003e_XuMuk_\u003c/a\u003e. \u003cbr /\u003e Preparation: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/_XuMuk_\" title\u003d\"Expert _XuMuk_\"\u003e_XuMuk_\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThere are four cases that should be carefully considered:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e \u003d 15\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e  — \u003c/span\u003e the answer is always DOWN.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e  — \u003c/span\u003e the answer is always UP.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e  — \u003c/span\u003e the answer is -1.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026gt; 1\u003c/span\u003e, then if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e–1\u003c/sub\u003e \u0026gt; \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e  — \u003c/span\u003e answer is DOWN, else UP.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003e\u003cstrong\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/77/93/779302726b0f7eb1ffe589d79155df53ccde749e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/strong\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/contest/719/problem/B\"\u003eDiv. 2 B — Anatoly and Cockroaches\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/_XuMuk_\" title\u003d\"Expert _XuMuk_\"\u003e_XuMuk_\u003c/a\u003e. \u003cbr /\u003e Preparation: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/_XuMuk_\" title\u003d\"Expert _XuMuk_\"\u003e_XuMuk_\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWe can notice that there are only two possible final coloring of cockroaches that satisfy the problem statement: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erbrbrb\u003c/i\u003e...\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebrbrbr\u003c/i\u003e...\u003c/span\u003e\u003c/p\u003e\u003cp\u003eLet’s go through both of these variants.\u003c/p\u003e\u003cp\u003eIn the each case let\u0027s count the number of red and black cockroaches which are not standing in their places. Let\u0027s denote these numbers as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. Then it is obvious that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e pairs of cockroaches need to be swapped and the rest should be repaint.\u003c/p\u003e\u003cp\u003eIn other words, the result for a fixed final coloring is exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e) + \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e) - \u003ci\u003emin\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e) \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e. The final answer for the problem is the minimum between the answers for the first and the second colorings.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ab/81/ab8189790fa55b138946403d689fd1d55d348593.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/strong\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/contest/718/problem/A\"\u003eDiv. 1 A — Efim and Strange Grade\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/BigBag\" title\u003d\"Grandmaster BigBag\"\u003eBigBag\u003c/a\u003e. \u003cbr /\u003e Preparation: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/BigBag\" title\u003d\"Grandmaster BigBag\"\u003eBigBag\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eOne can notice that the closer to the decimal point we round our grade the bigger grade we get. Based on this observation we can easily solve the problem with dynamic programming.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the minimum time required to get a carry to the (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e)-th position.\u003c/p\u003e\u003cp\u003eLet\u0027s denote our grade as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, and let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e)-th digit of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. There are three cases:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≥ 5\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 1\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u0026lt; 4\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003einf\u003c/i\u003e\u003c/span\u003e (it means, that we cann\u0027t get a carry to the (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e)-th position).\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 4\u003c/span\u003e, then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 1 + \u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eAfter computing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003c/span\u003e, we need to find the minimum \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003et\u003c/i\u003e\u003c/span\u003e. So, after that we know the position where we should round our grade.\u003c/p\u003e\u003cp\u003eNow we only need to carefully add 1 to the number formed by the prefix that contains \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e elements of the original grade.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ab/81/ab8189790fa55b138946403d689fd1d55d348593.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/strong\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/contest/718\"\u003eDiv. 1 B — Alyona and Copiers\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/_XuMuk_\" title\u003d\"Expert _XuMuk_\"\u003e_XuMuk_\u003c/a\u003e. \u003cbr /\u003e Preparation: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/BigBag\" title\u003d\"Grandmaster BigBag\"\u003eBigBag\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eDeleted\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/contest/718/problem/C\"\u003ediv. 1 C — Sasha and Array\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/BigBag\" title\u003d\"Grandmaster BigBag\"\u003eBigBag\u003c/a\u003e. \u003cbr /\u003e Preparation: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/BigBag\" title\u003d\"Grandmaster BigBag\"\u003eBigBag\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s denote \u003cbr /\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/c8/59/c859835706e1e98c6c9a68ffad4f04c2f05837e3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s recall how we can quickly find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e-th Fibonacci number. To do this we need to find a matrix product \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/14/0f/140f8df87b82c664054d628d0788d25dace5a9fc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eIn order to solve our problem let\u0027s create the following segments tree: in each leaf which corresponds to the element \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e we will store a vector \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/eb/bf/ebbf1179d3c06755ec7785e42b740fb77ebaa3f3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and in all other nodes we will store the sums of all the vectors that correspond to a given segment.\u003c/p\u003e\u003cp\u003eNow, to perform the first request we should multiply all the vectors in a segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e..\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e by \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c5/06/c5062923aff20da84fc777e9a2ae31c450f1f205.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and to get an answer to the second request we have to find a sum in a segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e..\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTime Complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/96/e4/96e4ef1b63a344f94dddbdfb0115d1d5b90aca67.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/strong\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/contest/718/problem/D\"\u003eDiv. 1 D — Andrew and Chemistry\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/_XuMuk_\" title\u003d\"Expert _XuMuk_\"\u003e_XuMuk_\u003c/a\u003e. \u003cbr /\u003e Preparation: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/BigBag\" title\u003d\"Grandmaster BigBag\"\u003eBigBag\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet’s first figure out how we can solve the problem in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/72/30/7230f4eaf59a69a03c16cd0bc0dada6b3daaf9c0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time.\u003c/p\u003e\u003cp\u003eLet’s pick a vertex we’re going to add an edge to and make this vertex the root of the tree. For each vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e we’re going to assign a label \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e (some number). The way we assign labels is the following: if the two given vertices have the same subtrees they’re going to get the same labels, but if the subtrees are different then the labels for these vertices are going to be different as well.\u003c/p\u003e\u003cp\u003eWe can do such labeling in a following way: let’s create a \u003ccode\u003emap\u0026lt;vector\u0026lt;int\u0026gt;, int\u0026gt; m\u003c/code\u003e (the maximum degree for a vertex is 4, but let’s assume that the length of the vector is always equal to 4). Let \u003ccode\u003em[{x, y, z, w}]\u003c/code\u003e be a label for a vertex which has children with the labels \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e. Let’s note that the vector {\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e} should be sorted to avoid duplications, also if the number of children is less than 4 then we’ll store \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e’s for the missing children (to make the length of a vector always equal to 4). Let’s understand how we can compute the value for the label for the vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. Let’s recursively compute the labels for its children: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e\u003c/span\u003e. \u003cbr /\u003e Now, if \u003ccode\u003em.count({a[v1], a[v2], a[v3], a[v4]})\u003c/code\u003e then we use the corresponding value. Otherwise, we use the first unused number: \u003ccode\u003em[{a[v1], a[v2], a[v3], a[v4]}]\u003dcnt++\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eNow, let’s pick another vertex which we’re going to add an edge to. Again, let’s make it the root of the tree and set the labels without zeroing out our counter \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e. Now, let’s do the same operation for all the other possible roots (vertices, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e times). Now, one can see that if the two roots have the same labels, then the trees which can be obtained by adding an edge to these roots, are exactly the same. Thus, we only need to count the amount of roots with different labels. Also, we should keep in mind that if a degree for a vertex is already 4 it’s impossible to add an edge to it.\u003c/p\u003e\u003cp\u003eThe solution described above has the time complexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/72/30/7230f4eaf59a69a03c16cd0bc0dada6b3daaf9c0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, because we consider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e rooted trees and in the each tree we iterate through all the vertices (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e), but each label update takes \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eLet’s speed up this solution to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e be an array where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e is a label in a vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e if we make this vertex the root of the tree. Then the answer to the problem is the number of different numbers in the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Let’s root the tree in a vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eroot\u003c/i\u003e\u003c/span\u003e and compute the values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e. Then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003eroot\u003c/i\u003e] \u003d \u003ci\u003ea\u003c/i\u003e[\u003ci\u003eroot\u003c/i\u003e]\u003c/span\u003e and all the other values for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e we can get by pushing the information from the top of the tree to the bottom.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTime complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/78/81/7881bb18f8133caa1b7031040523e5c18739fd79.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/strong\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"//codeforces.com/contest/718/problem/E\"\u003eDiv. 1 E — Matvey\u0027s Birthday\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eIdea: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/BigBag\" title\u003d\"Grandmaster BigBag\"\u003eBigBag\u003c/a\u003e. \u003cbr /\u003e Preparation: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/BigBag\" title\u003d\"Grandmaster BigBag\"\u003eBigBag\u003c/a\u003e, \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/GlebsHP\" title\u003d\"Grandmaster GlebsHP\"\u003eGlebsHP\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet’s prove that the distance between any two vertices is no more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eMaxDist\u003c/i\u003e \u003d 2·\u003ci\u003esigma\u003c/i\u003e - 1\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esigma\u003c/i\u003e\u003c/span\u003e is the size of the alphabet. Let’s consider one of the shortest paths from the position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to the position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. One can see that in this path each letter \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ech\u003c/i\u003e\u003c/span\u003e occurs no more than two times (otherwise you could have skipped the third occurrence by jumping from the first occurrence to the last which gives us a shorter path). Thus, the total amount of letters in the path is no more than \u003cspan class\u003d\"tex-span\"\u003e2·\u003ci\u003esigma\u003c/i\u003e\u003c/span\u003e which means that the length of the path is no more than \u003cspan class\u003d\"tex-span\"\u003e2·\u003ci\u003esigma\u003c/i\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the distance from the position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to some position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. These numbers can be obtained from simulating bfs for each letter \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. We can simulate bfs in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e·\u003ci\u003esigma\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e (let’s leave this as an exercise to the reader).\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e be the distance between positions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Let’s figure out how we can find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e using precomputed values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThere are two different cases:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eThe optimal path goes through the edges of the first type only. In this case the distance is equal to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f6/e7/f6e749a2459d29f4ceab8f6c3876a7dd6f4f2c3c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eThe optimal path has at least one edge of the second type. We can assume that it was a jump between two letters \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. Then, in this case the distance is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e + 1 + \u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eAdding these two cases up we get: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6a/57/6a57d1822fe3c6c781da679a28f712500fae3271.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eLet’s iterate over the possible values for the first position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u003d 1..\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Let’s compute the distance for all such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, where \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c8/8e/c88e64a2de3f512c85d7e39df9184de1b1fa8659.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e by the above formula.\u003c/p\u003e\u003cp\u003eNow, for a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e we have to find \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(\u003ci\u003edist\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e))\u003c/span\u003e for \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/47/5c/475c039c08e9351014eb240ca2dbb5583b02cdf3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. In this case \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e) \u003d \u003ci\u003emin\u003c/i\u003e(\u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e + 1 + \u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet’s compute one additional number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e\u003cspan class\u003d\"tex-span\"\u003e  — \u003c/span\u003e the minimal distance between positions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e. This can be easily done using \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eOne can notice that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e + 1\u003c/span\u003e. It means that for every position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e we can compute a mask \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esigma\u003c/i\u003e\u003c/span\u003e bits where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th bit is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Thus, we can compute the distance using only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. \u003cbr /\u003e I.e. now \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003edist\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003emask\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e, \u003ci\u003ec\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e be an array where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e, \u003ci\u003emask\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is the number of such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e where \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/47/5c/475c039c08e9351014eb240ca2dbb5583b02cdf3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003emask\u003c/i\u003e\u003c/span\u003e. Now, instead of iterating over \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e for a given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e we can iterate over \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ec\u003c/i\u003e, \u003ci\u003emask\u003c/i\u003e)\u003c/span\u003e and if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ec\u003c/i\u003e, \u003ci\u003emask\u003c/i\u003e\u003c/sub\u003e ≠ 0\u003c/span\u003e we’ll be updating the answer.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTime complexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cd/b7/cdb7fc4f0a05b15f5e29591e010e4a64ae2ed278.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}