{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1399940778,"rating":35,"authorHandle":"marat.snowbear","modificationTimeSeconds":1400108677,"id":12277,"title":"\u003cp\u003eCodeforces Round #241 — editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/416/problem/A\" title\u003d\"Codeforces Round 241 (Div. 2)\"\u003e416A - Guess a number!\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eLet\u0027s use the usual Div 2 problem A approach — the naive one. We will track the interval which might contain the number we\u0027re guessing. With each of the query we update this interval. If at the end the interval is non-empty then we output any number from it, otherwise the result is \u0026quot;Impossible\u0026quot;.\u003c/p\u003e\u003cp\u003eSubmission: \u003ca href\u003d\"/contest/416/submission/6606892\" title\u003d\"Submission 6606892 by marat.snowbear\"\u003e6606892\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/416/problem/B\" title\u003d\"Codeforces Round 241 (Div. 2)\"\u003e416B - Art Union\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eAll we need is to iterate over all painters and for each painter to iterate over all pictures. In the inner loop we also remember when the painter finished working on the picture to make sure that the next painter will not start working on it earlier.\u003c/p\u003e\u003cp\u003eSubmission: \u003ca href\u003d\"/contest/416/submission/6606994\" title\u003d\"Submission 6606994 by marat.snowbear\"\u003e6606994\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/416/problem/C\" title\u003d\"Codeforces Round 241 (Div. 2)\"\u003e416C - Booking System\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eLet\u0027s solve this one greedy. All we need to notice is that the optimal solution will be to place first the groups with biggest sum which they are ready to pay. For each such group it will be optimal to allocate the smallest matching table. The input limits allow to do a full search when looking for a table.\u003c/p\u003e\u003cp\u003eSubmission: \u003ca href\u003d\"/contest/416/submission/6617198\" title\u003d\"Submission 6617198 by marat.snowbear\"\u003e6617198\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/416/problem/D\" title\u003d\"Codeforces Round 241 (Div. 2)\"\u003e416D - Population Size\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eOne thing to notice for this problem is that if we cover some interval with a progression then it will better (at least no worse) to include as many elements to the right of it as possible. So the solution is to greedy — find the leftmost number not covered by a progression, start a new progression with that number (the interval covered by that progression will be of size 1) and then try to extend this interval to the right as far as possible. Repeat this step until all the numbers are covered. One thing you should pay attention to is which numbers can be covered by one arithmetic progression, for example:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eIf there are no fixed numbers in the interval then we can cover it with one progression.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIf there is only one non-fixed number in the interval then we can cover this interval with one progression.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIf there are more than one non-fixed numbers in the interval then we can calculate the parameters of the progression (start value and difference). All non-fixed numbers should match those parameters. Difference should be integer.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIf the progression is ascending and there are some non-fixed numbers in the beginning then those numbers should match \u003cstrong\u003epositive\u003c/strong\u003e numbers in the progression.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eSame way if the progression is descending then we can include numbers from the right side only while matching progression term is positive.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eSubmission: \u003ca href\u003d\"/contest/416/submission/6607174\" title\u003d\"Submission 6607174 by marat.snowbear\"\u003e6607174\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"/contest/416/problem/E\" title\u003d\"Codeforces Round 241 (Div. 2)\"\u003e416E - President\u0027s Path\u003c/a\u003e\u003c/h4\u003e\u003cp\u003eLet\u0027s look at the graph given to us in the example:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"//assets.codeforces.com/images/416/illustration_416_E_1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWe need to count the count of the edges on all the shortest paths between each pair of vertices. Let\u0027s do something easier first — instead of counting all the edges we will count only those which have the destination vertex on its side. For example here are the edges belonging to shortest paths from 4 to 2 which are connected to vertex 2: \u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"//assets.codeforces.com/images/416/illustration_416_E_2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s denote this number like this: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003einEdges\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003esource\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — number of edges which go into vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e on some shortest path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esource\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. In the given example \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003einEdges\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4, 2\u003c/sub\u003e \u003d 3\u003c/span\u003e. Let\u0027s also denote the set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003esource\u003c/i\u003e, \u003ci\u003edest\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — it is a set of the vertices which belong to at least one shortest path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esource\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edest\u003c/i\u003e\u003c/span\u003e. For example \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4, 2\u003c/sub\u003e \u003d {1, 2, 3, 4}\u003c/span\u003e. With these two variables it can be seen that the answer for vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esource\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edest\u003c/i\u003e\u003c/span\u003e will be: \u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d8/35/d83587f5221efbbc241369362bc30fdcc2d464bc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIn other words the answer for vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e will be equal to the sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003einEdges\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003es\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for all vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, which belong to any shortest path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. So the only thing left is to calculate these \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003einEdges\u003c/i\u003e\u003c/span\u003e. Both of them can be easily calculated if you have minimum distances between all pairs of vertices. And these distances can be calculated using the Floyd-Warshall. So the full solution is:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eCalculate minimum distances between all pairs of vertices using Floyd-Warshall algorithm.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eCount \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003einEdges\u003c/i\u003e\u003c/span\u003e. Simply iterate over all source vertices and all edges. For each edge check whether any of its ends belong to any shortest path from source.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eCalculate the answer. Let\u0027s have three loops to iterate over the vertices — — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esource\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edestination\u003c/i\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emid\u003c/i\u003e\u003c/span\u003e. First two vertices are those for which we\u0027re calculating the answer. Third vertex is the vertex which should belong to any shortest path (basically we\u0027re checking whether \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e belongs to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003esource\u003c/i\u003e, \u003ci\u003edest\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e). If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emid\u003c/i\u003e\u003c/span\u003e belongs to any shortest path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esource\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edest\u003c/i\u003e\u003c/span\u003e then we add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003einEdges\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003esource\u003c/i\u003e, \u003ci\u003emid\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e to the answer.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eEach step has a complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSubmission: \u003ca href\u003d\"/contest/416/submission/6607257\" title\u003d\"Submission 6607257 by marat.snowbear\"\u003e6607257\u003c/a\u003e\u003c/p\u003e\u003cp\u003eP.S.: Please feel free to let me know about any typos, errors, etc using the private messages.\u003c/p\u003e\u003c/div\u003e","tags":["round 241","codeforces round #241","editorial"]}}