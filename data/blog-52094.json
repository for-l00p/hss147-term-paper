{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1495344022,"rating":48,"authorHandle":"sdnr1","modificationTimeSeconds":1495396794,"id":52094,"title":"\u003cp\u003eEasy implementation of Compressed 2D Binary Indexed Tree for grid of binary numbers[Tutorial]\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSuppose you want to solve a problem in which you have 3 types of queries in a grid of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e × \u003ci\u003eN\u003c/i\u003e\u003c/span\u003e: \u003cbr /\u003e1. Insert a \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e in the grid at any position \u003cbr /\u003e2. Remove a \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e from any position in the grid \u003cbr /\u003e3. Count the number of \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e in a subgrid (ie. any rectangle inside the grid). \u003cbr /\u003eInitially the grid is empty and there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e queries. \u003c/p\u003e\u003cp\u003eThis can be solved easily by using a 2D BIT. But the conventional 2D BIT has space complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e. So if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u0026lt;  \u003d 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e, this won\u0027t work. Hence a compressed version of 2D BIT is required. This problem can be solved with an Implicit Treap along with BIT, but the implementation would be too complex. Here is an easy way to solve such a problem.\u003c/p\u003e\u003cp\u003eIn this implementation an Order Statistics Tree (\u003ca href\u003d\"//codeforces.com/blog/entry/11080\"\u003eread about it here\u003c/a\u003e) is embedded at each node in a BIT. It only works if a 2D BIT has to be implemented for a grid of binary numbers (grid filled with only \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e). The \u003ccode\u003eupdate()\u003c/code\u003e function has been broken into 2 functions — \u003ccode\u003einsert()\u003c/code\u003e (to insert a 1 in the grid at a given point) and \u003ccode\u003eremove()\u003c/code\u003e (to remove a 1 from the grid). The \u003ccode\u003equery()\u003c/code\u003e function counts number of 1s in the subgrid from \u003cspan class\u003d\"tex-span\"\u003e(1, 1)\u003c/span\u003e to any given position in the grid.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n#include \u0026lt;ext/pb_ds/assoc_container.hpp\u0026gt;\n#include \u0026lt;ext/pb_ds/tree_policy.hpp\u0026gt;\n#define mp make_pair\nusing namespace std;\nusing namespace __gnu_pbds;\ntypedef pair\u0026lt;int, int\u0026gt; pii;\ntypedef tree\u0026lt;pii, null_type, less\u0026lt;pii\u0026gt;, rb_tree_tag, tree_order_statistics_node_update\u0026gt; OST;\n\nconst int N \u003d 100001;\n\nOST bit[N];\n\nvoid insert(int x, int y)\n{\n\tfor(int i \u003d x; i \u0026lt; N; i +\u003d i \u0026amp; -i)\n\t\tbit[i].insert(mp(y, x));\n}\n\nvoid remove(int x, int y)\n{\n\tfor(int i \u003d x; i \u0026lt; N; i +\u003d i \u0026amp; -i)\n\t\tbit[i].erase(mp(y, x));\n}\n\nint query(int x, int y)\n{\n\tint ans \u003d 0;\n\tfor(int i \u003d x; i \u0026gt; 0; i -\u003d i \u0026amp; -i)\n\t\tans +\u003d bit[i].order_of_key(mp(y+1, 0));\n\treturn ans;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTime complexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eQlog\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e(\u003ci\u003eN\u003c/i\u003e))\u003c/span\u003e \u003cbr /\u003eSpace complexity : \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eQlog\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e))\u003c/span\u003e\u003c/p\u003e\u003cp\u003eProblems : \u003ca href\u003d\"//codeforces.com/contest/785/problem/E\"\u003eAnton and Permutation\u003c/a\u003e, \u003ca href\u003d\"https://www.codechef.com/problems/DISTNUM\"\u003eDISTNUM\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePS: Suggestions are welcome. Please notify if there are any mistakes.\u003c/p\u003e\u003c/div\u003e","tags":["binary indexed tree","2d binary indexed tree","range query","range update"]}}