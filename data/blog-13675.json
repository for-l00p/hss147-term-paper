{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1409768211,"rating":-17,"authorHandle":"aseemgoyal","modificationTimeSeconds":1409822597,"id":13675,"title":"\u003cp\u003eHow to implement \u0026quot;Generic\u0026quot; sorting algorithm ? \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eImplement a generic sorting algorithm i.e. the input array may contain int, double or structure values , or any type of data defined by user ? \u003c/p\u003e\u003cp\u003eThe comparator will be defined by user . I thought to modify C++ sort , but stuck on the comparator .\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eEDIT :\u003c/strong\u003e I want to implement my own function , \u003cstrong\u003enot using sort()\u003c/strong\u003e of C++ . \u003c/p\u003e\u003cp\u003eI came up with the below code but it is genereting errors : \u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr /\u003e#include \u0026lt;vector\u0026gt;\n#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;functional\u0026gt;\nusing namespace std;\n\nclass Person\n{\npublic:\n\t// default constructor\n\tPerson() : age(0) {}\n\tPerson(int age, string name) {\n\t\tthis-\u0026gt;age \u003d age; this-\u0026gt;name \u003d name;\n\t}\n\n\tint age;\n\tstring name;\n};\n\n// function object\nstruct GreaterAge\n{\n\tbool operator()(const Person\u0026amp; a, const Person\u0026amp; b)\n\t{\n\t\tif(a.age \u003d\u003d b.age)\n\t\t\treturn a.name \u0026lt; b.name;\n\n\t\treturn a.age \u0026gt; b.age;\n\t}\n};\n\n\ntemplate \u0026lt;class T\u0026gt;\nvoid Merge(T *a, int p, int q, int r , bool compare(const T\u0026amp; ,const T\u0026amp; ))\n{\n\tint i, j, k;\n\tconst int n1 \u003d q-p+1, n2 \u003d r-q;\n\tint L[n1];\n\tint R[n1];\n\n\tfor(i\u003d0;i\u0026lt;n1;i++) L[i] \u003d a[p+i];\n\tfor(j\u003d0;j\u0026lt;n2;j++) R[j] \u003d a[q+j+1];\n\tfor(k\u003dp,i\u003dj\u003d0;k\u0026lt;\u003dr;k++)\n\t{\n\t\tif(j\u0026gt;\u003dn2 || (i\u0026lt;n1 \u0026amp;\u0026amp; compare(L[i],R[j])))\n\t\t\ta[k] \u003d L[i++];\n\t\telse //L[i]\u0026gt;R[j]\n\t\t{\n\t\t\ta[k] \u003d R[j++];\n\t\t}\n\t}\n}\n\ntemplate \u0026lt;class T\u0026gt;\nvoid Merge_Sort(T *a, int p, int r , bool compare(const T\u0026amp; ,const T\u0026amp; ))\n{\n\tif(p\u0026lt;r)\n\t{\n\t\tint q \u003d (p+r)/2;\n\t\tMerge_Sort(a,p,q,compare);\n\t\tMerge_Sort(a,q+1,r,compare);\n\t\tMerge(a,p,q,r,compare);\n\t}\n}\n\n\nint main()\n{\n    Person arr[1000];\n\n    arr[0]\u003d(Person(24,\u0026quot;Calvin\u0026quot;));\n    arr[1]\u003d(Person(30,\u0026quot;Benny\u0026quot;));\n    arr[2]\u003d(Person(30,\u0026quot;Alice\u0026quot;));\n    arr[3]\u003d(Person(28,\u0026quot;Alison\u0026quot;));\n    arr[4]\u003d(Person(20,\u0026quot;Rachna\u0026quot;));\n\n    Merge_Sort(arr,0,4,GreaterAge);\n\n    for(int i\u003d0;i\u0026lt;5;i++)\n\t\tcout\u0026lt;\u0026lt;arr[i].age\u0026lt;\u0026lt;\u0026quot;  \u0026quot;\u0026lt;\u0026lt;arr[i].name\u0026lt;\u0026lt;endl;\n\n\treturn 0;\n}  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["sorting","gnu c++","algorithms"]}}