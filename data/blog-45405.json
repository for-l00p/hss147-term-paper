{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1465856502,"rating":32,"authorHandle":"Edvard","modificationTimeSeconds":1466111338,"id":45405,"title":"\u003cp\u003eEditorial of Educational Codeforces Round 13\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/678/problem/A\" title\u003d\"Educational Codeforces Round 13\"\u003e678A - Johny Likes Numbers\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Abdrakhman Ismail \u003ca class\u003d\"rated-user user-gray\" href\u003d\"/profile/Ismail_A\" title\u003d\"Newbie Ismail_A\"\u003eIsmail_A\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWe should find minimal \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e·\u003ci\u003ek\u003c/i\u003e \u0026gt; \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Easy to see that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/75/0d/750d6b2a320759a4e870a9f5bbce517ecfa838c8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. To learn more about floor/ceil functions I reccomend the book of authors Graham, Knuth, Patashnik \u0026quot;Concrete Mathematics\u0026quot;. There is a chapter there about that functions and their properties.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eС++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eli n, k;\n\nbool read() {\n\treturn !!(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; k);\n}\n\nvoid solve() {\n\tcout \u0026lt;\u0026lt; (n / k + 1) * k \u0026lt;\u0026lt; endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/678/problem/B\" title\u003d\"Educational Codeforces Round 13\"\u003e678B - The Same Calendar\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Arthur Jaworski \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/KingArthur\" title\u003d\"Expert KingArthur\"\u003eKingArthur\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eTwo calendars are same if and only if they have the same number of days and starts with the same day of a week. So we should simply iterate over years and maintain the day of a week of January, 1st (for example). Easy to see that the day of a week increases by one each year except of the leap years, when it increases by two.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eint y;\n\nbool read() {\n\treturn !!(cin \u0026gt;\u0026gt; y);\n}\n\nbool leap(int y) {\n\treturn y % 400 \u003d\u003d 0 || (y % 4 \u003d\u003d 0 \u0026amp;\u0026amp; y % 100 !\u003d 0);\n}\n\nvoid solve() {\n\tbool is_leap \u003d leap(y);\n\tint d \u003d 0;\n\tdo {\n\t\td++;\n\t\tif (leap(y)) d++;\n\t\ty++;\n\t\td %\u003d 7;\n\t} while (d || leap(y) !\u003d is_leap);\n\tcout \u0026lt;\u0026lt; y \u0026lt;\u0026lt; endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e — easy to see that we will not iterate more than some small fixed constant times.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/678/problem/C\" title\u003d\"Educational Codeforces Round 13\"\u003e678C - Joty and Chocolate\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Sheikh Monir \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/skmonir\" title\u003d\"Specialist skmonir\"\u003eskmonir\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eEasy to see that we can paint with both colours only tiles with the numbers multiple of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elcm\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e. Obviously that tiles should be painted with more expensive colour. So the answer equals to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6a/3e/6a3ec4d163cf6c496ba7ac2fb3f690f0b2b6bbe1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eli n, a, b, p, q;\n\nbool read() {\n\treturn !!(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b \u0026gt;\u0026gt; p \u0026gt;\u0026gt; q);\n}\n\nli gcd(li a, li b) { return !a ? b : gcd(b % a, a); }\nli lcm(li a, li b) { return a / gcd(a, b) * b; }\n\nvoid solve() {\n\tli ans \u003d 0;\n\tans +\u003d (n / a) * p;\n\tans +\u003d (n / b) * q;\n\tans -\u003d (n / lcm(a, b)) * min(p, q);\n\tcout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e(\u003ci\u003emax\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)))\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/678/problem/D\" title\u003d\"Educational Codeforces Round 13\"\u003e678D - Iterated Linear Function\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Zi Song Yeoh \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/zscoder\" title\u003d\"Candidate Master zscoder\"\u003ezscoder\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe problem can be solved using closed formula: it\u0027s need to calculate the sum of geometric progression. The formula can be calculated using binary exponentiation.\u003c/p\u003e\u003cp\u003eI\u0027ll describe more complicated solution, but it\u0027s more general. If we have a set of variables and at each step all variables are recalculating from each other using linear function, we can use binary matrix exponentiation. There is only one variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in our problem. The new variable \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u0027\u003c/span\u003e is calculating using formula \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e·\u003ci\u003ex\u003c/i\u003e + \u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. Consider the matrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e \u003d [[\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e], [0, 1]]\u003c/span\u003e and the vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e \u003d [0, 1]\u003c/span\u003e. Let\u0027s multiply \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. Easy to see that we will get the vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u0027 \u003d [\u003ci\u003ex\u003c/i\u003e\u0027, 1]\u003c/span\u003e. So to make \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e iterations we should multiply \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e times. We can do that using binary matrix exponentiation, because matrix multiplication is associative.\u003c/p\u003e\u003cp\u003eAs an exercise try to write down the matrix for the Fibonacci numbers and calculate the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e-th Fibonacci number in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elogn\u003c/i\u003e)\u003c/span\u003e time. The matrix and the vector is under the spoiler.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eThe matrix and the vector for the Fibonacci numbers\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ez\u003d[[0, 1], [1, 1]], v\u003d[0, 1].\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eint A, B, x;\nli n;\n\nbool read() {\n\treturn !!(cin \u0026gt;\u0026gt; A \u0026gt;\u0026gt; B \u0026gt;\u0026gt; n \u0026gt;\u0026gt; x);\n}\n\nconst int mod \u003d 1000 * 1000 * 1000 + 7;\n\ninline int add(int a, int b) { return a + b \u0026gt;\u003d mod ? a + b - mod : a + b; }\ninline int mul(int a, int b) { return int(a * 1ll * b % mod); }\ninline void inc(int\u0026amp; a, int b) { a \u003d add(a, b); }\n\nvoid mul(int a[2][2], int b[2][2]) {\n\tstatic int res[2][2];\n\tforn(i, 2)\n\t\tforn(j, 2) {\n\t\t\tres[i][j] \u003d 0;\n\t\t\tforn(k, 2) inc(res[i][j], mul(a[i][k], b[k][j]));\n\t\t}\n\tforn(i, 2) forn(j, 2) a[i][j] \u003d res[i][j];\n}\n\nvoid bin_pow(int a[2][2], li b) {\n\tstatic int res[2][2];\n\tforn(i, 2) forn(j, 2) res[i][j] \u003d i \u003d\u003d j;\n\n\twhile (b) {\n\t\tif (b \u0026amp; 1) mul(res, a);\n\t\tmul(a, a);\n\t\tb \u0026gt;\u0026gt;\u003d 1;\n\t}\n\n\tforn(i, 2) forn(j, 2) a[i][j] \u003d res[i][j];\n}\n\nvoid solve() {\n\tint z[2][2] \u003d {\n\t\t{ A, B },\n\t\t{ 0, 1 }\n\t};\n\tbin_pow(z, n);\n\tint result \u003d add(mul(z[0][0], x), z[0][1]);\n\tcout \u0026lt;\u0026lt; result \u0026lt;\u0026lt; endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elogn\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/678/problem/E\" title\u003d\"Educational Codeforces Round 13\"\u003e678E - Another Sith Tournament\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested and prepared by Alexey Dergunov \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/dalex\" title\u003d\"Candidate Master dalex\"\u003edalex\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s solve the problem using dynamic programming. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emask\u003c/i\u003e, \u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — the maximal probability of Ivans victory if the siths from the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003c/span\u003e already fought and the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th sith left alive. To calculate that DP we should iterate over the next sith (he will fight against the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th sith): \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a9/bc/a9bcd3d751efb60638688f8e7cb9374ce6f6668c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003econst int N \u003d 20, EXPN \u003d (1 \u0026lt;\u0026lt; 18) + 3;\n\nint n;\nld p[N][N];\n\nbool read() {\n\tif (!(cin \u0026gt;\u0026gt; n)) return false;\n\tforn(i, n) forn(j, n) assert(cin \u0026gt;\u0026gt; p[i][j]);\n\treturn true;\n}\n\nld z[EXPN][N];\n\nld solve(int mask, int i) {\n\tld\u0026amp; ans \u003d z[mask][i];\n\tif (ans \u0026gt; -0.5) return ans;\n\tif (mask \u003d\u003d (1 \u0026lt;\u0026lt; n) - 1) return ans \u003d !i;\n\tans \u003d 0;\n\tforn(j, n)\n\t\tif (!(mask \u0026amp; (1 \u0026lt;\u0026lt; j))) {\n\t\t\tld cur \u003d 0;\n\t\t\tcur +\u003d solve(mask | (1 \u0026lt;\u0026lt; j), i) * p[i][j];\n\t\t\tcur +\u003d solve(mask | (1 \u0026lt;\u0026lt; j), j) * p[j][i];\n\t\t\tans \u003d max(ans, cur);\n\t\t}\n\treturn ans;\n}\n\nvoid solve() {\n\tif (n \u003d\u003d 1) {\n\t\tputs(\u0026quot;1\u0026quot;);\n\t\treturn;\n\t}\n\n\tforn(i, 1 \u0026lt;\u0026lt; n) forn(j, n) z[i][j] \u003d -1;\n\n\tld ans \u003d 0;\n\tforn(i, n)\n\t\tforn(j, i) {\n\t\t\tint mask \u003d (1 \u0026lt;\u0026lt; i) | (1 \u0026lt;\u0026lt; j);\n\t\t\tld cur \u003d 0;\n\t\t\tcur +\u003d solve(mask, i) * p[i][j];\n\t\t\tcur +\u003d solve(mask, j) * p[j][i];\n\t\t\tans \u003d max(ans, cur);\n\t\t}\n\tcout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eTime complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eMemory complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/678/problem/F\" title\u003d\"Educational Codeforces Round 13\"\u003e678F - Lena and Queries\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by AmirMohammad Dehghan \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/amd\" title\u003d\"International master amd\"\u003eamd\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s interpret the problem geometrically: the pairs from the set are the lines and the problem to find to topmost intersection of the vertical line with the lines from the set.\u003c/p\u003e\u003cp\u003eLet\u0027s split the queries to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/d5/90d5a6cd550a25d4a1e92f4f6e6a222c64aa7a2e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e blocks. Consider the lines added before the current block and that will not deleted in the current block. Let\u0027s build the lower envelope by that lines. Now to calculate the answer to the query we should get maximum over the lines from the envelope and the lines from the block before the current query that is not deleted yet. There are no more than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/d5/90d5a6cd550a25d4a1e92f4f6e6a222c64aa7a2e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e lines from the block, so we can iterate over them. Let\u0027s find the answers from the envelope for all queries of the third type from the block at once: we should sort them and iterate over envelope using \u003cem\u003etwo pointers technique\u003c/em\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003econst int N \u003d 300300;\n\nint n;\nint t[N], a[N], b[N], id[N], q[N];\n\nbool read() {\n\tif (!(cin \u0026gt;\u0026gt; n)) return false;\n\tforn(i, n) {\n\t\tassert(scanf(\u0026quot;%d\u0026quot;, \u0026amp;t[i]) \u003d\u003d 1);\n\t\tif (t[i] \u003d\u003d 1) {\n\t\t\tassert(scanf(\u0026quot;%d%d\u0026quot;, \u0026amp;a[i], \u0026amp;b[i]) \u003d\u003d 2);\n\t\t} else if (t[i] \u003d\u003d 2) {\n\t\t\tassert(scanf(\u0026quot;%d\u0026quot;, \u0026amp;id[i]) \u003d\u003d 1);\n\t\t\tid[i]--;\n\t\t} else if (t[i] \u003d\u003d 3) {\n\t\t\tassert(scanf(\u0026quot;%d\u0026quot;, \u0026amp;q[i]) \u003d\u003d 1);\n\t\t} else throw;\n\t}\n\treturn true;\n}\n\nbool in_set[N], deleted[N];\nvector\u0026lt;pair\u0026lt;pti, int\u0026gt;\u0026gt; lines;\nvector\u0026lt;pti\u0026gt; envelope;\n\nvoid build_envelope() {\n\tenvelope.clear();\n\tenvelope.reserve(n);\n\n\tforn(ii, sz(lines)) {\n\t\tint i \u003d lines[ii].y;\n\t\tif (in_set[i] \u0026amp;\u0026amp; !deleted[i]) {\n\t\t\tassert(t[i] \u003d\u003d 1);\n\t\t\tpti c(a[i], b[i]);\n\t\t\twhile (!envelope.empty()) {\n\t\t\t\tpti b \u003d envelope.back();\n\t\t\t\tif (b.x \u003d\u003d c.x) {\n\t\t\t\t\tenvelope.pop_back();\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (sz(envelope) \u0026gt; 1) {\n\t\t\t\t\tpti a \u003d envelope[sz(envelope) - 2];\n\n\t\t\t\t\tld xc \u003d ld(c.y - a.y) / (a.x - c.x);\n\t\t\t\t\tld xb \u003d ld(b.y - a.y) / (a.x - b.x);\n\n\t\t\t\t\tif (xc \u0026lt; xb) {\n\t\t\t\t\t\tenvelope.pop_back();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tenvelope.pb(c);\n\t\t}\n\t}\n}\n\nli ans[N];\nvector\u0026lt;pti\u0026gt; qs;\n\nvoid process_qs() {\n\tsort(all(qs));\n\n\tint p \u003d 0;\n\tforn(i, sz(qs)) {\n\t\tli q \u003d qs[i].x;\n\t\tint id \u003d qs[i].y;\n\n\t\twhile (p + 1 \u0026lt; sz(envelope)) {\n\t\t\tli cval \u003d envelope[p].x * q + envelope[p].y;\n\t\t\tli nval \u003d envelope[p + 1].x * q + envelope[p + 1].y;\n\t\t\tif (cval \u0026gt; nval) break;\n\t\t\tp++;\n\t\t}\n\n\t\tif (p \u0026lt; sz(envelope)) {\n\t\t\tans[id] \u003d envelope[p].x * q + envelope[p].y;\n\t\t}\n\t}\n}\n\nvoid solve() {\n\tlines.clear();\n\tlines.reserve(n);\n\tforn(i, n) if (t[i] \u003d\u003d 1) lines.pb(mp(mp(a[i], b[i]), i));\n\tsort(all(lines));\n\n\tmemset(in_set, false, sizeof(in_set));\n\tmemset(deleted, false, sizeof(deleted));\n\tforn(i, n) ans[i] \u003d LLONG_MIN;\n\n\tint blen \u003d int(sqrtl(n));\n\tblen \u003d 2500;\n\tfor (int l \u003d 0; l \u0026lt; n; l +\u003d blen) {\n\t\tint r \u003d min(n, l + blen);\n\n\t\tmemset(deleted, false, sizeof(deleted));\n\t\tfore(i, l, r) if (t[i] \u003d\u003d 2) deleted[id[i]] \u003d true;\n\t\tbuild_envelope();\n\n\t\tqs.clear();\n\t\tqs.reserve(r - l);\n\t\tfore(i, l, r) if (t[i] \u003d\u003d 3) qs.pb(mp(q[i], i));\n\t\tprocess_qs();\n\n\t\tfore(i, l, r) {\n\t\t\tif (t[i] \u003d\u003d 1) in_set[i] \u003d true;\n\t\t\telse if (t[i] \u003d\u003d 2) in_set[id[i]] \u003d false;\n\t\t\telse {\n\t\t\t\tfore(j, l, r) {\n\t\t\t\t\tif (t[j] \u003d\u003d 1 \u0026amp;\u0026amp; in_set[j])\n\t\t\t\t\t\tans[i] \u003d max(ans[i], li(a[j]) * q[i] + b[j]);\n\t\t\t\t\telse if (t[j] \u003d\u003d 2 \u0026amp;\u0026amp; in_set[id[j]])\n\t\t\t\t\t\tans[i] \u003d max(ans[i], li(a[id[j]]) * q[i] + b[id[j]]);\n\t\t\t\t}\n\t\t\t\tif (ans[i] !\u003d LLONG_MIN) printf(\u0026quot;%lldn\u0026quot;, ans[i]);\n\t\t\t\telse puts(\u0026quot;EMPTY SET\u0026quot;);\n\t\t\t}\n\t\t}\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eComplexity: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f1/ab/f1ab78795841cf741db473c1781f3010d0fa5ccc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["educational round 13","editorial"]}}