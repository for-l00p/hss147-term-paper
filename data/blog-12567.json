{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1401989506,"rating":0,"authorHandle":"HidenoriS","modificationTimeSeconds":1402001550,"id":12567,"title":"\u003cp\u003eDisjoint-set data structure (Overview)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eDisjoint-set data structure(often referred to dsu) shows up very frequently in ACM-ICPC and other online programming contest.\u003cbr /\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eIt\u0027s really useful and indispensable especially in problems regarding graphs. Yet it\u0027s actually surprisingly simple once you get the concept. \u003c/p\u003e\u003cp\u003eHere is the short explanation from \u003ca href\u003d\"http://en.wikipedia.org/wiki/Disjoint-set_data_structure\"\u003eWikipedia\u003c/a\u003e.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eDSU is \u003cem\u003ea data structure that keeps track of a set of elements partitioned into a number of disjoint (nonoverlapping) subsets\u003c/em\u003e\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eAnd it allows us to perform two operations: \u003cbr /\u003e\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cem\u003eFind: Determine which subset a particular element is in. This can be used for determining if two elements are in the same subset.\u003c/em\u003e\u003cbr /\u003e\u003c/li\u003e   \u003cli\u003e\u003cem\u003eUnion: Join two subsets into a single subset.\u003c/em\u003e\u003cbr /\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eIn competitive programming, it is often used in the following purpose: \u003cbr /\u003e\u003c/p\u003e \u003col\u003e   \u003cli\u003eCheck if two nodes are connected. \u003cbr /\u003e\u003c/li\u003e   \u003cli\u003eConnect two nodes. \u003cbr /\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eThis algorithm divides the whole set into several disjoint sets, such that all elements in a certain set are connected with every other element in the set.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eAnd each node has a \u0027parent\u0027. And each set has exactly one node whose parent is itself! \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eWe check if two nodes are in the same disjoint set by checking if they have the same \u0027parent\u0027.\u003cbr /\u003e\u003c/p\u003e\u003cp\u003eFor more information, check this \u003ca href\u003d\"//codeforces.com/group/TkF7VfNoT4/blog/entry/133\"\u003eimplementation\u003c/a\u003e and \u003ca href\u003d\"//codeforces.com/group/TkF7VfNoT4/blog/entry/134\"\u003eactual example\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}