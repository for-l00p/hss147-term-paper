{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1465948587,"rating":-1,"authorHandle":"skavurskaa","modificationTimeSeconds":1466023691,"id":45432,"title":"\u003cp\u003eNeed help with string matching problem\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eShort problem statement: Given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e \u0026lt; 200\u003c/span\u003e binary strings \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e(|\u003ci\u003eS\u003c/i\u003e| ≤ 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e)\u003c/span\u003e, find the size of the shortest pattern that doesn\u0027t match \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e for all input strings.\u003c/p\u003e\u003cp\u003eExamples :\u003c/p\u003e\u003cp\u003eS \u003d 011101001, answer \u003d 3 (doesnt match \u0027000\u0027)\u003c/p\u003e\u003cp\u003eS \u003d 11111, answer \u003d 1 (doesnt match \u00270\u0027)\u003c/p\u003e\u003cp\u003eMy current solution is building a suffix automaton for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e and searching all patterns of size i (i\u003d1, i\u003d2, ...) while the number of matches of this size equals \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. When i find some k such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ematches\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e) \u0026lt; 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e, this is the answer. This is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003eS\u003c/i\u003e|)\u003c/span\u003e for building suffix automata plus \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8f/84/8f84a2820dc938fd5db8248e91c83c80db522476.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for matchings, which i think is always small but still relevant.\u003c/p\u003e\u003cp\u003eThis solution gets TLE. Can anyone help me with a faster solution for this problem? Thanks in advance.\u003c/p\u003e\u003cp\u003eEDIT 2: Solved the problem using the strategy below. I will leave the blog here any way because this problem looks interesting so i want to share the solution in case any one is interested :)\u003c/p\u003e\u003cp\u003eRun BFS in suffix automata starting from root node until we find some node that has less than 2 links. Let p be the length of the path from root to this node. This node represents some pattern of length p+1 that doesn\u0027t appear in the string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e. So the answer is p+1.\u003c/p\u003e\u003c/div\u003e","tags":["string","substring search","suffix automata"]}}