{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1505318849,"rating":0,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1505318849,"id":54512,"title":"\u003cp\u003eNotes on Codeforces Beta Round #77, Div2-A, B, C, D, Div1-B,E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/96/problem/A\" title\u003d\"Codeforces Beta Round 77 (Div. 2 Only)\"\u003e96A - Football\u003c/a\u003e\u003c/p\u003e\u003cp\u003eCount the maximum length of repeated elements, and compare it with \u003cspan class\u003d\"tex-span\"\u003e7\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/96/problem/B\" title\u003d\"Codeforces Beta Round 77 (Div. 2 Only)\"\u003e96B - Lucky Numbers (easy)\u003c/a\u003e \u003ca href\u003d\"/contest/95/problem/B\" title\u003d\"Codeforces Beta Round 77 (Div. 1 Only)\"\u003e95B - Lucky Numbers\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe store the integer as a string and use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e to denote its length. At first, note that if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e is an odd number, the answer should be \u003cspan class\u003d\"tex-span\"\u003e44...477...7\u003c/span\u003e with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/05/4e/054e257ac841ecd8a6a44f008155cc9e9d9ffdc7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003es and \u003cspan class\u003d\"tex-span\"\u003e7\u003c/span\u003es. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e is an even number, we can first compare it with \u003cspan class\u003d\"tex-span\"\u003e77...744...4\u003c/span\u003e. If the former one is larger, the answer must be \u003cspan class\u003d\"tex-span\"\u003e44...477...7\u003c/span\u003e but here both the number of \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e s and \u003cspan class\u003d\"tex-span\"\u003e7\u003c/span\u003e s are \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/32/12/321245ac619da5103820fb6d77be832e9cafebc2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e; otherwise, it implies that we can always find a required integer with the same length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThis minimum answer can be found by using DFS (it seems that DFS is an incredibly powerful technique...). The DFS works as follows.\u003c/p\u003e\u003cp\u003eWe use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e]\u003c/span\u003e to denote the digit that we are dealing with at position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e\u003c/span\u003e, and use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enum\u003c/i\u003e4\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enum\u003c/i\u003e7\u003c/span\u003e to denote the number of 4s and 7s that are still not assigned. Initially, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/94/c1/94c19b896e9a3be46798a9a68ca9811c324372a1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eAt first, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enum\u003c/i\u003e4 \u0026gt; 0\u003c/span\u003e, we try to assign 4. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e] \u0026lt; \u00274\u0027\u003c/span\u003e, it is obvious that we can safely assign 4 and the final answer is thus straightforward. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e] \u003d  \u003d \u00274\u0027\u003c/span\u003e, then we should call DFS again to deal with position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e + 1\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enum\u003c/i\u003e4 \u003d \u003ci\u003enum\u003c/i\u003e4 - 1\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e] \u003d \u00275\u0027, \u003ci\u003eor\u003c/i\u003e\u00276\u0027\u003c/span\u003e, then we assign 7, and the answer has been determined. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e] \u003d  \u003d \u00277\u0027\u003c/span\u003e, then we call DFS to deal with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epos\u003c/i\u003e + 1\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enum\u003c/i\u003e7 \u003d \u003ci\u003enum\u003c/i\u003e7 - 1\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e[\u003ci\u003epos\u003c/i\u003e] \u0026gt; \u00277\u0027\u003c/span\u003e, we should return \u0027false\u0027.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/96/problem/C\" title\u003d\"Codeforces Beta Round 77 (Div. 2 Only)\"\u003e96C - Hockey\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAs the strings have small length, we can adopt exhaustive search to find all the positions that should be replaced. We use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e to denote the given letter. For each position, if it is not equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e, we should replace it with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e in order to achieve the maximum number of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e; otherwise we should further check whether \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e is \u0027a\u0027 or not. If yes, then we replace it with \u0027b\u0027, and if no, we replace it with \u0027a\u0027. Be careful that the lower case or upper case should stay the same.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/96/problem/E\" title\u003d\"Codeforces Beta Round 77 (Div. 2 Only)\"\u003e96E - Horse Races\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is a sparse graph, and thus we can implement Dijkstra algorithm based on priority queue with complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eElogE\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eE\u003c/i\u003e\u003c/span\u003e is the number of edges. \u003c/p\u003e\u003cp\u003eWith the above arguments, we can implement Dijkstra to every node, and find out all the nodes that it can reach. Then, we can build another new graph with the given cost, and it is sufficient to implement Dijkstra algorithm again to find out the shortest distance between the given starting point and ending point.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/95/problem/E\" title\u003d\"Codeforces Beta Round 77 (Div. 1 Only)\"\u003e95E - Lucky Country\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIt turns out that this problem has a standard solution. At first, we adopt Union-Find technique to calculate the number of components and also the corresponding sizes. Then, the problem is reduced to a well-known, perhaps referred to as \u0026quot;Multiple-Pack\u0026quot; problem, and one can search a lot of information on the Internet.\u003c/p\u003e\u003c/div\u003e","tags":[]}}