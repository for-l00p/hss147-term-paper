{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1462734987,"rating":27,"authorHandle":"skavurskaa","modificationTimeSeconds":1462734987,"id":44768,"title":"\u003cp\u003eNondeterministic solution in Google Code Jam\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello!\u003c/p\u003e\u003cp\u003eToday i coded a nondeterministic solution for Problem C (Fashion Police) and got AC verdict using it, which led me to qualify to Round 2. Since it is a very different \u0026quot;paradigm\u0026quot;, i wanted to share my solution here so it can maybe be useful for someone in the future :)\u003c/p\u003e\u003cp\u003eMy solution relies on a \u003cem\u003erandom outfit subset generator\u003c/em\u003e. Inicially we are going to set a precision \u003cem\u003er\u003c/em\u003e, the number of times our generator is going to run. I empirically chose to use 10000 random generations because that led my code to run in about ~2 minutes, enough to solve the downloaded input. In each step, it generates a \u003cem\u003erandom outfit subset\u003c/em\u003e in the following manner:\u003c/p\u003e \u003cpre class\u003d\"prettyprint\"\u003e\n  solution \u003d {}\n  choose a value \u003ci\u003ep\u003c/i\u003e, the probability that some outfit will be discarded (in my code i used \u003ci\u003ep\u003c/i\u003e \u003d 10%)\n  for each possible outfit \u003ci\u003eo\u003c/i\u003e:\n    if you can include \u003ci\u003eo\u003c/i\u003e in the solution without violating the Fashion Police rules:\n      choose a random number \u003ci\u003en\u003c/i\u003e in the range [1,100]\n      if \u003ci\u003en\u003c/i\u003e \u0026gt; \u003ci\u003ep\u003c/i\u003e:\n        include \u003ci\u003eo\u003c/i\u003e in the solution\n\u003c/pre\u003e\u003cp\u003eYou can argue that this subset probably won\u0027t be maximal, but that\u0027s no problem! After we generate the random subset, we can simply iterate over all possible outfits and include every missing valid outfit until the solution is maximal! This will be efficient because there are only J*P*S (max 27) such outfits.\u003c/p\u003e\u003cp\u003eSo we are going to generate \u003cem\u003er\u003c/em\u003e maximal random outfits. Now we just pick the biggest and hope that it will really be the optimal value! We can use this RNG-based solution and expect that it will produce the correct output because there are 2^27 possible subsets, but only 27 possible answers (remember that any answer with the correct value is optimal, so consider them to be the same). Since we are only generating maximal subsets, the chance that some iteration will hit the optimal value is huge.\u003c/p\u003e\u003cp\u003eMy code : \u003ca href\u003d\"http://pastebin.com/nTxWKyJH\"\u003ehttp://pastebin.com/nTxWKyJH\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["gcj","random","nondeterministic"]}}