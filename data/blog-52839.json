{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1498187079,"rating":11,"authorHandle":"TripleM5da","modificationTimeSeconds":1498231708,"id":52839,"title":"\u003cp\u003eMentors Weekly Contest #8 Editorial.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHope you had Fun.\u003c/p\u003e\u003cp\u003enote most of the problems where well know classical problems so it would be good for you to read the tutorial and solve them.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem A\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ethe whole idea is that this is actually a Flow Network where your source is a node colored 0 and your sink is a node colored \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enA\u003c/i\u003e\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enB\u003c/i\u003e\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eso you just need to construct the edges where the max flow from the source to the highest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e nodes in the first tree is \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e each and the max flow from nodes of the first to the second tree is 1 each as well as long as the distance between them is \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eand the flow from the lowest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e nodes in the second tree to the sink is 1 each.\u003c/p\u003e\u003cp\u003ethen all you need to do is make sure that you don\u0027t use a node twice and that the max flow from the source to the sink is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem B\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003efirst use path compression to compress the days to indices.\u003c/p\u003e\u003cp\u003ethen you need only have a segment tree and every time you meet an event find the maximum number of events to happen ending with that event using the segment tree, then update it\u0027s value in the segment tree.\u003c/p\u003e\u003cp\u003eso while looping on the the days \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e \u003d \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eV\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/span\u003e(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eTi\u003c/i\u003e]\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eto\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eDP\u003c/i\u003e[\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e).\u003c/p\u003e\u003cp\u003ewe use the segment tree to find the answer for that range and update the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003eD\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAnd at the end print the maximum value in that tree. \u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem C\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eyou just need to build a binary trie to store the numbers.\u003c/p\u003e\u003cp\u003ethen with each query find the maximum number using the trie and output it\u0027s index.\u003c/p\u003e\u003cp\u003ethis is a well known technique using the binary trie which is made by saving the numbers as binary strings starting by the most significant bit.\u003c/p\u003e\u003cp\u003eAnd while transversing around the trie if that bit is equal to \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e you should check if there is a node at the \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e position if there is one add the value of that bit to your answer and transverse to that node else transverse to the node with 0 value and vice versa if the bit value is equal to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem D\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003etypical Brute force Maximization problem where all you need to do is count the number of characters in each grid and the number of characters in both names.\u003c/p\u003e\u003cp\u003ethen for each gang find how many names you can make and Maximize.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem E\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ewe understand that we can represent the 26 characters as nodes so to find the minimum distance between each two node we just need to use floyd having an array of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecost\u003c/i\u003e[26][26]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003ethen if we find two unequal characters we choose the minimum of 3 choices :\u003c/p\u003e \u003cul\u003e   \u003cli\u003econvert the left character to the right character with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecost\u003c/i\u003e[\u003ci\u003eleft\u003c/i\u003e][\u003ci\u003eright\u003c/i\u003e]\u003c/span\u003e.\u003c/li\u003e   \u003cli\u003econvert the right character to the left character with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecost\u003c/i\u003e[\u003ci\u003eright\u003c/i\u003e][\u003ci\u003eleft\u003c/i\u003e]\u003c/span\u003e.\u003c/li\u003e   \u003cli\u003efind another character \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecost\u003c/i\u003e[\u003ci\u003eleft\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecost\u003c/i\u003e[\u003ci\u003eright\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e.\u003c/li\u003e \u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem F\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ethis was the sixth easiest problem at ACPC 2012 so for those who were able to solve it good job also the fifth was trigonometry so i didn\u0027t bother to get it :v\u003c/p\u003e\u003cp\u003ei am not sure that this is the official solution for this problem but my solution was that basically the L would never go above 60.\u003c/p\u003e\u003cp\u003eso if L \u003cspan class\u003d\"tex-span\"\u003e \u0026gt; \u003c/span\u003e 60 it\u0027s a \u0026quot;NO\u0026quot; case.\u003c/p\u003e\u003cp\u003ethen all you need to do is use dynamic programming where your state is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edp\u003c/i\u003e[\u003ci\u003erow\u003c/i\u003e][\u003ci\u003ecol\u003c/i\u003e][\u003ci\u003emask\u003c/i\u003e][\u003ci\u003elength\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003ewhere row and column represent the current cell you are in and the mask represents the cells you have visited till now and length is the current length you walked.\u003c/p\u003e\u003cp\u003eother than that are implementation details.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem G\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003ebasic implementation problem you just need to have a set of types if there is any team that has a team of the same type near him throw that type of team into that set be careful of elements equal to \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e and accessing out of bounds and so on.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem H\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eanother basic implementation problem.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem I\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eguess whaaaaaaaaaaaaaaaaat?\u003c/p\u003e\u003cp\u003ebrdo basic implementation :)\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e7a7wl a get over kasly we aktb editorials le 25r etnen bs dh msh wa3d :v.\u003c/p\u003e\u003cp\u003ecodes for some of the problems:\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://github.com/Triplem5ds/Competitve-Programming/blob/master/Codeforces/CF%20-%20GYM%20-%20100733I\"\u003eA\u003c/a\u003e \u003ca href\u003d\"https://github.com/Triplem5ds/Competitve-Programming/blob/master/Codeforces/CF%20-%20GYM%20-%20100733F\"\u003eB\u003c/a\u003e \u003ca href\u003d\"https://github.com/Triplem5ds/Competitve-Programming/blob/master/Codeforces/CF%20-%20GYM%20-%20100883E\"\u003eC\u003c/a\u003e \u003ca href\u003d\"https://github.com/Triplem5ds/Competitve-Programming/blob/master/Codeforces/CF%20-%20GYM%20-%20100733H\"\u003eE\u003c/a\u003e \u003ca href\u003d\"https://github.com/Triplem5ds/Competitve-Programming/blob/master/ECPC%20and%20ACPC%20Solutions/ACPC%202012%20-%20F.cpp\"\u003eF\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}