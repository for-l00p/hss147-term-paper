{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1425659362,"rating":3,"authorHandle":"_spartan","modificationTimeSeconds":1425659362,"id":16815,"title":"\u003cp\u003eRange Updates in 2-D Binary Indexed Tree\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI have been learning 2-D BIT lately.\u003c/p\u003e\u003cp\u003eBut I am having difficulty implementing range updates in it.\u003c/p\u003e\u003cp\u003eEg. Suppose we have a matrix M[][].There are 2 types of queries:\u003c/p\u003e\u003cp\u003e1.ADD x1 y1 x2 y2 val\u003c/p\u003e\u003cp\u003eThis adds val to all matrix elements which have their x-coordinate between x1 and x2 and y-coordinate between y1 and y2.\u003c/p\u003e\u003cp\u003e2.SUM x1 y1 x2 y2\u003c/p\u003e\u003cp\u003eThis query returns the sum of all matrix elements which have their x-coordinate between x1 and x2 and y-coordinate between y1 and y2.\u003c/p\u003e\u003cp\u003eI am having trouble implementing the first query using 2-D BIT.\u003c/p\u003e\u003cp\u003eHad point(x1, y1) and point(x2, y2) been same, following code would work :\u003c/p\u003e\u003cp\u003evoid update(int x1, int y1, ll val)\u003c/p\u003e\u003cp\u003e{\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint x, y;\n\nx\u003dx1;\n\nwhile(x\u0026lt;\u003dn){\n\n    y\u003dy1;\n\n    while(y\u0026lt;\u003dm){                  //Update y coordinate\n\n       ft[x][y]+\u003dval;        //ft stores BIT\n\n       y+\u003d(y\u0026amp;-y);\n\n    }\n\n    x+\u003d(x\u0026amp;-x);\n\n}\n\nreturn;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e}\u003c/p\u003e\u003cp\u003eHow to go about it if I have to update the whole range?\u003c/p\u003e\u003c/div\u003e","tags":["2-dimensional","binary indexed tree","data structures"]}}