{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1526290330,"rating":163,"authorHandle":"jtnydv25","modificationTimeSeconds":1528015640,"id":59452,"title":"\u003cp\u003eA simple sqrt decomposition solution to online FFT\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSay we need to solve a recurrence of the form :\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/88/e4/88e4480ef203a0a047ecbd86a497b641b3d1df42.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eHere, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e is an arbitrary function which can be computed in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e. An example of such a problem is \u003ca href\u003d\"/contest/553/problem/E\" title\u003d\"Codeforces Round 309 (Div. 1)\"\u003e553E - Kyoya and Train\u003c/a\u003e. The tutorial gives a solution in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/68/bc/68bcc13a3804a2ab143b050a7b88458b5443711e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eI recently saw a similar problem in codechef may long \u003ca href\u003d\"https://www.codechef.com/MAY18A/problems/SERSUM\"\u003eSERSUM\u003c/a\u003e, where I used another technique which I had thought of when I saw the prior problem. In this post I explain this very simple and intuitive sqrt decomposition solution, running in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/82/21/8221486302b15c07841db199e96838bc4b90755c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e which works in almost the same time as \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/80/35/8035ba723c089b101059feadeb2a5d8f9d53675c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution because of a very low constant. Here goes:\u003c/p\u003e\u003cp\u003eLet us divide into blocks of size say \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e, giving us a total of \u003cspan class\u003d\"tex-span\"\u003e⌈ \u003ci\u003eN\u003c/i\u003e / \u003ci\u003eK\u003c/i\u003e⌉ \u003c/span\u003e blocks. Block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e consists of \u003cspan class\u003d\"tex-span\"\u003e[(\u003ci\u003et\u003c/i\u003e - 1)\u003ci\u003eK\u003c/i\u003e, \u003ci\u003etK\u003c/i\u003e - 1]\u003c/span\u003e\u003c/p\u003e\u003cp\u003eLet \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7d/41/7d41eca7140d06be625efbf69a15a1c358db2645.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sub\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWhen processing the block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e + 1\u003c/span\u003e we assume that we know \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, which is computed when block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e has been completely processed. So, we compute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e a total of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/97/25/9725e95a6712d8320bdfa32eee9b99469ac9e7ef.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e times using FFT in time \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9d/a2/9da2473d36ad70bfffa3be80ba23ac2255b31dd9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eConsider some \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e between \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003etK\u003c/i\u003e, (\u003ci\u003et\u003c/i\u003e + 1)\u003ci\u003eK\u003c/i\u003e - 1]\u003c/span\u003e. Then, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d4/8b/d48b253b06780c36c10f614785c49ebc64066c9c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/db/95/db95bbcfa192ddfd31968292e804cce9215b3f8b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/85/41/8541f8e794b375e4ed38e6c63514bed49cef69a5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eClearly, the right part can be calculated in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eK\u003c/i\u003e)\u003c/span\u003e, and we have an extra time of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eNK\u003c/i\u003e)\u003c/span\u003e because of this part.\u003c/p\u003e\u003cp\u003eOverall complexity \u003d \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5c/53/5c5357118e9bd864f37db0a7595ec4897dcb7d62.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, which is minimized taking \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/98/31/9831166f2e2a5fdf2c30b4b1fa53d430095182ab.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and overall complexity is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/94/83/9483322bbee93c93ef8cfa21a2661e8eaf27aaf5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eAn optimization:\u003c/p\u003e\u003cp\u003eNote that the right part can be computed with only one mod operation if we use m2 \u003d m * m, and keep subtracting m2 when the total sum exceeds it. Eventually we take total sum modulo m. This is a very common technique, which we use in matrix multiplication as well.\u003c/p\u003e\u003cp\u003eThis means that we should use a block size even greater than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8d/5f/8d5f44e83677d972dc6a197bac515528ba05f63c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e for better results, because of a huge constant difference in the two parts. (Computing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e using FFT, and computing the remaining sum in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e using brute force iteration with the optimization above.) Just as an example, for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e \u003d 10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e \u003d 10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e + 7\u003c/span\u003e (which is a bad mod value for FFT problems), the best performance comes when you take \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e ≈ 6 × 10\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e\u003c/span\u003e. For this input size it runs in about 2 seconds, which is pretty good.\u003c/p\u003e\u003c/div\u003e","tags":[]}}