{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1489302738,"rating":4,"authorHandle":"MaineBolaPremSey","modificationTimeSeconds":1489302879,"id":50928,"title":"\u003cp\u003ePower Of Binary Search.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eRecently i came across the power of binary search which was introduced to me by a friend.\u003c/p\u003e\u003cp\u003eQ. You are given N sorted arrays of variable size, all of them filled with unique elements(No two array will consist the same element).The problem will give you arrays which are to be merged and after sorting it you have to answer the Kth element in it. (1\u0026lt;\u003dQueries\u0026lt;\u003d10^5)\u003c/p\u003e\u003cp\u003eSol.\u003c/p\u003e\u003cp\u003eSuppose there were 5 arrays:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e1. 1 3 5 9\n2. 2 7 8\n3. 15 17 21 22\n4. 23 24 \n5. 27 28 29\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd the query was to Merge the arrays 1,2 \u0026amp; 3 and find the 7th element after merging the arrays and sorting them.\u003c/p\u003e\u003cp\u003eSo we start guessing the answer.  Let\u0027s say you start with the number 17 so you quickly run a lower bound on three arrays and realise that it\u0027s the 9th element ( 17 \u0026gt; (4 elements in array1 + 3 elements in array2 + 1 element in array3) ). So now you know that your answer obviously lies below 17 so then you perform a binary search until you find the result and you\u0027ll get the answer 8.\u003c/p\u003e\u003cp\u003eI would like to know an efficient implementation of this and more problems like this where we guess the answer in O(NlogN).\u003c/p\u003e\u003cp\u003eMore Tricks are always welcomed :)\u003c/p\u003e\u003c/div\u003e","tags":["binary seach","greedy"]}}