{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1521096640,"rating":52,"authorHandle":"EtaoinWu","modificationTimeSeconds":1521109297,"id":58372,"title":"\u003cp\u003eSolution to CCF NOI 2018 Winter Camp Task 1, in English\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eThis article is about the solution to a recent problem from the CCF NOI 2018 Winter Camp, \u003ca href\u003d\"//codeforces.com/blog/entry/51462\"\u003ethe penultimate stage before the Chinese national team is selected.\u003c/a\u003e I believe that the solution contains a few techniques that are rarely known.\u003c/p\u003e\u003cp\u003eShort description of the problem:\u003c/p\u003e\u003cp\u003eYou are given three trees \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e​\u003c/span\u003e with the same number of nodes. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e), \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e), \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)​\u003c/span\u003e denote the distance from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e​\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e​\u003c/span\u003e in each tree. Find a pair of nodes \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)​\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e) + \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e) + \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)​\u003c/span\u003e is maximized. Output that value.\u003c/p\u003e\u003cp\u003eLet\u0027s start by solving the problem for two trees only. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e denote the distance from node \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e in the first tree. We want to maximize \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/df/18/df1872394db7245097aca2c4b9ad5a6a9a9d68f9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. For each node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e in the second tree, let\u0027s add a node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u0027\u003c/span\u003e and an edge \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ev\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e\u0027)\u003c/span\u003e to the second tree, with weight \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e. If we fix \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/93/76/9376e6c72cae7d5ee96e66a75885ab39e2dfc21a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we have reduced our problem to this: \u0026quot;Given two sets of nodes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e, \u003ci\u003eB\u003c/i\u003e\u003c/span\u003e, merge them and calculate the maximum value of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2c/06/2c06273389ad12177686822613edc0371e381526.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u0027\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e denotes the distance between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e in the modified second tree.\u0026quot; It can be proven through a \u003cem\u003ereductio ad absurdum\u003c/em\u003e argument, that for each one of these sets, we only need to store a single pair of nodes \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u0027\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e is maximized. This means that merging is done in this way: Let \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e be the aforementioned pairs. The value of the new pair will be \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e), (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e), (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e), (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e), (\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e), \u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e, depending on which pair maximizes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u0027\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e. This gives us an \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a4/ab/a4ab5ff7f8008093f71b55ecd398278637189858.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e algorithm.\u003c/p\u003e\u003cp\u003eNow, let\u0027s solve another version of the problem: We have three trees, but the second and third trees are path-shaped. Again, let\u0027s fix \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/97/01/9701a5d81d9e731eb04baf5b4fb790d18c8bed80.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. We have to maximize \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e) + \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003ey\u003c/i\u003e) + |\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e) - \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003ey\u003c/i\u003e)| + |\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e) - \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e(\u003ci\u003ey\u003c/i\u003e)|\u003c/span\u003e. For each subtree of the first tree, we will maintain four values:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/32/0e/320e57eefa40734386afd93d41b51f7aa36c0a92.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/li\u003e   \u003cli\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a5/b4/a5b4529b996fc1cd432e10d0eadbd5746549e6c9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/li\u003e   \u003cli\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7b/fd/7bfdc136549728d1cbbb9759c6c255e3438f4ead.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/li\u003e   \u003cli\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c2/80/c28059503f61785bb489b0ba022e9934a51896e7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eSince \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/81/8f/818f011efb56f65e76335be6ac97a9f229111f72.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, the best answer will be either equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1, 1\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e) + \u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2, 2\u003c/sub\u003e(\u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1, 2\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e) + \u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2, 1\u003c/sub\u003e(\u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e for some pair of nodes \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e. This gives us a simple \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e solution if we keep the prefix and suffix maxima of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e for the children of every node.\u003c/p\u003e\u003cp\u003eUnfortunately, we still have one more subtask to solve before we reach the full solution. In this subtask, we are given two trees and a path. Let\u0027s start by introducing the \u003cem\u003eauxiliary tree\u003c/em\u003e: Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e be a subset of nodes of a tree \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e. Then, the \u003cem\u003eauxiliary tree\u003c/em\u003e contains the nodes \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/24/18/241826eabb99242f8b831b892734c2d61bbf1e47.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and every node is connected to its closest ancestor in the original tree with an edge of weight \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5b/89/5b8957c2946e6ff47e0912ad4e36822798d97ca4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. The \u003cem\u003eauxiliary tree\u003c/em\u003e therefore has \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003eA\u003c/i\u003e|)\u003c/span\u003e nodes. Now, we can do D\u0026amp;C on the path: Let\u0027s fix its midpoint \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e. We have to maximize \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e) + \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e) + \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e) + \u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e(\u003ci\u003em\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e ≤ \u003ci\u003em\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e ≥ \u003ci\u003em\u003c/i\u003e\u003c/span\u003e. If we add an extra vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u0027\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e where the weight of the edge \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ev\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e\u0027)\u003c/span\u003e is equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e(\u003ci\u003ev\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e and create the \u003cem\u003eauxiliary trees\u003c/em\u003e that only contain the vertices in the range we\u0027re currently processing, we can use the solution to the \u0026quot;two trees\u0026quot; subtask to solve this one too. This gives us an \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7b/a4/7ba4fd0477de5ce912d95c0f3fb30198225a50c6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution, with an albeit difficult implementation.\u003c/p\u003e\u003cp\u003eAnd finally, we can move on to the complete solution. But first, we have to introduce another technique, called \u0026quot;centroid decomposition on edges\u0026quot;. Here is a simple pseudocode description of this technique:\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\"Centroid decomposition on edges code\" src\u003d\"/predownloaded/a0/9d/a09db12fb9c221aecea697d81d378c3ecc1d651e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eObviously, this will work in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e in some cases, e.g. a star graph. However, if we have a binary tree, this code works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlogn\u003c/i\u003e)\u003c/span\u003e. We can make an arbitrary tree binary while preserving distances between nodes using a method similar to the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Left-child_right-sibling_binary_tree\"\u003eleft-child right-sibling conversion\u003c/a\u003e. If we have a node with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u0026gt; 2\u003c/span\u003e children, we are going to attach a single child node to it. This node\u0027s left child will be the former first child of the node, and it will be connected to it with a weight of identical edge. Its right child will be its \u0026quot;sibling\u0026quot; node, whose left child will be the former second child of the node, and so on.\u003c/p\u003e\u003cp\u003eOur full solution is simply a combination of these two techniques. Make the first tree binary, and do \u0026quot;centroid decomposition on edges\u0026quot; on it. Similarly to the previous subtask, add a dummy node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u0027\u003c/span\u003e, such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u00272(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u0027) \u003d \u003ci\u003eh\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eh\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is the distance from node x to the active edge in the first tree. Then, solve the \u0026quot;two trees\u0026quot; subtask. This gives us an \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e4/ec/e4ec7837a9bd6bf557434b2a79e43ad9befff3e8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution.\u003c/p\u003e \u003chr /\u003e\u003cp\u003eThis article was written by \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/f2lk6wf90d\" title\u003d\"Specialist f2lk6wf90d\"\u003ef2lk6wf90d\u003c/a\u003e, based on our \u003ca href\u003d\"https://gist.github.com/EtaoinWu/c5a54729ee0529acdcf095ee948800de\"\u003echat\u003c/a\u003e on Telegram. Thank you for your awesome work, Dimitris!\u003c/p\u003e\u003cp\u003eIf you find any mistakes in this solution, comments are welcomed.\u003c/p\u003e\u003c/div\u003e","tags":["advanced data structure","centroid decomposition","china","dp on trees"]}}