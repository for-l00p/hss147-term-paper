{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1513347352,"rating":0,"authorHandle":"acmASCIS","modificationTimeSeconds":1513348621,"id":56370,"title":"\u003cp\u003eFunctions — Week 7\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003cstrong\u003eFunctions\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eA function is a group of statements that perform a particular task. You may define your own functions in C++.\u003c/p\u003e\u003cp\u003eUsing functions can have many advantages, including the following: - You can reuse the code within a function. - You can easily test individual functions.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint main()\n{\n  // some code\n  return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e\u003cstrong\u003eThe Return Type\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003eA function\u0027s return type is declared before its name. In the example above, the return type is int, which indicates that the function returns an integer value. Occasionally, a function will perform the desired operations without returning a value. Such functions are defined with the keyword void.\u003c/p\u003e\u003ch4\u003e\u003cstrong\u003eDefining a Function\u003c/strong\u003e\u003c/h4\u003e \u003cpre\u003e\u003ccode\u003ereturn_type function_name( parameter list )\n{\n   body\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003ereturn-type:\u003c/strong\u003e Data type of the value returned by the function. function name: Name of the function.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eparameters:\u003c/strong\u003e When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, ora numbernd number of the parameters of a function. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003ebody of the function:\u003c/strong\u003e A collection of statements defining what the function does.\u003c/p\u003e\u003cp\u003eAs an example, let\u0027s define a function that does not return a value, just prints a text.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;iostream\u0026gt;\nusing namespace std;\n\nvoid print {\n  cout \u0026lt;\u0026lt; \u0026quot;ACM\u0026quot;;\n}\n\nint main() {\n  print();\n\n  return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou must declare a function prior to calling it.\u003c/p\u003e\u003cp\u003eA function declaration, or function prototype, tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately.\u2028For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;iostream\u0026gt;\nusing namespace std;\n\n//Function declaration\nvoid print();\n\nint main() {\n  print();\n\n  return 0;\n}\n\n//Function definition\nvoid print {\n  cout \u0026lt;\u0026lt; \u0026quot;ACM\u0026quot;;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e\u003cstrong\u003eFunction Parameters\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003eFor a function to use arguments, it must declare formal parameters, which are variables that accept the argument\u0027s values.\u003c/p\u003e\u003cp\u003eFor example :\u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid printSomething(int x) \n{\n   cout \u0026lt;\u0026lt; x;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis defines a function that takes one integer parameter and prints its value.\u003c/p\u003e\u003cp\u003eYou can add as many parameters to a single function as you want. int addNumbers(int x, int y, int z, int a) {  int result \u003d x + y + z + a;  return result; }\u003c/p\u003e\u003ch4\u003e\u003cstrong\u003eArrays and Functions\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003eThe parameter should be defined as an array using square brackets, when declaring the function. \u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid print(int arr[], int size) {\n  for(int i\u003d0; i\u0026lt;size; k++) {\n    cout \u0026lt;\u0026lt;arr[i]\u0026lt;\u0026lt; endl;\n  }\n}\nint main() {\n  int array[3]\u003d {1, 7, 21};\n  print(array, 3);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4\u003e\u003cstrong\u003eFunction Arguments\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003eThere are two ways to pass arguments to a function as the function is being called.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBy value (default type):\u003c/strong\u003e This method copies the argument\u0027s actual value into the function\u0027s formal parameter. Here, we can make changes to the parameter within the function without having any effect on the argument original value.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid fun(int n) {\n  n \u003d 21;\n}\n\nint main() {\n  int a \u003d 71;\n  fun(a);\n  cout \u0026lt;\u0026lt; a;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e// Outputs 71 since a copy of the argument is passed to the function, the original argument is not modified by the function.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBy reference:\u003c/strong\u003e This method copies the argument\u0027s reference to the formal parameter. Within the function, the reference is used to access the actual argument used in the call. This means that any change made to the parameter affects the argument.\u003c/p\u003e\u003cp\u003eThe function declaration says that the function takes an address-of operator \u0026amp; as its parameter.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid fun(int \u0026amp; n) {\n  n \u003d 21;\n}\n\nint main() {\n  int a \u003d 71;\n  fun(a);\n  cout \u0026lt;\u0026lt; a;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e// Outputs 21 since function has actually changed the argument\u0027s value.\u003c/p\u003e\u003ch1\u003eWeek 7 Tutorial video :\u003c/h1\u003e\u003cp\u003e\u003ca href\u003d\"https://www.youtube.com/watch?v\u003deJJ1U6HqU3w\"\u003ehttps://www.youtube.com/watch?v\u003deJJ1U6HqU3w\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}