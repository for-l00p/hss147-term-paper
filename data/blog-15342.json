{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1419405738,"rating":17,"authorHandle":"Los_Angelos_Laycurse","modificationTimeSeconds":1419407413,"id":15342,"title":"\u003cp\u003eSRM 560 Div I 1000pts(BoundedOptimization) :O(n^2*log(answer)) solution\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003elink: \u003ca href\u003d\"http://community.topcoder.com/stat?c\u003dproblem_statement\u0026amp;pm\u003d12294\"\u003ehttp://community.topcoder.com/stat?c\u003dproblem_statement\u0026amp;pm\u003d12294\u003c/a\u003e I have found a clever iteration approach for this problem and 4ms passed(this approach is also proper for find integer optimal solution):\u003c/p\u003e\u003cp\u003efirst build graph and get all connected component of the graph these component are monotonic between each other,so choose and solve one component and other variable value is lower_bound.\u003c/p\u003e\u003cp\u003efor one connected component first init the variables:satisfy sum of these variable is maxSum,and value of each is between lower_bound and upper_bound. choose any two variables a and b as main variables ,others regard as constant,then find the local optimal value of these variables,let a to be a+dx,b to be b-dx,find the value of dx that is optimal: if a and b is directly connected, it is a downward quadratic function (a+dx)*(b-dx)+C*dx+D, lower[a]\u0026lt;\u003da+dx\u0026lt;\u003dupper[a] lower[b]\u0026lt;\u003db-dx\u0026lt;\u003dupper[b]. otherwise it is a linear function. for every two main varibales we can choose the maximum increment of the local optimal values,and relax the chosen varibles: ans[choose_a]+\u003ddx; ans[choose_b]-\u003ddx; until we can\u0027t get more optiaml values compare each component of optimal value and choose the max.\u003c/p\u003e\u003cp\u003ethis approach is much faster than editorial\u0027s O(3^n*n) and it is also proper for find integer optimal solution. complexity is O(n^2*times) times is the (times of interation,seems to be log(1.0/accurancy),not proved yet)\u003c/p\u003e\u003c/div\u003e","tags":[]}}