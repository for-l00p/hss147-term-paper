{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1502599098,"rating":0,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1502599098,"id":53821,"title":"\u003cp\u003eNotes on Codeforces Beta Round #68, A, B\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eWell, this is a tough round...\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/74/problem/A\" title\u003d\"Codeforces Beta Round 68\"\u003e74A - Room Leader\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe solution is straightforward. Calculate the total points for each user, and output the one with the maximum points.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/74/problem/B\" title\u003d\"Codeforces Beta Round 68\"\u003e74B - Train\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe following example might give us more intuitive understanding to this problem. Suppose that stowaway is at position \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e while the controller is at \u003cspan class\u003d\"tex-span\"\u003e5\u003c/span\u003e and moving to positions with larger indices. If the train keeps moving, the optimal position at which the stowaway should stay is obviously \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. However, the optimal strategy might change if the train stops at some station before the stowaway is caught. When the train stops, the stowaway can first check both the current position and moving direction of the controller, and then find out the next optimal position, just as the above simple example shows. \u003c/p\u003e\u003cp\u003eWith the above arguments, we can directly simulate the whole process according to the given string. \u003c/p\u003e\u003c/div\u003e","tags":[]}}