{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1491932029,"rating":82,"authorHandle":"poomrokc","modificationTimeSeconds":1492012169,"id":51544,"title":"\u003cp\u003eSpeed of Input/Output of various languages and method on Codeforces\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello everybody , today I\u0027ll be testing speed of input/output on Codeforces. My objective is to provide assistance on determining input method for problems (You wouldn\u0027t want to get TLE because of I/O right?) and calculate the actual time your algorithm need to work in.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e(I am currently Updating this post, if you wanted your language and method to be listed here , please contact me and your name will be largely on this post Xp)!!\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSince the post has become very long now , I suggest searching for specific language or you might get dizzy and I cannot deliver you medicine on time :(\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLanguages tested: C/C++ , JAVA\u003c/strong\u003e\u003c/p\u003e\u003ch3\u003eHow do I test?\u003c/h3\u003e\u003cp\u003eI made two problems in polygon , then I create mashup contest from them. So I am able to test my solutions separately .\u003c/p\u003e\u003cp\u003eLinks to my polygon problem is as follow , you can create your own mashup and test it yourself.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eLinks\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003ca href\u003d\"https://polygon.codeforces.com/p/poomrokc/huge-input\"\u003ehttps://polygon.codeforces.com/p/poomrokc/huge-input\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://polygon.codeforces.com/p/poomrokc/huge-output\"\u003ehttps://polygon.codeforces.com/p/poomrokc/huge-output\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eIf you do not wish to do that you can see screenshots of my problems that contain every information you need.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eHere\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/c9/ab/c9abef290493be946f3fd992378a5a7fdccb62c1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg alt\u003d\" \" src\u003d\"/predownloaded/f8/88/f8889e4a0acacc9edf303788d5acb694e309794a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003etest constraints are in the images above , please see before proceeding.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eI do not consider 0ms and 15ms to be so much difference on codeforces , so both of them wil be considered 0ms.\u003c/strong\u003e\u003c/p\u003e\u003ch3\u003eINPUT\u003c/h3\u003e\u003cp\u003eEvery of the solution will follow this idea: we iterate through every input and add up into 64-bit integer then after that we mod it by 1,000,000,007\u003c/p\u003e\u003ch4\u003eC/C++\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e1.Standard scanf\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;stdio.h\u0026gt;\nint main()\n{\n\tlong long sum\u003d0;\n\tint n,i,t;\n\tscanf(\u0026quot;%d\u0026quot;,\u0026amp;n);\n\tfor(i\u003d1;i\u0026lt;\u003dn;i++)\n\t{\n\t\tscanf(\u0026quot;%d\u0026quot;,\u0026amp;t);\n\t\tsum+\u003dt;\n\t}\n\tprintf(\u0026quot;%lld\u0026quot;,sum%1000000007);\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(GNU GCC 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 78ms \u003cstrong\u003e#6\u003c/strong\u003e 155ms \u003cstrong\u003e#7\u003c/strong\u003e 764ms \u003cstrong\u003e#8\u003c/strong\u003e 1512ms \u003c/p\u003e\u003cp\u003e(GNU GCC C11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 31ms \u003cstrong\u003e#5\u003c/strong\u003e 78ms \u003cstrong\u003e#6\u003c/strong\u003e 156ms \u003cstrong\u003e#7\u003c/strong\u003e 764ms \u003cstrong\u003e#8\u003c/strong\u003e 1528ms \u003c/p\u003e\u003cp\u003e(GNU G++ 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 93ms \u003cstrong\u003e#6\u003c/strong\u003e 156ms \u003cstrong\u003e#7\u003c/strong\u003e 764ms \u003cstrong\u003e#8\u003c/strong\u003e 1497ms \u003c/p\u003e\u003cp\u003e(GNU G++11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 78ms \u003cstrong\u003e#6\u003c/strong\u003e 156ms \u003cstrong\u003e#7\u003c/strong\u003e 764ms \u003cstrong\u003e#8\u003c/strong\u003e 1513ms \u003c/p\u003e\u003cp\u003e(GNU G++14 6.2.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 78ms \u003cstrong\u003e#6\u003c/strong\u003e 171ms \u003cstrong\u003e#7\u003c/strong\u003e 779ms \u003cstrong\u003e#8\u003c/strong\u003e 1544ms\u003c/p\u003e\u003cp\u003e(MVC++ 2010) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 93ms \u003cstrong\u003e#6\u003c/strong\u003e 171ms \u003cstrong\u003e#7\u003c/strong\u003e 717ms \u003cstrong\u003e#8\u003c/strong\u003e 1419ms\u003c/p\u003e\u003cp\u003eSeems like scanf works the same regardless of compliers. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003e2.Standard cin\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;iostream\u0026gt;\nusing namespace std;\nint main()\n{\n\tlong long sum\u003d0;\n\tint n,i,t;\n\tcin\u0026gt;\u0026gt;n;\n\tfor(i\u003d1;i\u0026lt;\u003dn;i++)\n\t{\n\t\tcin\u0026gt;\u0026gt;t;\n\t\tsum+\u003dt;\n\t}\n\tcout\u0026lt;\u0026lt;sum%1000000007;\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(GNU G++ 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 171ms \u003cstrong\u003e#5\u003c/strong\u003e 810ms \u003cstrong\u003e#6\u003c/strong\u003e 1622ms \u003cstrong\u003e#7\u003c/strong\u003e 8876ms \u003cstrong\u003e#8\u003c/strong\u003e \u0026gt;15000ms(TLE) \u003c/p\u003e\u003cp\u003e(GNU G++11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 171ms \u003cstrong\u003e#5\u003c/strong\u003e 826ms \u003cstrong\u003e#6\u003c/strong\u003e 1637ms \u003cstrong\u003e#7\u003c/strong\u003e 8112ms \u003cstrong\u003e#8\u003c/strong\u003e \u0026gt;15000ms(TLE) \u003c/p\u003e\u003cp\u003e(GNU G++14 6.2.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 140ms \u003cstrong\u003e#5\u003c/strong\u003e 655ms \u003cstrong\u003e#6\u003c/strong\u003e 1294ms \u003cstrong\u003e#7\u003c/strong\u003e 6239ms \u003cstrong\u003e#8\u003c/strong\u003e 12619ms\u003c/p\u003e\u003cp\u003e(MVC++ 2010) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 78ms \u003cstrong\u003e#5\u003c/strong\u003e 343ms \u003cstrong\u003e#6\u003c/strong\u003e 655ms \u003cstrong\u003e#7\u003c/strong\u003e 3369ms \u003cstrong\u003e#8\u003c/strong\u003e 6723ms\u003c/p\u003e\u003cp\u003eLOOK AT THIS!! FOR INTEGERS USING MVC++ 2010 COMPLIER IS FASTER THAN OTHERS\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e3.cin with ios_base::sync_with_stdio(false); and cin.tie(NULL);\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;iostream\u0026gt;\nusing namespace std;\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tlong long sum\u003d0;\n\tint n,i,t;\n\tcin\u0026gt;\u0026gt;n;\n\tfor(i\u003d1;i\u0026lt;\u003dn;i++)\n\t{\n\t\tcin\u0026gt;\u0026gt;t;\n\t\tsum+\u003dt;\n\t}\n\tcout\u0026lt;\u0026lt;sum%1000000007;\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(GNU G++ 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 61ms \u003cstrong\u003e#5\u003c/strong\u003e 249ms \u003cstrong\u003e#6\u003c/strong\u003e 499ms \u003cstrong\u003e#7\u003c/strong\u003e 2432ms \u003cstrong\u003e#8\u003c/strong\u003e 4773ms \u003c/p\u003e\u003cp\u003e(GNU G++ 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 46ms \u003cstrong\u003e#5\u003c/strong\u003e 249ms \u003cstrong\u003e#6\u003c/strong\u003e 483ms \u003cstrong\u003e#7\u003c/strong\u003e 2432ms \u003cstrong\u003e#8\u003c/strong\u003e 4835ms \u003c/p\u003e\u003cp\u003e(GNU G++14 6.2.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 30ms \u003cstrong\u003e#5\u003c/strong\u003e 109ms \u003cstrong\u003e#6\u003c/strong\u003e 218ms \u003cstrong\u003e#7\u003c/strong\u003e 1091ms \u003cstrong\u003e#8\u003c/strong\u003e 2167ms\u003c/p\u003e\u003cp\u003e(MVC++ 2010) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 62ms \u003cstrong\u003e#5\u003c/strong\u003e 327ms \u003cstrong\u003e#6\u003c/strong\u003e 639ms \u003cstrong\u003e#7\u003c/strong\u003e 3135ms \u003cstrong\u003e#8\u003c/strong\u003e 6255ms\u003c/p\u003e\u003cp\u003eLOOK AT THIS!! FOR INTEGERS USING G++14 COMPLIER IS FASTER THAN OTHERS and MVC++ 2010 had no differences compare to standard cin\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e4.Using getchar() , modified code from geek4geeks.org\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;stdio.h\u0026gt;\nvoid fastscan(int* number)\n{\n    int negative\u003d0;\n    register int c;\n    *number \u003d 0;\n    c \u003d getchar();\n\twhile(c!\u003d\u0027-\u0027\u0026amp;\u0026amp;(c\u0026lt;\u00270\u0027)||c\u0026gt;\u00279\u0027)\n\t\tc\u003dgetchar();\n    if (c\u003d\u003d\u0027-\u0027)\n    {\n        negative \u003d 1;\n        c \u003d getchar();\n    }\n    for (; (c\u0026gt;47 \u0026amp;\u0026amp; c\u0026lt;58); c\u003dgetchar())\n        *number \u003d *number *10 + c - 48;\n    if (negative\u003d\u003d1)\n        *number *\u003d -1;\n}\nint main()\n{\n\tint n,i,i2;\n\tlong long sum\u003d0;\n\tfastscan(\u0026amp;n);\n\tfor(i\u003d1;i\u0026lt;\u003dn;i++)\n\t{\n\t\tfastscan(\u0026amp;i2);\n\t\tsum+\u003di2;\n\t}\n\tsum%\u003d1000000007;\n\tprintf(\u0026quot;%I64d\u0026quot;,sum);\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eThis will work for both positive and negative 32-bit integers , so you might want to try it out.\u003c/p\u003e\u003cp\u003e(GNU GCC 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 30ms \u003cstrong\u003e#6\u003c/strong\u003e 46ms \u003cstrong\u003e#7\u003c/strong\u003e 140ms \u003cstrong\u003e#8\u003c/strong\u003e 295ms \u003c/p\u003e\u003cp\u003e(GNU GCC C11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 0ms \u003cstrong\u003e#6\u003c/strong\u003e 30ms \u003cstrong\u003e#7\u003c/strong\u003e 139ms \u003cstrong\u003e#8\u003c/strong\u003e 264ms \u003c/p\u003e\u003cp\u003e(GNU G++ 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 0ms \u003cstrong\u003e#6\u003c/strong\u003e 31ms \u003cstrong\u003e#7\u003c/strong\u003e 140ms \u003cstrong\u003e#8\u003c/strong\u003e 280ms \u003c/p\u003e\u003cp\u003e(GNU G++11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 0ms \u003cstrong\u003e#6\u003c/strong\u003e 30ms \u003cstrong\u003e#7\u003c/strong\u003e 139ms \u003cstrong\u003e#8\u003c/strong\u003e 280ms \u003c/p\u003e\u003cp\u003e(GNU G++14 6.2.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 31ms \u003cstrong\u003e#5\u003c/strong\u003e 140ms \u003cstrong\u003e#6\u003c/strong\u003e 296ms \u003cstrong\u003e#7\u003c/strong\u003e 1403ms \u003cstrong\u003e#8\u003c/strong\u003e 2761ms\u003c/p\u003e\u003cp\u003e(MVC++ 2010) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 30ms \u003cstrong\u003e#5\u003c/strong\u003e 109ms \u003cstrong\u003e#6\u003c/strong\u003e 218ms \u003cstrong\u003e#7\u003c/strong\u003e 1122ms \u003cstrong\u003e#8\u003c/strong\u003e 2261ms\u003c/p\u003e\u003cp\u003eSomething is definitely wrong with G++14,MVC++ 2010 complier with getchar() , so you want to avoid these compilers if you use this fastscan method :) (Try it for yourself , this is amazing!!)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e5.Fast and Furious custom by\u003c/strong\u003e \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Al.Cash\" title\u003d\"Grandmaster Al.Cash\"\u003eAl.Cash\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePlease refer to this blog: \u003ca href\u003d\"//codeforces.com/blog/entry/45835\"\u003ehttp://codeforces.com/blog/entry/45835\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAnd my main() here:\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eint main()\n\n{\n\n\tinput.reset(new InputFile(stdin, false));\n\n\toutput.reset(new OutputFile());\n\t\n\tint n,i,t;\n\n\tlong long sum\u003d0;\n\n\tread(n);\n\n\tfor(i\u003d1;i\u0026lt;\u003dn;i++)\n\n\t{\n\n\t\tread(t);\n\n\t\tsum+\u003dt;\n\n\t}\n\n\tprintf(\u0026quot;%I64d\u0026quot;,sum%1000000007);\n\n\treturn 0;\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eRequires C++11 and does not work on MVC++\u003c/p\u003e\u003cp\u003e(GNU G++11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 0ms \u003cstrong\u003e#6\u003c/strong\u003e 0ms \u003cstrong\u003e#7\u003c/strong\u003e 139ms \u003cstrong\u003e#8\u003c/strong\u003e 280ms \u003c/p\u003e\u003cp\u003e(GNU G++14 6.2.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 0ms \u003cstrong\u003e#6\u003c/strong\u003e 31ms \u003cstrong\u003e#7\u003c/strong\u003e 139ms \u003cstrong\u003e#8\u003c/strong\u003e 280ms\u003c/p\u003e\u003ch4\u003eJAVA (Tested by \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/bhishma\" title\u003d\"Specialist bhishma\"\u003ebhishma\u003c/a\u003e)\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e1.BufferedReader and String.spit\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport java.util.*;\nimport java.io.*;\npublic class testing {\n    \n    /*\n    BufferedReader and String.spit\n    */\n    public static void main(String[] args) throws IOException {\n        \n        BufferedReader br \u003d new BufferedReader(new InputStreamReader(System.in));\n        int mod \u003d (int)(1e9) + 7;\n        int N \u003d Integer.parseInt(br.readLine());\n        String tokens[] \u003d br.readLine().split(\u0026quot; \u0026quot;);\n        int sum \u003d 0;\n        for(String num : tokens)\n            sum \u003d (sum + Integer.parseInt(num) ) % mod;\n        \n        br.close();\n        System.out.println(sum);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(JAVA 8) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 77ms \u003cstrong\u003e#2\u003c/strong\u003e 77ms \u003cstrong\u003e#3\u003c/strong\u003e 93ms \u003cstrong\u003e#4\u003c/strong\u003e 140ms \u003cstrong\u003e#5\u003c/strong\u003e 296ms \u003cstrong\u003e#6\u003c/strong\u003e 452ms \u003cstrong\u003e#7\u003c/strong\u003e 1653ms \u003cstrong\u003e#8\u003c/strong\u003e 3119ms \u003c/p\u003e\u003cp\u003e\u003cstrong\u003e2.BufferedReader and StringTokenizer\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport java.util.*;\nimport java.io.*;\n\npublic class testing {\n\n    /*\n     * BufferedReader and StringTokenizer\n     */\n\n    /************************ SOLUTION STARTS HERE ************************/\n\n    private static void solve() {\n\n        int mod \u003d (int) (1e9) + 7;\n        int N \u003d nextInt();\n        int sum \u003d 0;\n        while (N-- \u0026gt; 0)\n            sum \u003d (sum + nextInt()) % mod;\n\n        println(sum);\n    }\n\n    /************************ SOLUTION ENDS HERE ************************/\n\n\n\n    /************************ TEMPLATE STARTS HERE **********************/\n\n    public static void main(String[] args) throws IOException {\n        reader \u003d new BufferedReader(new InputStreamReader(System.in));\n        writer \u003d new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), false);\n        st \u003d null;\n        solve();\n        reader.close();\n        writer.close();\n    }\n\n    static BufferedReader  reader;\n    static PrintWriter     writer;\n    static StringTokenizer st;\n\n    static String next() {\n        while (st \u003d\u003d null || !st.hasMoreTokens()) {\n            try {\n                String line \u003d reader.readLine();\n                if (line \u003d\u003d null) {\n                    return null;\n                }\n                st \u003d new StringTokenizer(line);\n            } catch (Exception e) {\n                throw new RuntimeException();\n            }\n        }\n        return st.nextToken();\n    }\n\n    static String nextLine() {\n        String s \u003d null;\n        try {\n            s \u003d reader.readLine();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return s;\n    }\n\n    static int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    static long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    static double nextDouble() {\n        return Double.parseDouble(next());\n    }\n\n    static char nextChar() {\n        return next().charAt(0);\n    }\n\n    static int[] nextIntArray(int n) {\n        int[] a \u003d new int[n];\n        int i \u003d 0;\n        while (i \u0026lt; n) {\n            a[i++] \u003d nextInt();\n        }\n        return a;\n    }\n\n    static long[] nextLongArray(int n) {\n        long[] a \u003d new long[n];\n        int i \u003d 0;\n        while (i \u0026lt; n) {\n            a[i++] \u003d nextLong();\n        }\n        return a;\n    }\n\n    static int[] nextIntArrayOneBased(int n) {\n        int[] a \u003d new int[n + 1];\n        int i \u003d 1;\n        while (i \u0026lt;\u003d n) {\n            a[i++] \u003d nextInt();\n        }\n        return a;\n    }\n\n    static long[] nextLongArrayOneBased(int n) {\n        long[] a \u003d new long[n + 1];\n        int i \u003d 1;\n        while (i \u0026lt;\u003d n) {\n            a[i++] \u003d nextLong();\n        }\n        return a;\n    }\n\n    static void print(Object o) {\n        writer.print(o);\n    }\n\n    static void println(Object o) {\n        writer.println(o);\n    }\n\n    /************************ TEMPLATE ENDS HERE ************************/\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(JAVA 8) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 93ms \u003cstrong\u003e#2\u003c/strong\u003e 109ms \u003cstrong\u003e#3\u003c/strong\u003e 78ms \u003cstrong\u003e#4\u003c/strong\u003e 108ms \u003cstrong\u003e#5\u003c/strong\u003e 155ms \u003cstrong\u003e#6\u003c/strong\u003e 264ms \u003cstrong\u003e#7\u003c/strong\u003e 873ms \u003cstrong\u003e#8\u003c/strong\u003e 1606ms \u003c/p\u003e\u003cp\u003e\u003cstrong\u003e3.Custom InputReader\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport java.util.*;\nimport java.io.*;\n/*\n * Custom InputReader\n */\npublic class testing {\n    public static void main(String[] args) throws IOException {\n        InputReader in \u003d new InputReader();\n        PrintWriter out \u003d new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        solve(in, out);\n        out.close();\n    }\n\n    private static void solve(InputReader s1, PrintWriter out) {\n        int mod \u003d (int) (1e9) + 7;\n        int N \u003d s1.nextInt();\n        int sum \u003d 0;\n        while (N-- \u0026gt; 0)\n            sum \u003d (sum + s1.nextInt()) % mod;\n\n        out.println(sum);\n    }\n\n    static class InputReader {\n        private byte[] buf \u003d new byte[16384];\n        private int    curChar;\n        private int    numChars;\n\n        public int read() {\n            if (numChars \u003d\u003d -1)\n                throw new InputMismatchException();\n            if (curChar \u0026gt;\u003d numChars) {\n                curChar \u003d 0;\n                try {\n                    numChars \u003d System.in.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars \u0026lt;\u003d 0)\n                    return -1;\n            }\n            return buf[curChar++];\n        }\n\n        public String nextLine() {\n            int c \u003d read();\n            while (isSpaceChar(c))\n                c \u003d read();\n            StringBuilder res \u003d new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c \u003d read();\n            } while (!isEndOfLine(c));\n            return res.toString();\n        }\n\n        public String nextString() {\n            int c \u003d read();\n            while (isSpaceChar(c))\n                c \u003d read();\n            StringBuilder res \u003d new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c \u003d read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public long nextLong() {\n            int c \u003d read();\n            while (isSpaceChar(c))\n                c \u003d read();\n            int sgn \u003d 1;\n            if (c \u003d\u003d \u0027-\u0027) {\n                sgn \u003d -1;\n                c \u003d read();\n            }\n            long res \u003d 0;\n            do {\n                if (c \u0026lt; \u00270\u0027 || c \u0026gt; \u00279\u0027)\n                    throw new InputMismatchException();\n                res *\u003d 10;\n                res +\u003d c - \u00270\u0027;\n                c \u003d read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public int nextInt() {\n            int c \u003d read();\n            while (isSpaceChar(c))\n                c \u003d read();\n            int sgn \u003d 1;\n            if (c \u003d\u003d \u0027-\u0027) {\n                sgn \u003d -1;\n                c \u003d read();\n            }\n            int res \u003d 0;\n            do {\n                if (c \u0026lt; \u00270\u0027 || c \u0026gt; \u00279\u0027)\n                    throw new InputMismatchException();\n                res *\u003d 10;\n                res +\u003d c - \u00270\u0027;\n                c \u003d read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public int[] nextIntArray(int n) {\n            int[] arr \u003d new int[n];\n            for (int i \u003d 0; i \u0026lt; n; i++) {\n                arr[i] \u003d nextInt();\n            }\n            return arr;\n        }\n\n        public long[] nextLongArray(int n) {\n            long[] arr \u003d new long[n];\n            for (int i \u003d 0; i \u0026lt; n; i++) {\n                arr[i] \u003d nextLong();\n            }\n            return arr;\n        }\n\n        private boolean isSpaceChar(int c) {\n            return c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d \u0027\\t\u0027 || c \u003d\u003d -1;\n        }\n\n        private boolean isEndOfLine(int c) {\n            return c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d -1;\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(JAVA 8) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 93ms \u003cstrong\u003e#2\u003c/strong\u003e 93ms \u003cstrong\u003e#3\u003c/strong\u003e 78ms \u003cstrong\u003e#4\u003c/strong\u003e 108ms \u003cstrong\u003e#5\u003c/strong\u003e 93ms \u003cstrong\u003e#6\u003c/strong\u003e 139ms \u003cstrong\u003e#7\u003c/strong\u003e 280ms \u003cstrong\u003e#8\u003c/strong\u003e 452ms \u003c/p\u003e\u003ch3\u003eOUTPUT\u003c/h3\u003e\u003ch4\u003eC/C++\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e1.Standard printf\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;stdio.h\u0026gt;\nint main()\n{\n\tint n,i;\n\tscanf(\u0026quot;%d\u0026quot;,\u0026amp;n);\n\tfor(i\u003d1;i\u0026lt;\u003dn;i++)\n\t\tprintf(\u0026quot;%d\\n\u0026quot;,i);\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(GNU GCC 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 31ms \u003cstrong\u003e#5\u003c/strong\u003e 202ms \u003cstrong\u003e#6\u003c/strong\u003e 1138ms \u003cstrong\u003e#7\u003c/strong\u003e 2292ms \u003c/p\u003e\u003cp\u003e(GNU GCC C11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 46ms \u003cstrong\u003e#4\u003c/strong\u003e 421ms \u003cstrong\u003e#5\u003c/strong\u003e 4367ms \u003cstrong\u003e#6\u003c/strong\u003e \u0026gt;15000ms(TLE) \u003cstrong\u003e#7\u003c/strong\u003e \u0026gt;\u003d15000ms(TLE) \u003c/p\u003e\u003cp\u003e(GNU G++ 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 31ms \u003cstrong\u003e#5\u003c/strong\u003e 217ms \u003cstrong\u003e#6\u003c/strong\u003e 1169ms \u003cstrong\u003e#7\u003c/strong\u003e 2324ms \u003c/p\u003e\u003cp\u003e(GNU G++11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 31ms \u003cstrong\u003e#5\u003c/strong\u003e 218ms \u003cstrong\u003e#6\u003c/strong\u003e 1169ms \u003cstrong\u003e#7\u003c/strong\u003e 2308ms \u003c/p\u003e\u003cp\u003e(GNU G++14 6.2.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 202ms \u003cstrong\u003e#6\u003c/strong\u003e 1154ms \u003cstrong\u003e#7\u003c/strong\u003e 2262ms\u003c/p\u003e\u003cp\u003e(MVC++ 2010) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 31ms \u003cstrong\u003e#5\u003c/strong\u003e 233ms \u003cstrong\u003e#6\u003c/strong\u003e 1232ms \u003cstrong\u003e#7\u003c/strong\u003e 2386ms \u003c/p\u003e\u003cp\u003eAVOID GCC C11 if possible!!\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e2.Standard cout\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;iostream\u0026gt;\nusing namespace std;\nint main()\n{\n\tint n,i;\n\tcin\u0026gt;\u0026gt;n;\n\tfor(i\u003d1;i\u0026lt;\u003dn;i++)\n\t\tcout\u0026lt;\u0026lt;i\u0026lt;\u0026lt;\u0026quot;\\n\u0026quot;;\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(GNU G++ 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 62ms \u003cstrong\u003e#5\u003c/strong\u003e 514ms \u003cstrong\u003e#6\u003c/strong\u003e 2464ms \u003cstrong\u003e#7\u003c/strong\u003e 4944ms \u003c/p\u003e\u003cp\u003e(GNU G++11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 46ms \u003cstrong\u003e#5\u003c/strong\u003e 514ms \u003cstrong\u003e#6\u003c/strong\u003e 2433ms \u003cstrong\u003e#7\u003c/strong\u003e 4913ms \u003c/p\u003e\u003cp\u003e(GNU G++14 6.2.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 30ms \u003cstrong\u003e#5\u003c/strong\u003e 187ms \u003cstrong\u003e#6\u003c/strong\u003e 888ms \u003cstrong\u003e#7\u003c/strong\u003e 1684ms\u003c/p\u003e\u003cp\u003e(MVC++ 2010) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 77ms \u003cstrong\u003e#5\u003c/strong\u003e 577ms \u003cstrong\u003e#6\u003c/strong\u003e 2916ms \u003cstrong\u003e#7\u003c/strong\u003e 5834ms \u003c/p\u003e\u003cp\u003eLOOK AT THIS!! FOR INTEGERS USING G++14 COMPLIER IS FASTER THAN OTHERS , EVEN PRINTF ITSELF?\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e3.cout with ios_base::sync_with_stdio(false);\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;iostream\u0026gt;\nusing namespace std;\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tint n,i;\n\tcin\u0026gt;\u0026gt;n;\n\tfor(i\u003d1;i\u0026lt;\u003dn;i++)\n\t\tcout\u0026lt;\u0026lt;i\u0026lt;\u0026lt;\u0026quot;\\n\u0026quot;;\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(GNU G++ 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 46ms \u003cstrong\u003e#5\u003c/strong\u003e 452ms \u003cstrong\u003e#6\u003c/strong\u003e 2293ms \u003cstrong\u003e#7\u003c/strong\u003e 4742ms \u003c/p\u003e\u003cp\u003e(GNU G++11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 46ms \u003cstrong\u003e#5\u003c/strong\u003e 468ms \u003cstrong\u003e#6\u003c/strong\u003e 2292ms \u003cstrong\u003e#7\u003c/strong\u003e 4616ms \u003c/p\u003e\u003cp\u003e(GNU G++14 6.2.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 30ms \u003cstrong\u003e#5\u003c/strong\u003e 139ms \u003cstrong\u003e#6\u003c/strong\u003e 717ms \u003cstrong\u003e#7\u003c/strong\u003e 1403ms\u003c/p\u003e\u003cp\u003e(MVC++ 2010) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 62ms \u003cstrong\u003e#5\u003c/strong\u003e 697ms \u003cstrong\u003e#6\u003c/strong\u003e 2932ms \u003cstrong\u003e#7\u003c/strong\u003e 5943ms \u003c/p\u003e\u003cp\u003eLOOK AT THIS!! FOR INTEGERS USING G++14 COMPLIER IS FASTER THAN OTHERS , EVEN PRINTF ITSELF? Also MVC++ 2010 does not seems to profit compare to standard cout\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e4.Using putchar()\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;stdio.h\u0026gt;\nvoid pint(int n)\n{\n\tif(n\u003d\u003d0)\n\t\treturn;\n\tpint(n/10);\n\tputchar(n%10+\u00270\u0027);\n}\nint main()\n{\n\tint n,i;\n\tscanf(\u0026quot;%d\u0026quot;,\u0026amp;n);\n\tfor(i\u003d1;i\u0026lt;\u003dn;i++)\n\t\tpint(i),putchar(\u0027\\n\u0027);\n\treturn 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eMy code only work for positive integers!!\u003c/p\u003e\u003cp\u003e(GNU GCC 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 62ms \u003cstrong\u003e#6\u003c/strong\u003e 327ms \u003cstrong\u003e#7\u003c/strong\u003e 686ms \u003c/p\u003e\u003cp\u003e(GNU GCC C11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 31ms \u003cstrong\u003e#5\u003c/strong\u003e 61ms \u003cstrong\u003e#6\u003c/strong\u003e 342ms \u003cstrong\u003e#7\u003c/strong\u003e 655ms \u003c/p\u003e\u003cp\u003e(GNU G++ 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 62ms \u003cstrong\u003e#6\u003c/strong\u003e 373ms \u003cstrong\u003e#7\u003c/strong\u003e 686ms \u003c/p\u003e\u003cp\u003e(GNU G++11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 46ms \u003cstrong\u003e#6\u003c/strong\u003e 327ms \u003cstrong\u003e#7\u003c/strong\u003e 670ms \u003c/p\u003e\u003cp\u003e(GNU G++14 6.2.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 46ms \u003cstrong\u003e#5\u003c/strong\u003e 373ms \u003cstrong\u003e#6\u003c/strong\u003e 2058ms \u003cstrong\u003e#7\u003c/strong\u003e 4102ms \u003c/p\u003e\u003cp\u003e(MVC++ 2010) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 30ms \u003cstrong\u003e#5\u003c/strong\u003e 296ms \u003cstrong\u003e#6\u003c/strong\u003e 1715ms \u003cstrong\u003e#7\u003c/strong\u003e 3213ms \u003c/p\u003e\u003cp\u003eSo G++14 and MVC++ 2010 also have problem with putchar too :(. Anyway , I encouraged you to modify my code to be able to use with negative integer as well :)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e5.Fast and Furious custom by\u003c/strong\u003e \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Al.Cash\" title\u003d\"Grandmaster Al.Cash\"\u003eAl.Cash\u003c/a\u003e\u003c/p\u003e\u003cp\u003ePlease refer to this blog: \u003ca href\u003d\"//codeforces.com/blog/entry/45835\"\u003ehttp://codeforces.com/blog/entry/45835\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAnd my main() here:\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eint main()\n\n{\n\n\tinput.reset(new InputFile(stdin, false));\n\n\toutput.reset(new OutputFile());\n\n\tint n,i,t;\n\n\tlong long sum\u003d0;\n\n\tread(n);\n\n\tfor(i\u003d1;i\u0026lt;\u003dn;i++)\n\n\t\twriteln(i);\n\n\treturn 0;\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eRequires C++11 and does not work on MVC++\u003c/p\u003e\u003cp\u003e(GNU G++11 5.1.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 62ms \u003cstrong\u003e#6\u003c/strong\u003e 296ms \u003cstrong\u003e#7\u003c/strong\u003e 577ms\u003c/p\u003e\u003cp\u003e(GNU G++14 6.2.0) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 0ms \u003cstrong\u003e#2\u003c/strong\u003e 0ms \u003cstrong\u003e#3\u003c/strong\u003e 0ms \u003cstrong\u003e#4\u003c/strong\u003e 0ms \u003cstrong\u003e#5\u003c/strong\u003e 61ms \u003cstrong\u003e#6\u003c/strong\u003e 296ms \u003cstrong\u003e#7\u003c/strong\u003e 592ms\u003c/p\u003e\u003ch4\u003eJAVA (Tested by \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/bhishma\" title\u003d\"Specialist bhishma\"\u003ebhishma\u003c/a\u003e)\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e1.System.out.print()\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport java.util.*;\npublic class Main {\n    /*\n    System.out.print()\n    */\n    public static void main(String args[]) {\n        Scanner s1 \u003d new Scanner(System.in);\n        int N \u003d s1.nextInt();\n        s1.close();\n        for(int i\u003d1;i\u0026lt;\u003dN;i++)\n            System.out.println(i);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(JAVA 8) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 109ms \u003cstrong\u003e#2\u003c/strong\u003e 139ms \u003cstrong\u003e#3\u003c/strong\u003e 186ms \u003cstrong\u003e#4\u003c/strong\u003e 592ms \u003cstrong\u003e#5\u003c/strong\u003e 4945ms \u003cstrong\u003e#6\u003c/strong\u003e \u0026gt;15000ms(TLE) \u003cstrong\u003e#7\u003c/strong\u003e \u0026gt;15000ms(TLE) \u003c/p\u003e\u003cp\u003e\u003cstrong\u003e2.PrintWriter\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport java.io.PrintWriter;\nimport java.util.Scanner;\npublic class testing {\n    public static void main(String args[]) {\n        PrintWriter out \u003d new PrintWriter(System.out);\n        Scanner s1 \u003d new Scanner(System.in);\n        \n        int N \u003d s1.nextInt();\n        for(int i\u003d1;i\u0026lt;\u003dN;i++)\n            out.println(i);\n        \n        out.close();\n        s1.close();\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(JAVA 8) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 93ms \u003cstrong\u003e#2\u003c/strong\u003e 124ms \u003cstrong\u003e#3\u003c/strong\u003e 139ms \u003cstrong\u003e#4\u003c/strong\u003e 140ms \u003cstrong\u003e#5\u003c/strong\u003e 296ms \u003cstrong\u003e#6\u003c/strong\u003e 904ms \u003cstrong\u003e#7\u003c/strong\u003e 1590ms \u003c/p\u003e\u003cp\u003e\u003cstrong\u003e3.System.out.print() with StringBuilder\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport java.util.*;\npublic class Main {\n    /*\n    System.out.print with StringBuilder\n    */\n    public static void main(String args[]) {\n        StringBuilder sb \u003d new StringBuilder();\n        Scanner s1 \u003d new Scanner(System.in);\n        int N \u003d s1.nextInt();\n        s1.close();\n        for(int i\u003d1;i\u0026lt;\u003dN;i++)\n            sb.append(i + \u0026quot;\\n\u0026quot;);\n        \n        System.out.print(sb);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(JAVA 8) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 108ms \u003cstrong\u003e#2\u003c/strong\u003e 93ms \u003cstrong\u003e#3\u003c/strong\u003e 109ms \u003cstrong\u003e#4\u003c/strong\u003e 124ms \u003cstrong\u003e#5\u003c/strong\u003e 249ms \u003cstrong\u003e#6\u003c/strong\u003e 810ms \u003cstrong\u003e#7\u003c/strong\u003e 1497ms \u003c/p\u003e\u003cp\u003e\u003cstrong\u003e4.System.out.print() with StringBuilder but clears the StringBuilder buffer after certain writes\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport java.util.*;\npublic class testing {\n    /*\n    System.out.print with StringBuilder but clears the StringBuilder buffer\n    after certain writes (bufSize)\n    */\n    public static void main(String args[]) {\n        int bufSize \u003d (int)(1e5);\n        StringBuilder sb \u003d new StringBuilder();\n        Scanner s1 \u003d new Scanner(System.in);\n        int N \u003d s1.nextInt();\n        s1.close();\n        for(int i\u003d1;i\u0026lt;\u003dN;i++) {\n            sb.append(i + \u0026quot;\\n\u0026quot;);\n            if(sb.length() \u0026gt;\u003d bufSize) {\n                System.out.print(sb);\n                sb \u003d new StringBuilder();\n            }\n        }\n        \n        if(sb.length() \u0026gt; 0)\n            System.out.print(sb);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(JAVA 8) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 124ms \u003cstrong\u003e#2\u003c/strong\u003e 124ms \u003cstrong\u003e#3\u003c/strong\u003e 124ms \u003cstrong\u003e#4\u003c/strong\u003e 124ms \u003cstrong\u003e#5\u003c/strong\u003e 264ms \u003cstrong\u003e#6\u003c/strong\u003e 763ms \u003cstrong\u003e#7\u003c/strong\u003e 1418ms \u003c/p\u003e\u003cp\u003e\u003cstrong\u003e5.PrintWriter+StringBuilder\u003c/strong\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport java.io.*;\n\npublic class testing {\n    public static void main(String args[]) throws IOException {\n        PrintWriter out \u003d new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        BufferedReader br \u003d new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder sb \u003d new StringBuilder();\n        int N \u003d Integer.parseInt(br.readLine());\n        for (int i \u003d 1; i \u0026lt;\u003d N; i++)\n            sb.append(i + \u0026quot;\\n\u0026quot;);\n        \n        out.print(sb);\n        out.close();\n        br.close();\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003e(JAVA 8) Time used on tests : \u003cstrong\u003e#1\u003c/strong\u003e 93ms \u003cstrong\u003e#2\u003c/strong\u003e 78ms \u003cstrong\u003e#3\u003c/strong\u003e 108ms \u003cstrong\u003e#4\u003c/strong\u003e 108ms \u003cstrong\u003e#5\u003c/strong\u003e 233ms \u003cstrong\u003e#6\u003c/strong\u003e 779ms \u003cstrong\u003e#7\u003c/strong\u003e 1482ms\u003c/p\u003e\u003cp\u003eUPD1: Added putchar()/getchar() method for C/C++\u003c/p\u003e\u003cp\u003eUPD2: Added tests for MVC++ 2010 compiler\u003c/p\u003e\u003cp\u003eUPD3: Added JAVA tests , thanks to \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/bhishma\" title\u003d\"Specialist bhishma\"\u003ebhishma\u003c/a\u003e\u003c/p\u003e\u003cp\u003eUPD4: Added fast and furious C/C++ tests , thanks to \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Al.Cash\" title\u003d\"Grandmaster Al.Cash\"\u003eAl.Cash\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["big inputs","fast i/o","big output"]}}