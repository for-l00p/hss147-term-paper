{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1472327802,"rating":0,"authorHandle":"Rooped","modificationTimeSeconds":1472477071,"id":46801,"title":"\u003cp\u003eSSN CPC Contest — 2 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eA. Voting for Photos\u003c/h2\u003e\u003cp\u003eKeep track of number of likes for each photo using a frequency table (array cnt, where cnt[i] \u003d number of likes for the ith photo). After a photo gets a like, check if its count is greater than the current maximum count. Update current maximum count and print the index that caused the last update to the maxmimum count.\u003c/p\u003e\u003ch5\u003eSolution : \u003ca href\u003d\"//codeforces.com/contest/637/submission/20199644\"\u003eCode\u003c/a\u003e\u003c/h5\u003e\u003ch5\u003eComplexity : O(N)\u003c/h5\u003e\u003ch2\u003eB. Worms\u003c/h2\u003e\u003cp\u003eBuild prefix sum array on a[] such that pre[i] stores the ending worm number in pile i. For each query, binary search for the query value (q[i]) and print the index accordingly. (lower_bound() returns a pointer/iterator, so subtract the base position of pre[] accordingly).\u003c/p\u003e\u003ch4\u003eSolution: \u003ca href\u003d\"//codeforces.com/contest/474/submission/20197391\"\u003eCode\u003c/a\u003e\u003c/h4\u003e\u003ch4\u003eComplexity: O(N * Log(N))\u003c/h4\u003e\u003ch2\u003eC. Funky Numbers\u003c/h2\u003e\u003cp\u003eGenerate all triangular numbers \u0026lt;\u003d 10^9 . There are only 44720 such numbers. Store them in a vector. Iterate the vector of generated triangular numbers and for each number X, check if n-X also exists in the vector. [ To check if an element exists, you can use a set instead of vector and set supports find(value) in O(LogN)]\u003c/p\u003e\u003ch4\u003eSolution: \u003ca href\u003d\"//codeforces.com/contest/192/submission/20199970\"\u003eCode1\u003c/a\u003e or \u003ca href\u003d\"//codeforces.com/contest/192/submission/20200024\"\u003eCode2\u003c/a\u003e\u003c/h4\u003e\u003ch4\u003eComplexity: O(Sqrt(N) + Sqrt(N) *log(N) )\u003c/h4\u003e\u003ch2\u003eD. Burning Midnight Oil\u003c/h2\u003e\u003cp\u003eWe can binary search on the answer(v) as the sum of v + v/k + v/(k^2) + v/(k^3) .... is a increasing fucntion (monotonic). V can be within [1,10^9] , so l \u003d1 , r \u003d 1e9. Check if mid can satisfy the question ,(ie) if mid + (mid/k) + (mid/k^2) + ... (0) is equal to n. If yes binary search on the left part , else on the right part. Display l which is the final answer.\u003c/p\u003e\u003ch4\u003eSolution: \u003ca href\u003d\"//codeforces.com/contest/165/submission/20200183\"\u003eCode\u003c/a\u003e\u003c/h4\u003e\u003ch4\u003eComplexity: O(Log(N) * Log(K))\u003c/h4\u003e\u003ch2\u003eE. Multiplication Table\u003c/h2\u003e\u003cp\u003eSince N,M are big (10^5), we cannot store the matrix in memory. So, We binary search on the the answer (k). We assume the answer(k th smallest integer) is some X and check if X has atleast k-1 elements which are strictly smaller than it. In each row i , the number of elements strictly lesser than X are min(m , (X-1) / i) as (X-1)/i is the number of multiples of i lesser than X, and the number of columns (multiples) is m . If for X , the number of elements strictly lesser than it in the whole grid is more than or equal to K , then binary search in the left part [l,mid-1] , else binary search in the right part[mid+1,r]. Print l -1 at the end.\u003c/p\u003e\u003ch4\u003eSolution: \u003ca href\u003d\"//codeforces.com/contest/448/submission/20200457\"\u003eCode\u003c/a\u003e\u003c/h4\u003e\u003ch4\u003eComplexity: O(N * Log (N*M))\u003c/h4\u003e\u003ch2\u003eF. Enduring Exodus\u003c/h2\u003e\u003cp\u003eWe binary search on the minimum maximum distance possible from John\u0027s room to any cow\u0027s room. We observe that K cows and John will be staying in continous free rooms possible to reduce the maximum disance. Solve it assuming M is the minimum such distance. Iterator from i \u003d 1 .. N and fixing john\u0027s position as i (if i th room is free) the continuous segment that they all will be occupying is [ i — M , i +M] , but check if i — M \u0026gt;\u003d 1 and i + M \u0026lt;\u003d N . check if number of free rooms in [i-M, i+M] is atleast K+1 for the K cows and him. If this current M satisfies, binary search on the left part [l,mid-1] , else on the right part [mid+1, r].\u003c/p\u003e\u003ch4\u003eSolution: \u003ca href\u003d\"//codeforces.com/contest/655/submission/20200890\"\u003eCode\u003c/a\u003e\u003c/h4\u003e\u003ch4\u003eComplexity: O(N * Log(N))\u003c/h4\u003e\u003c/div\u003e","tags":["binary seach"]}}