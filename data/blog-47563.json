{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1475735128,"rating":47,"authorHandle":"pabloskimg","modificationTimeSeconds":1475850573,"id":47563,"title":"\u003cp\u003eNeed Help â€” problem: Olympic Games, Point/Line Duality, ConvexHull, Corner Cases, Tricky Implementation\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi everyone!\u003c/p\u003e\u003cp\u003eI\u0027m struggling way too much trying to get accepted in a problem called \u0026quot;Olympic Games\u0026quot;, whose statement can be found here: \u003ca href\u003d\"https://dl.dropboxusercontent.com/u/28504121/ProblemsetRPC11/J.pdf\"\u003ehttps://dl.dropboxusercontent.com/u/28504121/ProblemsetRPC11/J.pdf\u003c/a\u003e. This was the problem J of a latin american regional simulation contest. Later on I realised this problem was actually borrowed from a brazilian contest, so you can also find the same problem in URI Online Judge at this link: \u003ca href\u003d\"https://www.urionlinejudge.com.br/judge/en/problems/view/2244\"\u003ehttps://www.urionlinejudge.com.br/judge/en/problems/view/2244\u003c/a\u003e. I recommend the latter link in case you want to submit solutions of your own.\u003c/p\u003e\u003cp\u003eFeel free to read the problem statement. Otherwise, here is a brief summary (although it\u0027s subject to my own interpretation, which might be wrong):\u003c/p\u003e\u003ch4\u003eSummary:\u003c/h4\u003e\u003cp\u003eThere are 1 \u0026lt;\u003d N \u0026lt;\u003d 10^5 athletes. Each athlete has skill and fatigue. Skills and fatigues are linear functions (intercept and slope) of time. In other words, for each athlete i:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eskill_i (t)  \u003d  skm_i * t + skn_i\nFatigue_i (t) \u003d ftm_i * t + ftn_i\n\nwhere  -10^6 \u0026lt;\u003d skm_i, skn_i, ftm_i, ftn_i \u0026lt;\u003d 10^6\n        skm_i \u0026amp; ftm_i  !\u003d  0   (slopes are not 0)\n        t \u0026gt;\u003d 0    (there is no negative time)\n        All the slopes and intercepts are intergers\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eA golden athlete is someone who at a given period of time happens to be the guy with maximum skill and minimum fatigue. You are asked to return the total number of golden athletes.\u003c/p\u003e\u003ch4\u003eAmbiguities:\u003c/h4\u003e \u003cul\u003e   \u003cli\u003eRight away I noticed a certain ambiguity in the definition of a golden athlete. What happens if there are more than 1 athlete with maximum skill, or with minimum fatigue, or both at the same time? The golden athlete must be the only winner in both? Can there be a tie in one attribute and a unique winner in the other attribute? Can there be ties in both attributes and therefore there be 2 or more golden athletes at the same time?\u003c/li\u003e   \u003cli\u003eAnother ambiguity: Is it possible to be a golden athlete for a singleton of time (a single instant), or does it have to be an interval with a non-zero duration?\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003eMy current approach:\u003c/h4\u003e\u003cp\u003eNow I will briefly explain how I\u0027m trying to solve the problem. First of all, since we are interested in the maximum of the skills, we want the upper envelope of the skill lines. Likewise, we also want the lower envelope of the fatigue lines. Therefore, by Point-Line Duality, we want the lower-hull of the skill dual points and the upper-hull of the fatigue dual points. So we do that, and then basically we iterate over the lines of the skill upper-envelope, perform intersections between consecutive lines and generate a sequence of skill time intervals, and for each interval we remember the id\u0027s of the athletes that are dominant in that interval. We do the same for the fatigue lower-envelope. Finally we perform a parallel linear sweep of both sequences of intervals using 2 pointers, and for each pair \u003ccode\u003e(skill-interval, fatigue interval)\u003c/code\u003e we look for a unique athlete who is the best in both intervals (for example, we can have a set of ids in each interval and perform a set intersection and make sure we get only one). We count all these golden athletes (we make sure we don\u0027t count the same athlete more than once) and return the total count.\u003c/p\u003e\u003cp\u003eYou can check my current implementation here (I hope the code and commentary are clear enough): \u003ca href\u003d\"https://github.com/PabloMessina/Competitive-Programming-Material/blob/master/Solved%20problems/Red%20de%20Programaci%C3%B3n%20Competitiva/2016-Competencia-11/J_OlympicGames.cpp\"\u003ehttps://github.com/PabloMessina/Competitive-Programming-Material/blob/master/Solved%20problems/Red%20de%20Programaci%C3%B3n%20Competitiva/2016-Competencia-11/J_OlympicGames.cpp\u003c/a\u003e\u003c/p\u003e\u003cp\u003eMy current attempt makes some assumptions, though:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eI allow draws within skill intervals and fatigue intervals, but the intersection should have size 1 (a unique golden athlete).\u003c/li\u003e   \u003cli\u003eI allow golden athletes for singletons of time (say, if an athlete has the best skill only in a single instant where multiple lines intersect one another, but he has the lowest fatigue all the time, then he would be golden for me in that single instant).\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eCurrently I\u0027m getting wrong answer with 20% of the test cases correct in URI Online Judge.\u003c/p\u003e\u003ch4\u003eQuestions:\u003c/h4\u003e \u003cul\u003e   \u003cli\u003eWhat is the right interpretation of the problem statement? (refer to the ambiguities above)\u003c/li\u003e   \u003cli\u003eWhat do you think about my current assumptions and implementation? Any tips on how to make the implementation less tricky?\u003c/li\u003e   \u003cli\u003eWould you mind sharing some tricky corner cases to test my code?\u003c/li\u003e   \u003cli\u003eIdeally: if you were able to get accepted, would you mind explaining your solution :D?\u003c/li\u003e \u003c/ul\u003e\u003ch4\u003eReferences:\u003c/h4\u003e\u003cp\u003eSome references on Point-Line Duality:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"http://www.cs.uu.nl/docs/vakken/ga/slides8.pdf\"\u003ehttp://www.cs.uu.nl/docs/vakken/ga/slides8.pdf\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"http://citeseerx.ist.psu.edu/viewdoc/download?doi\u003d10.1.1.139.1459\u0026amp;rep\u003drep1\u0026amp;type\u003dpdf\"\u003ehttp://citeseerx.ist.psu.edu/viewdoc/download?doi\u003d10.1.1.139.1459\u0026amp;rep\u003drep1\u0026amp;type\u003dpdf\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"http://students.cec.wustl.edu/~tdeck/duality/\"\u003ehttp://students.cec.wustl.edu/~tdeck/duality/\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThank you guys in advance.\u003c/p\u003e\u003c/div\u003e","tags":["convex hull","line point duality","corner case","implementation"]}}