{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1431023831,"rating":31,"authorHandle":"gridnevvvit","modificationTimeSeconds":1431090483,"id":17773,"title":"\u003cp\u003eEditorial Codeforces Round #302\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/544/problem/A\" title\u003d\"Codeforces Round 302 (Div. 2)\"\u003e544A - Set of Strings\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eIn that task you need to implement what was written in the statements. Let\u0027s iterate over all characters of string and keep array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eused\u003c/i\u003e\u003c/span\u003e. Also let\u0027s keep current string. If current character was not used previously, then let\u0027s put current string to the answer and after that we need to clear current string. Otherwise, let\u0027s append current character to the current string. If array, that contain answer will have more then \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e elements, we will concatenate few last strings.\u003c/p\u003e\u003cp\u003eThe jury solution: \u003ca href\u003d\"/contest/544/submission/11035685\" title\u003d\"Submission 11035685 by gridnevvvit\"\u003e11035685\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/544/problem/B\" title\u003d\"Codeforces Round 302 (Div. 2)\"\u003e544B - Sea and Islands\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eIt\u0027s clear to understand, that optimal answer will consists of simple cells, for which following condition fullfills: the sum of indices of row and column is even. We will try to put \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e islands in such way, and if it\u0027s impossible, we will report that answer is NO. Try to prove that this solution is optimal.\u003c/p\u003e\u003cp\u003eThe jury solution: \u003ca href\u003d\"/contest/544/submission/11035691\" title\u003d\"Submission 11035691 by gridnevvvit\"\u003e11035691\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/543/problem/A\" title\u003d\"Codeforces Round 302 (Div. 1)\"\u003e543A - Writing Code\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eLet\u0027s create the solution, which will work too slow, but after that we will improve it. Let\u0027s calculate the following dynamic programming \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e — answer to the problem, if we already used exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e programmers, writed exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e lines of code, and there are exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e bugs. How we can do transitions in such dp? We can suppose that we \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th programmer will write \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e lines of code, then we should add to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e - \u003ci\u003er\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e - \u003ci\u003era\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]]\u003c/span\u003e\u003c/p\u003e\u003cp\u003eBut let\u0027s look at transitions from the other side. It\u0027s clear, that there are exactly 2 cases. The first case, we will give any task for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th programmer. So, we should add to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e - 1][\u003ci\u003ej\u003c/i\u003e][\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e. The second case, is to give at least one task to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th programmer. So, this value will be included in that state: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e - 1][\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]]\u003c/span\u003e. In that solution we use same idea, which is used to calculate binomial coefficients using Pascal\u0027s triangle. So overall solution will have complexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003eThe jury solution: \u003ca href\u003d\"/contest/543/submission/11035704\" title\u003d\"Submission 11035704 by gridnevvvit\"\u003e11035704\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/543/problem/B\" title\u003d\"Codeforces Round 302 (Div. 1)\"\u003e543B - Destroying Roads\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eLet\u0027s solve easiest task. We have only one pair of vertices, and we need to calculate smallest amout of edges, such that there is a path from first of vertex to the second. It\u0027s clear, that the answer for that problem equals to shortest distance from first vertex to the second.\u003c/p\u003e\u003cp\u003eLet\u0027s come back to initial task. Let\u0027s \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e — shortest distance between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. You can calculate such matrix using bfs from each vertex. \u003c/p\u003e\u003cp\u003eNow we need to handle two cases:\u003c/p\u003e \u003col\u003e   \u003cli\u003ePaths doesn\u0027t intersects. In such way we can update the answer with the following value: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e - \u003ci\u003ed\u003c/i\u003e[\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e][\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e] - \u003ci\u003ed\u003c/i\u003e[\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e][\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e]\u003c/span\u003e (just in case wheh conditions on the paths lengths fullfills).\u003c/li\u003e   \u003cli\u003eOtherwise paths are intersecting, and the correct answer looks like a letter \u0027H\u0027. More formally, at the start two paths will consists wiht different edges, after that paths will consists with same edges, and will finish with different edges. Let\u0027s iterate over pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e — the start and the finish vertices of the same part of paths. Then we can update answer with the following value: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e - \u003ci\u003ed\u003c/i\u003e[\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e][\u003ci\u003ei\u003c/i\u003e] - \u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] - \u003ci\u003ed\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e] - \u003ci\u003ed\u003c/i\u003e[\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e][\u003ci\u003ei\u003c/i\u003e] - \u003ci\u003ed\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e][\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e]\u003c/span\u003e (just in case wheh conditions on the paths lengths fullfills).\u003c/li\u003e \u003c/ol\u003e\u003cp\u003ePlease note, that we need to swap vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e, and recheck the second case, because in some situations it\u0027s better to connect vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e with vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e with vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Solutions, which didn\u0027t handle that case failed system test on testcase 11. \u003c/p\u003e\u003cp\u003eThe jury solution: \u003ca href\u003d\"/contest/543/submission/11035716\" title\u003d\"Submission 11035716 by gridnevvvit\"\u003e11035716\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/543/problem/C\" title\u003d\"Codeforces Round 302 (Div. 1)\"\u003e543C - Remembering Strings\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFirst that we need to notice, that is amout of strings is smaller then alphabet size. It means, that we can always change some character to another, because at least one character is not used by some string.\u003c/p\u003e\u003cp\u003eAfter that we need handle two cases:\u003c/p\u003e \u003col\u003e   \u003cli\u003eWe can change exactly one character to another. The cost of such operation equals to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e (which depends on chosed column) After that we can remember string very easy.\u003c/li\u003e   \u003cli\u003eWe can choose some column, and choose some set of strings, that have same character in that column, By one move we can make all these strings are easy to remember.The cost of such move equals to cost of all characters, except most expensive.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eAs the result, we will have following solution: d[mask] — answer to the problem, when we make all strings from set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003c/span\u003e easy to remember. We can calculate this dp in following way: let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e\u003c/span\u003e — smallest element of set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emask\u003c/i\u003e\u003c/span\u003e. It\u0027s clear, that we can do this string easy to remember using first or second move. So we need just iterate over possible columns, and try first or second move (in second move we should choose set that contain string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e\u003c/span\u003e) Overall complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e — is length of strings. \u003c/p\u003e\u003cp\u003eThe jury solution: \u003ca href\u003d\"/contest/543/submission/11035719\" title\u003d\"Submission 11035719 by gridnevvvit\"\u003e11035719\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/543/problem/D\" title\u003d\"Codeforces Round 302 (Div. 1)\"\u003e543D - Road Improvement\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eLet\u0027s suppose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is a root of tree. Let\u0027s calculate extra dynamic programming \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e — answer to the problem for sub-tree with root \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e We can understand, that d[i] equals to the following value: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ad/de/adde40ca344348e169fe88f75bd95ae6228807a1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e — where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e is a child of the vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. It\u0027s nice. After that answer to problem for first vertex equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[1]\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eAfter that let\u0027s study how to make child \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e of current root \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e as new root of tree. We need to recalculate only two values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e. First value we can recalculate using following formula \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuf\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] * \u003ci\u003epref\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e] * \u003ci\u003ed\u003c/i\u003e[\u003ci\u003eparent\u003c/i\u003e]\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eparent\u003c/i\u003e\u003c/span\u003e — is the parent of vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, (for vertex \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003eparent\u003c/i\u003e] \u003d 1\u003c/span\u003e), and array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esuf\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e — is the product of values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ek\u003c/i\u003e]\u003c/span\u003e, for all childs of vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u0026lt; \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epref\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e have same definition, but \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u0026gt; \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e). And after we can calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] * (\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] + 1)\u003c/span\u003e. That is all, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e is root now, and answer to vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e equals to current value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e\u003c/p\u003e\u003cp\u003eThe jury solution: \u003ca href\u003d\"/contest/543/submission/11035737\" title\u003d\"Submission 11035737 by gridnevvvit\"\u003e11035737\u003c/a\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/543/problem/E\" title\u003d\"Codeforces Round 302 (Div. 1)\"\u003e543E - Listening to Music\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eLet\u0027s sort all songs in decreasing order. We will iterate over songs, and each time we will say, that now current song will fully satisfy our conditions. So, let\u0027s \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 0\u003c/span\u003e, is song \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e was not processed yet and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 1\u003c/span\u003e otherwise. Let \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/56/fc/56fc89e0ed5f1867ee15c6bc8f75429571134c94.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. It\u0027s clear, when we add new song in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eidx\u003c/i\u003e\u003c/span\u003e then we should do \u003cspan class\u003d\"tex-span\"\u003e + 1\u003c/span\u003e for all on segment \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003emax\u003c/i\u003e(0, \u003ci\u003eidx\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e + 1), \u003ci\u003eidx\u003c/i\u003e]\u003c/span\u003e in our array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. So, when we need to implement some data structure, which can restore our array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e to the position when all strings have quality \u003cspan class\u003d\"tex-span\"\u003e ≥ \u003ci\u003eq\u003c/i\u003e\u003c/span\u003e. It also should use very small amout of memory. So, answer to the query will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e - \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eWe will store this data structure in the following way. Let\u0027s beat all positions of songs in blocks of length \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/d5/90d5a6cd550a25d4a1e92f4f6e6a222c64aa7a2e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Each time, when we added about \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/d5/90d5a6cd550a25d4a1e92f4f6e6a222c64aa7a2e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e songs as good, we will store three arrays: first array will contain value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e of first element of the block of indices. second array will contain maximum value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e on each block and also we will keep about \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ce/b2/ceb2bf679eb88da970126d9be4a4ebd1261099f6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e of \u0027\u0027small\u0027\u0027 updates which doesn\u0027t cover full block. Using this information array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e will be restored and we process current query in easy way.\u003c/p\u003e\u003cp\u003eThe jury solution: \u003ca href\u003d\"/contest/543/submission/11035739\" title\u003d\"Submission 11035739 by gridnevvvit\"\u003e11035739\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["codeforces","round","302","edirorial"]}}