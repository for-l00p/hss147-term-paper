{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1512292139,"rating":180,"authorHandle":"ODT","modificationTimeSeconds":1512391563,"id":56135,"title":"\u003cp\u003eCodeforces Round #449 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/897/problem/A\"\u003e897A — Scarborough Fair\u003c/a\u003e By \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/mcfx\" title\u003d\"Международный гроссмейстер mcfx\"\u003emcfx\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFor every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e then change it into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e...\u003c/p\u003e\u003cp\u003eBecause \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e\u003c/span\u003e are all very small, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enm\u003c/i\u003e)\u003c/span\u003e can easily pass it.\u003c/p\u003e\u003cp\u003ePS. You can use binary search tree to solve it in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6e/eb/6eeb3f8840dff61061ebef8d92a0949ec08e677d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/897/problem/B\"\u003e897B — Chtholly\u0027s request\u003c/a\u003e By \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/mcfx\" title\u003d\"Международный гроссмейстер mcfx\"\u003emcfx\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-th smallest zcy number is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003econn\u003c/i\u003e(\u003ci\u003estr\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e), \u003ci\u003erev\u003c/i\u003e(\u003ci\u003estr\u003c/i\u003e(\u003ci\u003ek\u003c/i\u003e)))\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003estr\u003c/i\u003e\u003c/span\u003e denotes the decimal representation of a positive integer as a string, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003econn\u003c/i\u003e\u003c/span\u003e denotes the concatenation two strings, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003erev\u003c/i\u003e\u003c/span\u003e denotes the reverse of a string.\u003c/p\u003e\u003cp\u003eThen go over the smallest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e such numbers and sum them up to obtain the answer.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/896/problem/A\"\u003e896A — Nephren gives a riddle\u003c/a\u003e By \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/mcfx\" title\u003d\"Международный гроссмейстер mcfx\"\u003emcfx\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) \u003d \u003ci\u003estr\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1) + \u003ci\u003estr\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + \u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1) + \u003ci\u003estr\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFirst we can compute the length of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e for all possible \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor a pair of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e, we can easily determine which part the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-th character is in.\u003c/p\u003e\u003cp\u003eIf it\u0027s in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1)\u003c/span\u003e, we can solve the problem recursively.\u003c/p\u003e\u003cp\u003eThe complexity of this algorithm is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e, which is sufficient to pass all tests.\u003c/p\u003e\u003cp\u003eObviously, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elength\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)) ≥ \u003ci\u003elength\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1))·2\u003c/span\u003e, so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elength\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e(60)) ≥ \u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIt means that for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u0026gt; 60\u003c/span\u003e, the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e-th character of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e can only be in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003estr\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e or the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e - 1)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen we can answer a query in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c8/0f/c80f1bdb215a673d522522dd243b7f4585063777.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/896/problem/B\"\u003e896B — Ithea Plays With Chtholly\u003c/a\u003e By \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/dogther\" title\u003d\"Кандидат в мастера dogther\"\u003edogther\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAs the initial sheet \u0026quot;has already\u0026quot; in a non-decreasing order (although it has no numbers), what we should do is just \u0026quot;maintain\u0026quot; this order.\u003c/p\u003e\u003cp\u003eWe use a simple method to do so: find the first sheet whose number is strictly greater than the given number (or it\u0027s an empty sheet) and replace it with the new number.\u003c/p\u003e\u003cp\u003eFor each round, we either replace an existing number with a strictly smaller one, or fill in an empty sheet. The first case will happen at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e - 1\u003c/span\u003e times for each sheet, and the second case will happen only once for each sheet. Thus in total, we will modify a sheet for at most \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e times. Thus, the total rounds won\u0027t be more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eTo pass all the tests, we only need to maintain 2 similar sequences, one non-decreasing from the first and one non-increasing from the last, which makes a total round of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f9/bc/f9bc2da464f18216893ae17f2ad3031e0a6c6556.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, precisely, and use binary search or brute force to complete the \u0026quot;finding\u0026quot; process.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/896/problem/C\"\u003e896C — Willem, Chtholly and Seniorious\u003c/a\u003e By \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ODT\" title\u003d\"Кандидат в мастера ODT\"\u003eODT\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is an interesting algorithm which can easily deal with many data structure problems------if the data is random...\u003c/p\u003e\u003cp\u003eI initially named it as \u0026quot;Old Driver Tree\u0026quot; ( Which is my codeforces ID ).\u003c/p\u003e\u003cp\u003e(But now I call it Chtholly Tree~).\u003c/p\u003e\u003cp\u003eWe can find that there is an operation that makes a range of number the same.\u003c/p\u003e\u003cp\u003eWe can use an interval tree (std::set is enough) to maintain every interval that consists of the same number.\u003c/p\u003e\u003cp\u003eAnd for operation \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, we destory all the intervals in range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e , and put in a new interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e into the interval tree.\u003c/p\u003e\u003cp\u003eFor operations \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e, we can brute-forcely walk on the tree, find every interval in range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e, and do the required operation on it.\u003c/p\u003e\u003cp\u003eProof of time complexity:\u003c/p\u003e\u003cp\u003eWe suppose that we have a randomly selected range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e now, and we randomly choose which operation it is, suppose that there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e intervals in this range.\u003c/p\u003e\u003cp\u003e1/4 possibility we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e time to erase \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e nodes.\u003c/p\u003e\u003cp\u003e2/4 possibility we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e time to erase nothing.\u003c/p\u003e\u003cp\u003e1/4 possibility we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e time to erase nothing and add 2 new nodes into the tree.\u003c/p\u003e\u003cp\u003eSo we are expected to use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e time to erase \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e nodes.\u003c/p\u003e\u003cp\u003eBy using interval tree to maintain, the time complexity of this problem is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6e/eb/6eeb3f8840dff61061ebef8d92a0949ec08e677d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eIf operation \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e are changed into output the sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e for every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e, it seems that the time complexity may change into \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a1/bf/a1bf155e5333f81787d37fa3b170266ea464e55b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e , but I do not know how to prove it...\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/896/submission/32917976\"\u003eSolution using map\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/896/problem/D\"\u003e896D — Nephren Runs a Cinema\u003c/a\u003e By \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/dogther\" title\u003d\"Кандидат в мастера dogther\"\u003edogther\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst let\u0027s consider a simpler problem that there are no customers with VIP cards and there are no 50-\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eyuan\u003c/i\u003e\u003c/span\u003e notes left. For convinence, we suppose that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is an even number. The situation that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is an odd number will be similar.\u003c/p\u003e\u003cp\u003eBy defining points (number of customers currently, number of 50-\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eyuan\u003c/i\u003e\u003c/span\u003e note left) on a 2d-plane, the answer to our second question is the ways of drawing lines from (0,0) to (n,0), such that two adjacent points\u0027 y-axis have a difference of 1, and that all the points are above the x-axis.\u003c/p\u003e\u003cp\u003eThe total routes will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e / 2\u003c/sup\u003e\u003c/span\u003e, but some of them are invalid. Consider another route starting from (0,-2).\u003c/p\u003e\u003cp\u003eFor each invalid way in the previous route, consider the first point (x,y) that y\u0026lt;0 (y\u003d-1).\u003c/p\u003e\u003cp\u003eBy creating a symmetry route with y\u003d-1 for the route before this point, this route will become exactly one route starting from (0,-2), and every route starting from (0,-2) will become an invalid route in a similar way.\u003c/p\u003e\u003cp\u003eSo the number of invalid routes is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e / 2 - 1\u003c/sup\u003e\u003c/span\u003e (that is the number of routes from (0,-2) to (n,0)). Thus the answer will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e / 2\u003c/sup\u003e - \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e / 2 - 1\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSimilarly if there are [l,r] 50-\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eyuan\u003c/i\u003e\u003c/span\u003e notes left, the answer will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e / 2 - \u003ci\u003er\u003c/i\u003e / 2\u003c/sup\u003e - \u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e / 2 - \u003ci\u003el\u003c/i\u003e / 2 - 1\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow let\u0027s enumerate how many customers are there with VIP cards. If there are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e of them, the answer will time a factor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eOne last question is about the modulo number. First separate it into forms like \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sup\u003e) * (\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sup\u003e)\u003c/span\u003e... where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e...\u003c/span\u003e are primes. We can calculate how many factor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e are there in \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ej\u003c/i\u003e!)\u003c/span\u003e, and the modulo value of the remaining ones.\u003c/p\u003e\u003cp\u003eEach time we take out a facter \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ej\u003c/i\u003e!)\u003c/span\u003e, and it becomes some product of numbers that are not divisble by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e as well as a remaining part \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ej\u003c/i\u003e / \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)!\u003c/span\u003e. For example, we want to calculate the number of factor 3 in (16!), and the product of numbers that are not divisble by 3 in (16!) mod (3^2). Then we have:\u003c/p\u003e\u003cp\u003e16! \u003d (1 * 2 * 4 * 5 * 7 * 8 * 10 * 11 * 13 * 14 * 16) * (1 * 2 * 3 * 4 * 5) * (3^5)\u003c/p\u003e\u003cp\u003eThe first part are not divisble by 3, so we can calculate their value (mod 3^2) in advance, the second part is a smaller problem (5!), so we can solve it recursively. For the number of factor 3, just add 5 in this case and solve it recursively.\u003c/p\u003e\u003cp\u003eAfter calculating how many factor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e in \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ej\u003c/i\u003e!)\u003c/span\u003e and the modulo value of the remaining ones, we can calculate the combnation numbers correctly. Finally use Chinese Remainder Algorithm to combine them.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/896/problem/E\"\u003e896E — Welcome home, Chtholly\u003c/a\u003e By \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ODT\" title\u003d\"Кандидат в мастера ODT\"\u003eODT\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI\u0027m really sorry for letting the brute force algorithm pass the tests...\u003c/p\u003e\u003cp\u003eMy code uses about 600ms, in order to let some algorithms with large constant or larger time complexity ( like \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/22/2d/222d0e19bdf1c10b2509e1e2b95df12cd3d239bd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e ) pass, I set the time limit to 3000ms.\u003c/p\u003e\u003cp\u003eThe most naive brute forces uses about 8000ms to 9000ms, I added some tricks and the fastest can pass the tests in 5600ms.\u003c/p\u003e\u003cp\u003eIn all the contests I\u0027ve attended, pragma GCC was not allowed to be used...\u003c/p\u003e\u003cp\u003eBut on codeforces, this can optimize brute force algorithm from 5600ms to about 2500ms...\u003c/p\u003e\u003cp\u003e\u003cimg src\u003d\"/predownloaded/86/70/8670a3ea4f7b25a9a7f6eb60e81ba24eac22a75c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThanks to \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/MrDindows\" title\u003d\"Международный гроссмейстер MrDindows\"\u003eMrDindows\u003c/a\u003e and \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Shik\" title\u003d\"Международный гроссмейстер Shik\"\u003eShik\u003c/a\u003e for teaching me this lesson...\u003c/p\u003e\u003cp\u003eMy solution to this problem:\u003c/p\u003e\u003cp\u003eSplit the array into \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/68/dd/68dd2b8c83f76d0b7615d554d96cfcf4f0a298f7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e blocks, each containing \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/68/dd/68dd2b8c83f76d0b7615d554d96cfcf4f0a298f7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e numbers.\u003c/p\u003e\u003cp\u003eIn each block, for example block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e][\u003ci\u003ev\u003c/i\u003e]\u003c/span\u003e to represent the number of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e in block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor each number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e is the the block that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is in.\u003c/p\u003e\u003cp\u003eWe need to maintain each number in the block.\u003c/p\u003e\u003cp\u003eThis can be maintained by using DSU or linked list.\u003c/p\u003e\u003cp\u003eBy maintaining this, we can get the value of every number in a block in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/68/dd/68dd2b8c83f76d0b7615d554d96cfcf4f0a298f7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time.\u003c/p\u003e\u003cp\u003eNotice that this two operations are the same:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e1.\u003c/span\u003eFor every number that is bigger than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, decrease it by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e2.\u003c/span\u003eDecrease every number by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, and for every number that is less than \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, increase it by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eFor operation \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e:\u003c/p\u003e\u003cp\u003eWe get the value of each number in block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e using the DSU or linked list, then for every number that should change, we change them.\u003c/p\u003e\u003cp\u003eThen we build block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e up again.\u003c/p\u003e\u003cp\u003eFor blocks numbered from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e] + 1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e] - 1\u003c/span\u003e:\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e × 2\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e ≤ \u003c/span\u003e max value in block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e We merge all the numbers in range \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ex\u003c/i\u003e + 1, \u003ci\u003ex\u003c/i\u003e × 2]\u003c/span\u003e, and add \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etag\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e]\u003c/span\u003e , \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etag\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e]\u003c/span\u003e means that all the numbers in block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e has decreased by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003etag\u003c/i\u003e[\u003ci\u003ep\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e × 2\u003c/span\u003e \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/99/e7999e16d1e8f1bcc8ccf8605153bda40c25e19c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e max value in block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e We merge all the numbers in range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003ex\u003c/i\u003e + 1, \u003ci\u003emaxvalue\u003c/i\u003e]\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003emaxvalue\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor operation \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e:\u003c/p\u003e\u003cp\u003eWe get the value of each number in block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e using the DSU or linked list.\u003c/p\u003e\u003cp\u003eWe only need to traverse all the numbers in blocks \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e, and traverse all the blocks between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ebelong\u003c/i\u003e[\u003ci\u003er\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e in range \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ex\u003c/i\u003e + \u003ci\u003etag\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]]\u003c/span\u003e is the number of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in block \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, so we just need to add this into the answer\u003c/p\u003e\u003cp\u003eProof of time complexity:\u003c/p\u003e\u003cp\u003eThere are \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/68/dd/68dd2b8c83f76d0b7615d554d96cfcf4f0a298f7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e blocks.\u003c/p\u003e\u003cp\u003eThe difference between the max number and the min number in each block is initially \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. So the sum of this in every block is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fc/86/fc86a758bcb68293e5762c853d65ffd12d38dd5d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eFor each operation \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, we use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e time or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003emax\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e time to make the difference of max and min element \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003emax\u003c/i\u003e - \u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e smaller.\u003c/p\u003e\u003cp\u003eFor each operation \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, we traverse \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/68/dd/68dd2b8c83f76d0b7615d554d96cfcf4f0a298f7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e numbers and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/68/dd/68dd2b8c83f76d0b7615d554d96cfcf4f0a298f7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e blocks.\u003c/p\u003e\u003cp\u003eSo the total time complexity if \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/dc/d2/dcd2f2949d91617e71cec8c4000b90b8cbdde855.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThere seems to be another algorithm with the same time complexity, and has a smaller constant, but I couldn\u0027t prove its complexity so I used this algorithm instead.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/896/submission/32920862\"\u003eMy solution\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src\u003d\"http://i4.bvimg.com/599369/2bc9aa596d3ada38.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e(The missing picture on Div. 1E)\u003c/p\u003e\u003cp\u003eIf you don\u0027t like it, just skip it please.\u003c/p\u003e\u003c/div\u003e","tags":[]}}