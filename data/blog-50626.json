{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1487896028,"rating":9,"authorHandle":"saar2119","modificationTimeSeconds":1487896028,"id":50626,"title":"\u003cp\u003eunordered_map vs map in C++ â€” Complexity Analysis\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eToday one of my myths was broken.\u003cbr /\u003e I used to believe that unordered_map is better in time-complexity than map in C++. But today while I was doing a problem(\u003ca href\u003d\"//codeforces.com/contest/776/problem/C\"\u003eMolly\u0027s Chemicals\u003c/a\u003e), I got time-limit exceeded. After a lot of guess-work(because I thought my solution was correct), I tried using a map instead of an unordered_map and as a surprise I got it accepted. Then I realised that though the amortised time-complexity of using an unordered_map is O(1) while that of a map is O(log n), there are cases in which due to a lot of collisions unordered_map can have a big constant multiplier which will increase its actual complexity to greater than that of a map.\u003cbr /\u003e (Any corrections are welcomed...)\u003c/p\u003e\u003cp\u003eCan someone enlighten me more by clearing the doubt that where should unordered_map be used and where not?\u003cbr /\u003e What are the cases in which a map would perform better than an unordered_map?\u003c/p\u003e\u003cp\u003eHere are the tle and aced solution links if someone wants to verify:\u003cbr /\u003e \u003ca href\u003d\"//codeforces.com/contest/776/submission/24950521\"\u003eTLE Solution\u003c/a\u003e(TLE after 2500 ms) \u003cbr /\u003e \u003ca href\u003d\"//codeforces.com/contest/776/submission/24950552\"\u003eAccepted Solution\u003c/a\u003e(Accepted in 499 ms)\u003c/p\u003e\u003c/div\u003e","tags":["map","unordered_map","c++"]}}