{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1492434525,"rating":11,"authorHandle":"i_love_emilia_clarke","modificationTimeSeconds":1492434665,"id":51609,"title":"\u003cp\u003ePersistence Segment Tree\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eGiven an array A of N integers answer Q queries of type (L, R). Answer to a query (L, R) is the sum of distinct integers in the range A[L...R]\u003c/p\u003e\u003cp\u003eConstraints: N, Q \u0026lt;\u003d 100000 \u003c/p\u003e\u003cp\u003e0 \u0026lt;\u003d L \u0026lt;\u003d R \u0026lt; N\u003c/p\u003e\u003cp\u003eabs(A[i]) \u0026lt;\u003d 1 000 000 000\u003c/p\u003e\u003cp\u003eI read somewhere that this can be done using persistence segment tree.\u003c/p\u003e\u003cp\u003eSo, it would be helpful if one can explain that approach.\u003c/p\u003e\u003cp\u003eOther approach are welcome too.\u003c/p\u003e\u003c/div\u003e","tags":["persistent segment tree"]}}