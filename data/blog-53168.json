{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1499460455,"rating":195,"authorHandle":"bukefala","modificationTimeSeconds":1499460455,"id":53168,"title":"\u003cp\u003eTop 10 optimizations 2017- (collectors edition) \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello friends. The year is almost over so I have prepared the top 10 optimizations of 2017 for your viewing pleasure. Without forthor ado, let us begin.\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eOPTIMIZATION OF FLOYD VARÅ AL ALGORITHM TO RUN IN N^2: simply instead of going from 1 to N in third loop we willuse bitset which will visit the remaining nodes automatically\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eSEGMENT TREE OPTIMIZATION TO RUN IN O(NlogMlogQ) complexity. We will simply use bitset to fetch our data between nodes instead of every time having to calculate hashes in nodes all over again. \u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eOPTIMIZATION OF FENWICK TO ACCEPT QUERIES OF TYPE: EXPAND INTERVAL BY CONSTANT C We will simply use bitset which will store every expansion in every possible moment in time. You will say this is obviously too slow. But it can be easily optimized. We will simply make another bitset map for these changes. \u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eUSING LCA AS A TOOL TO OPTIMIZE TRIE You maybe thinking that LCA has nothing to do with trie. but-witg SIMPLE usage of little thing called bitset,. we can chsnge this. simply make bitset remeber on evrry turn where yoou ended up afta joining nodes into components. time complexity: o(QlogLoglogNM) it can be essily proven but i will leave it to readers prectis\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eCOMPRESSING \u003cstrong\u003eENTIRE\u003c/strong\u003e HASMHAP INTO A TRIPLET OF BINARY SEARCH TREES How? YOU WILLASK. i willsay: it csn be done with the help of our little mriemd bitset. we will simply store him into a SEPARATE container instead of keeping it with the other trees . This will also improve memory!!!! Readers practice\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eMULTIPLYING BIGNUMS IN O(LOG23.5NMQRSQRT(LOG(nm))) Simply store the factors inside a RB tree of bitsets and use improved FFT.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIMPROVED FFT Simply make bitset for every multiplication and merge them every logNth operation. You can not merge naively but it csn be easily merged via heuristic approach. readers prectis \u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eCONCAVE HULL TRICK Ok. You ssy concave hull can not be used for quad tree optimization trick. It can. One word: bitset.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eMACHINE LEARNING TRICK WITH BITSET Simply use AI bitset for storing your patterns. \u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eREVOLUTIONARY OPTIMIZATION OF BLOCK CHAIN The circular implementation of a new hashing algorithm using to optimize proof of work concept. Hashing the last block with the nonce from the previous nth block as to make it circular. \u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003ethank you for your attention mriemds,\u003c/p\u003e\u003cp\u003eWith respect. bukefala\u003c/p\u003e\u003cp\u003eLiterature: \u003ca href\u003d\"https://arxiv.org/pdf/0909.4437.pdf\"\u003ehttps://arxiv.org/pdf/0909.4437.pdf\u003c/a\u003e \u003ca href\u003d\"http://www.amazon.com/Optimizing-energy-consumption-wireless-networks/dp/3659121207\"\u003ehttp://www.amazon.com/Optimizing-energy-consumption-wireless-networks/dp/3659121207\u003c/a\u003e \u003ca href\u003d\"http://www.superknjizara.hr/index.php?page\u003dautor\u0026amp;idautor\u003d13819\"\u003ehttp://www.superknjizara.hr/index.php?page\u003dautor\u0026amp;idautor\u003d13819\u003c/a\u003e \u003ca href\u003d\"http://www.jucs.org/jucs_23_3/generating_politician_profiles_based\"\u003ehttp://www.jucs.org/jucs_23_3/generating_politician_profiles_based\u003c/a\u003e \u003ca href\u003d\"http://authors.elsevier.com/a/1SQGc5aecSN1Bg\"\u003ehttp://authors.elsevier.com/a/1SQGc5aecSN1Bg\u003c/a\u003e \u003ca href\u003d\"https://arxiv.org/pdf/1705.07279.pdf\"\u003ehttps://arxiv.org/pdf/1705.07279.pdf\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":["optimizations","2017","2k17","topcoderjam"]}}