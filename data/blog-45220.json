{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1464974502,"rating":0,"authorHandle":"adamantium","modificationTimeSeconds":1464974631,"id":45220,"title":"\u003cp\u003eFacing problem in spoj RACETIME â€” Race Against Time\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI tried this \u003ca href\u003d\"http://www.spoj.com/problems/RACETIME/\"\u003eproblem\u003c/a\u003e with segment tree first and got TLE. Then I used square-root but again got TLE. To solve the problem with square-root i used tree which size is sqrt(n) * sqrt(n), where n is the size of the array. In every block of the tree I kept sqrt(n) elements of the array sorted in ascending order. When update occur I push the element in a block where it\u0027s index remain and again sort this block. And when i got query operation for every block which is in the range I found how many elements are less than the given value. This can be done with binary search for every block. Please tell me where i should optimize my code. Here you can have a look at my \u003ca href\u003d\"https://ideone.com/LauRKN\"\u003ecode\u003c/a\u003e .\u003c/p\u003e\u003c/div\u003e","tags":["square root","data structure","binary search","spoj"]}}