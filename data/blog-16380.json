{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1423908739,"rating":18,"authorHandle":"Stupid-Dog","modificationTimeSeconds":1424170008,"id":16380,"title":"\u003cp\u003eBIG INTEGER WITH C++\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eNEW UPD :\u003c/h2\u003e\u003cp\u003eThis morning, I begin with \u003ccode\u003eBigInteger in C++\u003c/code\u003e (because I usually use \u003ccode\u003eBigInteger in Java\u003c/code\u003e). I want to check the correction about my code, so that I post this blog to hope you can check it.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eThank \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/knst\" title\u003d\"Candidate Master knst\"\u003eknst\u003c/a\u003e, I have more update :\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eI use \u003ccode\u003etypedef vector\u0026lt;int\u0026gt; BigInt;\u003c/code\u003e to make one \u003ccode\u003eBigInteger\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eI use only with positive numbers.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIn my code have the function\u003ccode\u003einitialize one BigInt\u003c/code\u003e : \u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003eBigInt a \u003d Integer(string);\nBigInt a \u003d Integer(char[]);\nBigInt a \u003d Integer(int);\nBigInt a \u003d Integer(long long);\n\n\n\u003c/code\u003e\u003c/pre\u003e \u003cul\u003e   \u003cli\u003eI have function \u003ccode\u003eprint one BigInt\u003c/code\u003e :\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003ePrint(BigInt);\n\n\n\u003c/code\u003e\u003c/pre\u003e \u003cul\u003e   \u003cli\u003eI have \u003ccode\u003eiostream BigInt\u003c/code\u003e : \u003cstrong\u003eNEW\u003c/strong\u003e\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003ecin \u0026gt;\u0026gt; BigInt;\ncout \u0026lt;\u0026lt; BigInt;\n\n\n\u003c/code\u003e\u003c/pre\u003e \u003cul\u003e   \u003cli\u003eI have \u003ccode\u003eoperators on BigInt\u003c/code\u003e : \u003cstrong\u003ehave NEW\u003c/strong\u003e\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003eBigInt + BigInt   (the value return is BigInt)\nBigInt + int      (the value return is BigInt)\n++BigInt          (the value of BigInt set to BigInt+1 and the value return is BigInt)\nBigInt +\u003d BigInt  (no return value)\nBigInt +\u003d int     (no return value)\n\nBigInt - BigInt   (the value return is BigInt, that is positive numbers)\nBigInt - int      (the value return is BigInt)\n--BigInt          (the value of BigInt set to BigInt-1 and the value return is BigInt)\nBigInt -\u003d BigInt  (no return value)\nBigInt -\u003d int     (no return value)\n\nBigInt * BigInt   (the value return is BigInt)\nBigInt * int      (the value return is BigInt)\nBigInt *\u003d BigInt  (no return value)\nBigInt *\u003d int     (no return value)\n\nBigInt / BigInt   (the value return is BigInt)     (need optimal)\nBigInt / int      (the value return is BigInt)     (NEW - quickly)\nBigInt /\u003d BigInt  (no return value)\nBigInt /\u003d int     (no return value)\n\nBigInt % BigInt   (the value return is BigInt)\nBigInt % int      (the value return is int, that is in [0..int-1])\nBigInt %\u003d BigInt  (no return value)\nBigInt %\u003d int     (no return value)\n\nNEW : Compare \n         BigInt - BigInt\n         BigInt - int\n\n\u0026gt; , \u0026lt; , \u003d\u003d , \u0026gt;\u003d , \u0026lt;\u003d  (the value return is bool) \n\n\n\u003c/code\u003e\u003c/pre\u003e \u003cul\u003e   \u003cli\u003eI have \u003ccode\u003efunctions on BigInt\u003c/code\u003e :\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003emax(BigInt, BigInt) (the value return is BigInt)\nmin(BigInt, BigInt) (the value return is BigInt)\n\ngcd(BigInt, BigInt) (the value return is BigInt)\nlcm(BigInt, BigInt) (the value return is BigInt)\n\nsqrt(BigInt)        (the value return is BigInt)  \nNEW : quickly : knst comment (http://codeforces.com/blog/entry/16380#comment-213120)\n\nlog(int, BigInt)    (the value return is int, log(int, BigInt) is small)\n\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eI hope you can check the correction of this code\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSorry for my bad English. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHope have more comments to improve\u003c/strong\u003e \u003ccode\u003eBigInt\u003c/code\u003e \u003cstrong\u003eperfectly.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThis is my code : \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://github.com/Stupid-Dog/BigInteger/blob/stupid/BigInteger.cpp\"\u003ehttps://github.com/Stupid-Dog/BigInteger/blob/stupid/BigInteger.cpp\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://paste.ubuntu.com/10270983/\"\u003ehttp://paste.ubuntu.com/10270983/\u003c/a\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n\nusing namespace std;\n\ntypedef int64_t ll;\ntypedef long long ll;\n\n#define EL printf(\u0026quot;\\n\u0026quot;)\n#define pb push_back\n#define FOR(i,l,r) for (int i\u003dl;i\u0026lt;\u003dr;i++)\n#define FORD(i,r,l) for (int i\u003dr;i\u0026gt;\u003dl;i--)\n\nconst int base \u003d 1e9;\ntypedef vector\u0026lt;int\u0026gt; BigInt;\n\nvoid Set(BigInt \u0026amp;a) {\n    while (a.size() \u0026gt; 1 \u0026amp;\u0026amp; a.back() \u003d\u003d 0) a.pop_back();\n}\n\nvoid Print(BigInt a) {\n    Set(a);\n    printf(\u0026quot;%d\u0026quot;, (a.size() \u003d\u003d 0) ? 0 : a.back());\n    FORD(i,a.size()-2,0) printf(\u0026quot;%09d\u0026quot;, a[i]); EL;\n}\n\nBigInt Integer(string s) {\n    BigInt ans;\n    if (s[0] \u003d\u003d \u0027-\u0027) return ans;\n    if (s.size() \u003d\u003d 0) {ans.pb(0); return ans;}\n    while (s.size()%9 !\u003d 0) s \u003d \u00270\u0027+s;\n    for (int i\u003d0;i\u0026lt;s.size();i+\u003d9) {\n        int v \u003d 0;\n        for (int j\u003di;j\u0026lt;i+9;j++) v \u003d v*10+(s[j]-\u00270\u0027);\n        ans.insert(ans.begin(),v);\n    }\n    Set(ans);\n    return ans;\n}\n\nBigInt Integer(char c[]) {\n    string s \u003d \u0026quot;\u0026quot;;\n    FOR(i,0,strlen(c)-1) s \u003d s + c[i];\n    return Integer(s);\n}\n\nBigInt Integer(ll x) {\n    string s \u003d \u0026quot;\u0026quot;;\n    while (x \u0026gt; 0) s \u003d char(x%10+\u00270\u0027) + s, x /\u003d 10;\n    return Integer(s);\n}\n\nBigInt Integer(int x) {\n    return Integer((ll) x);\n}\n\nvoid operator \u0026gt;\u0026gt; (istream \u0026amp;in, BigInt \u0026amp;a) {\n    string s;\n    getline(cin, s);\n    a \u003d Integer(s);\n}\n\nvoid operator \u0026lt;\u0026lt; (ostream \u0026amp;out, BigInt a) {\n    Print(a);\n}\n\nbool operator \u0026lt; (BigInt a, BigInt b) {\n    Set(a);\n    Set(b);\n    if (a.size() !\u003d b.size()) return (a.size() \u0026lt; b.size());\n    FORD(i,a.size()-1,0)\n        if (a[i] !\u003d b[i]) return (a[i] \u0026lt; b[i]);\n    return false;\n}\n\nbool operator \u0026gt; (BigInt a, BigInt b) {\n    return (b \u0026lt; a);\n}\n\nbool operator \u003d\u003d (BigInt a, BigInt b) {\n    return (!(a \u0026lt; b) \u0026amp;\u0026amp; !(b \u0026lt; a));\n}\n\nbool operator \u0026lt;\u003d (BigInt a, BigInt b) {\n    return (a \u0026lt; b || a \u003d\u003d b);\n}\n\nbool operator \u0026gt;\u003d (BigInt a, BigInt b) {\n    return (b \u0026lt; a || b \u003d\u003d a);\n}\n\nbool operator \u0026lt; (BigInt a, int b) {\n    return (a \u0026lt; Integer(b));\n}\n\nbool operator \u0026gt; (BigInt a, int b) {\n    return (a \u0026gt; Integer(b));\n}\n\nbool operator \u003d\u003d (BigInt a, int b) {\n    return (a \u003d\u003d Integer(b));\n}\n\nbool operator \u0026gt;\u003d (BigInt a, int b) {\n    return (a \u0026gt;\u003d Integer(b));\n}\n\nbool operator \u0026lt;\u003d (BigInt a, int b) {\n    return (a \u0026lt;\u003d Integer(b));\n}\n\nBigInt max(BigInt a, BigInt b) {\n    if (a \u0026gt; b) return a;\n    return b;\n}\n\nBigInt min(BigInt a, BigInt b) {\n    if (a \u0026lt; b) return a;\n    return b;\n}\n\nBigInt operator + (BigInt a, BigInt b) {\n    Set(a);\n    Set(b);\n    BigInt ans;\n    int carry \u003d 0;\n    FOR(i,0,max(a.size(), b.size())-1) {\n        if (i \u0026lt; a.size()) carry +\u003d a[i];\n        if (i \u0026lt; b.size()) carry +\u003d b[i];\n        ans.pb(carry%base);\n        carry /\u003d base;\n    }\n    if (carry) ans.pb(carry);\n    Set(ans);\n    return ans;\n}\n\nBigInt operator + (BigInt a, int b) {\n    return a + Integer(b);\n}\n\nBigInt operator ++ (BigInt \u0026amp;a) { // ++a\n    a \u003d a + 1;\n    return a;\n}\n\nvoid operator +\u003d (BigInt \u0026amp;a, BigInt b) {\n    a \u003d a + b;\n}\n\nvoid operator +\u003d (BigInt \u0026amp;a, int b) {\n    a \u003d a + b;\n}\n\nBigInt operator \u0026amp;mdash; (BigInt a, BigInt b) {\n    Set(a);\n    Set(b);\n    BigInt ans;\n    int carry \u003d 0;\n    FOR(i,0,a.size()-1) {\n        carry +\u003d a[i] \u0026amp;mdash; (i \u0026lt; b.size() ? b[i] : 0);\n        if (carry \u0026lt; 0) ans.pb(carry+base), carry \u003d -1;\n        else ans.pb(carry), carry \u003d 0;\n    }\n    Set(ans);\n    return ans;\n}\n\nBigInt operator \u0026amp;mdash; (BigInt a, int b) {\n    return a \u0026amp;mdash; Integer(b);\n}\n\nvoid operator -- (BigInt \u0026amp;a) { // --a\n    a \u003d a \u0026amp;mdash; 1;\n}\n\nvoid operator -\u003d (BigInt \u0026amp;a, BigInt b) {\n    a \u003d a + b;\n}\n\nvoid operator -\u003d (BigInt \u0026amp;a, int b) {\n    a \u003d a \u0026amp;mdash; b;\n}\n\nBigInt operator * (BigInt a, BigInt b) {\n    Set(a);\n    Set(b);\n    BigInt ans;\n    ans.assign(a.size()+b.size(), 0);\n    FOR(i,0,a.size()-1) {\n        ll carry \u003d 0ll;\n        for (int j\u003d0;j\u0026lt;b.size() || carry \u0026gt; 0;j++) {\n            ll s \u003d ans[i+j] + carry + (ll)a[i]*(j\u0026lt;b.size()?(ll)b[j]:0ll);\n            ans[i+j] \u003d s%base;\n            carry \u003d s/base;\n        }\n    }\n    Set(ans);\n    return ans;\n}\n\nBigInt operator * (BigInt a, int b) {\n    return a * Integer(b);\n}\n\nvoid operator *\u003d (BigInt \u0026amp;a, BigInt b) {\n    a \u003d a * b;\n}\n\nvoid operator *\u003d (BigInt \u0026amp;a, int b) {\n    a \u003d a * b;\n}\n\n\n\nBigInt operator / (BigInt a, BigInt b) {\n    Set(a);\n    Set(b);\n    if (b \u003d\u003d Integer(0)) return Integer(\u0026quot;-1\u0026quot;);\n    BigInt ans, cur;\n    FORD(i,a.size()-1,0) {\n        cur.insert(cur.begin(), a[i]);\n        int x \u003d 0, L \u003d 0, R \u003d base;\n        while (L \u0026lt;\u003d R) {\n            int mid \u003d (L+R)\u0026gt;\u0026gt;1;\n            if (b*Integer(mid) \u0026gt; cur) {\n                x \u003d mid;\n                R \u003d mid-1;\n            }\n            else\n                L \u003d mid+1;\n        }\n        cur \u003d cur \u0026amp;mdash; Integer(x-1)*b;\n        ans.insert(ans.begin(),x-1);\n    }\n    Set(ans);\n    return ans;\n}\n\nBigInt operator / (BigInt a, int b) {\n    Set(a);\n    BigInt ans;\n    ll cur \u003d 0ll;\n    FORD(i,a.size()-1,0) {\n        cur \u003d (cur*(ll)base + (ll)a[i]);\n        ans.insert(ans.begin(),cur/b);\n        cur %\u003d b;\n    }\n    Set(ans);\n    return ans;\n}\n\nvoid operator /\u003d (BigInt \u0026amp;a, BigInt b) {\n    a \u003d a / b;\n}\n\nvoid operator /\u003d (BigInt \u0026amp;a, int b) {\n    a \u003d a / b;\n}\n\nBigInt operator % (BigInt a, BigInt b) {\n    Set(a);\n    Set(b);\n    if (b \u003d\u003d Integer(0)) return Integer(\u0026quot;-1\u0026quot;);\n    BigInt ans;\n    FORD(i,a.size()-1,0) {\n        ans.insert(ans.begin(), a[i]);\n        int x \u003d 0, L \u003d 0, R \u003d base;\n        while (L \u0026lt;\u003d R) {\n            int mid \u003d (L+R)\u0026gt;\u0026gt;1;\n            if (b*Integer(mid) \u0026gt; ans) {\n                x \u003d mid;\n                R \u003d mid-1;\n            }\n            else\n                L \u003d mid+1;\n        }\n        ans \u003d ans \u0026amp;mdash; Integer(x-1)*b;\n    }\n    Set(ans);\n    return ans;\n}\n\nint operator % (BigInt a, int b) {\n    Set(a);\n    if (b \u003d\u003d 0) return -1;\n    int ans \u003d 0;\n    FORD(i,a.size()-1,0)\n        ans \u003d (ans*(base%b) + a[i]%b)%b;\n    return ans;\n}\n\nvoid operator %\u003d (BigInt \u0026amp;a, BigInt b) {\n    a \u003d a % b;\n}\n\nvoid operator %\u003d (BigInt \u0026amp;a, int b) {\n    a \u003d a % Integer(b);\n}\n\nBigInt gcd(BigInt a, BigInt b) {\n    Set(a);\n    Set(b);\n    while (b \u0026gt; Integer(0)) {\n        BigInt r \u003d a%b;\n        a \u003d b;\n        b \u003d r;\n    }\n    Set(a);\n    return a;\n}\n\nBigInt lcm(BigInt a, BigInt b) {\n    return (a*b/gcd(a,b));\n}\n\n\nBigInt sqrt(BigInt a) {\n    BigInt x0 \u003d a, x1 \u003d (a+1)/2;\n    while (x1 \u0026lt; x0) {\n        x0 \u003d x1;\n        x1 \u003d (x1+a/x1)/2;\n    }\n    return x0;\n}\n\nBigInt pow(BigInt a, BigInt b) {\n    if (b \u003d\u003d Integer(0)) return Integer(1);\n    BigInt tmp \u003d pow(a, b/2);\n    if (b%2 \u003d\u003d 0) return tmp * tmp;\n    return tmp * tmp * a;\n}\n\nBigInt pow(BigInt a, int b) {\n    return pow(a,(Integer(b)));\n}\n\nint log(int n, BigInt a) { // log_n(a)\n    Set(a);\n    int ans \u003d 0;\n    while (a \u0026gt; Integer(1)) {\n        ans++;\n        a /\u003d n;\n    }\n    return ans;\n}\n\nint main()\n{\n    BigInt B;  cin \u0026gt;\u0026gt; B;\n    BigInt A \u003d Integer(\u0026quot;123456789\u0026quot;);\n    BigInt C \u003d Integer(123456789ll);\n    int x; x \u003d 123456789;\n\n    if (B \u0026lt;\u003d A) cout \u0026lt;\u0026lt; A - B;\n    else {\n        cout \u0026lt;\u0026lt; \u0026quot;-\u0026quot;;\n        cout \u0026lt;\u0026lt; B - A;\n    }\n\n    cout \u0026lt;\u0026lt; A + B; Print(A + x);\n    cout \u0026lt;\u0026lt; A * B; Print(A * x);\n    cout \u0026lt;\u0026lt; A / B; Print(A / x);\n    cout \u0026lt;\u0026lt; A % B; printf(\u0026quot;%d\\n\u0026quot;, A % x);\n\n    C \u003d ++A; ++B; C +\u003d B + x;\n    Print(A); Print(B); Print(C);\n\n    cout \u0026lt;\u0026lt; max(A,B);\n    cout \u0026lt;\u0026lt; min(A,B);\n\n    cout \u0026lt;\u0026lt; gcd(A,B);\n    cout \u0026lt;\u0026lt; lcm(A,B);\n\n    cout \u0026lt;\u0026lt; sqrt(A);\n    printf(\u0026quot;%d %d %d\\n\u0026quot;, log(2,A), log(10,B), log(5,C));\n\n    A \u003d Integer(16); x \u003d 12;\n    cout \u0026lt;\u0026lt; pow(A,B);\n    cout \u0026lt;\u0026lt; pow(A,x);\n\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["bignum","biginteger","bignumber","biginteger c++","biginteger quickly"]}}