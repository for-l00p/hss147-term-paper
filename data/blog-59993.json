{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1528854435,"rating":2,"authorHandle":"prince_of_crows","modificationTimeSeconds":1528854788,"id":59993,"title":"\u003cp\u003eI need help to prove a classical graph problem about strongly connected components.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI have come to read \u003ca href\u003d\"https://stackoverflow.com/questions/14305236/minimal-addition-to-strongly-connected-graph\"\u003ethis\u003c/a\u003e stackoverflow post. It basically asks this-\u003ccode\u003eI have a set of nodes and set of directed edges between them. The edges have no weight. How can I found minimal number of edges which has to be added to make the graph strongly connected?\u003c/code\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://stackoverflow.com/a/14318315\"\u003eThis\u003c/a\u003e answer gives a solution to this problem\u003c/p\u003e\u003cp\u003eIt\u0027s a really classical graph problem.\u003c/p\u003e \u003cpre\u003e1. Run algorithm like Tarjan-SCC algorithm to find all SCCs. Consider each SCC as a new vertice, link a edge between these new vertices according to the origin graph, we can get a new graph. Obviously, the new graph is a Directed Acyclic Graph(DAG).\n2. In the DAG, find all vertices whose in-degree is 0, we define them {X}; find all vertices whose out-degree is 0, we define them {Y}.\n3. If DAG has only one vertice, the answer is 0; otherwise, the answer is max(|X|, |Y|).\u003c/pre\u003e\u003cp\u003eI am not been able to prove the third point. How is the answer \u0026quot;max(|X|, |Y|)\u0026quot;? Can anyone help me?\u003c/p\u003e\u003cp\u003eEdit: I need this to solve this lightoj \u003ca href\u003d\"http://lightoj.com/volume_showproblem.php?problem\u003d1210\"\u003eproblem\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}