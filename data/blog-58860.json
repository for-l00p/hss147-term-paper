{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1523383877,"rating":7,"authorHandle":"idLe.","modificationTimeSeconds":1523426392,"id":58860,"title":"\u003cp\u003eMinimum square that contains at least k points\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSo, the problem:\u003c/p\u003e\u003cp\u003eWe are given N points on an xOy plane. We have to find the mininum side of a square that contains at least k points (a point is \u0026quot;contained\u0026quot; if it is on the inside of the square or one of its sides).\u003c/p\u003e\u003cp\u003eInput: N, K, and the x and y coordinates of the N points\u003c/p\u003e\u003cp\u003eRestrictions:\u003cbr /\u003eTime limit: 1 sec\u003cbr /\u003e2 \u0026lt;\u003d N \u0026lt;\u003d 32000\u003cbr /\u003e2 \u0026lt;\u003d K \u0026lt;\u003d N\u003cbr /\u003e1 \u0026lt;\u003d x, y \u0026lt;\u003d 5000 for each points\u003cbr /\u003ex and y are integer\u003c/p\u003e\u003cp\u003eMy approach: I keep an array dp[i][j] â€” the number of points in the rectangle with the corner coordinates 1, 1 and i,j, and then for each i, j I binary-search the minimum side of the square that contains at least k points and the left-bottom corner in i, j, however i get a TLE with this since its time complexity is 5000^2 * log2(5000).\u003c/p\u003e\u003cp\u003eCould somebody suggest a better idea? I was suggested to try using segment trees, however i cannot visualize their use in this case.\u003c/p\u003e\u003c/div\u003e","tags":["#geometry"]}}