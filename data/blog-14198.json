{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1412849206,"rating":67,"authorHandle":"alvin777","modificationTimeSeconds":1412859790,"id":14198,"title":"\u003cp\u003eNice trick to output vars (C++11)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI was playing with C++11 variadic templates and was able to produce line \u0026quot;a: 10, b: 5.1, s: asd\u0026quot; using just PR(a, b, s).\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#define PR(...) pr(#__VA_ARGS__, __VA_ARGS__);\n\ntemplate\u0026lt;typename T\u0026gt;\nvoid pr(const string\u0026amp; name, T t) {\n    cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026quot;: \u0026quot; \u0026lt;\u0026lt; t \u0026lt;\u0026lt; endl;\n}\n\ntemplate\u0026lt;typename T, typename ... Types\u0026gt;\nvoid pr(const string\u0026amp; names, T t, Types ... rest) {\n    auto comma_pos \u003d names.find(\u0027,\u0027);\n    cout \u0026lt;\u0026lt; names.substr(0, comma_pos) \u0026lt;\u0026lt; \u0026quot;: \u0026quot; \u0026lt;\u0026lt; t \u0026lt;\u0026lt; \u0026quot;, \u0026quot;;\n    \n    auto next_name_pos \u003d names.find_first_not_of(\u0026quot; \\t\\n\u0026quot;, comma_pos + 1);\n    pr(string(names, next_name_pos), rest ...);\n}\n\nint a \u003d 3;\nfloat b \u003d 5.1;\nstring s \u003d \u0026quot;asd\u0026quot;;\n\nPR(a, b, s);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["c++11","variadic template","trace"]}}