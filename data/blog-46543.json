{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1471112456,"rating":10,"authorHandle":"polingy","modificationTimeSeconds":1471113041,"id":46543,"title":"\u003cp\u003e[Editorial] Procon 2016 editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"//www.codeforces.com/gym/101059/problem/A\"\u003eProblem A:\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSetter: \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/rjalfa0\" title\u003d\"Специалист rjalfa0\"\u003erjalfa0\u003c/a\u003e, Testers:\u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/slender_hangman\" title\u003d\"Эксперт slender_hangman\"\u003eslender_hangman\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/polingy\" title\u003d\"Кандидат в мастера polingy\"\u003epolingy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTake the best two employees, and compare the sum of their strengths with the boss. \u003cbr /\u003e Runtime: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//www.codeforces.com/gym/101059/problem/B\"\u003eProblem B:\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSetter: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/slender_hangman\" title\u003d\"Эксперт slender_hangman\"\u003eslender_hangman\u003c/a\u003e, Testers:\u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/rjalfa0\" title\u003d\"Специалист rjalfa0\"\u003erjalfa0\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/polingy\" title\u003d\"Кандидат в мастера polingy\"\u003epolingy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet us try to make all the elements of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e equal to some \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e Then, immediately, we can note that we will need to do at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e copy operations. \u003cbr /\u003e Further, for all indices such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≠ \u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, we need to move from the nearest \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to its left.\u003cbr /\u003e So the answer would be the maximum distance for that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eN\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e Now we take the minimum over all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. Since \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is small, we can use an array of \u003ccode\u003evector\u003c/code\u003es. \u003cbr /\u003e Runtime: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/55/54/555428c6cc0cf58a41c26323a5f8ba96d4c8ee37.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//www.codeforces.com/gym/101059/problem/C\"\u003eProblem C:\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSetter: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/polingy\" title\u003d\"Кандидат в мастера polingy\"\u003epolingy\u003c/a\u003e, Testers:\u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/kzanmos\" title\u003d\"Эксперт kzanmos\"\u003ekzanmos\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/polingy\" title\u003d\"Кандидат в мастера polingy\"\u003epolingy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSince \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e is quite small, we can try to consider paying all subsets of the gangsters. \u003cbr /\u003e Now, when we pay a mask \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e of gangsters, we take its compliment to get the gangsters who will try to kill us. \u003cbr /\u003e Then we mark off all nodes within distance \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e of these gangsters as unavailable, and determine if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e are still connected in this scenario. \u003cbr /\u003e Finally, compute the minimum cost over all the masks which do not disconnect \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e Runtime: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/sup\u003e × (\u003ci\u003eN\u003c/i\u003e + \u003ci\u003eM\u003c/i\u003e))\u003c/span\u003e (bfs for each mask)\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//www.codeforces.com/gym/101059/problem/D\"\u003eProblem D\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSetter: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/polingy\" title\u003d\"Кандидат в мастера polingy\"\u003epolingy\u003c/a\u003e, Testers:\u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/slender_hangman\" title\u003d\"Эксперт slender_hangman\"\u003eslender_hangman\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/polingy\" title\u003d\"Кандидат в мастера polingy\"\u003epolingy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eNote that we\u0027re looking for pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e, such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e × \u003ci\u003eq\u003c/i\u003e ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. This implies that at least one of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/53/8d/538d61916a1b0a25aec01f8d82b390492dce2556.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. This gives us an algorithm to answer a single query:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eans \u003d -(elements in A \u0026lt;\u003d root(k)) * (elements in B \u0026lt;\u003d root(k))\nfor i \u003d 1 to root(k):\n\tans +\u003d (elements in A \u003d i) * (elements in B \u0026lt;\u003d K / i)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that setting \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eans\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e in the beginning will lead to some over-counting, which the current value eliminates.\u003cbr /\u003e How do we answer the sub-queries we generate? They can be handled by a Binary Indexed Tree. Note that a segment tree will not work here because of high constant factor. \u003cbr /\u003e How do we extend to multiple queries? We can use \u003ca href\u003d\"https://blog.anudeep2011.com/mos-algorithm/\"\u003eMo\u0027s algorithm\u003c/a\u003e.\u003cbr /\u003e Overall runtime is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/55/45/5545605688b612472a4d586390e334267507798f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//www.codeforces.com/gym/101059/problem/E\"\u003eProblem E:\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSetter: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/lifecodemohit\" title\u003d\"Эксперт lifecodemohit\"\u003elifecodemohit\u003c/a\u003e, Testers:\u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/lifecodemohit\" title\u003d\"Эксперт lifecodemohit\"\u003elifecodemohit\u003c/a\u003e, \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/AmbarPal\" title\u003d\"Специалист AmbarPal\"\u003eAmbarPal\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/polingy\" title\u003d\"Кандидат в мастера polingy\"\u003epolingy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can use a segment tree with some clever information in the nodes to solve this task. \u003cbr /\u003e Let\u0027s say we already know the answer for the two children of a node, then what additional information do we need to compute the answer for this node? \u003cbr /\u003e We are looking for sub-sequences of the kind \u003ccode\u003eabba\u003c/code\u003e, where \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/46/be/46be8d4b6669a506f47efbfb2f0e5be0a7433f43.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Possibilities are:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003e\u003ccode\u003eabba\u003c/code\u003e in left child\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ccode\u003eabba\u003c/code\u003e in right child\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ccode\u003ea\u003c/code\u003e in left child, \u003ccode\u003ebba\u003c/code\u003e in right child (and its symmetric case)\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ccode\u003eab\u003c/code\u003e in left child, \u003ccode\u003eba\u003c/code\u003e in right child.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eSo we need to store number of ways to generate these for each node too. \u003cbr /\u003e Note that to compute these, we need no more additional information. \u003cbr /\u003e Hence we have an \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/38/2a/382aca83f0598e25e3323e05ea29bc2286305da3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e solution, where \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2c/21/2c215920ad5e9ab44274dd038507823e5f64863c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is the size of the alphabet.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//www.codeforces.com/gym/101059/problem/F\"\u003eProblem F:\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSetter: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/slender_hangman\" title\u003d\"Эксперт slender_hangman\"\u003eslender_hangman\u003c/a\u003e, Testers:\u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/slender_hangman\" title\u003d\"Эксперт slender_hangman\"\u003eslender_hangman\u003c/a\u003e, \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/polingy\" title\u003d\"Кандидат в мастера polingy\"\u003epolingy\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s find the best solution on removing some edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e \u003d \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e)\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e is the parent of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e. The best solution would involve reattaching some node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e (including \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e) to some node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e in the residual tree (after removing the edge \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ee\u003c/i\u003e\u003c/span\u003e) containing \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e. Now, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e is the vertex with the smallest distance to the vertex \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. For \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, it is the vertex which is the best (least cost) root for the subtree of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor the best root for some tree:\u003cbr /\u003e Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e(\u003ci\u003eT\u003c/i\u003e, \u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e denote the cost of a tree \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e being rooted at \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e. \u003cbr /\u003e Let\u0027s say that the tree \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e was originally rooted at some \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e(so we can precompute \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e(\u003ci\u003eT\u003c/i\u003e, \u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e), and we want to shift the root to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e is a child of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen it is not hard to see that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ac/63/ac63a08aa8627ff010e398af21f5842b3eb764be.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eFurther, let us say that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is an arbitrary descendent of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e, and the nodes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e... \u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e occur on the path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, then by repeated application of the above form, we get\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/59/9c/599ca636379b0560601a5bd5173fadb5a99c5df8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s define \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e)\u003c/span\u003e as the depth of node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/05/bd/05bd13c2cb3c691b4a74eade4c7e14e3c95a4b9c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThen \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4f/7c4fa1340cf9134ed937c1048158c1d901fc506e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThis form is exactly suitable for the convex hull trick. \u003cbr /\u003e Now, for each sub-tree, we can only use the nodes which belong to it to rejoin to the larger tree, so we need to be careful to not include lines which represent nodes outside the subtree in the CHT envelope. \u003cbr /\u003e Note that dfs order gives us a continuous range for each node, which includes all of its descendants.\u003cbr /\u003e So we can reduce the problem to range queries where we have to find the minimum over the lines that represent the nodes in the range. \u003cbr /\u003e Hence we make a segment tree where in each node we store a \u003ccode\u003evector\u003c/code\u003e for the convex hull trick. \u003cbr /\u003e Note that there are no updates once the tree is built, the trouble is queries. It is expensive to merge two hulls. Hence, we just query each of the convex hulls in the \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/66/6c/666cc239bd9595b8818555e063d8d8b69ad0cda0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e nodes which represent any arbitrary interval, and take the minimum value of the lot. \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eThis gives an overall run-time of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e × \u003ci\u003elog\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["procon","iiitd","editorial"]}}