{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1476091410,"rating":-19,"authorHandle":"284914869","modificationTimeSeconds":1476096154,"id":47654,"title":"\u003cp\u003ecodeforces 724E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eAlgorithm: maximum flow, min-cut\u003c/p\u003e\u003cp\u003eThe network will consist of n + 2 vertices, \u003c/p\u003e\u003cp\u003ethe source point located at the node with the number 0 and the sink at the node with the number n + 1. \u003c/p\u003e\u003cp\u003eFor each node i such that 1 ≤ i ≤ n add the arc (0, i) with a capacity pi \u003c/p\u003e\u003cp\u003eand arc (i, n + 1) with capacity si.\u003c/p\u003e\u003cp\u003eAlso, for each pair of nodes i and j such that 1 ≤ i \u0026lt; j ≤ n, add the arc (i, j) with capacity c, \u003c/p\u003e\u003cp\u003eso that the answer is just the maximum flow of the network.\u003c/p\u003e\u003cp\u003ebut there are n^2/2 edges, so it\u0027s not available to get the answer of max-flow, you need to use dp to work out the min-cut, for the max-flow is equal to min-cut.\u003c/p\u003e\u003cp\u003edefine i as the position and j, j is on the left of position i, there are j cities connecting to the source.\u003c/p\u003e\u003cp\u003ethen\u003c/p\u003e\u003cp\u003esetmin(f[i][j+1],f[i-1][j]+s[i])\u003c/p\u003e\u003cp\u003esetmin(f[i][j],f[i-1][j]+p[i]+j*c)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ehere is the code\u003c/strong\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#include \u0026lt;cstdio\u0026gt;\n#include \u0026lt;cstring\u0026gt;\n#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cmath\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;cstdlib\u0026gt;\n#define longlongtype\nusing namespace std;\ntypedef long long LL;\n#define ref(i,x,y)for(int i\u003dx;i\u0026lt;\u003dy;i++)\n#define def(i,x,y)for(int i\u003dx;i\u0026gt;\u003dy;i--)\n#ifdef longlongtype\n\ttypedef long long LL;\n\t#define T LL\n\tconst T oo\u003d1e16;\n#endif\n#ifdef inttype\n\t#define T int\n\tconst T oo\u003d2e9;\n#endif\nT max(T a,T b){return a\u0026gt;b?a:b;};\nT min(T a,T b){return a\u0026lt;b?a:b;};\nT gcd(T a,T b){return b?gcd(b,a%b):a;};\nT read(){char c\u003dgetchar();T d\u003d0,f\u003d1;for(;c\u0026lt;\u00270\u0027||c\u0026gt;\u00279\u0027;c\u003dgetchar())if(c\u003d\u003d\u0027-\u0027)f\u003d-1;for(;c\u0026gt;\u003d\u00270\u0027\u0026amp;\u0026amp;c\u0026lt;\u003d\u00279\u0027;d\u003dd*10+c-48,c\u003dgetchar());return d*f;}\nT n,c,ans,a[10001],b[10001],f[10001];\nint main()\n{\n\tn\u003dread(),c\u003dread();\n\tref(i,1,n)a[i]\u003dread();\n\tref(i,1,n)b[i]\u003dread();\n\tref(i,1,n)f[i]\u003doo;\n\tref(i,1,n)def(j,i-1,0)\n\t{\n\t\tf[j+1]\u003dmin(f[j+1],f[j]+b[i]);\n\t\tf[j]\u003df[j]+a[i]+j*c;\n\t}\n\tans\u003doo;\n\tref(i,0,n)ans\u003dmin(ans,f[i]);\n\tprintf(\u0026quot;%I64d\\n\u0026quot;,ans);\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["maximum flow","max-flow min-cut","dp"]}}