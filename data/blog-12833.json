{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1403666741,"rating":0,"authorHandle":"mitan","modificationTimeSeconds":1403666875,"id":12833,"title":"\u003cp\u003ejava.util.Arrays.sort() significantly faster for Object array than for primitive array. (Integer vs int)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHi,\u003c/p\u003e\u003cp\u003eI implemented a solution to \u003ca href\u003d\"//codeforces.com/problemset/problem/439/B\"\u003e439B\u003c/a\u003e where the most time consuming step was using Arrays.sort. On test case 29 it times out at 1000 ms if I sort using an int[]. However, I pass, and use at most 280 ms on test case 29 if I sort using an Integer[]. Can someone explain why java.util.Arrays.sort(), on Codeforces, is more than 3x faster when using Integer[] rather than int[] in this case? The size of the array is 100,000 and the integers inside the array are from 1 to 100,000.\u003c/p\u003e\u003cp\u003eThanks\u003c/p\u003e\u003cp\u003eMy code is here:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epublic class Main {\n  public static void main(String[] args) {\n    Scanner sc \u003d new Scanner(System.in);\n    int n \u003d sc.nextInt();    // number of subjects\n    long x \u003d sc.nextLong();    // initial per-chapter learning power of a subject\n    \n    Integer[] cps \u003d new Integer[n];  // number of chapters per subject\n    for (int i \u003d 0; i \u0026lt; n; ++i) {\n      cps[i] \u003d sc.nextInt();\n    }\n\n    Arrays.sort(cps);  // Times out when cps is an int[].  Must be Integer[].\n    \n    long totalTime \u003d 0;\n    for (int i \u003d 0; i \u0026lt; n; ++i) {\n      totalTime +\u003d cps[i] * x;\n      if (x !\u003d 1) {\n        --x;\n      }\n    }\n    \n    System.out.println(totalTime);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["java","sorting","array","time limit exceeded"]}}