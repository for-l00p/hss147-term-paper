{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1440493363,"rating":0,"authorHandle":"ttrkaya","modificationTimeSeconds":1440493385,"id":19966,"title":"\u003cp\u003eWhy don\u0027t we get stack-overflow at 429/A?\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI have just solved this great problem: \u003ca href\u003d\"//codeforces.com/problemset/problem/429/A\"\u003ehttp://codeforces.com/problemset/problem/429/A\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI have solved the problem by using DFS on the given tree, like most others did, and like the editorial suggests.\u003c/p\u003e\u003cp\u003eAs I was coding the solution, I was sure that I would get a stack-overflow, and then I would reimplement the solution using BFS. But I did not..\u003c/p\u003e\u003cp\u003eIn the problem, it is very possible that the tree is a path (a unary tree where each node has at most one child), and its depth could be 10^5. In fact the test case #2 is a path. \u003c/p\u003e\u003cp\u003eA stack of depth 10^5 should be an overflow right? I have not used any linker settings to increase the stack size.\u003c/p\u003e\u003cp\u003eSo what I\u0027m wondering is: is it just a missing test case? Or does codeforces compilers do something special so that we don`t get a stack overflow even at depth 10^5?\u003c/p\u003e\u003cp\u003eI`m wondering this, because lots of times, it is easier to code the recursive DFS solution than iterative BFS solution. If possible I wish not to care about the stack-overflows.\u003c/p\u003e\u003cp\u003eThank you in advance.\u003c/p\u003e\u003c/div\u003e","tags":["dfs","stack-depth","stack overflow","codeforces"]}}