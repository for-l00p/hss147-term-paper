{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1499884911,"rating":65,"authorHandle":"TimonKnigge","modificationTimeSeconds":1499946438,"id":53265,"title":"\u003cp\u003eRerooting dynamic Euler tour trees\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eDear wise-and-all-knowing people of Codeforces, I have come to call on you for aid.\u003c/p\u003e\u003cp\u003eI\u0027m trying to wrap my head around rerooting an Euler tour tree. In particular, I want to be able to still do link/cut operations. I can find some bits information about rerooting on the internet (which I understand), but I don\u0027t understand how I can continue using my Euler tour tree afterwards. Thus my question is: how, \u003cem\u003eif possible at all\u003c/em\u003e, can I use Euler tour trees to support the operations \u003ccode\u003ecut(u)\u003c/code\u003e, \u003ccode\u003elink(u, v)\u003c/code\u003e (assuming u has no parent), \u003ccode\u003efindroot(u)\u003c/code\u003e and \u003ccode\u003emakeroot(u)\u003c/code\u003e, each in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time? (or optionally with some extra \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/67/d7/67d7834e4dceb6509fb597fb26259f9b0ee0b3c9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e-factors) In particular, \u003ccode\u003emakeroot(u)\u003c/code\u003e would preserve the general shape of the tree, i.e. you can\u0027t do \u003ccode\u003eattach(findroot(u), v))\u003c/code\u003e, instead all edges on the path from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e to the root would be reversed.\u003c/p\u003e\u003cp\u003eThroughout this post let me use the left tree in \u003ca href\u003d\"http://wcipeg.com/problem/images/noi13p2/noi13p2.png\"\u003ethis\u003c/a\u003e image as an example, with Euler tour 124252131. (these are the vertices in visited order, technically an Euler tour would yield the edges, but these two definitions are really equivalent, and I find this one easier to work with when doing link/cut operations)\u003c/p\u003e\u003cp\u003eNow, the problem comes from the fact that if you want to do e.g. a \u003ccode\u003ecut(u)\u003c/code\u003e operation, you need to cut out the segment from the first occurrence of u to its last occurrence. I.e. suppose we want to cut \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, then you get: \u003cspan class\u003d\"tex-span\"\u003e124252131\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e → \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e1 [24252] 131\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e → \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e24252   131\u003c/span\u003e (removing a redundant \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e in front of the \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e-subsequence). Note that we really need the \u003cem\u003efirst\u003c/em\u003e and \u003cem\u003elast\u003c/em\u003e occurrence, the middle \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e is useless. If all you are doing is moving around \u003cem\u003ecomplete\u003c/em\u003e segments, then the relative order of occurrences of the same vertex never changes, so you can just keep pointers to them for when you need them.\u003c/p\u003e\u003cp\u003eThen, \u003cem\u003ererooting\u003c/em\u003e. Since information about this is sparse on the internet, let me give a quick description. All that needs to be done is to rotate the sequence, with a small caveat wrt to the fact that the root of the tree appears one extra time at the end of the sequence. The algorithm is as follows:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eremove the last occurrence of the old root from the sequence (at the end of the sequence, by definition)\u003c/li\u003e   \u003cli\u003erotate sequence so the first occurrence of the new root is at the front\u003c/li\u003e   \u003cli\u003eappend the new root to the end\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eSo suppose we reroot the example tree at 5, then we get \u003cspan class\u003d\"tex-span\"\u003e124252131\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e → \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e12425213 (..1)\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e → \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e1242   5213\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e → \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e5213   1242 (5..)\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e → \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e521312425\u003c/span\u003e. Done. It seems a bit magical, but basically the idea behind this is that the sequence represents a cycle (namely, the Euler tour), and hence rotating the sequence just changes the starting vertex of the tour.\u003c/p\u003e\u003cp\u003eBut then comes the problem. All the slides I found about this (e.g. \u003ca href\u003d\"https://web.stanford.edu/class/cs166/lectures/17/Small17.pdf\"\u003ehere\u003c/a\u003e, slide 18) just call it quits at this point. But note that this rotation screwed up the \u003ccode\u003efirst\u003c/code\u003e and \u003ccode\u003elast\u003c/code\u003e for some vertices (specifically, precisely for the vertices on the path from the new root to the old root, inclusive). In fact, any of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edeg\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edeg\u003c/i\u003e(\u003ci\u003eu\u003c/i\u003e) + 1\u003c/span\u003e occurrences of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e might be the new \u003ccode\u003efirst\u003c/code\u003e or \u003ccode\u003elast\u003c/code\u003e for a vertex. Since both the number of vertices on the path between the two roots, \u003cem\u003eand\u003c/em\u003e the degrees of these vertices (~#occurrences) can potentially be linear in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e, there is no way that we can quickly recompute \u003ccode\u003efirst\u003c/code\u003e and \u003ccode\u003elast\u003c/code\u003e, i.e. we probably have to compute this information lazily. But I have no idea how to do this. And yet we really need these occurrences to quickly detach a subtree (or answer the query \u0026quot;is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e an ancestor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e\u0026quot; or whatever).\u003c/p\u003e\u003cp\u003ePlease send help.\u003c/p\u003e\u003cp\u003e(PS: I know I can use link/cut trees for this, but I\u0027m explicitly asking about Euler tour trees. Not really for a problem (though you could test on e.g. SPOJ\u0027s DYNACON1), I\u0027m just curious if this is possible (the fact that this rerooting is described in various lecture slides suggests to me that it is))\u003c/p\u003e\u003c/div\u003e","tags":["euler tour","dynamic trees","question"]}}