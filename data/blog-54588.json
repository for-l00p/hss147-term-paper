{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1505660963,"rating":3,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1505660963,"id":54588,"title":"\u003cp\u003eNotes on Codeforces Beta Round #78, Div2-A, B, C\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/99/problem/A\" title\u003d\"Codeforces Beta Round 78 (Div. 2 Only)\"\u003e99A - Help Far Away Kingdom\u003c/a\u003e\u003c/p\u003e\u003cp\u003eUsing C++, there is a simple manner to implement string parsing. For this problem, we can replace \u0027.\u0027 with space, and initialize an \u0027istringstream\u0027 type with this modified string. Then, we define two string variables, and initialize them with \u0027istringstream\u0027 as a standard input. The next work is to find the last digit of the first string and the first digit of the second string, and output the answer according to the requirement.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/99/problem/B\" title\u003d\"Codeforces Beta Round 78 (Div. 2 Only)\"\u003e99B - Help Chef Gerasim\u003c/a\u003e\u003c/p\u003e\u003cp\u003eTake care of two special cases \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1, 2\u003c/span\u003e. For \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e ≥ 3\u003c/span\u003e, we can find out the maximum and minimum values, denoted as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/span\u003e, respectively. Besides, we should find out all the other values that are neither \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e\u003c/span\u003e nor \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e\u003c/span\u003e. If such value is unique, and equal to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c4/0a/c40a4140fdbd1e3cb9d7176379c1048cddc00624.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, the current configuration can be recovered.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/99/problem/C\" title\u003d\"Codeforces Beta Round 78 (Div. 2 Only)\"\u003e99C - Help Victoria the Wise\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe complete permutation has \u003cspan class\u003d\"tex-span\"\u003e6! \u003d 720\u003c/span\u003e patterns. Therefore, we can compare every one with all the other ones to check whether it results in a unique pattern or not. Now we should figure out how to determine that two patterns are equivalent after some rotation. \u003c/p\u003e\u003cp\u003eAs an efficient manner, we can mark the six planes with front, back, up, down, left and right. Then, we fix one plane as the top, and rotate 0, 90, 180, 270 degrees to obtain four equivalent patterns. As there are 6 planes to serve as the top, the total number of equivalent patterns are \u003cspan class\u003d\"tex-span\"\u003e6 × 4 \u003d 24\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}