{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1489653292,"rating":-19,"authorHandle":"AN_out_of_date","modificationTimeSeconds":1489840931,"id":51011,"title":"\u003cp\u003e2.Periodicity (POI: 18 - solved: 68)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eI appreciate if anyone can help me share his good problems of POIs, just list them in the comments and I\u0027ll check them all.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://main.edu.pl/en/archive/oi/18/okr\"\u003eLink\u003c/a\u003e\u003c/p\u003e\u003cp\u003eGiven a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. We define \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ee/ac/eeac043bb81b3fc1f2512cbd82d5910c07aaa323.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e as follows:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/35/51/3551ac944f9bff2fc936af54ed409b6f73e4ac8a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIn other hand, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ee/ac/eeac043bb81b3fc1f2512cbd82d5910c07aaa323.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is a set of sizes of periods \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e \u003d \u003ci\u003eAAA\u003c/i\u003e...\u003ci\u003eAB\u003c/i\u003e(\u003ci\u003eB\u003c/i\u003e \u003ci\u003eis\u003c/i\u003e \u003ci\u003ea\u003c/i\u003e \u003ci\u003eprefix\u003c/i\u003e \u003ci\u003eof\u003c/i\u003e \u003ci\u003eA\u003c/i\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eNow, we want to create the minimum lexicographically string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e of size \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e such that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/53/56/535637e9045141e4b11155e1099c4b31167bd615.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eThere are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e such tests.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003ek\u003c/i\u003e ≤ 20\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003en\u003c/i\u003e ≤ 250000\u003c/span\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e________________\n3\nABIABUABIAB\nBABBAB\nBABURBAB\n________________\n01001101001\n010010\n01000010\n________________\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSome of hints only make a good look and may not solve the problem. When you look in that way, you\u0027ll come close to the solution. And if you didn\u0027t look in that way, you won\u0027t get the next hints and you\u0027ll get confused in \u003cspan class\u003d\"tex-span\"\u003e13\u003c/span\u003e spoilers.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint1\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eLet\u0027s find periods of S at first.\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eActually every period is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e minus one of the fathers of element \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e in \u003ca href\u003d\"https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm\"\u003eKMP\u003c/a\u003e  tree( means \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e...\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e ). \u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint2\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eConsider \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e , it is the minimum period, let\u0027s call it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e. It makes a good look on the problem.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eSome problem just used this idea : \u003ca href\u003d\"/contest/526/problem/D\" title\u003d\"ZeptoLab Code Rush 2015\"\u003e526D - Ам Ням и ожерелье\u003c/a\u003e\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint3\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eLet\u0027s see other periods.\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eyou may have a sense that bigger periods which have a size divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - \u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e(\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e.\u003ci\u003esize\u003c/i\u003e\u003c/span\u003e) are useless. I agree.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSo where are useful periods?\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eIf a period \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e have a size indivisible by size of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, first it starts from the beginning of the string and in the second repetition it starts from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e.\u003ci\u003esize\u003c/i\u003e\u003c/span\u003e and meet \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/28/44/2844fd44945ac87e02562c7f4d633fdb97d82da1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e in period \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eSo what happen if the second repetition have a size more than or equal to size of A?.\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eNot possible!\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eConsider a circular string from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and call that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e. You saw there is another place you can see the same string when you set the beginning of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e from there. So it is not hard to see a frequent substring in string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e, and if so, you found another period in S, that is less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e.\u003ci\u003esize\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eSo we proved that if a period\u0027s size is indivisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e.\u003ci\u003esize\u003c/i\u003e\u003c/span\u003e, its second repetition starts after \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003en\u003c/i\u003e - \u003ci\u003eA\u003c/i\u003e.\u003ci\u003esize\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003ehint4\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eYou may have a sense of recursive solving the problem as you see we almost minimized the problem in the minimum period. I agree with you, but see more carefully.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eLet\u0027s see a period as a suffix which is equal to a prefix of S, what we saw in hint 1.\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eIf we consider a suffix, we can see something exactly like the whole problem in the suffix and suffixes after it.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eClaim\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eYou can solve the problem for a suffix by solving it for the next suffix.\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eLet\u0027s numerate suffixes from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e and its beginning as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e...\u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Assume that we want to solve suffix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e and we solved suffix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e + 1\u003c/span\u003e as well. \u003c/p\u003e\u003cp\u003eAs we know, the length of minimum period of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/00/eb/00ebb5d999430c4e522a5ebd721b623e3e072c9a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e suffix is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e - \u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eAs the length of minimum periods don\u0027t increase when we see forward suffixes so \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/sub\u003e - \u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e ≤ \u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e. Consider length of the minimum period of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eT\u003c/i\u003e + 1\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e. (i.e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e \u003d \u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eT\u003c/i\u003e + 1\u003c/sub\u003e - \u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eQ\u003c/i\u003e \u003d \u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eT\u003c/i\u003e + 2\u003c/sub\u003e - \u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eT\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e) As your sense said, if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e \u003d \u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e then we just need to copy what we had in Su_{T+1}\u0027s minimum period.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eBut what if not (i.e. P is not equal to Q$)?\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eAccording to your sense and logical thinking, if you want to prove our claim you have a prefix of suffix T in suffix T+1 deterministically and you must copy it. If there is anything you don\u0027t have before you must change it in a way that don\u0027t make an unwanted period.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eTo do it, just two case remaining!!!\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eIf you came with me, up to now and looked how I figured, you\u0027ll solve this cases yourself as I help you in what you must prove:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6a/3a/6a3a8ddd8f31fcea9c3d892062704c311e411f58.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e then you can prove if you copy what you have before in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eT\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e, as you must have done it, and fill what you didn\u0027t have before by zero then there isn\u0027t any problem. Actually you can prove if a new period founded, then Q wasn\u0027t length of the minimum period in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eT\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1d/0b/1d0b9b19e6404075274736d52cbac7aef3f9985d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e then you just do like the previous case and check if the last Q characters of the minimum period of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e was equal to minimum period of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eT\u003c/i\u003e + 1\u003c/sub\u003e\u003c/span\u003e(i.e. there is a new period started from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eT\u003c/i\u003e + 1\u003c/sub\u003e - \u003ci\u003eQ\u003c/i\u003e\u003c/span\u003e), you just must change the last character of the minimum period of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eSu\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eT\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Actually you can prove it like the previous case. :)\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eTell me if you come up with a easier and shorter answer, I\u0027ll become glad.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e//    whoisHussain.org\n#include \u0026lt;bits/stdc++.h\u0026gt;\nusing namespace std;\n\nconst int N \u003d 300011;\nint f[N],q, g[N],sz; \nbool a[N];\nint32_t main(){\n        string s;\n        int n;\n        ios::sync_with_stdio(false),cin.tie(0), cout.tie(0);\n        cin \u0026gt;\u0026gt; q;\n        while( q-- ){\n                cin \u0026gt;\u0026gt; s;\n                n \u003d s.size(), sz \u003d 0;\n\n                f[0] \u003d f[1] \u003d 0;\n                for(int i \u003d 2,j \u003d 0; i \u0026lt;\u003d n; i++){\n                        while( j!\u003d0 \u0026amp;\u0026amp; s[i-1] !\u003d s[j] )\n                                j \u003d f[j]; \n                        if( s[i-1]\u003d\u003ds[j] ) j++;\n                        f[i] \u003d j;\n                }\n\n                for(int i \u003d n; i; i \u003d f[i] ) g[sz++] \u003d n-i;\n                \n                for(int i \u003d sz-1, gg \u003d n, cz \u003d 0;i\u0026gt;-1; cz \u003d gg-g[i], gg \u003d g[i], i--){ \n                        for(int j \u003d 0; j \u0026lt; min(gg-g[i], n-gg); j++) a[ j + g[i] ] \u003d a[ j + gg ];\n                        if( gg - g[i] \u0026gt; n - gg \u0026amp;\u0026amp; (cz \u003d\u003d 0 || (gg - g[i]) % cz \u003d\u003d 0) ){ \n                                int j \u003d 0;\n                                for(; j \u0026lt; cz; j++)\n                                        if( a[j + gg-cz ] !\u003d a[ gg + j ] ) break;\n                                if( j \u003d\u003d cz ) a[gg - 1] \u003d 1 - a[gg + cz - 1]; \n                        }\n                        a[g[i]] \u003d 0;\n                }\n                for(int i \u003d 0; i \u0026lt; n; i++)\n                        printf(\u0026quot;%d\u0026quot;,a[i]),a[i] \u003d 0;\n                printf(\u0026quot;\\n\u0026quot;);\n        }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eHope you enjoy the problem :) and it helped you.\u003c/p\u003e\u003c/div\u003e","tags":["pois","poi","beautiful","great","problem","goodproblem","goodproblems","hard","hard problem","valuable"]}}