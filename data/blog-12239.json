{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1399633912,"rating":117,"authorHandle":"Vladyslav","modificationTimeSeconds":1399818371,"id":12239,"title":"\u003cp\u003eHeavy-light decompositon — it can be simple!\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cem\u003eHi to all!\u003c/em\u003e\u003c/p\u003e\u003cp\u003eToday I want to talk a little bit about writing an elegant data structure — Heavy-light decomposition (or just \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eHLD\u003c/i\u003e\u003c/span\u003e). \u003c/p\u003e\u003cp\u003eMany of you are probably faced with problems like \u0026quot;given a weighted tree, requests for modification edges and queries finding the minimum on the edges between two vertices.\u0026quot; HLD can quite easily do this and many other tasks. \u003c/p\u003e\u003ch4\u003e\u003cem\u003eLets begin with a brief description of the structure.\u003c/em\u003e\u003c/h4\u003e\u003cp\u003e\u003cem\u003e// A more complete description is on \u003ca href\u003d\"http://e-maxx.ru/algo/heavy_light\"\u003ee-maxx\u003c/a\u003e. (in Russian)\u003c/em\u003e\u003c/p\u003e\u003cp\u003eHeavy-light decomposition — this is such a decomposition of graph into disjoint paths at the vectixes or edges that on the way from any node to the root of this tree we will change no more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elog\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e paths. If we can build such paths then with the help of additional structures (segment tree (or just ST), for example) we will be able to respond quickly to requests. \u003c/p\u003e\u003cp\u003eWe call an edge heavy if son\u0027s subtree, to which leads this edge, will be not less than half of the size of the father\u0027s subtree. In other words, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ec/ec/ecec053e2f0bcb566ffb95bd5e2875e99b8ed4e5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Note that from the vertix downwards may extend no more than one heavy edge. \u003c/p\u003e\u003cp\u003e\u0026quot;And it gives us?\u0026quot; — You ask. And it gives us the following: if we take all the vertices that have not outgoing heavy edge, and we will rise to the root, until it reach or pass by a light edge, then this paths will be paths in HLD.\u003c/p\u003e\u003cp\u003eConstructing a segment tree on each of the ways we can for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elog\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e respond to a lot of kinds of requests between two vertices (maximum, etc.). You will need to gently rise from the vertices to their \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elca\u003c/i\u003e\u003c/span\u003e (lowest common ancestor) and do requests to ST or something else.\u003c/p\u003e\u003ch4\u003e\u003cem\u003eNow about amount of code ..\u003c/em\u003e\u003c/h4\u003e\u003cp\u003eThe first time I tried to write this structure to the problem, the code was, to put it mildly, a rather big. I honestly was looking for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elca\u003c/i\u003e\u003c/span\u003e, honestly built on each of the paths and whatnot. And now there is talk about how to reduce the amount.\u003c/p\u003e\u003ch4\u003e\u003cem\u003eAbout construction of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eHLD\u003c/i\u003e\u003c/span\u003e\u003c/em\u003e\u003c/h4\u003e\u003cp\u003eThe first thing to fix, so it\u0027s a bit awkward construction. Now in this form, as described above, it is not very comfortable to write.\u003c/p\u003e\u003cp\u003eYou can build a decomposition as follows: let we are in a vertex. It belongs to a path. Consider all the children of this node — we can continue this way in just one son, but all the other children will be the beginning of new ways. To what son we should continue this way? That\u0027s right, to son which has the largest subtree. So one \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003edfs\u003c/i\u003e\u003c/span\u003e needed to calculate the size of the subtrees and the other for direct construction of decomposition.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/0a/da/0ada17d5575ef4969c8945572b1a617f0529804c.jpg\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003ch4\u003e\u003cem\u003eAbout separate structures for each path\u003c/em\u003e\u003c/h4\u003e\u003cp\u003eNext, I\u0027ll talk on an example of ST, since it is often necessary for tasks. The next thought after we learned simple building \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eHLD\u003c/i\u003e\u003c/span\u003e, I had about this: \u0026quot;Damn, it\u0027s still necessary ST for each way to write.\u0026quot; Yes, it\u0027s not that hard, but for me it was a bit uncomfortable. But then you can see that only one ST needed. Need to renumber the vertices in each path that all the vertices are on the same subsegments (for ST). So we heed only 1 ST.\u003c/p\u003e\u003ch4\u003e\u003cem\u003eAbout finding \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elca\u003c/i\u003e\u003c/span\u003e\u003c/em\u003e\u003c/h4\u003e\u003cp\u003eAnother uncomfortable thing — separate finding LCA.\u003c/p\u003e\u003cp\u003eIt turns out that we should not look for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elca\u003c/i\u003e\u003c/span\u003e explicitly. Let\u0027s proceed to the following algorithm: consider two ways in which our now vertices. If they are on the same path, it\u0027s just a request (ST) . And if not? Then let\u0027s choose the path that has the highest vertix below. Then just go to the ancestor of this vertex. So we will continue until we come to the same path. Parallel to all these lifts will make requests to ST, thus looking for an answer. \u003c/p\u003e\u003cp\u003eWe have that answer to the query and finding \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elca\u003c/i\u003e\u003c/span\u003e can be done simultaneously.\u003c/p\u003e\u003ch4\u003e\u003cem\u003eMaterials\u003c/em\u003e\u003c/h4\u003e\u003cp\u003eI am very grateful to the site e-maxx, which has a good description (\u003ca href\u003d\"http://e-maxx.ru/algo/heavy_light\"\u003etap\u003c/a\u003e) of this structure. I relied a lot on this article.\u003c/p\u003e\u003cp\u003eAnother good materials \u003ca href\u003d\"http://wcipeg.com/wiki/Heavy-light_decomposition\"\u003ehere\u003c/a\u003e. \u003c/p\u003e\u003cp\u003eAnd a short realization is \u003ca href\u003d\"http://apps.topcoder.com/forums/?module\u003dThread\u0026amp;threadID\u003d796128\u0026amp;start\u003d0\u0026amp;mc\u003d8\"\u003ehere\u003c/a\u003e\u003c/p\u003e\u003ch4\u003e\u003cem\u003eBonus\u003c/em\u003e\u003c/h4\u003e\u003cp\u003eYou can check your \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eHLD\u003c/i\u003e\u003c/span\u003e on \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1553\"\u003ethis\u003c/a\u003e problem. And here is \u003ca href\u003d\"http://ideone.com/KgO3Kj\"\u003emy code\u003c/a\u003e. \u003c/p\u003e\u003cp\u003eAnother problems: \u003ca href\u003d\"http://www.spoj.com/problems/QTREE/\"\u003eQTREE\u003c/a\u003e, \u003ca href\u003d\"http://www.lightoj.com/volume_showproblem.php?problem\u003d1348\"\u003eAladdin and the Return Journey\u003c/a\u003e. \u003c/p\u003e\u003cp\u003e\u003cem\u003eP.S. I understand that the simplicity of the structure — relative thing. I tried to explain how it\u0027s easy to write for me. I\u0027ll be very happy if this article will be useful.\u003c/em\u003e \u003c/p\u003e\u003cp\u003e\u003cem\u003eP.P.S This is my first article. I will be glad to hear constructive criticism, comments about the article.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e","tags":["heavy-light","hld"]}}