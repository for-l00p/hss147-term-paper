{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1436097417,"rating":151,"authorHandle":"accidentallygivenfuck","modificationTimeSeconds":1438284283,"id":19083,"title":"\u003cp\u003eIneffable â€” simple command-line grader for personal use\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ccenter\u003e \u003cimg src\u003d\"/predownloaded/4e/6b/4e6b35c7c4f62e05c04a7d083534df918f3d9b5f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003c/center\u003e\u003cp\u003eHello Codeforces,\u003c/p\u003e\u003cp\u003eI want to share with you a simple tool that I\u0027ve been using for a while now that I named \u0026quot;Ineffable\u0026quot;.\u003c/p\u003e\u003ch1\u003eWhat is ineffable?\u003c/h1\u003e\u003cp\u003eSimple command-line grader for local grading of solutions for problems of competitive programming contests. It is written in Python and it uses \u003ccode\u003etimeout\u003c/code\u003e Perl library to limit resources (time and memory limits) of program being tested.\u003c/p\u003e\u003cp\u003eIt works on Ubuntu, and I guess it should work on any Linux/Unix system as long as Python and Perl are installed.\u003c/p\u003e\u003ch1\u003eScreenshots\u003c/h1\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/f2/b6/f2b67d422912e1120c18f8b70e4f25bff7649da0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg alt\u003d\" \" src\u003d\"/predownloaded/4f/80/4f803568b6e57e32143b0c0bacdeb066ec8c44ad.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003cbr /\u003e(Original quote is \u0026quot;Success consists of going from failure to failure without loss of enthusiasm\u0026quot;)\u003c/p\u003e\u003ch1\u003eInstallation\u003c/h1\u003e\u003cp\u003eRun the following commands on your terminal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ mkdir ~/.ineffable\n$ cd ~/.ineffable\n$ wget https://bitbucket.org/silap/ineffable/downloads/ineffable-1.0.zip\n$ unzip master.zip\n$ rm master.zip\n$ mv silap-ineffable-*/* .\n$ rm -r silap-ineffable-*/\n$ sudo ln -s ~/.ineffable/ineffable /usr/local/bin/ineffable\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr alternatively you may run this command if you have curl installed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ bash \u0026lt; \u0026lt;(curl -sL https://bitbucket.org/silap/ineffable/raw/f208b207160eacd8ba4c30c078d1255e309c6b40/install.sh)\n\u003c/code\u003e\u003c/pre\u003e\u003ch1\u003eConfiguration\u003c/h1\u003e\u003cp\u003eWhenever you run ineffable it looks for \u003ccode\u003eineff.json\u003c/code\u003e file. You can also tell ineffable which configuration file to use using this syntax: \u003ccode\u003einefabble another.json\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eConfiguring ineffable is easy and quite intuitive. After you install ineffable you can view the example configuration file that is located at \u003ccode\u003e~/.ineffable/ineff.json.example\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eAvailable configuration options are as follows:\u003c/p\u003e \u003ctable\u003e   \u003cthead\u003e     \u003ctr\u003e       \u003cth\u003ekey \u003c/th\u003e       \u003cth\u003eexample value \u003c/th\u003e       \u003cth\u003eDescription \u003c/th\u003e     \u003c/tr\u003e   \u003c/thead\u003e   \u003ctbody\u003e     \u003ctr\u003e       \u003ctd\u003epkdesc \u003c/td\u003e       \u003ctd\u003e\u0026quot;Balkan OI 2014 Day 2 Problem Ephesus\u0026quot; \u003c/td\u003e       \u003ctd\u003ePackage description. (Optional) \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003epbcode \u003c/td\u003e       \u003ctd\u003e\u0026quot;steeple\u0026quot; \u003c/td\u003e       \u003ctd\u003eProblem code. Ineffable searches for string \u003ccode\u003e{PROBLEM}\u003c/code\u003e in keys \u003ccode\u003ewarmup\u003c/code\u003e, \u003ccode\u003eexecute\u003c/code\u003e, \u003ccode\u003einp\u003c/code\u003e, \u003ccode\u003eout\u003c/code\u003e and \u003ccode\u003etstdir\u003c/code\u003e, and replaces them with \u003ccode\u003epbcode\u003c/code\u003e value. (Optional) \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003etl \u003c/td\u003e       \u003ctd\u003e1000 \u003c/td\u003e       \u003ctd\u003eTime limit (in milliseconds). (Required) \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eml \u003c/td\u003e       \u003ctd\u003e65536 \u003c/td\u003e       \u003ctd\u003eMemory limit (in kilobytes). (Required) \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003ewarmup \u003c/td\u003e       \u003ctd\u003e\u0026quot;g++ -O2 -o solution solution.cpp\u0026quot; \u003c/td\u003e       \u003ctd\u003eCommand to be executed before the grading starts. For example, it can be used to compile C++ code. Grading stops if the command exits with non-zero code (such as, when compilation fails). (Optional) \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003eexecute \u003c/td\u003e       \u003ctd\u003e\u0026quot;./solution\u0026quot; or \u0026quot;python solution.py\u0026quot; \u003c/td\u003e       \u003ctd\u003eCommand that runs the solution. \u003cspan style\u003d\"color: red;\"\u003eSolution needs to read from stdin and write to stdout.\u003c/span\u003e (Required) \u003c/td\u003e     \u003c/tr\u003e     \u003ctr\u003e       \u003ctd\u003etstdir \u003c/td\u003e       \u003ctd\u003e\u0026quot;steeple_tests\u0026quot; \u003c/td\u003e       \u003ctd\u003eDirectory where the test files are located. If ommited, it is assumed that tests are located in the current directory. (Optional) \u003c/td\u003e     \u003c/tr\u003e   \u003c/tbody\u003e \u003c/table\u003e\u003cp\u003eThere are 2 different ways to show ineffable which files are input files and which files are output files:\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eSmart stars:\u003c/p\u003e   \u003cpre\u003e\u0026quot;inp\u0026quot;: \u0026quot;input*.txt\u0026quot;,\n\u0026quot;out\u0026quot;: \u0026quot;output*.txt\u0026quot;\u003c/pre\u003e\u003c/li\u003e \u003c/ol\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eListing files.\u003c/p\u003e   \u003cpre\u003e# Syntax 1\n\n\u0026quot;iopairs\u0026quot;: {\n  \u0026quot;input1.txt\u0026quot;: \u0026quot;output1.txt\u0026quot;,\n  \u0026quot;input2.txt\u0026quot;: \u0026quot;output2.txt\u0026quot;,\n  \u0026quot;input3.txt\u0026quot;: \u0026quot;output3.txt\u0026quot;\n}\n\n# Syntax 2\n\n\u0026quot;iopairs\u0026quot;: {\n  \u0026quot;inp\u0026quot;: {\u0026quot;input1.txt\u0026quot;, \u0026quot;input2.txt\u0026quot;, \u0026quot;input3.txt\u0026quot;},\n  \u0026quot;out\u0026quot;: {\u0026quot;output1.txt\u0026quot;, \u0026quot;output2.txt\u0026quot;, \u0026quot;output3.txt\u0026quot;}\n}\u003c/pre\u003e\u003c/li\u003e \u003c/ol\u003e\u003ch1\u003eSee it at work (sample session)\u003c/h1\u003e\u003cp\u003eLet\u0027s solve problem Cow Steeplechase of \u003ca href\u003d\"http://usaco.org/index.php?page\u003dnov11problems\"\u003eUSACO 2011 November Contest\u003c/a\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ # Create folder `steeple` in your desktop and another folder `steeple_tests` inside it.\n$ mkdir Desktop/steeple\n$ cd Desktop/steeple\n$ mkdir steeple_tests\n$ cd steeple_tests\n$\n$ # Download and extract test data into `steeple/steeple_tests/`.\n$ wget -q http://usaco.org/current/data/steeple.zip\n$ unzip -q steeple.zip\n$ rm steeple.zip\n$ cd ..\n$\n$ # Create file `ineff.json` and configure.\n$ touch ineff.json\n$ echo \u0027{\n  \u0026quot;pkdesc\u0026quot;: \u0026quot;Cow Steeplechase (USACO Gold November 2011 Contest)\u0026quot;,\n  \u0026quot;pbcode\u0026quot;: \u0026quot;steeple\u0026quot;,\n  \u0026quot;tl\u0026quot;: 3000,\n  \u0026quot;ml\u0026quot;: 65536,\n  \u0026quot;warmup\u0026quot;: \u0026quot;g++ -std\u003dc++11 -O2 -o {PROBLEM} {PROBLEM}.cpp\u0026quot;,\n  \u0026quot;execute\u0026quot;: \u0026quot;./{PROBLEM}\u0026quot;,\n  \u0026quot;tstdir\u0026quot;: \u0026quot;{PROBLEM}_tests/\u0026quot;,\n  \u0026quot;inp\u0026quot;: \u0026quot;I.*\u0026quot;,\n  \u0026quot;out\u0026quot;: \u0026quot;O.*\u0026quot;\n}\u0027 \u0026gt;ineff.json\n$\n$ # Create `steeple.cpp` and open it with your favorite editor to code your solution.\n$ touch steeple.cpp\n$ vim steeple.cpp\n$ # ...\n$\n$ # Test your solution\n$ ineffable\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs I haven\u0027t spent much effort in making ineffable, there may be some bugs. I won\u0027t be able to fix the bugs at least till the IOI 2015 ends.\u003c/p\u003e\u003cp\u003eIneffable is a simple project and anyone who knows some Python can alter it for their own purpose or even add some features. Project is available on \u003ca href\u003d\"https://bitbucket.org/silap/ineffable/\"\u003eBitbucket\u003c/a\u003e (sorry no Github, it is blocked in my country :/).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eEDIT\u003c/strong\u003e: \u0026quot;Installation\u0026quot; section updated.\u003cbr /\u003e\u003cstrong\u003eEDIT 2\u003c/strong\u003e: Download links updated (to be able to keep number of downloads :P).\u003c/p\u003e\u003c/div\u003e","tags":["ineffable","grader","simple","command-line"]}}