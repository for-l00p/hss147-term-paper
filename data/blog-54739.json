{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1506268153,"rating":0,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1506268153,"id":54739,"title":"\u003cp\u003eNotes on Codeforces Beta Round #80, Div2-A, B, C, D, E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/104/problem/A\" title\u003d\"Codeforces Beta Round 80 (Div. 2 Only)\"\u003e104A - Blackjack\u003c/a\u003e\u003c/p\u003e\u003cp\u003eDetermine the result based on each value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e carefully.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/104/problem/B\" title\u003d\"Codeforces Beta Round 80 (Div. 2 Only)\"\u003e104B - Testing Pants for Sadness\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[1], \u003ci\u003ea\u003c/i\u003e[2], ..., \u003ci\u003ea\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e to denote the given \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e values. To achieve the maximum number of clicks, it is obvious that we should first choose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - 1\u003c/span\u003e wrong answers and then select the correct one, for every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. For \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - 1\u003c/span\u003e wrong answers, and thus we start from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - 1\u003c/span\u003e times, which gives \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - 1) × (\u003ci\u003ei\u003c/i\u003e - 1)\u003c/span\u003e clicks. Also remember that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e contributes \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e clicks, and this gives totally \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] - 1) × (\u003ci\u003ei\u003c/i\u003e - 1) + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e clicks before we move to index \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e. Therefore, we enumerate all the elements, and add the answers together.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/104/problem/C\" title\u003d\"Codeforces Beta Round 80 (Div. 2 Only)\"\u003e104C - Cthulhu\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet us consider what form can such a graph have. There are \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e nodes and only one circle. This implies that we must have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e edges as well, i.e., \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Next, after deleting some single edge, we will surely obtain a connected tree. Therefore, we can adopt a double loop to check if we can obtain a connected tree by eliminating some edge. The connectivity can be simply checked by using Union-Find.\u003c/p\u003e\u003cp\u003eI also find that it is sufficient to just check whether the original graph is connected or not, which can reduce the double loop to a single loop.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/104/problem/D\" title\u003d\"Codeforces Beta Round 80 (Div. 2 Only)\"\u003e104D - Russian Roulette\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe first consider the case where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is an even integer, and there is only one bullet. It can be seen that all the positions can be divided into two types, even indices and odd indices. The probability of winning is always \u003cspan class\u003d\"tex-span\"\u003e0.5\u003c/span\u003e no matter at which type we put the bullet. Now suppose that we have two bullets. One can check that if both two bullets are put at the same type, the winning probability is still \u003cspan class\u003d\"tex-span\"\u003e0.5\u003c/span\u003e; otherwise, the winning probability is decreased. Thus, we should put the two bullets at the same type. Extending this to a general approach, we should put bullets at the even indices until all the even indices have been used up, and then put them at the odd indices. To achieve the minimum lexicographical order, we should implement the above operations from right to left.\u003c/p\u003e\u003cp\u003eNow we deal with the case where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is an odd integer. For one bullet, we can put it at any position, which always gives a winning probability of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d5/44/d54459831f9f2c7065c6ceafc45940ecfcec84cc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. When there are two bullets, the second one should be put at a position with even index so that the winning probability is not decreased. For more bullets, the strategy is similar as the case where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is even. In a word, when \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is an odd integer, we should put the first bullet at position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Then, we put the other bullets at positions \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1, \u003ci\u003en\u003c/i\u003e - 3, \u003ci\u003en\u003c/i\u003e - 5, ..., 4, 2, \u003ci\u003en\u003c/i\u003e - 2, \u003ci\u003en\u003c/i\u003e - 4, ..., 5, 3, 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/104/problem/E\" title\u003d\"Codeforces Beta Round 80 (Div. 2 Only)\"\u003e104E - Time to Raid Cowavans\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis is a very very tricky problem.\u003c/p\u003e\u003cp\u003eIf we answer the query by exhaustive calculation, the complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eqN\u003c/i\u003e)\u003c/span\u003e. However, note that if all queries have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9d/7e/9d7e32d91281fa7824d155a1a73a45995d8adb6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, the complexity is reduced to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9e/3e/9e3ecdf0c8f32c907d504c82a3f9210fa6732a53.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. On the other hand, if all the queries have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/96/0a/960ab5970b53d4d07cc05944a4adf8b6829e2cd9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we can previously use DP algorithm to compute the results for all the potential values of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, resulting in a complexity of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9b/d1/9bd11a071d11e87ec6103f42290c77480fb111af.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eBased on the above observations, we can select one of the two algorithms according to the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. We sort the queries in the increasing order of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. For \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/10/47/104715609869d5460eea8858c762fbcd66555adb.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we use DP algorithm with complexity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eN\u003c/i\u003e)\u003c/span\u003e to calculate the desired result; otherwise we directly compute the sum. The former operation may be implemented for at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/50/f5/50f569c1460b0cfb4ec5311b369b5e122b4a409e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e times, which gives complexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5e/d4/5ed4b36617ad3dee52cd70f1505971c5860f5e8e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e while the latter one might be implemented for at most \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f1/da/f1da76d4a3833e4bd3f314fa87f0f35f0b2b2893.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e times, which gives complexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/0d/32/0d32fc23ee884b15d5ef4f2de49712bcd629cdb5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Therefore, the total complexity has been reduced to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2c/d7/2cd756573b2a1d6873d903f753f7a9caf2dc6d96.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003c/div\u003e","tags":[]}}