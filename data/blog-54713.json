{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1506165329,"rating":65,"authorHandle":"limed","modificationTimeSeconds":1506194452,"id":54713,"title":"\u003cp\u003eJava 9 for Competitive Programming\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eAs Java 9 has been released few days ago, I went through the \u003ca href\u003d\"https://docs.oracle.com/javase/9/whatsnew/toc.htm\"\u003eWhat\u0027s New\u003c/a\u003e to see if there is something useful in the context of Competitive Programming. And I didn\u0027t find much, just these few enhancements:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003enew static factory methods on the List, Set, and Map interfaces (returning immutable instances of those collections), for example: \u003ccode\u003eSet\u0026lt;String\u0026gt; alphabet \u003d Set.of(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;);\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003einternal String representation as array of bytes (8 bit) instead of array of chars (16 bit) in case the string contains only Latin-1 characters (which is normally the case in Competitive Programming); this would reduce memory consumption almost by half in String problems, and I wonder what would be the impact on performance;\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eJShell (aka REPL in some other languages) for executing small pieces of code / bruteforce solutions (thanks \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/bhishma\" title\u003d\"Expert bhishma\"\u003ebhishma\u003c/a\u003e for suggesting this).\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eAlso, there are some new standard library methods not mentioned in \u0026quot;What\u0027s new\u0026quot; (thanks \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/drinkless\" title\u003d\"Legendary grandmaster drinkless\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003ed\u003c/span\u003erinkless\u003c/a\u003e for pointing this out). Here\u0027s what I found: \u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003e\u003ca href\u003d\"http://download.java.net/java/jdk9/docs/api/java/lang/Math.html#fma-double-double-double-\"\u003eMath.fma(a, b, c)\u003c/a\u003e to compute \u003ccode\u003ea * b + c\u003c/code\u003e on doubles/floats with better performance and precision;\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eA few new Math.multiplyExact/multiplyFull/multiplyHigh methods;\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ca href\u003d\"http://download.java.net/java/jdk9/docs/api/java/util/Arrays.html#equals-int:A-int-int-int:A-int-int-\"\u003eArrays.equals\u003c/a\u003e to compare two subarrays;\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ca href\u003d\"http://download.java.net/java/jdk9/docs/api/java/util/Arrays.html#compare-boolean:A-boolean:A-\"\u003eArrays.compare\u003c/a\u003e to compare two arrays/subarrays lexicographically;\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ca href\u003d\"http://download.java.net/java/jdk9/docs/api/java/util/Arrays.html#mismatch-boolean:A-boolean:A-\"\u003eArrays.mismatch\u003c/a\u003e to compute common prefix length of two arrays.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e(Array methods should have efficient implementations using vectorised CPU instructions).\u003c/p\u003e\u003cp\u003eAs a personal note, I feel like Java is still light years behind Scala (which unfortunately is broken on CF for 2 months already) for writing CP code, even though both of them run on the same JVM. Just please, don\u0027t start language flame wars, unless you have tried both :)\u003c/p\u003e\u003cp\u003eP. S. If someone goes through \u0026quot;What\u0027s new\u0026quot; of Java 9 and notices some more relevant enhancements, please post them here. I could have missed something.\u003c/p\u003e\u003c/div\u003e","tags":["java","string","scala"]}}