{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1510080369,"rating":0,"authorHandle":"elena","modificationTimeSeconds":1513638438,"id":55651,"title":"\u003cp\u003eНесколько совсем простых задач (Обновлено!)\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eМы будем решать задачи, опубликованные в разных проверяющих системах (чаще всего это будут Сodeforces и \u003ca href\u003d\"http://acm.timus.ru\"\u003eacm.timus.ru\u003c/a\u003e). Timus — наверное, самый старый архив с задачами на русском языке. \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003cp\u003eТекст ниже можно разделить на четыре части: краткое описание того, что нужно делать и список задач; некоторые небесполезные советы, достаточно подробный разбор задачи, более сложной, чем A+B, и небольшое пошаговое руководство по написанию решения. Вполне возможно, вам будет достаточно прочесть только первую часть или же (когда доберётесь до задачи о двух бандитах) просмотреть ещё и вторую. Но, не исключено, третья часть тоже окажется для кого-то полезной. \u003cbr /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eКраткое описание\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eНа Timus также нужно зарегистрироваться. При сдаче задачи понадобится указывать свой ID (комбинация букв и цифр, которая придёт в письме при регистрации). Обратите внимание, что с точки зрения проверяющей системы Ваше решение должно находиться в default-пакете. Поэтому, если при написании программы Вы поместили её в какой-либо поименованный пакет, не нужно копировать эту строчку в окно для текста программы. Если же Вы хотите прикрепить файл, придётся закомментировать строчку с \u003ccode\u003epackage\u003c/code\u003e, сохранить файл и только после этого отправлять его.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eВажно:\u003c/strong\u003e при написании решения, которое будет тестироваться автоматически, очень важно соблюдать описанный формат входных и выходных данных. Если в описании входных данных написано, что будут введены три строчки, содержащие по два целых числа в каждой, причём эти числа будут находиться в диапазоне от 0 до 100, то это означает, что все тесты, которые будут поданы на вход Вашей программы, будут удовлетворять этому описанию. Вы не должны проверять тесты на соответствие описанию: это делает специальная программа-валидатор ещё до помещения тестов в проверяющую систему. Также Вы не должны выводить какое-либо приглашение пользователю, например, \u0026quot;Введите два целых числа: \u0026quot; — проверяющая система сочтёт это ошибкой. \u003c/p\u003e\u003cp\u003eВсё, сказанное выше, касается также и формата выходных данных. Если указано, что программа должна выводить два целых числа через пробел, значит, она должна выводить их именно так и именно в том порядке, в котором ожидают авторы задачи. Какая-либо дополнительная информация (например, вывод строчки \u0026quot;Ответ: \u0026quot;) будет интерпретирована проверяющей системой как ошибочная. \u003c/p\u003e\u003cp\u003eКак правило, проверить своё понимание условия и решения можно с помощью приведённых в задаче примеров входных и выходных данных (в простых задачах часто ограничиваются одним примером). Стоит помнить, что примеры считаются неотъемлемой частью условия. Разумеется, для хоть сколько-нибудь сложных задач стоит придумать свои примеры входных и выходных данных, которые несложно проверить вручную. \u003c/p\u003e\u003cp\u003e\u003cem\u003eСовет: если Вы пишете в своей программе комментарии на русском языке, отправка через окно для текста программ может приводить к неожиданным эффектам (например, к ошибке компиляции). Если же отправить файл, то \u0026quot;неожиданные эффекты\u0026quot; пропадают.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eПосле регистрации попробуйте решить следующие задачи:\u003c/p\u003e\u003cp\u003eЗадача 1000 \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1000\"\u003eA+B Problem\u003c/a\u003e\u003c/p\u003e\u003cp\u003eЗадача 1293 \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1293\"\u003eЭния\u003c/a\u003e\u003c/p\u003e\u003cp\u003eЗадача 1409 \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1409\"\u003eДва бандита\u003c/a\u003e\u003c/p\u003e\u003cp\u003eЗадача 2001 \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d2001\"\u003eМатематики и ягоды\u003c/a\u003e\u003c/p\u003e\u003cp\u003eЗадача 1725 \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1725\"\u003eАншлаг, аншлаг!\u003c/a\u003e\u003c/p\u003e\u003cp\u003eЗадача 1984 \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1984\"\u003eОхранник компота\u003c/a\u003e\u003c/p\u003e\u003cp\u003eЗадача 1194 \u003ca href\u003d\"http://acm.timus.ru/problem.aspx?space\u003d1\u0026amp;num\u003d1194\"\u003eРукопожатия\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eЕщё немного небесполезных советов\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eПервое и естественное желание — сдать задачу A+B. Если вы уже попробовали это сделать, отправив программу, написанную в предыдущих постах, то наверняка получили сообщение \u0026quot;Wrong Answer\u0026quot;. Это произошло потому, что мы писали программу, складывающую два вещественных числа и выводящую в качестве результата вещественное число, а на Timus\u0027е просили сложить два целых числа и вывести в качестве результата целое число. С \u0026quot;человеческой\u0026quot; точки зрения, нет разницы между, скажем, \u003ccode\u003e4.00\u003c/code\u003e и \u003ccode\u003e4\u003c/code\u003e. Но компьютер думает иначе, поэтому в программу потребуется внести правки, а именно — заменить все \u003ccode\u003edouble\u003c/code\u003e на \u003ccode\u003eint\u003c/code\u003e, а также \u003ccode\u003eDouble\u003c/code\u003e на \u003ccode\u003eInt\u003c/code\u003e (точнее, \u003ccode\u003enextDouble()\u003c/code\u003e на \u003ccode\u003enextInt()\u003c/code\u003e). Завершив исправления, убедитесь, что программа правильно работает, а затем отправьте её на проверку. Теперь сообщение о результате должно выглядеть как \u0026quot;Accepted\u0026quot;.\u003c/p\u003e\u003cp\u003e\u003cem\u003eВы можете просматривать свои решения (как правильные, так и неправильные), нажимая на ссылку \u0026quot;Мои попытки\u0026quot; (в самом низу страницы с условием задачи). В списке попыток нужно нажать на номер попытки и ввести пароль, чтобы увидеть текст решения.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eЗадачи отсортированы по сложности (не совсем по сложности, которую определяет для них Timus; скорее, по сложности для начинающих программистов на Java). Конечно, Вы можете решать их в любом порядке (и даже пропускать, если решение очевидно для вас). Но, возможно, имеет смысл решать их в предложенном порядке. \u003c/p\u003e\u003cp\u003eКак прочитать несколько чисел из стандартного потока ввода — вполне понятно из предыдущих постов. А вот вывести несколько чисел на одной строке — задача чуть менее тривиальная (и Вы впервые столкнётесь с ней в задаче 1409). Самый простой способ — сформировать строку. Пусть, к примеру, Вам нужно вывести два числа, которые в программе обозначены как \u003ccode\u003ec\u003c/code\u003e и \u003ccode\u003ed\u003c/code\u003e. Тогда нужно написать \u003ccode\u003eSystem.out.println(c + \u0026quot; \u0026quot; + d);\u003c/code\u003e. Когда Вы \u0026quot;складываете\u0026quot; числа со строкой (пусть и содержащей всего лишь один пробел), числовой тип будет автоматически преобразован в строковый. \u003c/p\u003e\u003cp\u003eЕсли в качестве вердикта вы получили \u003cem\u003eCompilation error\u003c/em\u003e, нажмите на номер попытки в таблице статуса, и Вы увидите, на что \u0026quot;ругался\u0026quot; компилятор. \u003c/p\u003e\u003cp\u003eЕсли Вы получили в очередной раз \u003cem\u003eWrong answer on test N\u003c/em\u003e, где \u003cem\u003eN\u003c/em\u003e не меняется на протяжении последних десяти попыток, а идеи по исправлению ошибки у Вас иссякли, возможно, следует почитать обсуждение этой задачи: нередко ошибки бывают типичными, и в комментариях Вы найдете пример входных и выходных данных, который, возможно, поможет Вам найти ошибку.\u003c/p\u003e\u003cp\u003eЗадачи на Timus (впрочем, как и во многих других проверяющих системах, имеющих давнюю историю), как правило, достаточно хорошо проверены. Конечно, авторы не могут гарантировать, что нельзя написать неверное решение, которое пройдёт все имеющиеся в системе тесты (такая ситуация называется \u0026quot;слабые тесты\u0026quot;; при обнаружении такой ситуации в систему добавляются дополнительные тесты, а все сданные задачи перетестируются). Однако авторы уверены, что любое правильное решение проходит все имеющиеся в системе тесты. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eСовсем подробное описание, что нужно делать\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eВообще говоря, решения всех задач из списка выше можно получить методом \u0026quot;немного отредактируем решение задачи A+B\u0026quot;. Но если вы прочитали условие задачи \u0026quot;Эния\u0026quot; и не вполне понимаете, что нужно делать, этот раздел может вам помочь. Давайте разберём другую, немного более сложную задачу \u0026quot;Прямоугольник\u0026quot; (её нет на Timus\u0027е, но это не должно вас беспокоить).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eЗадача \u0026quot;Прямоугольник\u0026quot;\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eПрямоугольник на плоскости, стороны которого параллельны осям координат, задан двумя точками: левым нижним углом и правым верхним углом. Ваша задача — посчитать его площадь и периметр.\u003c/p\u003e\u003cp\u003e\u003cem\u003eВходные данные:\u003c/em\u003e\u003c/p\u003e\u003cp\u003eВ первой строке содержатся два целых числа \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e( - 100 ≤ \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e,  \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e ≤ 100)\u003c/span\u003e через пробел — координаты левого нижнего угла. \u003cbr /\u003e В второй строке содержатся два целых числа \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e( - 100 ≤ \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e,  \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e ≤ 100)\u003c/span\u003e через пробел — координаты правого верхнего угла. \u003cbr /\u003e Гарантируется, что прямоугольник задан корректно: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026lt; \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026lt; \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cem\u003eВыходные данные:\u003c/em\u003e\u003c/p\u003e\u003cp\u003eВыведите два целых числа через пробел — площадь и периметр прямоугольника.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eРешение\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eБудем считать, что в нашем распоряжении имеется решение задачи A+B (ради простоты — исходное, с вещественными переменными), и вы его хорошо понимаете (если это не так, перечитайте, пожалуйста, два предыдущих поста). Возьмём за основу решение этой задачи и попробуем получить из него решение задачи \u0026quot;Прямоугольник\u0026quot;. \u003c/p\u003e\u003cp\u003eЗадача А+В состояла в том, что в качестве входных данных было дано два вещественных числа, сумму которых нужно было вычислить и вывести. Поэтому у нас было три переменных \u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003eb\u003c/code\u003e, \u003ccode\u003es\u003c/code\u003e типа \u003ccode\u003edouble\u003c/code\u003e. В нашей задаче входных данных больше: четыре целых числа, да и вывести требуется не одно вещественное число, а два целых. \u003c/p\u003e\u003cp\u003eНачём исправлять нашу программу. В процессе исправлений Java будет многие вещи подчёркивать красной волнистой линией. Не пугайтесь этого и не спешите стереть или \u0026quot;хоть как-нибудь\u0026quot; исправить подчёркнутое, не прочитав этот текст дальше. \u003c/p\u003e\u003cp\u003eХорошей идеей является называть переменные так, как они названы в условии задачи. Подстрочные индексы в программе мы написать не можем, поэтому будем называть переменные \u003ccode\u003ex1\u003c/code\u003e, \u003ccode\u003ey1\u003c/code\u003e, \u003ccode\u003ex2\u003c/code\u003e, \u003ccode\u003ey2\u003c/code\u003e. \u003c/p\u003e\u003cp\u003eЕщё одной хорошей идеей является объявлять переменные в том порядке, в котором они упоминаются во входных данных. Найдите в программе A+B место, где объявлены переменные \u003ccode\u003ea\u003c/code\u003e и \u003ccode\u003eb\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edouble a;\ndouble b;\ndouble s;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eУдалите объявления переменных \u003ccode\u003ea\u003c/code\u003e и \u003ccode\u003eb\u003c/code\u003e и добавьте объявления переменных \u003ccode\u003ex1\u003c/code\u003e, \u003ccode\u003ey1\u003c/code\u003e, \u003ccode\u003ex2\u003c/code\u003e, \u003ccode\u003ey2\u003c/code\u003e. У вас должно получиться следующее:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint x1;\nint y1;\nint x2;\nint y2;\ndouble s;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eВ этот момент Java почти весь остальной код подчеркнёт волнистыми красными линиями. Как уже говорилось выше, пока не беспокойтесь об этом. Скоро мы все поправим.\u003c/p\u003e\u003cp\u003eМы не удалили объявление переменной \u003ccode\u003es\u003c/code\u003e, потому что в математике площадь чаще всего обозначается этой буквой. В условии задачи не предлагается никаких обозначений для выходных данных — для площади и периметра, поэтому мы можем выбрать обозначения самостоятельно. Пусть это будут \u003ccode\u003es\u003c/code\u003e для площади и \u003ccode\u003ep\u003c/code\u003e для периметра. \u003c/p\u003e\u003cp\u003eВполне очевидно, что если длины сторон прямоугольника выражаются целыми числами, то и его площадь, и его периметр будут также целыми числами. Чтобы мы об этом не забыли, в выходных данных задачи указано, что проверяющая система ожидает увидеть два целых числа. Изменим тип данных у \u003ccode\u003es\u003c/code\u003e на \u003ccode\u003eint\u003c/code\u003e, а также добавим объявление переменной \u003ccode\u003ep\u003c/code\u003e. У вас должно получиться следующее:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eint x1;\nint y1;\nint x2;\nint y2;\nint s;\nint p;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eТеперь приступим к следующим исправлениям. Найдите конструктор класса \u003ccode\u003eABSumma()\u003c/code\u003e. Сейчас он выглядит так: \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eABSumma() {\n    Scanner in \u003d new Scanner(System.in);\n    in.useLocale(Locale.US);\n    a \u003d in.nextDouble();\n    b \u003d in.nextDouble();\n    in.close();\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eПервая строка отвечает за связывание программного объекта \u003ccode\u003ein\u003c/code\u003e типа \u003ccode\u003eScanner\u003c/code\u003e со стандартным (консольным) вводом (\u003ccode\u003eSystem.in\u003c/code\u003e). Её изменять нет необходимости. \u003c/p\u003e\u003cp\u003eНа всякий случай — обратите внимание, что здесь объявление переменной совмещено с присвоением ей значения. Объявление переменной — это \u003ccode\u003eScanner in\u003c/code\u003e, а значение, которое ей присваивается — \u003ccode\u003enew Scanner(System.in)\u003c/code\u003e. Конечно, объявление переменной \u003ccode\u003ein\u003c/code\u003e можно было бы поместить там же, где находятся объявления переменных \u003ccode\u003ex1\u003c/code\u003e, \u003ccode\u003ey1\u003c/code\u003e и других. Но между \u003ccode\u003ein\u003c/code\u003e и переменными, описывающими прямоугольник, существует разница: переменная \u003ccode\u003ein\u003c/code\u003e потребуется нам только в одном методе (конструкторе), а остальные — более, чем в одном методе. Если переменная нужна только в одном методе, то правильный подход — объявлять её именно в этом методе, если же переменная используется более, чем в одном методе, её следует объявить в классе (как это сделано с \u003ccode\u003ex1\u003c/code\u003e, \u003ccode\u003ey1\u003c/code\u003e и ещё четырьмя другими). \u003cbr /\u003e Объявлять все переменные в классе не будет ошибкой (а любителям Pascal покажется более привычным), но делать этого всё же не стоит: как минимум, это загромождает код. \u003c/p\u003e\u003cp\u003eВторая строка конструктора подключает использование англоязычной локали, позволяющей использовать в вещественных числах в качестве разделителя между целой и дробной частью точку, а не запятую. Сейчас мы работаем только с целыми числами, и эту строку можно просто удалить. \u003c/p\u003e\u003cp\u003eПеременных \u003ccode\u003ea\u003c/code\u003e и \u003ccode\u003eb\u003c/code\u003e у нас больше нет, зато есть другие, которые нужно прочитать: \u003ccode\u003ex1\u003c/code\u003e, \u003ccode\u003ey1\u003c/code\u003e, \u003ccode\u003ex2\u003c/code\u003e, \u003ccode\u003ey2\u003c/code\u003e. Это можно сделать с помощью метода \u003ccode\u003enextInt()\u003c/code\u003e объекта \u003ccode\u003ein\u003c/code\u003e. \u003cbr /\u003e \u003cstrong\u003eВажно!\u003c/strong\u003e Читать значения переменных нужно именно в том порядке, в котором они упоминаются во входных данных. Timus совершенно точно не является искусственным интеллектом с зачатками телепатии и не угадает, что вы решили, например, сначала прочесть обе координаты \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, а затем обе координаты \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. Он не анализирует ваш код на предмет названий переменных, он просто предложит вашей программе прочитать 4 целых числа — не больше и не меньше. \u003c/p\u003e\u003cp\u003eВаш код после внесения исправлений должен выглядеть следующим образом:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eABSumma() {\n    Scanner in \u003d new Scanner(System.in);\n    x1 \u003d in.nextInt();\n    y1 \u003d in.nextInt();\n    x2 \u003d in.nextInt();\n    y2 \u003d in.nextInt();\n    in.close();\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eВажно!\u003c/strong\u003e Многие новички почему-то не видят разницы между входными и выходными данными и пытаются прочитать значения всех переменных, которые они объявили. Например, при решении этой задачи некоторые попытаются дописать еще чтение переменных \u003ccode\u003es\u003c/code\u003e и \u003ccode\u003ep\u003c/code\u003e. Делать этого, конечно, нельзя: ваша программа, получив на вход 4 числа (как написано во входных данных), будет ожидать ввода ещё двух, которые на самом деле нужно ещё посчитать и вывести. \u003c/p\u003e\u003cp\u003eЕщё один момент состоит в том, что \u003ccode\u003eScanner\u003c/code\u003e достаточно \u0026quot;умный\u0026quot;, чтобы не заставлять вас задумываться, как именно разделены входные данные — пробелами или переводами строк. У \u003ccode\u003eScanner\u003c/code\u003e есть понятие \u0026quot;символы-разделители\u0026quot;, к которым относятся и пробелы, и переводы строк, и символы табуляции, и некоторые другие. Поэтому мы просто даем команду объекту \u003ccode\u003ein\u003c/code\u003e \u0026quot;прочитать следующее целое число из входных данных\u0026quot;. \u003cbr /\u003e \u003cem\u003eДа, конечно, бывают задачи с хитрыми входными данными, но вы столкнётесь с ними не очень скоро.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eВажно!\u003c/strong\u003e (да, об этом говорилось в первой части, но, возможно, вы уже успели об этом позабыть). Когда вы решаете задачи, которые проверяются автоматически, не нужно дополнительно проверять правильность входных данных. Если в условии говорится, что вводятся 4 целых числа из диапазона от \u003cspan class\u003d\"tex-span\"\u003e – 100\u003c/span\u003e до \u003cspan class\u003d\"tex-span\"\u003e100\u003c/span\u003e, не требуется проверять, точно ли введены целые числа, точно ли они входят в этот диапазон, точно ли их 4. Это гарантировано. \u003c/p\u003e\u003cp\u003eКогда вам нужно будет написать программу, ведущую диалог с пользователем, тогда такие проверки понадобятся. Автоматическая система просто не позволит ввести в неё данные, не удовлетворящие описанию в условии (хорошо, не должна позволять, но мы будем на это рассчитывать). \u003c/p\u003e\u003cp\u003eПерейдём к дальнейшим исправлениям. Метод \u003ccode\u003esum()\u003c/code\u003e просто удалим: вся \u0026quot;логика\u0026quot; решения будет записана в методе \u003ccode\u003esolve()\u003c/code\u003e. Т.е. сейчас вы должны удалить следующие 4 строки:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edouble sum(double x, double y) {\n    double res \u003d x + y; \n    return res;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eВнимательно следите за тем, чтобы не оставались \u0026quot;лишние скобки\u0026quot;. Новичку сложно увидеть нарушенный баланс скобок, поэтому крайне желательно, чтобы все скобки в вашем коде появлялись и удалялись парами. \u003c/p\u003e\u003cp\u003eЗаймёмся методом \u003ccode\u003esolve()\u003c/code\u003e. Строку \u003ccode\u003es \u003d sum(a,b);\u003c/code\u003e также нужно удалить; вместо неё мы напишем несколько других. \u003c/p\u003e\u003cp\u003eДлина стороны прямоугольника, параллельной оси \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eOX\u003c/i\u003e\u003c/span\u003e, составляет \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e или, в наших обозначениях, \u003ccode\u003ex2 - x1\u003c/code\u003e. Аналогично для стороны, параллельной оси \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eOY\u003c/i\u003e\u003c/span\u003e, длина составит \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e - \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e, а в обозначениях программы \u003ccode\u003ey2 - y1\u003c/code\u003e. Чтобы найти площадь, нужно будет перемножить эти длины, а чтобы посчитать периметр — сложить их и умножить результат на 2. Поэтому есть смысл ввести специальные переменные для обозначения длин сторон. Обозначим \u003ccode\u003ew\u003c/code\u003e (от \u003cem\u003ewidth\u003c/em\u003e — ширина по-английски) длину стороны, параллельной \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eOX\u003c/i\u003e\u003c/span\u003e, и \u003ccode\u003eh\u003c/code\u003e (от \u003cem\u003eheight\u003c/em\u003e — высота по-английски) длину стороны, параллельной \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eOY\u003c/i\u003e\u003c/span\u003e. Запишем в \u003ccode\u003esolve()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid solve() {\n    int w \u003d x2 - x1;\n    int h \u003d y2 - y1;\n    s \u003d w * h;\n    p \u003d (w + h) * 2;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eЗдесь также совмещены объявления переменных и присвоение им значений. Поскольку переменные носят вспомогательный характер, они объявлены именно внутри \u003ccode\u003esolve()\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eТеперь осталось поправить метод \u003ccode\u003eprint()\u003c/code\u003e. Сейчас в нём выводится только переменная \u003ccode\u003es\u003c/code\u003e, а нам нужно вывести ещё и \u003ccode\u003ep\u003c/code\u003e. \u003c/p\u003e\u003cp\u003eВ большинстве проверяющих систем используются специальные программы \u0026quot;чекеры\u0026quot;, которые обычно довольно либерально относятся к тому, какие именно символы-разделители используются при выводе (т.е. чаще всего не делается разницы между использованием пробелов и символов перевода строк, если это не оговорено специально в описании выходных данных). Важно лишь соблюдать порядок вывода (т.е. выводить именно сначала площадь, а потом периметр, а не наоборот). Поэтому мы можем дописать в метод \u003ccode\u003eprint()\u003c/code\u003e ещё одну строку:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid print() {\n    System.out.println(s);\n    System.out.println(p);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eЕсли же требуется вывести результаты вычислений через пробел в одну строку, то метод \u003ccode\u003eprint()\u003c/code\u003e должен выглядеть так:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid print() {\n    System.out.println(s + \u0026quot; \u0026quot; + p);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eЗдесь используется автоматическое преобразование целых чисел в строковое представление. Т.е. выражение \u003ccode\u003es + \u0026quot; \u0026quot; + p\u003c/code\u003e \u0026quot;расшифровывается\u0026quot; так: прибавим к целой переменной \u003ccode\u003es\u003c/code\u003e строку, состоящую из единственного пробельного символа \u003ccode\u003e\u0026quot; \u0026quot;\u003c/code\u003e. Это приведёт к формированию строки из \u0026quot;строкового представления\u0026quot; целого числа \u003ccode\u003es\u003c/code\u003e, к которому добавлен пробел. Затем к этой строке добавляется целое число \u003ccode\u003ep\u003c/code\u003e, которое также автоматически преобразуется в своё строковое представление и будет присоединено справа к уже сформированной строке. \u003cbr /\u003e Обратите внимание, что если вы напишете \u003ccode\u003es+p\u003c/code\u003e, то сначала будет выполнено сложение целых чисел \u003ccode\u003es\u003c/code\u003e и \u003ccode\u003ep\u003c/code\u003e, а затем выведен результат. Если же вы забудете поставить пробел между кавычками, т.е. напишете \u003ccode\u003es + \u0026quot;\u0026quot; + p\u003c/code\u003e, то числа \u003ccode\u003es\u003c/code\u003e и \u003ccode\u003ep\u003c/code\u003e будут выведены без пробела между ними (что, конечно, тоже не будет правильным).\u003c/p\u003e\u003cp\u003eСохраните файл и попробуйте запустить программу на следующих входных данных:\u003c/p\u003e\u003cp\u003eВходные данные:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e0 0\n10 12\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eОтвет:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e120 44\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eВходные данные:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e5 3\n8 14\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eОтвет:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 38\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eВходные данные:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e-7 2\n0 10\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eОтвет:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e56 30\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eПридумайте свои примеры входных данных и удостоверьтесь, что ваша программа выводит правильный ответ. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eИтоги: \u0026quot;пошаговое\u0026quot; руководство\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eВ заключение сформулируем список \u0026quot;шагов\u0026quot;, которые практически всегда стоит проделывать, решая задачи (по крайней мере, из этого поста).\u003c/p\u003e \u003col\u003e   \u003cli\u003e\u003cp\u003eВнимательно прочитайте задачу. Помните, что задача — это не только условие, но также описание входных и выходных данных и примеры. Как правило, в примерах приводятся такие данные, для которых легко проделать все выкладки вручную (или даже в уме). Обычно несложно проверить, что приведённый ответ (в примере выходных данных) действительно является ответом. Несколько сложнее бывает получить этот ответ из примера входных данных. Для начала постарайтесь выполнить хотя бы проверку ответа — это приведёт к лучшему пониманию задачи. На этом этапе вам могут очень пригодиться бумага и ручка или карандаш.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eКонечно, весьма желательно придумать, как получить ответ из входных данных — это первый шаг к решению задачи. Если у вас получается ответ, отличающийся от приведённого в примере, перечитайте условие, включая описания входных и выходных данных, ещё раз. Во-первых, вы можете обнаружить там фразу вроде \u0026quot;Если существует несколько вариантов ответа, выведите любой из них\u0026quot;. Вполне возможно, ваше решение действует не так, как авторское, и поэтому получает другой, но тоже верный ответ. Во-вторых, перечитав условие, вы можете понять, что упустили какой-то важный момент (перепутали порядок входных данных, считаете не совсем то, что нужно и т.п.). Для выполнения этого пункта ручка и бумага вам нужны ничуть не меньше, чем для выполнения пункта 1.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eВ процессе выполнения пункта 2 вы уже придумали некоторый способ решения. Попробуйте придумать несколько своих примеров и вычислите ответы для них. Примеры не должны быть сложными. Очень полезно, если вы рассмотрите \u0026quot;крайние случаи\u0026quot;. Для этого нужно обратить внимание на описание входных данных и перечитать (а, возможно, даже выписать для наглядности) ограничения, наложенные на эти величины. Например, если про некоторую величину сказано, что она является целым положительным числом, не превосходящим 100, следует рассмотреть ситуации, когда эта величина принимает наименьшее возможное значение (т.е. 1), а если есть возможность, то и ситуации, когда эта величина принимает наибольшее возможное значение (т.е. 100). Сильно увлекаться составлением примеров, конечно, не стоит (обычно достаточно придумать 3-5 штук, иногда можно ограничиться и 1-2). И да, всё это вы делаете с помощью ручки и бумаги.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eТеперь, когда имеется набросок решения и несколько тестов (примеров из условия и придуманных вами) к нему, можно приступать к написанию программы. Создайте заготовку, состоящую из \u0026quot;запускающего класса\u0026quot; (класса, содержащего единственный метод \u003ccode\u003emain()\u003c/code\u003e) и класса, содержащего \u0026quot;логику\u0026quot; (т.е. конструктор, метод \u003ccode\u003esolve()\u003c/code\u003e и метод \u003ccode\u003eprint()\u003c/code\u003e, как минимум). Эта заготовка отличается от решения задачи \u0026quot;Прямоугольник\u0026quot; лишь тем, что внутри методов не написано ни строчки кода. \u003cbr /\u003e \u003cem\u003eНиже (после списка) приведена такая заготовка, в которой, конечно, вместо \u003ccode\u003eИмяВашегоЗапускающегоКласса\u003c/code\u003e, \u003ccode\u003eИмяКлассаСодержащегоЛогику\u003c/code\u003e, \u003ccode\u003eимяОбъекта\u003c/code\u003e должны быть записаны названия ваших классов и переменной типа класса, содержащего логику. На всякий случай напомним, что \u003ccode\u003eИмяВашегоЗапускающегоКласса\u003c/code\u003e — это ещё и имя файла, в котором содержится заготовка.\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eВнимательно перечитайте описание входных данных. Сейчас нужно понять, какие величины будут поданы на вход, в каком порядке они будут поданы на вход, какие типы у этих величин. Объявите переменные для хранения этих величин в классе, содержащем \u0026quot;логику\u0026quot;. Очень желательно объявлять их в том порядке, в котором они перечисляются во входных данных. \u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eВ конструкторе объявите переменную класса \u003ccode\u003eScanner\u003c/code\u003e и присвойте ей значение, позволяющее читать со стандартного потока ввода (\u0026quot;с клавиатуры\u0026quot;, точнее, из \u003ccode\u003eSystem.in\u003c/code\u003e). С помощью соответствующих типам переменных методам прочитайте все входные данные именно в том порядке, в котором они перечислены в описании входных данных. \u003cbr /\u003e \u003cem\u003eЗамечание. В дальнейшем вы будете сталкиваться с ситуацией, когда прочитывать данные придётся не сразу все, а по мере их поступления. Такие примеры будут разобраны в следующих постах; в этом случае переменную класса \u003ccode\u003eScanner\u003c/code\u003e может оказаться удобным объявить в классе, чтобы обеспечить доступ к ней из нескольких методов.\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eВнимательно перечитайте описание выходных данных. Также проанализируйте, какие величины вам нужно посчитать, какого они типа, в каком порядке их нужно выводить. Объявите соответствующие переменные в классе, содержащем \u0026quot;логику\u0026quot;. Можно также отредактировать метод \u003ccode\u003eprint()\u003c/code\u003e: переменные уже объявлены, порядок вывода понятен.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eТеперь займитесь методом \u003ccode\u003esolve()\u003c/code\u003e. Ваша задача сейчас — написать в нём придуманное решение, способ преобразовать входные данные в выходные. Если вам потребуются дополнительные переменные — смело объявляйте их внутри метода \u003ccode\u003esolve()\u003c/code\u003e — в простых задачах обычно все переменные, кроме обозначающих входные и выходные данные, носят вспомогательный характер.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eПосле написания метода \u003ccode\u003esolve()\u003c/code\u003e можно приступать к написанию метода \u003ccode\u003emain()\u003c/code\u003e \u0026quot;запускающего\u0026quot; класса. Его содержимым должны стать три последовательных вызова: сначала конструктора для создания объекта класса, содержащего \u0026quot;логику\u0026quot;, затем метода \u003ccode\u003esolve()\u003c/code\u003e вновь созданного объекта, а затем уже его метода \u003ccode\u003eprint()\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eСохраните файл (если включено автосохранение при запуске, то можно не озадачиваться сохранением файла). Запустите его на входных данных из примера (в условии). Убедитесь, что программа выдает нужный результат. Проверьте работоспособность программы на своих примерах. Если все \u0026quot;сходится\u0026quot;, отправляйте на проверку в автоматизированную тестирующую систему.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eЕсли получили вердикт, отличный от Accepted, попробуйте придумать ещё примеры, которые могут \u0026quot;сломать\u0026quot; вашу логику (и программу). Если это не получается в течение достаточно долгого времени, попробуйте найти обсуждение этой задачи. На Timus\u0027е сделать это очень просто — на странице каждой задачи есть ссылка на обсуждение этой задачи на форуме. Как правило, там можно отыскать полезные советы, примеры тестов и просто намёки на решения. \u003cbr /\u003e \u003cbr /\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003e\u003cstrong\u003e\u003ci\u003eЗаготовка\u003c/i\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eКонечно, заготовку следует создавать не вручную, а средствами Eclipse. Здесь показан её \u0026quot;окончательный\u0026quot; вид перед тем, как вы приступите к решению.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport java.util.Scanner;\n\npublic class ИмяВашегоЗапускающегоКласса {\n\t\n    public static void main(String[] args) {\n        ИмяКлассаСодержащегоЛогику имяОбъекта \u003d new ИмяКлассаСодержащегоЛогику();\n        имяОбъекта.solve();\n        имяОбъекта.print();\n    }\n}\n\t\nclass ИмяКлассаСодержащегоЛогику {\n\n    ИмяКлассаСодержащегоЛогику() {\n        Scanner in \u003d new Scanner(System.in);\n    }\n\n    void solve() {\t\t\n\n    }\n\n    void print() {\n\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eНу а теперь — снова попробуйте решить задачу про Энию.\u003c/p\u003e\u003c/div\u003e","tags":["java","timus","простые задачи"]}}