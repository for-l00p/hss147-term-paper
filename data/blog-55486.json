{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1509376140,"rating":-4,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1509376140,"id":55486,"title":"\u003cp\u003eNotes on Codeforces Beta Round #87, Div2-A, B, C, D, E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/116/problem/A\" title\u003d\"Codeforces Beta Round 87 (Div. 2 Only)\"\u003e116A - Tram\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe solution is straightforward. It is sufficient to record the number of people in the tram, and find out the maximum value.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/116/problem/B\" title\u003d\"Codeforces Beta Round 87 (Div. 2 Only)\"\u003e116B - Little Pigs and Wolves\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis turns out to be a simple problem if one has noticed that there exists at most one wolf around any pig. Thus, it is not necessary to consider the case where some single pig can be eaten by multiple wolves. We can enumerate each wolf and check whether there is at least one pig around it.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/116/problem/C\" title\u003d\"Codeforces Beta Round 87 (Div. 2 Only)\"\u003e116C - Party\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe can find that there are multiple connected components, and then implement DFS or BFS to each component, starting from the node which does not have any superior nodes, to calculate the maximum depth. This is just the required answer.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/116/problem/D\" title\u003d\"Codeforces Beta Round 87 (Div. 2 Only)\"\u003e116D - Lawnmower\u003c/a\u003e\u003c/p\u003e\u003cp\u003eNote that once we move to the lower floor, we can never return back. Thus, we must clean up all the weeds on the current floor, and then move downstairs.\u003c/p\u003e\u003cp\u003eFor each floor, we denote the positions of the leftmost weed and the rightmost weed as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epl\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epr\u003c/i\u003e\u003c/span\u003e, respectively. Then, suppose that we reach the current floor at some position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e. No matter which direction we are facing to, the minimum distance that we need to move is either \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ep\u003c/i\u003e - \u003ci\u003epl\u003c/i\u003e|\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ep\u003c/i\u003e - \u003ci\u003epr\u003c/i\u003e|\u003c/span\u003e, and finally we stay at either \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epl\u003c/i\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epr\u003c/i\u003e\u003c/span\u003e. Now, we find the next floor that has at least one weed (note that there might be several floors without any weeds during our moving). \u003c/p\u003e\u003cp\u003eAfter finding the next floor, we can find that we should move from the previous position to the leftmost weed or rightmost weed in “horizonal” direction, according to whether we face to the same direction or not. The above calculation resembles the Manhattan Distance, whose horizational distance and vertical distance can be independently computed.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/116/problem/E\" title\u003d\"Codeforces Beta Round 87 (Div. 2 Only)\"\u003e116E - Plumber\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWell, I think this is really a brain-storm problem. When I finally understand the tutorials, I feel that I have seen a new world...\u003c/p\u003e\u003cp\u003eLet us first consider that we have \u003cspan class\u003d\"tex-span\"\u003e1 × \u003ci\u003em\u003c/i\u003e\u003c/span\u003e empty cells. If we only focus on the horizonal pipelines, it can be seen that the pattern can only be either “LRLRLRLRL...” or “RLRLRLRLRL...”, where “R” means that the pipeline is connected to the right side while “L” means that the pipeline is connected to the left side. For the vertical pipelines, we have \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e patterns, since they will never lead to “leaking” states. \u003c/p\u003e\u003cp\u003eNow, we extend the above case to \u003cspan class\u003d\"tex-span\"\u003e2 × \u003ci\u003em\u003c/i\u003e\u003c/span\u003e empty cells. Based on similar arguments, for the horizonal pipelines, we have \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e feasible patterns since we have two rows. For the vertical pipelines, one can check that for each column we always have “UD” and “DU”, two patterns, where “U” and “D” denote that the pipeline is connected to the upper and bottom side, respectively. \u003c/p\u003e\u003cp\u003eIn general, with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e × \u003ci\u003em\u003c/i\u003e\u003c/span\u003e empty cells, the answer is \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003c/sup\u003e(\u003ci\u003em\u003c/i\u003e + \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. If there are several cells that are not empty, then the patterns of the row and column to which these cells belong in fact have been determined. Suppose that the number of rows and columns that are fully empty is totally \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e, and then the answer will be \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e. Note that the previously filled cells might have already led to “leaking” states, and thus for this case the answer should be zero.\u003c/p\u003e\u003c/div\u003e","tags":[]}}