{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1428416302,"rating":-20,"authorHandle":"tanhauhau","modificationTimeSeconds":1428416441,"id":17312,"title":"\u003cp\u003eB. Pasha and String\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003ePasha got a very beautiful string s for his birthday, the string consists of lowercase Latin letters. The letters in the string are numbered from 1 to |s| from left to right, where |s| is the length of the given string.\u003c/p\u003e\u003cp\u003ePasha didn\u0027t like his present very much so he decided to change it. After his birthday Pasha spent m days performing the following transformations on his string — each day he chose integer ai and reversed a piece of string (a segment) from position ai to position |s| - ai + 1. It is guaranteed that 2·ai ≤ |s|.\u003c/p\u003e\u003cp\u003eYou face the following task: determine what Pasha\u0027s string will look like after m days.\u003c/p\u003e\u003cp\u003eInput The first line of the input contains Pasha\u0027s string s of length from 2 to 2·105 characters, consisting of lowercase Latin letters.\u003c/p\u003e\u003cp\u003eThe second line contains a single integer m (1 ≤ m ≤ 105) — the number of days when Pasha changed his string.\u003c/p\u003e\u003cp\u003eThe third line contains m space-separated elements ai (1 ≤ ai; 2·ai ≤ |s|) — the position from which Pasha started transforming the string on the i-th day.\u003c/p\u003e\u003cp\u003eOutput In the first line of the output print what Pasha\u0027s string s will look like after m days.\u003c/p\u003e\u003cp\u003eSample test(s)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003einput\u003c/strong\u003e abcdef 1 2 \u003cstrong\u003eoutput\u003c/strong\u003e aedcbf\u003c/p\u003e\u003cp\u003e\u003cstrong\u003einput\u003c/strong\u003e vwxyz 2 2 2 \u003cstrong\u003eoutput\u003c/strong\u003e vwxyz\u003c/p\u003e\u003cp\u003e\u003cstrong\u003einput\u003c/strong\u003e abcdef 3 1 2 3 \u003cstrong\u003eoutput\u003c/strong\u003e fbdcea\u003c/p\u003e\u003cp\u003eI noticed that reverse the string 2 times returns the original string, so, if we reverse the string of length l, from [a,l-a+1], then reverse [b, l-b+1] where a \u0026lt; b, will returns the string [1...a, l-a+1...l-b+1, b....l-b, b...a, l-a+2...l] So, I sort out the position to reverse first, then loop through the position and do reverse.\u003c/p\u003e\u003cp\u003eimport java.io.*; import java.util.Scanner; public class Solution{\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epublic static void sort(int a[], int s, int e){\n    int i \u003d s, j \u003d e;\n    int pivot \u003d a[(s+e)/2];\n    while(i \u0026lt;\u003d j){\n       while(a[i] \u0026lt; pivot){\n         i++;\n       }\n       while(a[j] \u0026gt; pivot){\n         j--;\n       }\n       if(i\u0026lt;\u003dj){\n         swap(a, i, j);\n         i++;\n         j--;\n       }\n    }\n    if(s \u0026lt; j){\n       sort(a, s, j);\n    }\n    if(i \u0026lt; e){\n       sort(a, i, e);\n    }\n}\npublic static void swap(int[] a, int i, int j){\n    int temp \u003d a[i];\n    a[i] \u003d a[j];\n    a[j] \u003d temp;\n}\npublic static void swap(char[] a, int i, int j){\n    char temp \u003d a[i];\n    a[i] \u003d a[j];\n    a[j] \u003d temp;\n}\npublic static void rev(char[] c, int s, int e){\n    int l \u003d c.length;\n    for(int i\u003ds;i\u0026lt;e;i++){\n       swap(c, i-1, l-i);\n    }\n}\n\npublic static void main(String[] args){\n    Scanner scanner \u003d new Scanner(System.in);\n    String s \u003d scanner.next();\n    char[] c \u003d s.toCharArray();\n    int m \u003d scanner.nextInt();\n    int a[] \u003d new int[m];\n    for(int i\u003d0;i\u0026lt;m;i++){\n       a[i] \u003d scanner.nextInt();\n    }\n    sort(a, 0, m-1);\n    for(int i\u003d0;i\u0026lt;m;i+\u003d2){\n       if(i+1 \u0026lt; m){\n         rev(c, a[i], a[i+1]);\n       }else{\n         rev(c, a[i], c.length/2 + 1);\n       }\n    }\n    System.out.println(new String(c));\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e}\u003c/p\u003e\u003c/div\u003e","tags":["greedy"]}}