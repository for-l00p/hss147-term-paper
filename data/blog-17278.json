{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1428168319,"rating":0,"authorHandle":"prabhakar3333","modificationTimeSeconds":1477815260,"id":17278,"title":"\u003cp\u003eUsing C++ 11 lambda in programming\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello ,\u003c/p\u003e\u003cp\u003eI have discovered lambda function in c++. So this blog is going to be about how to use lambda functions a.k.a anonymous function in writing code involving STL algorithms.\u003c/p\u003e\u003cp\u003eI wanted to write about the lambda long ago but got busy on other stuffs.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[capture_list] (parameters) -\u0026gt; return_type\n{\n   ...\n   ...body goes here\n   ...\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow let go through the syntax and parts of the lambda functions:\u003c/p\u003e\u003cp\u003e[capture lists] \u003d\u0026gt; capture list are the variable name from the outer scope which you want to bring to  scope of the lambda definition; lamda function has there local scope and variable defined  in the caller scope is not available.\u003c/p\u003e \u003cpre\u003ee.g\n              void func_foo(string useme)\n              {\n                    usme +\u003d \u0026quot;[\u0026quot;;\n                    auto makeJson \u003d [\u0026amp;useme] () -\u0026gt; std::string { // Bring useme variable in lambda scope\n                                     useme +\u003d \u0026quot;\\\u0026quot;object\\\u0026quot;:null\u0026quot;;\n                    };\n                   /// I have used auto keyword to hold the lambda definition \n                   /// lambda can be pretty much defined everywhere \n\n                   makeJson() ; // calling syntax is same as general function\n             }\u003c/pre\u003e\u003cp\u003eparameters \u003d\u0026gt; parameters are the usual parameters in the function definition\u003c/p\u003e \u003cpre\u003evoid func_foo(string useme)\n              {\n                    usme +\u003d \u0026quot;[\u0026quot;;\n                    auto makeJson \u003d [\u0026amp;useme] (std::string value) -\u0026gt; std::string { \n                    // Bring useme variable in lambda scope\n                                     useme +\u003d \u0026quot;\\\u0026quot;object\\\u0026quot;:\\\u0026quot;\u0026quot; + value +\u0026quot;\\\u0026quot;\u0026quot;;\n                    };\n                   /// I have used auto keyword to hold the lambda definition \n                   /// lambda can be pretty much defined everywhere \n\n                   makeJson(\u0026quot;isnotnull\u0026quot;); \n             }\u003c/pre\u003e\u003cp\u003ereturn_type \u003d\u0026gt; return type can be any object or data type defined before  As in the above examples \u0026quot;std::string\u0026quot; is the return type\u003c/p\u003e\u003cp\u003e[body_definition] \u003d\u0026gt; body definition can be any c++ statement or expression\u003c/p\u003e\u003cp\u003eWell, that was lambda introduced in c++11 and few more features has been added after that.\u003c/p\u003e\u003cp\u003eFeel free to contact and Let me know if there is any error or further edits required.\u003c/p\u003e\u003c/div\u003e","tags":["c++11"]}}