{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1498603735,"rating":0,"authorHandle":"purple_dreams","modificationTimeSeconds":1498603735,"id":52947,"title":"\u003cp\u003eHelp in Treap split function \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI came across this implementation of treap split function\u003c/p\u003e \u003cpre\u003e\u003ccode\u003evoid split(pnode root, int key, pnode \u0026amp;l, pnode \u0026amp;r){\n    if(!root){\n        l \u003d NULL;\n        r \u003d NULL;\n    }\n    else if(key \u0026lt; root-\u0026gt;key){\n        split(root-\u0026gt;l,key,l,root-\u0026gt;l);\n        r \u003d root;\n    }\n    else{\n        split(root-\u0026gt;r,key,root-\u0026gt;r,r);\n        l \u003d root;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewhere pnode is pointer to node. I have a difficulty in understanding the call to split function. if key \u0026lt; root-\u0026gt;key, I understood that we need to make root as the root of the right subtree so r \u003d root. And we need to split left child. So split(root-\u0026gt;l,key,?,?) the doubt is why we pass l as left pointer and root-\u0026gt;l as right pointer. Thank you\u003c/p\u003e\u003c/div\u003e","tags":[]}}