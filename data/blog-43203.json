{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1455880815,"rating":65,"authorHandle":"Edvard","modificationTimeSeconds":1455902972,"id":43203,"title":"\u003cp\u003eEditorial of Educational Codeforces Round 8\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/628/problem/A\" title\u003d\"Educational Codeforces Round 8\"\u003e628A - Tennis Tournament\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/unprost\" title\u003d\"Expert unprost\"\u003eunprost\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eHere you can simply model the process. Or you can note that after each match some player drops out. In total \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e players will drop out. So the first answer is \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e - 1) * (2\u003ci\u003eb\u003c/i\u003e + 1)\u003c/span\u003e. Obviously the second answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enp\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/CtMJn1LQ\"\u003eС++ solution 1\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/mjGjntyf\"\u003eС++ solution 2\u003c/a\u003e\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elogn\u003c/i\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e depends on the realization.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/628/problem/B\" title\u003d\"Educational Codeforces Round 8\"\u003e628B - New Skateboard\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThis is one of the problems suggested by Bayram Berdiyev \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Bayram\" title\u003d\"Expert Bayram\"\u003eBayram\u003c/a\u003e, Allanur Shiriyev \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Allanur-98\" title\u003d\"Expert Allanur-98\"\u003eAllanur-98\u003c/a\u003e, Bekmyrat Atayev \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/Bekmyrat-Atayev\" title\u003d\"Specialist Bekmyrat-Atayev\"\u003eBekmyrat-Atayev\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe key observation is that the number is divisible by \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e if and only if its last two digits forms a number divisible by \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e. So to calculate the answer at first we should count the substrings of length one. Now let\u0027s consider pairs of consecutive digits. If they forms a two digit number that is divisible by \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e we should increase the answer by the index of the right one.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/A52tnf1z\"\u003eC++ solution\u003c/a\u003e\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/628/problem/C\" title\u003d\"Educational Codeforces Round 8\"\u003e628C - Bear and String Distance\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested and prepared by Kamil Debowski \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Errichto\" title\u003d\"International Grandmaster Errichto\"\u003eErrichto\u003c/a\u003e. He also wrote the editorial.\u003c/p\u003e\u003cp\u003eThere is no solution if the given required distance is too big. Let\u0027s think what is the maximum possible distance for the given string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. Or the more useful thing — how to construct a string \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u0027\u003c/span\u003e to maximize the distance? We can treat each letter separately and replace it with the most distant letter. For example, we should replace \u0027c\u0027 with \u0027z\u0027, and we should replace \u0027y\u0027 with \u0027a\u0027. To be more precise, for first 13 letters of the alphabet the most distant letter is \u0027z\u0027, and for other letters it is \u0027a\u0027.\u003c/p\u003e\u003cp\u003eLet\u0027s solve a problem now. We can iterate over letters and greedily change them. A word \u0026quot;greedily\u0026quot; means when changing a letter we don\u0027t care about the next letters. We generally want to choose distant letters, because we may not find a solution otherwise. For each letter \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e we change it into the most distant letter, unless the total distance would be too big. As we change letters, we should decrease the remaining required distance. So, for each letter \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e consider only letters not exceeding the remaining distance, and among them choose the most distant one. If you don\u0027t see how to implement it, refer to my \u003ca href\u003d\"http://ideone.com/dpujmA\"\u003eC++ solution\u003c/a\u003e with comments.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/UGxuhEbN\"\u003eOther C++ solution\u003c/a\u003e\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/628/problem/D\" title\u003d\"Educational Codeforces Round 8\"\u003e628D - Magic Numbers\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eKareem Mohamed \u003ca class\u003d\"rated-user user-green\" href\u003d\"/profile/Kareem_Mohamed95\" title\u003d\"Pupil Kareem_Mohamed95\"\u003eKareem_Mohamed95\u003c/a\u003e suggested the simpler version of the problem.\u003c/p\u003e\u003cp\u003eDenote the answer to the problem \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e)\u003c/span\u003e. Note that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e) \u003d \u003ci\u003ef\u003c/i\u003e(0, \u003ci\u003eb\u003c/i\u003e) - \u003ci\u003ef\u003c/i\u003e(0, \u003ci\u003ea\u003c/i\u003e - 1)\u003c/span\u003e or what is the same \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e, \u003ci\u003eb\u003c/i\u003e) \u003d \u003ci\u003ef\u003c/i\u003e(0, \u003ci\u003eb\u003c/i\u003e) - \u003ci\u003ef\u003c/i\u003e(0, \u003ci\u003ea\u003c/i\u003e) + \u003ci\u003eg\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e)\u003c/span\u003e equals to one if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is a magic number, otherwise \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e)\u003c/span\u003e equals to zero. Let\u0027s solve the problem for the segment \u003cspan class\u003d\"tex-span\"\u003e[0, \u003ci\u003en\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eHere is described the standard technique for this kind of problems, sometimes it is called \u0027dynamic programming by digits\u0027. It can be realized in a two ways. The first way is to iterate over the length of the common prefix with number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Next digit should be less than corresponding digit in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and other digits can be arbitrary. Below is the description of the second approach.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eijk\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the number of magic prefixes of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e with remainder \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 0\u003c/span\u003e than the prefix should be less than the corresponding prefix in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e and if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 1\u003c/span\u003e than the prefix should be equal to the prefix of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e (it can not be greater). Let\u0027s do \u0027forward dynamic programming\u0027. Let\u0027s iterate over digit \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/83/cb/83cbda8544f34c71410d6c76a6fd7198c3534ac6.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e in position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. We should check that if the position is even than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e should be equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e, otherwise it cannot be equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e. Also we should check for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 1\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e should be not greater than corresponding digit in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. Now let\u0027s see what will be the next state. Of course \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u0027 \u003d \u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e. By Horner scheme \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u0027 \u003d (10\u003ci\u003ej\u003c/i\u003e + \u003ci\u003ep\u003c/i\u003e) \u003ci\u003emod\u003c/i\u003e \u003ci\u003em\u003c/i\u003e\u003c/span\u003e. Easy to see that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e8/3c/e83c9d6c6be92a3a20dc0ef40539da86536fc933.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. To update the next state we should increase it: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u0027\u003ci\u003ej\u003c/i\u003e\u0027\u003ci\u003ek\u003c/i\u003e\u0027\u003c/sub\u003e +  \u003d \u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eijk\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Of course all calculations should be done modulo \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e9\u003c/sup\u003e + 7\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/YLmbrNMq\"\u003eC++ solution\u003c/a\u003e\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enm\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/628/problem/E\" title\u003d\"Educational Codeforces Round 8\"\u003e628E - Zbazi in Zeydabad\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Ali Ahmadi \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/Kuzey\" title\u003d\"Expert Kuzey\"\u003eKuzey\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s precalculate the values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ezl\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ezr\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ezld\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — the maximal number of letters \u0027z\u0027 to the left, to the right and to the left-down from the position \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e. It\u0027s easy to do in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enm\u003c/i\u003e)\u003c/span\u003e time. Let\u0027s fix some cell \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e. Consider the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e \u003d \u003ci\u003emin\u003c/i\u003e(\u003ci\u003ezl\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ezld\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. It\u0027s the maximum size of the square with upper right ceil in \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e. But the number of z-patterns can be less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. Consider some cell \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e diagonally down-left from \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e on the distance no more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. The cells \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e forms z-pattern if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e + \u003ci\u003ezr\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003exy\u003c/i\u003e\u003c/sub\u003e \u0026gt; \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s maintain some data structure for each antidiagonal (it can be described by formula \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e) that can increment in a point and take the sum on a segment (Fenwick tree will be the best choice for that). Let\u0027s iterate over columns \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e from the right to the left and process the events: we have some cell \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e for which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e + \u003ci\u003ezr\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003exy\u003c/i\u003e\u003c/sub\u003e - 1 \u003d \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. In that case we should increment the position \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e in the tree number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e + \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e by one. Now we should iterate over the cells \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e in the current column and add to the answer the value of the sum on the segment from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e + 1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e in the tree number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e .\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://pastebin.com/uxu6s5WD\"\u003eС++ solution\u003c/a\u003e\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enmlogm\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/628/problem/F\" title\u003d\"Educational Codeforces Round 8\"\u003e628F - Bear and Fair Set\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested and prepared by Kamil Debowski \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Errichto\" title\u003d\"International Grandmaster Errichto\"\u003eErrichto\u003c/a\u003e. He also wrote the editorial.\u003c/p\u003e\u003cp\u003eAt the beginning, to make things simpler, we should add a query (hint) with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eupTo\u003c/i\u003e \u003d \u003ci\u003eb\u003c/i\u003e, \u003ci\u003equantity\u003c/i\u003e \u003d \u003ci\u003en\u003c/i\u003e\u003c/span\u003e, and then sort queries by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eupTo\u003c/i\u003e\u003c/span\u003e. Sorted queries (hints) divide interval \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e disjoint intervals. For each interval we know how many elements should be there.\u003c/p\u003e\u003cp\u003eLet\u0027s build a graph and find a max flow there. The answer is \u0026quot;YES\u0026quot; only if the flow is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eThe first group \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e contains \u003cspan class\u003d\"tex-span\"\u003e5\u003c/span\u003e vertices, representing possible remainders.\u003c/li\u003e   \u003cli\u003eThe second group \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e contains \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e vertices, representing intervals.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eEach vertex from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e should be connected with the source by an edge with capacity \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e / 5\u003c/span\u003e. Each vertex from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e should be connected with the sink by an edge with capacity equal to the size of the interval. Between each vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e should be an edge with capacity equal to the number of numbers in the interval \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, giving remainder \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e when divided by \u003cspan class\u003d\"tex-span\"\u003e5\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eYou can also use see that it\u0027s similar to finding matching. In fact, we can use the Hall\u0027s marriage theorem. For each of \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e sets of vertices from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e (sets of remainders) iterate over intervals and count how many numbers we can take from \u003cspan class\u003d\"tex-span\"\u003e[1, \u003ci\u003eb\u003c/i\u003e]\u003c/span\u003e with remainders from the fixed set of remainders.\u003c/p\u003e\u003cp\u003eThe implementation with the Hall\u0027s theorem: \u003ca href\u003d\"http://ideone.com/IVZ3Ts\"\u003eC++ solution\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/sup\u003e\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e. In our problem \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e \u003d 5\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["education round 8","editorial"]}}