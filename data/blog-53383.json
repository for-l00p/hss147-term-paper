{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1500475000,"rating":11,"authorHandle":"color_me_red","modificationTimeSeconds":1500475000,"id":53383,"title":"\u003cp\u003eAppropriate data structure for adding +1/-1 to ranges and finding the last index with value 0\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI have an array \u003ccode\u003ea\u003c/code\u003e of values +1 and -1 in random order, and a separate array \u003ccode\u003es\u003c/code\u003e which is initialised with 0 in every position. I run through the array from left to right. At every index \u003ccode\u003ei\u003c/code\u003e, I add the value of \u003ccode\u003ea[i]\u003c/code\u003e across \u003ccode\u003es[0], s[1], ... , s[i-1], s[i]\u003c/code\u003e. And at every index \u003ccode\u003ei\u003c/code\u003e, after doing the previous operation, I want to return the rightmost index in the range \u003ccode\u003e[0, i]\u003c/code\u003e with value 0. If no such index exists, I\u0027ll return some invalid number like -1.\u003c/p\u003e\u003cp\u003eThe adding operation can be done using a Fenwick tree. But I have no clue to find the rightmost index in logarithmic complexity. I\u0027m trying to do the entire process in \u003ccode\u003eO(n)\u003c/code\u003e or \u003ccode\u003eO(nlogn)\u003c/code\u003e complexity. Any idea would be much appreciated, thanks!\u003c/p\u003e\u003c/div\u003e","tags":["#data structure","array"]}}