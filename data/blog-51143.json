{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1490195616,"rating":34,"authorHandle":"szawinis","modificationTimeSeconds":1490197959,"id":51143,"title":"\u003cp\u003eOptimizing n^3 DP\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eProblem Statement: There exists a single player game called \u0026quot;Pair of Fours\u0026quot;. In this game, there are four types of cards, labeled \u0027U\u0027, \u0027B\u0027, \u0027O\u0027 and \u0027N\u0027. There are N cards in total, and initially they are arranged so that no adjacent cards are of the same type. The game goes as follows:\u003c/p\u003e \u003col\u003e   \u003cli\u003eThe player chooses a card and removes it. This means the cards on the left and the right are now adjacent.\u003c/li\u003e   \u003cli\u003eWhile the (now adjacent) left and right cards are of the same type, remove both cards and add one to the score.\u003c/li\u003e   \u003cli\u003eIf there are no cards left, the game ends. Otherwise, go back to step one.\u003c/li\u003e \u003c/ol\u003e\u003cp\u003eSample case:\u003c/p\u003e\u003cp\u003e13\u003cbr /\u003e N U B O B U O N B O N U O \u003c/p\u003e\u003cp\u003eI came up with an O(n^3) DP solution, but since n \u0026lt;\u003d 1000, it definitely gets TLE verdict:\u003c/p\u003e\u003cp\u003e\u003ccode\u003edp[i][j] \u003d max(dp[i][k]+dp[k+1][j], dp[i+1][j-1]+(a[i] \u003d\u003d a[j]))\u003c/code\u003e\u003c/p\u003e\u003cp\u003eIs there a way to optimize this, or is DP not the correct train of thought?\u003c/p\u003e\u003c/div\u003e","tags":[]}}