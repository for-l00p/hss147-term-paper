{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1401903513,"rating":39,"authorHandle":"PraveenDhinwa","modificationTimeSeconds":1406224691,"id":12545,"title":"\u003cp\u003eCodeforces Round #251 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003e\u003ca href\u003d\"/contest/439/problem/A\" title\u003d\"Codeforces Round 251 (Div. 2)\"\u003e439A - Devu, the Singer and Churu, the Joker\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eFor checking whether there is a way to conduct all the songs of the singer, you can conduct the event in the following way. \u003c/p\u003e \u003cul\u003e   \u003cli\u003eFirst singer will sing a song.\u003c/li\u003e   \u003cli\u003eThen during \u003cspan class\u003d\"tex-span\"\u003e10\u003c/span\u003e minutes rest of the singer, the joker will crack \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e jokes(each of \u003cspan class\u003d\"tex-span\"\u003e5\u003c/span\u003e minutes)\u003c/li\u003e   \u003cli\u003eThen singer will again sing a song, then joker, etc.\u003c/li\u003e   \u003cli\u003eAfter the singer has completes all his songs, the joker will keep on cracking jokes of \u003cspan class\u003d\"tex-span\"\u003e5\u003c/span\u003e minutes each.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eHence minimum duration of the even needed such that sing could sing all his songs will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e10\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e + \u003cspan class\u003d\"tex-span\"\u003e10\u003c/span\u003e + ... +\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e \u003d \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e + (\u003ci\u003en\u003c/i\u003e - 1) * 10\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e\u003c/span\u003e denote the total time of the songs of the singer.\u003c/p\u003e\u003cp\u003eSo for checking feasibility of the solution, just check whether \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e + (\u003ci\u003en\u003c/i\u003e - 1) * 10 ≤ \u003ci\u003eduration\u003c/i\u003e\u003c/span\u003e or not?. \u003c/p\u003e\u003cp\u003eIf it is feasible, then time remaining for joker will be the entire duration except the time when the singer is singing the song. Hence time available for the joker will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eduration\u003c/i\u003e - \u003ci\u003esum\u003c/i\u003e\u003c/span\u003e. In that time joker will sing \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2b/70/2b705e74099ca94b38b78bba106af655f42f6eac.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e songs.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution codes\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/439/submission/6814268\"\u003emy solution\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003chr /\u003e\u003cp\u003e\u003cstrong\u003e\u003ca href\u003d\"/contest/439/problem/B\" title\u003d\"Codeforces Round 251 (Div. 2)\"\u003e439B - Devu, the Dumb Guy\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eYou can formulate the problem in following way. Given two arrays \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Find minimum cost of matching the elements of array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. For our problem the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e will be same as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. The array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e will have content \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e — 1, , 1, 1. For a general version of this problem, we can use min cost max flow(min cost matching), but for this problem following simple greedy solution will work.\u003c/p\u003e \u003cul\u003e   \u003cli\u003eSort the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e in increasing and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e in decreasing order (or vice versa).\u003c/li\u003e   \u003cli\u003eNow match \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e element of the array a with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003eth\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e element of array b.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eProof:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIt can be easily proved by exchange argument. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution Codes\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/439/submission/6814439\"\u003emy solution\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003chr /\u003e\u003cp\u003e\u003ca href\u003d\"/contest/439/problem/C\" title\u003d\"Codeforces Round 251 (Div. 2)\"\u003e439C - Devu and Partitioning of the Array\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet us first try to find the condition required to make sure the existence of the partitions. \u003c/p\u003e\u003cp\u003eNotice the following points.\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eIf the parity of sum does not match with parity of number of odd partitions (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e) , then we can\u0027t create the required partitions. eg. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d [1;2]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 2\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e \u003d 0\u003c/span\u003e, Then you can not create two partitions of odd size, because then sum of the elements of the partitions of the array will be even whereas the sum of elements of the array is odd.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIf number of odd elements in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e are less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e (number of required partitions with odd sum), then we can not do a valid partitioning.\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eIf number of even elements are less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e, then we can not create even partitions simply by using even numbers, we have to use odd numbers too. Notice the simple fact that sum of two odd numbers is even. Hence we will try to include \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e odd elements in our partitions too. So if we can create \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eoddsRemaining\u003c/i\u003e / 2\u003c/span\u003e partitions in which every partition contains \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e odd elements, then we can do a valid partitioning otherwise we can\u0027t. Here \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eoddsRemaining\u003c/i\u003e\u003c/span\u003e denotes the number of odd elements which are not used in any of the partitions made up to now.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eoddElements\u003c/i\u003e\u003c/span\u003e denotes the number of odd elements in array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. Similarly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eevenElements\u003c/i\u003e\u003c/span\u003e denotes the number of even elements.\u003c/p\u003e\u003cp\u003eSo the answer exists if \u003c/p\u003e \u003cul\u003e   \u003cli\u003eNumber of possible odd partitions are \u003cspan class\u003d\"tex-span\"\u003e ≥ \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e i.e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eoddElements\u003c/i\u003e ≥ \u003ci\u003ek\u003c/i\u003e - \u003ci\u003ep\u003c/i\u003e\u003c/span\u003e.\u003c/li\u003e   \u003cli\u003eNumber of possible even partitions are \u003cspan class\u003d\"tex-span\"\u003e ≥ \u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e i.e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eevenElements\u003c/i\u003e + (\u003ci\u003eoddRemaining\u003c/i\u003e) / 2 ≥ \u003ci\u003ep\u003c/i\u003e.\u003c/span\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eoddRemaining\u003c/i\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eoddElements\u003c/i\u003e - (\u003ci\u003ek\u003c/i\u003e - \u003ci\u003ep\u003c/i\u003e)\u003c/span\u003e.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eFor generating the actual partitions, you can follow the same strategy used in detecting the existence of the partitions. We will first generate any valid \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e partitions (forget about the condition of using the entire array), then we can simply include the remaining elements of the array in the last partition and we are done.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution Codes\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/439/submission/6814269\"\u003e[user:Gerald]\u0027s solution\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/439/submission/6814282\"\u003emy code\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003chr /\u003e\u003cp\u003e\u003cstrong\u003e\u003ca href\u003d\"/contest/439/problem/D\" title\u003d\"Codeforces Round 251 (Div. 2)\"\u003e439D - Devu and his Brother\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eYou can solve the problem in two ways.\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cstrong\u003eBy using ternary search\u003c/strong\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eLet us define a function f. Function f(k) \u003d cost needed to make array a elements \u003cspan class\u003d\"tex-span\"\u003e ≥ \u003c/span\u003e k + cost needed to make array b elements \u003cspan class\u003d\"tex-span\"\u003e ≤ \u003c/span\u003e k\u003c/p\u003e\u003cp\u003eInstead of proving it formally, try checking the property on many random test cases. You will realize that f is convex.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eClaim: f is convex\u003c/strong\u003e:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProof:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIt is fairly easy to prove. See the derivative of f.\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/13/bd/13bd5a7f903a9b36ed548f61fe22af25072748d3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003d — (# of elements of b \u0026gt; k) + (# of elements of a \u0026lt; k)\u003c/p\u003e\u003cp\u003eThe first term (without sign) can only decrease as k increases whereas second term can only increase as k increases.\u003c/p\u003e\u003cp\u003eSo, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d5/ce/d5cef5baaca5a9d136aa1ce707d11ec6503bbed5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cstrong\u003eBy using the fact that optimal values are attainable at the array values\u003c/strong\u003e:\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eAll the extremum points will lie in the elements from the any of the arrays because f is convex and \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/17/9c/179c03407d83e18848a3d21385341a0a2498f1cd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e at the event points (or the points of array a and b).\u003c/p\u003e\u003cp\u003eFor learning more about ternary search, you can see following topcoder \u003ca href\u003d\"http://apps.topcoder.com/forums/?module\u003dThread\u0026amp;threadID\u003d506787\u0026amp;start\u003d0\u0026amp;mc\u003d27\"\u003ediscussion\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAnother smart solution\u003c/strong\u003e\u003c/p\u003e\u003cp\u003ePlease see following \u003ca href\u003d\"//codeforces.com/blog/entry/12545#comment-172684\"\u003ecomment\u003c/a\u003e of \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/goovie\" title\u003d\"Specialist goovie\"\u003egoovie\u003c/a\u003e and proof is given in the \u003ca href\u003d\"//codeforces.com/blog/entry/12545#comment-172693\"\u003ereply\u003c/a\u003e by \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/himank\" title\u003d\"Specialist himank\"\u003ehimank\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolutions Code\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/439/submission/6814294\"\u003eternary search solution\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/439/submission/6814314\"\u003emy solution using 2nd fact\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/439/submission/6814333\"\u003e[user:Gerald] solution\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/439/submission/6813224\"\u003e[user:triveni] solution using smart solution\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003chr /\u003e\u003cp\u003e\u003cstrong\u003e\u003ca href\u003d\"/contest/439/problem/E\" title\u003d\"Codeforces Round 251 (Div. 2)\"\u003e439E - Devu and Birthday Celebration\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThere are two possible solutions.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003edp solution\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e)\u003c/span\u003e be total number of ways of partitioning \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e segments such that each \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e is positive. With some manipulations of the generating function, you can find that this is equal to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fd/98/fd98c4c18f6ec0c5cd5159cd936ad193024d81d9.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eSo \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d8/5b/d85b7942164bf07c955c21fef3e63a37e054a49f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e, \u003ci\u003eg\u003c/i\u003e)\u003c/span\u003e denotes partitions of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e parts such that gcd of all the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u0027\u003ci\u003es\u003c/i\u003e\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNote that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e, 1)\u003c/span\u003e \u003d \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e)\u003c/span\u003e — sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e, \u003ci\u003eg\u003c/i\u003e)\u003c/span\u003e over all possible gcd \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u0027\u003ci\u003es\u003c/i\u003e\u003c/span\u003e. So \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e will be a divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIn other words, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/12/6f/126fb6cfb657d7b310b5d36d22e0ce964502a4da.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eAs \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a8/b4/a8b43eae84c29412a55288cd33734173285ed188.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6e/56/6e5675238eb166b14d72e4624c0dc26715d27353.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eYou can implement this solution by a simple dp.\u003c/p\u003e\u003cp\u003eYou can pre-calculate factorials which will help you to calculate \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/89/5c/895c08af2c7b72c46ed3f0ff82e118a3bd6eb657.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eComplexity of this solution will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003enlogn\u003c/i\u003e\u003c/span\u003e over all the test cases.\u003c/p\u003e\u003cp\u003ePlease note that this solution might get time limit exceeded in Java. Please read the \u003ca href\u003d\"//codeforces.com/blog/entry/12545#comment-173200\"\u003ecomment\u003c/a\u003e. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMathematical solution\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eNote that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e, 1) \u003d \u003ci\u003eP\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e)\u003c/span\u003e — sum of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e, \u003ci\u003eg\u003c/i\u003e)\u003c/span\u003e over all possible gcd \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u0027\u003ci\u003es\u003c/i\u003e\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e \u0026gt; 1\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e is a divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIn other words, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/18/e3/18e3caaf322d4a3e6a47a5e91c480543cb3815d8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eAs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e, \u003ci\u003eg\u003c/i\u003e)\u003c/span\u003e \u003d \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/79/f9/79f963f4c77f922200302fbe8a941d7383ed231e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6e/56/6e5675238eb166b14d72e4624c0dc26715d27353.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ef/f8/eff8883dcdd437c8caf1a413643fafd5dc409a5f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/42/e7/42e73e88c71ae7848f5d341988866bcdbd8947be.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eNow you have to use \u003ca href\u003d\"http://en.wikipedia.org/wiki/M%C3%B6bius_inversion_formula\"\u003eMöbius inversion formula.\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTheorem:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003c/span\u003e are two arithmetic functions satisfying\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/54/6f/546f2852a0e8a534ad69c7fdf06ad7862a7b8563.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003ethen \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/cc/d3/ccd366278fb63521483637d3c3d81036889c257d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo In our case: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eP\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003ef\u003c/i\u003e, 1)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor proving complexity: Use the fact that total number of divisors of a number from \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/67/cb/67cbb468339d9006e654455c32e7963c7461e2c8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003ePlease also see \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/xorfire\" title\u003d\"Candidate Master xorfire\"\u003exorfire\u003c/a\u003e \u003ca href\u003d\"//codeforces.com/blog/entry/12545#comment-172661\"\u003ecomment\u003c/a\u003e for understanding the relation between mobius function and the solution using inclusion exclusion principle.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSolution Codes\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/439/submission/6814328\"\u003emy solution using mobius function\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/439/submission/6814322\"\u003e[user:Gerald]\u0027s code based on first solution\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"//codeforces.com/contest/439/submission/6814320\"\u003e[user:Balajiganapathi,2014-06-05]\u0027s inclusion exclusion principle\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003c/div\u003e","tags":["tutorial","cf #251"]}}