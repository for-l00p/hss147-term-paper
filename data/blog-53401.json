{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1500576782,"rating":3,"authorHandle":"code.blood","modificationTimeSeconds":1500576782,"id":53401,"title":"\u003cp\u003eFacing problem to determine Time complexity \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI recently saw at one blog , A code is executed like that \u003c/p\u003e\u003cp\u003eN + N/2 + N/3 + N/4 + ....... + N/N\u003c/p\u003e\u003cp\u003eand author of this code saying \u003c/p\u003e\u003cp\u003eN + N/2 + N/3 + N/4 + ....... + N/N \u003d O(N log(N) ) ? How ?\u003c/p\u003e\u003cp\u003eWe know complexity of something is divided by 2 , become log2(N) . For example binary search\u0027s worst case complexity is O(log2(N) ) . But how the upper snippet \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eN + N/2 + N/3 + N/4 + ....... + N/N\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eequals to O(N log2(N) ) ? Can anyone explain it ?\u003c/p\u003e\u003c/div\u003e","tags":[]}}