{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1507047014,"rating":0,"authorHandle":"Dhanadeepa_Red","modificationTimeSeconds":1507047014,"id":54931,"title":"\u003cp\u003eMaximum Sum of 3 Non-Overlapping Subarrays\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eIn a given array nums of positive integers, find three non-overlapping subarrays with maximum sum.\u003c/p\u003e\u003cp\u003eEach subarray will be of size k, and we want to maximize the sum of all 3*k entries.\u003c/p\u003e\u003cp\u003eReturn the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.\u003c/p\u003e\u003cp\u003eExample:\u003c/p\u003e\u003cp\u003eInput: [1,2,1,2,6,7,5,1], 2\u003c/p\u003e\u003cp\u003eOutput: [0, 3, 5]\u003c/p\u003e\u003cp\u003eExplanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\u003c/p\u003e\u003cp\u003eWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\u003c/p\u003e\u003cp\u003eNote:\u003c/p\u003e\u003cp\u003enums.length will be between 1 and 20000.\u003c/p\u003e\u003cp\u003enums[i] will be between 1 and 65535.\u003c/p\u003e\u003cp\u003ek will be between 1 and floor(nums.length / 3).\u003c/p\u003e\u003c/div\u003e","tags":[]}}