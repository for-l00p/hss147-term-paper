{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1433609125,"rating":246,"authorHandle":"Monyura","modificationTimeSeconds":1433799644,"id":18363,"title":"\u003cp\u003eLooksery Cup 2015 Editorial \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eUPD\u003c/strong\u003e Editorial of problem E was added, I apologize for the delay. Hope you found it interesting.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eA. Face Detection\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eAuthor: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Monyura\" title\u003d\"Grandmaster Monyura\"\u003eMonyura\u003c/a\u003e\u003c/p\u003e\u003cp\u003eOne should iterate through each 2x2 square and check if it is possible to rearrange letters in such way they they form the word \u0026quot;face\u0026quot;. It could be done i.e. by sorting all letters from the square in alphabetic order and comparing the result with the word \u0026quot;acef\u0026quot;(sorted letters of word \u0026quot;face\u0026quot;).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eB. Looksery Party\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eAuthor: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Igor_Kudryashov\" title\u003d\"International master Igor_Kudryashov\"\u003eIgor_Kudryashov\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn any cases there is such set of people that if they come on party and send messages to their contacts then each employee receives the number of messages that is different from what Igor pointed. Let\u0027s show how to build such set. There are 2 cases.\u003c/p\u003e\u003cp\u003eThere are no zeros among Igor\u0027s numbers. So if nobody comes on party then each employee receives 0 messages and, therefore, the desired set is empty.\u003c/p\u003e\u003cp\u003eThere is at least one zero. Suppose Igor thinks that i-th employee will receive 0 messages. Then we should add i-th employee in the desired set. He will send messages to his contacts and will receive 1 message from himself. If we add other employees in the desired set then the number of messages that i-th employee will receive will not decrease so we can remove him from considering. Igor pointed some numbers for people from contact list of i-th employee and because they have already received one message we need to decrease these numbers by one. After that we can consider the same problem but with number of employees equals to n - 1. If the remaining number of employees is equal to 0 then the desired set is built. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eC. The Game Of Parity\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eAuthor: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/olpetOdessaONU\" title\u003d\"Candidate Master olpetOdessaONU\"\u003eolpetOdessaONU\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIf n \u003d k no moves may be done. The winner is determined with starting parity of citizens\u0027 number. Otherwise let\u0027s see that the player making the last move may guarantee his victory, if there are both odd and even cities when he makes the move. He just selects the city of which parity he should burn to obtain required parity. So, his enemy\u0027s target is to destroy all the cities of some one type. Sometimes the type does matter, sometimes doesn\u0027t. It depends on the player\u0027s name and the parity of k. So the problem\u0027s solution consists in checking if \u0026quot;non-last\u0026quot; player\u0027s moves number (n - k) / 2 is enough to destroy all the odd or even cities. If Stannis makes the last move and k is even, Daenerys should burn all the odd or all the even cities. If k is odd, Daenerys should burn all the odd cities. If Daenerys makes the last move and k is even, Stannis has no chance to win. If k is odd, Stannis should burn all the even cities.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eD. Haar Features\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eAuthor: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/Monyura\" title\u003d\"Grandmaster Monyura\"\u003eMonyura\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThis problem had a complicated statement but it is very similar to the real description of the features. Assume that we have a solution. It means we have a sequence of prefix-rectangles and coefficients to multiply. We can sort that sequence by the bottom-right corner of the rectangle and feature\u0027s value wouldn\u0027t be changed. Now we could apply our operations from the last one to the first. To calculate the minimum number of operations we will iterate through each pixel starting from the bottom-right in any of the column-major or raw-major order. For each pixel we will maintain the coefficient with which it appears in the feature\u0027s value. Initially it is 0 for all. If the coefficient of the current cell is not equal to  + 1 for W and  - 1 for B we increment the required amount of operations. Now we should make coefficient to have a proper value. Assume that it has to be X( - 1 or  + 1 depends on the color) but current coefficient of this pixel is C. Then we should anyway add this pixel\u0027s value to the feature\u0027s value with the coefficient X - C. But the only way to add this pixel\u0027s value now(after skipping all pixels that have not smaller index of both row and column) is to get sum on the prefix rectangle with the bottom-left corner in this pixel. Doing this addition we also add X - C to the coefficient of all pixels in prefix-rectangle. This solution could be implemented as I describe above in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003em\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enm\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAlso I want to notice that in real Haar-like features one applies them not to the whole image but to the part of the image. Anyway, the minimum amount of operations could be calculated in the same way.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eE. Sasha Circle\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eAuthors: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Krasnokutskiy\" title\u003d\"Candidate Master Krasnokutskiy\"\u003eKrasnokutskiy\u003c/a\u003e, \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/2222\" title\u003d\"International master 2222\"\u003e2222\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAuthor\u0027s solution has complexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/35/c4/35c4d4e204b09963125f7f054c0b85bed9ede3ed.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e is a maximum absolute value of the coordinates of all given points.\u003c/p\u003e\u003cp\u003eLet’s call a set of points \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e separable if there’s a circle inside or on the boundary of which lie all the points of one set. When there’re no points neither inside nor on the boundary of the circle we call this circle separating. Let points of the set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e lie inside or on the boundary of the circle and points of the set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e lie outside the circle. Points from set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e are allowed to be on the boundary of the separative circle as after increasing radius a little we’re getting set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e strictly inside and set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e strictly outside the circle.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e contain at least two points. Separating circle can be compressed in such a way that it’ll pass at least through two points of the set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e. It’s possible to look over all the pairs of points \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c1/34/c134a0b16a5912b9739ed559e758d3dd6241521c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e and try to pass each pair through the separating circle. The centre of the desired circle lies on the medial perpendicular of the segment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epq\u003c/i\u003e\u003c/span\u003e. Let’s designate the points of the medial perpendicular as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e(\u003ci\u003et\u003c/i\u003e)\u003c/span\u003e where \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5d/d1/5dd1e05018c49ef7c887cf32992d395fc83d724c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is a parameter. All the points that don’t lie on the straight line \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epq\u003c/i\u003e\u003c/span\u003e make parameter \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e bounded above or below. All the points that lie on the straight line \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epq\u003c/i\u003e\u003c/span\u003e have to lie outside the limits of the segment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003epq\u003c/i\u003e\u003c/span\u003e. E.g. a picture below displays a blue point which bounds the centre of separating circle from the left side and red points – from the right side. That’s why the centre has to lie inside a segment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecd\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src\u003d\"/predownloaded/e5/30/e5300c3a6903a863e900121ea42d4e5e347a4fa9.png\" style\u003d\"width: 50.0%;height: 50.0%;max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet’s look over all the points to make sure that a value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/span\u003e which satisfies all the bounds exists. This provides us with the problem solving for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e((|\u003ci\u003eA\u003c/i\u003e|\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + |\u003ci\u003eB\u003c/i\u003e|\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)(|\u003ci\u003eA\u003c/i\u003e| + |\u003ci\u003eB\u003c/i\u003e|))\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet’s examine paraboloid \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e \u003d \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + \u003ci\u003ey\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003c/span\u003e and draw arbitrary non-vertical plane \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eax\u003c/i\u003e + \u003ci\u003eby\u003c/i\u003e + \u003ci\u003ez\u003c/i\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. The intersection of the paraboloid and the plane satysfies the equation \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eax\u003c/i\u003e + \u003ci\u003eby\u003c/i\u003e + \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + \u003ci\u003ey\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e \u003d \u003ci\u003ec\u003c/i\u003e\u003c/span\u003e, or \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6f/62/6f62ebbb3f893a5aad0003eba06953c921d8c0bd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. If project points of the paraboloid \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e, \u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + \u003ci\u003ey\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e onto the plane \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e1/ca/e1ca6a75f2aa84d7cfde78cc330d740861ea95ec.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e the cross-section of the paraboloid formed by the plane projects onto a circle, the paraboloid points below the plane projects onto internal points of the circle, those above the plane projects onto points outside the circle. As \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/d1/91/d191976f41d2b84705f490b2f7f6f869cec0c81a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e is one-to-one correspondence the opposite is also true: when points of the plane project onto the paraboloid \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2d/1c/2d1cb17c118b72402240c626142ea7a53dc922fe.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e the plane projects onto the cross-section of the paraboloid formed by the plane, the internal points – onto the paraboloid below the cross-section and external points – above the cross-section.\u003c/p\u003e\u003cp\u003eSo, projection of points onto paraboloid assigns one-to-one correspondence between circles and planes (non-vertical). partitioning of sets of points \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e of plane by circle can be done by means of partitioning of their three-dimensional projections into paraboloid \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e′\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e′\u003c/span\u003e by non-vertical plane. Let’s call such a plane separating (like separating circle, separating plane can include points from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e′\u003c/span\u003e).\u003c/p\u003e\u003cp\u003eBy analogy with separating, circle separating plane can be passed through two points of set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e′\u003c/span\u003e. All the other points of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e′\u003c/span\u003e will lie below or on the plane. In other words separating plane will pass through the edge of the upper convex hull of the set \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e′\u003c/span\u003e. The projection of edges of the upper convex hull \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e′\u003c/span\u003e onto the plane \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003exOy\u003c/i\u003e\u003c/span\u003e will produce some sort of a set flat convex hull partitioning into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e by non-intersecting edges. In this case separating plane corresponds separating circle passing through the edge partition. Let’s designate the convex hull \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecoA\u003c/i\u003e\u003c/span\u003e. In case when none of \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecoA\u003c/i\u003e\u003c/span\u003e lies within one circle all the edges of the upper convex hull are triangles and the derived partitioning is triangulation. Otherwise the derived partitioning should be completed to be triangulation.\u003c/p\u003e\u003cp\u003e\u003cimg src\u003d\"/predownloaded/01/43/0143507800775376bd9db577af27cee31301f084.png\" style\u003d\"width: 50.0%;max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eTo construct a separating circle look over triangulation edges and check the possibility of drawing a circle though an edge as it is described above.\u003c/p\u003e\u003cp\u003eThe derived triangulation has the following feature: circle drawn around any triangle contains the whole polygon \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecoA\u003c/i\u003e\u003c/span\u003e as the corresponding bound of three-dimensional convex hull is higher than all three-dimensional points \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e′\u003c/span\u003e. The described triangulation is “opposite” to the Delaunay triangulation according to which circle drawn around any triangle doesn’t contain any points of the original set. This triangulation is commonly known as the Anti-Delaunay triangulation.\u003c/p\u003e\u003cp\u003eUsing the characterizing feature the Anti-Delaunay triangulation can be constructed by means of the method “divide and conquer” without transferring into three-dimensional space and working with points of plane and circles only. Let us triangulate polygon created by the vertices \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecoA\u003c/i\u003e\u003c/span\u003e when moving counter-clock-wise from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. Let us find the third point of triangle, that will contain edge \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e. I.e such point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, that circumscribed circle over triangle \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e contains the whole current polygon. For this purpose let’s iterate through all polygon’s vertices and select the one, that gives the extreme position of the center of the circumscribed circle lied on the mid-perpendicular of \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e. The circle will contain the whole polygon \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecoA\u003c/i\u003e\u003c/span\u003e as the edge \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e is included in the Anti-Delaunay triangulation. Recursively triangulate polygons with vertices from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e and from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. The base of recursion is a segment, that shouldn\u0027t be triangulated. \u003c/p\u003e\u003cp\u003eTo solve the original problem one should swap \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e and perform the above procedure once more. Complexity of the algorithm is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003eA\u003c/i\u003e|\u003ci\u003elog\u003c/i\u003e|\u003ci\u003eA\u003c/i\u003e| + |\u003ci\u003ecoA\u003c/i\u003e|(|\u003ci\u003ecoA\u003c/i\u003e| + |\u003ci\u003eB\u003c/i\u003e|) + |\u003ci\u003eB\u003c/i\u003e|\u003ci\u003elog\u003c/i\u003e|\u003ci\u003eB\u003c/i\u003e| + |\u003ci\u003ecoB\u003c/i\u003e|(|\u003ci\u003ecoB\u003c/i\u003e| + |\u003ci\u003eA\u003c/i\u003e|)\u003c/span\u003e\u003d\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/35/c4/35c4d4e204b09963125f7f054c0b85bed9ede3ed.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e is a maximum absolute value of the coordinates of all given points. Actually, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eC\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3 / 2\u003c/sup\u003e)\u003c/span\u003e is an estimation of the number of points at a convex hull with no three points in a line. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eF. Yura and Developers\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eAuthors: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Rubanenko\" title\u003d\"Candidate Master Rubanenko\"\u003eRubanenko\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s consider following solution:\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e be the solution for \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e subarray. It\u0027s easy to see that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(1, \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e is the answer for the given problem. How should one count \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e? Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e be an index of the maximum value over subarray \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e]\u003c/span\u003e. All the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003egood\u003c/i\u003e\u003c/span\u003e segments can be divided into two non-intersecting sets: those that contain \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e and those that don\u0027t. To count the latter we can call \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003el\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e - 1)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e + 1, \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e. We are left with counting the number of subarrays that contain \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e, i.e. the number of pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e \u0026lt; \u003ci\u003em\u003c/i\u003e \u0026lt; \u003ci\u003ej\u003c/i\u003e ≤ \u003ci\u003er\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e - 1) + \u003ci\u003eg\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e + 1, \u003ci\u003ej\u003c/i\u003e)%\u003ci\u003ek\u003c/i\u003e \u003d 0\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003es\u003c/i\u003e, \u003ci\u003et\u003c/i\u003e)\u003c/span\u003e defines \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003es\u003c/i\u003e + 1\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003et\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e be the sequence of partial sums of the given array, i.e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e + ... + \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. For every \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e we are interested in the number of such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e%\u003ci\u003ek\u003c/i\u003e \u003d 0\u003c/span\u003e, so if we iterate over every possible \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, then we are interested in number of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e - \u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003emodk\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e ≤ \u003ci\u003ei\u003c/i\u003e \u0026lt; \u003ci\u003em\u003c/i\u003e\u003c/span\u003e. So we are left with simple query over the segment problem of form \u0026quot;how many numbers equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and belong to a given segment \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003el\u003c/i\u003e, \u003ci\u003er\u003c/i\u003e)\u003c/span\u003e\u0026quot;. It can be done in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003eq\u003c/i\u003e + \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e time and memory, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e is the number of generated queries. Model solution processes all the queries in offline mode, using frequency array. \u003c/p\u003e\u003cp\u003eOne can notice that in the worst case we can generate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e queries which doesn\u0027t fit into TL or ML. However, we can choose which is faster: iterate over all possible \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. In both cases we get an easy congruence which ends up as a query described above. If we iterate only over the smaller segment, every time we \u0026quot;look at\u0026quot; the element \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e it moves to a smaller segment which is at least two times smaller than the previous one. So, every element will end up in 1-element length segment where recursion will meet it\u0027s base in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e \u0026quot;looking at\u0026quot; this element. \u003c/p\u003e\u003cp\u003eThe overall complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e × \u003ci\u003elog\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e) + \u003ci\u003ek\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eG. Happy Line\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eAuthors: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/2222\" title\u003d\"International master 2222\"\u003e2222\u003c/a\u003e, \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/MrDindows\" title\u003d\"Grandmaster MrDindows\"\u003eMrDindows\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s reformulate the condition in terms of a certain height the towers, which will be on the stairs. Then an appropriate amount of money of a person in the queue is equal to the height of the tower with the height of the step at which the tower stands. And the process of moving in the queue will be equivalent to raising a tower on the top step, and the one in whose place it came up — down. As shown in the illustrations. Then, it becomes apparent that to make all of the tower on the steps to be sorted, it is enough to sort the tower without the height of step it stays. Total complexity of sorting is O(nlog(n)).\u003c/p\u003e\u003cp\u003e\u003cimg src\u003d\"/predownloaded/43/7b/437b93983fcad676a78869be85a68de9f4b026ae.png\" style\u003d\"width: 40.0%;height: 40.0%;max-width: 100.0%;max-height: 100.0%;\" /\u003e \u003cimg src\u003d\"/predownloaded/5d/4c/5d4c1e912abdc81e118fa2232da7a65f112bb28e.png\" style\u003d\"width: 40.0%;height: 40.0%;max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eH. Degenerate Matrix\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eAuthor: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Igor_Kudryashov\" title\u003d\"International master Igor_Kudryashov\"\u003eIgor_Kudryashov\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe rows of degenerate matrix are linear dependent so the matrix B can be written in the following way:\u003c/p\u003e\u003cp\u003e\u003cimg src\u003d\"/predownloaded/54/81/5481db1b5c00933fd2d52b17f647338aa4ca9bab.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSuppose \u003c/p\u003e\u003cp\u003e\u003cimg src\u003d\"//codeforces.com/predownloaded/fa/79/fa7940755cea18a6a229acd6a1f7dd92e8c3ef41.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet\u0027s assume that elements of the first row of matrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e are coordinates of point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e on two-dimensional plane and the elements of the second row are coordinates of point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e. Assume that the rows of matrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e are also coordinates of points \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e. Let\u0027s note that in this case the line that is passing through points \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e is also passing through point \u003cspan class\u003d\"tex-span\"\u003e(0, 0)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s find the answer — the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003c/span\u003e — by using binary search. Suppose we are considering some number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e. We need to check if there is such matrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e that\u003c/p\u003e\u003cp\u003e\u003cimg src\u003d\"//codeforces.com/predownloaded/c7/49/c749a06837123e2e238cd1a3d0d5fde0ba89e7d3.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eIn geometric interpretation it means that point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e are inside the square which center is point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e and length of side is \u003cspan class\u003d\"tex-span\"\u003e2·\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e. In the same way the point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e are inside the square which center is point \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/span\u003e and length of side is \u003cspan class\u003d\"tex-span\"\u003e2·\u003ci\u003ed\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e. So we need to check if there is a line that is passing through point \u003cspan class\u003d\"tex-span\"\u003e(0, 0)\u003c/span\u003e and is crossing these squares. In order to do this we should consider every vertex of the first square, build the line that is passing through the chosen vertex and the center of coordinate plane and check if it cross any side of the other square. Afterwards we should swap the squares and check again. Finally if there is a desired line we need to reduce the search area and to expand otherwise.\u003c/p\u003e\u003c/div\u003e","tags":[]}}