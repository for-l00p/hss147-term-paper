{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1426541387,"rating":143,"authorHandle":"MikeMirzayanov","modificationTimeSeconds":1438201788,"id":16986,"title":"\u003cp\u003eHow Codeforces calculates ratings for teams\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eDoing VK Cup 2015 we faced with an interesting problem: how to calculate rating changes for team members? \u003c/p\u003e\u003cp\u003eIn short, currently the ratings are calculated using the following rules: * each contestant has some ratings \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e before the round, * our goal is to follow Elo Rating System idea: participant \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e wins participant \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e with probability:\u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/97/e6/97e652bcbc96e6bc62a218f3bcb8f97ed5b4d19a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e \u003cul\u003e   \u003cli\u003eas we know chances to win/loose for any pair of participants, we can calculate the expected place (seed) as a sum of winning probabilities,\u003c/li\u003e   \u003cli\u003eif participant took place better than expected then we need to increase rating, if worse then we need to decrease rating.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eAbove items are just some general rules, but we have some anti-inflation corrections and heuristics. BTW, we are moving forward to rethink rating formulas and open them. But the question now is not about that, but about how to calculate the rating of a team.\u003c/p\u003e\u003cp\u003eIt is natural to generalize current ideas, but we need a method to calculate the rating of a team knowing ratings of members. If there is such function, say \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eteamRatings\u003c/i\u003e(\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e (for 2-member teams), it will be naturally to use it to calculate expected place of a team. And depending on actual place, member\u0027s ratings should be adjusted.\u003c/p\u003e\u003cp\u003eThat\u0027s the idea came to mind of the Codeforces team during lunch.\u003c/p\u003e\u003cp\u003eFor sure, the function \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eteamRatings\u003c/i\u003e(\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e should satisfy some constraints:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eteamRatings\u003c/i\u003e(\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e) ≥ \u003ci\u003emax\u003c/i\u003e(\u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003er\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e)\u003c/span\u003e,\u003c/li\u003e   \u003cli\u003eif we compose a team of \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/tourist\" title\u003d\"Legendary grandmaster tourist\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003et\u003c/span\u003eourist\u003c/a\u003e and somebody not very skilled (say, green participant), rating of team should be close (a little more) to \u003ca class\u003d\"rated-user user-legendary\" href\u003d\"/profile/tourist\" title\u003d\"Legendary grandmaster tourist\"\u003e\u003cspan class\u003d\"legendary-user-first-letter\"\u003et\u003c/span\u003eourist\u003c/a\u003e\u0027s rating.\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eI was offered the following funny model. Image there is team \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eAB\u003c/i\u003e\u003c/span\u003e composed to two members \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. Let\u0027s try somehow to compare it with individual participant \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e. In my model instead of single contest \u0026quot;A+B vs C\u0026quot; we will make two contests \u0026quot;A vs C\u0026quot; and \u0026quot;B vs C\u0026quot;. If at least in one contest of two won member of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eAB\u003c/i\u003e\u003c/span\u003e, then the team won. If both contests won \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e, them \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e won.\u003c/p\u003e\u003cp\u003eThis model doesn\u0027t consider any team-work, but it fairly tries to consider chances of both participants \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003c/span\u003e to overcome \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow we know rating of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e and winning probability of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eAB\u003c/i\u003e\u003c/span\u003e over \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e, we can inverse Elo formula to find rating of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eAB\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThere is a trick that calculation of team rating depends on opponent \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e. How to choose the most relevant opponent \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e? It is easy to show that changing rating of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e the calculated team rating changes monotonically. I like an idea to choose such rating of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e that calculated rating happens to be equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e\u003c/span\u003e. In other words let\u0027s use such opponent that equally skilled compared to the team \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eAB\u003c/i\u003e\u003c/span\u003e. Binary search helps to find such opponent\u0027s rating (closed formula also exists).\u003c/p\u003e\u003cp\u003eSo we following code aggregates ratings of several individual participants to the single value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elong double getWinProbability(long double ra, long double rb) {\n    return 1.0 / (1.0 + pow((long double) 10.0, (rb - ra) / 400.0));\n}\n\nlong double aggregateRatings(vector\u0026lt;long double\u0026gt; teamRatings)\n{\n    long double left \u003d 1;\n    long double right \u003d 1E4;\n\n    for (int tt \u003d 0; tt \u0026lt; 100; tt++) {\n        long double r \u003d (left + right) / 2.0;\n\n        long double rWinsProbability \u003d 1.0;\n        forn(i, teamRatings.size())\n            rWinsProbability *\u003d getWinProbability(r, teamRatings[i]);\n\n        long double rating \u003d log10(1 / (rWinsProbability) - 1) * 400 + r;\n\n        if (rating \u0026gt; r)\n            left \u003d r;\n        else\n            right \u003d r;\n    }\n\n    return (left + right) / 2.0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce again, I understand that this model is not absolutely correct. But I don\u0027t think that absolutely correct model exists. I think that this model is reasonable and has a right to exist. What do you think?\u003c/p\u003e\u003c/div\u003e","tags":["codeforces","rating","ratings","teams"]}}