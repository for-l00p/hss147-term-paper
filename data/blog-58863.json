{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1523411560,"rating":-5,"authorHandle":"vamsi1281977","modificationTimeSeconds":1523411770,"id":58863,"title":"\u003cp\u003eProblem 271A\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI just solved problem 271A and enjoyed solving it, and so, I want to write about it. Here is a link to the problem: \u003ca href\u003d\"//codeforces.com/problemset/problem/271/A\"\u003eProblem 271A\u003c/a\u003e. Now, this problem can be solved in a straight-forward manner if we have a function implemented that returns true when a number has only distinct digits. Here is the naive solution:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eProblem271A(y):\n  let x \u003d y + 1;\n  while (HasDistinctDigits(x) \u003d\u003d false) {\n    x \u003d x + 1;  \n  }\n  return x;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis solution would probably be enough to be an acceptable submission, but the question is: Is there a better algorithm than brute-force to solve this problem? The answer is yes. I will illustrate the algorithm with examples.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eLet y \u003d 1987. \n1. Then, the prefix 198 has distinct digits, So lets try to increment 7, it can be incremented to 8 or 9. But 8 and 9 are already present in the prefix 198, so we cannot increment 7. So, let us pop 7 off.\n2. Now, we have 198. We cannot increment 8 as 9 is in the prefix 19, so lets pop 8 off.\n3. Now, we have 19. 9 cannot be incremented as it is the highest digit, so let us pop 9 off.\n4. Now, we have 1. We can increment 1, so lets make it 2.\n5. Now, we have 2. We need 3 more digits from 0,1,3,4,5,6,7,8,9.\n6. The next digit we can concat to 2 is 0, so we have 20.\n7. The next digit we can concat to 20 is 1, so we have 201.\n8. The next digit we can concat to 201 is 3, so we have 2013. And done!\n\u003c/code\u003e\u003c/pre\u003e \u003cpre\u003e\u003ccode\u003eLets take another trickier example of y \u003d 1002.\n1. The prefix 100 has duplicates, so we must pop 2 off.\n2. Now, we have 100. The prefix 10 has no duplicates and we can increment the last 0 of 100 to 2, so we have 102.\n3. To 102, we can add a 3 at the end, to get 1023. And done!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":["271a"]}}