{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1401646280,"rating":112,"authorHandle":"vfleaking","modificationTimeSeconds":1401767546,"id":12513,"title":"\u003cp\u003eCodeforces Round #250 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/437/problem/A\" title\u003d\"Codeforces Round 250 (Div. 2)\"\u003e437A - The Child and Homework\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe enumerate each choice \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, and then enumerate another choice \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ej\u003c/i\u003e ≠ \u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e, let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e \u003d 0\u003c/span\u003e at first, if choice \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e is twice longer than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e \u003d \u003ci\u003ecnt\u003c/i\u003e + 1\u003c/span\u003e, if choice \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e is twice shorter than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e \u003d \u003ci\u003ecnt\u003c/i\u003e - 1\u003c/span\u003e. So \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is great if and only if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e \u003d 3\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e \u003d  - 3\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf there is exactly one great choice, output it, otherwise output C.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/437/problem/B\" title\u003d\"Codeforces Round 250 (Div. 2)\"\u003e437B - The Child and Set\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe could deal with this by digits.\u003c/p\u003e\u003cp\u003eBecause \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is taking out the lowest \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e of the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, we can enumerate the number of the lowest zero.\u003c/p\u003e\u003cp\u003eThen, if we enumerate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e as the number of zero, we enumerate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e as well, which \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e × 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e is no more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elimit\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e is odd. We can find out that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e(\u003ci\u003ea\u003c/i\u003e × 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e) \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIn this order, we would find out that the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e()\u003c/span\u003e we are considering is monotonically decresing.\u003c/p\u003e\u003cp\u003eBecause for every two number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e is a divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e(\u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e(\u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e is a divisor of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e(\u003ci\u003ex\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWe can solve it by greedy. When we enumerate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e by descending order, we check whether \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e is no more than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e\u003c/span\u003e, and check whether there is such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. We minus \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e\u003c/span\u003e if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e exist.\u003c/p\u003e\u003cp\u003eIf at last \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e\u003c/span\u003e is not equal to 0, then it must be an impossible test.\u003c/p\u003e\u003cp\u003eWhy? Because if we don\u0027t choose a number whose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e, then we shouldn\u0027t choose two numbers whose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e - 1\u003c/sup\u003e\u003c/span\u003e. (Otherwise we can replace these two numbers with one number)\u003c/p\u003e\u003cp\u003eIf we choose one number whose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e - 1\u003c/sup\u003e\u003c/span\u003e, then we can choose at most one number whose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e - 2\u003c/sup\u003e\u003c/span\u003e, at most one number whose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e - 3\u003c/sup\u003e\u003c/span\u003e and so on. So the total sum of them is less than \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e and we can\u0027t merge them into \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf we don\u0027t choose one number whose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e - 1\u003c/sup\u003e\u003c/span\u003e, then it\u0027s just the same as we don\u0027t choose one number whose \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elowbit\u003c/i\u003e \u003d 2\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSo the total time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elimit\u003c/i\u003e)\u003c/span\u003e. \u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/437/problem/C\" title\u003d\"Codeforces Round 250 (Div. 2)\"\u003e437C - The Child and Toy\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe best way to delete all n nodes is deleting them in decreasing order of their value.\u003c/p\u003e\u003cp\u003eProof:\u003c/p\u003e\u003cp\u003eConsider each edge \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e, it will contribute to the total cost \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e or \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e when it is deleted.\u003c/p\u003e\u003cp\u003eIf we delete the vertices in decreasing order, then it will contribute only \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e, so the total costs is the lowest.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/437/problem/D\" title\u003d\"Codeforces Round 250 (Div. 2)\"\u003e437D - The Child and Zoo\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFirst, there is nothing in the graph. We sort all the areas of the original graph by their animal numbers in decreasing order, and then add them one by one.\u003c/p\u003e\u003cp\u003eWhen we add area \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, we add all the roads \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e is some area that has been added.\u003c/p\u003e\u003cp\u003eAfter doing so, we have merged some connected components. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eq\u003c/i\u003e\u003c/span\u003e are two areas in different connected components we have merged just then, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e must equals the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e, because they are not connected until we add node \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSo we use Union-Find Set to do such procedure, and maintain the size of each connected component, then we can calculate the answer easily.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/437/problem/E\" title\u003d\"Codeforces Round 250 (Div. 2)\"\u003e437E - The Child and Polygon\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eIn this problem, you are asked to count the triangulations of a simple polygon.\u003c/p\u003e\u003cp\u003eFirst we label the vertex of polygon from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThen we let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e be the number of triangulations from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. (Suppose there is no other vertices and there is an edge between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e)\u003c/p\u003e\u003cp\u003eIf the line segment \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e cross with the original polygon or is outside the polygon, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e][\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e is just 0. We can check it in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e time.\u003c/p\u003e\u003cp\u003eOtherwise, we have \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c4/1d/c41df0e5c9a15954f79ae0cada649272fff31ccd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, which means we split the polygon into the triangulation from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, a triangle \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ek\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e)\u003c/span\u003e and the triangulation from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e to vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. We can sum these terms in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e time.\u003c/p\u003e\u003cp\u003eFinally,the answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[0][\u003ci\u003en\u003c/i\u003e - 1]\u003c/span\u003e. It\u0027s obvious that we didn\u0027t miss some triangulation. And we use a triangle to split the polygon each time, so if the triangle is different then the triangulation must be different, too. So we didn\u0027t count some triangulation more than once.\u003c/p\u003e\u003cp\u003eSo the total time complexity is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e, which is sufficient for this problem.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/438/problem/D\" title\u003d\"Codeforces Round 250 (Div. 1)\"\u003e438D - The Child and Sequence\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe important idea of this problem is the property of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/4c/4b/4c4b6db881a112d8bec778b0cf02fce95bce6bc1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/27/54/275489a18397e1fa625c00d5a1bf953c07aa4977.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eSo, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9f/01/9f0189706c51793d30383d4cb59d96d08f068e25.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e \u003d 0\u003c/span\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/49/6a/496a7f0d035a7453565880f3d51fdd808f6310da.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e remains to be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≠ 0\u003c/span\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/51/77/5177e5a30ced424cf3401a175ccd6a339d4f0b2f.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eWe realize every time a change happening on \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e will be reduced by at least a half.\u003c/p\u003e\u003cp\u003eSo let the energy of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e become \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1f/6e/1f6ed9b6d60e66a9509f72429c8b33f268b75d9e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Every time when we modify \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, it may take at least \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e energy.\u003c/p\u003e\u003cp\u003eThe initial energy of the sequence is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e9/9a/e99a02994d1d444326509f8bbc92eb549f96b77a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eWe use a segment tree to support the query to the maximum among an interval. When we need to deal with the operation \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, we modify the maximum of the segment until it is less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow let\u0027s face with the operation 3.\u003c/p\u003e\u003cp\u003eEvery time we modify an element on the segment tree, we\u0027ll charge a element with \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/18/84/188488de16bfdc6fa6aaad72afa84f53b61c81ae.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e power.\u003c/p\u003e\u003cp\u003eSo the total time complexity is : \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7b/54/7b540d99886eccd69f14170b81be85398655e854.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eBy the way, we can extend the operation \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e to assign all the elements in the interval to the same number in the same time complexity. This is an interesting idea also, but a bit harder. You can think of it.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/438/problem/E\" title\u003d\"Codeforces Round 250 (Div. 1)\"\u003e438E - The Child and Binary Tree\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[\u003ci\u003es\u003c/i\u003e]\u003c/span\u003e be the number of good vertex-weighted rooted binary trees whose weight exactly equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e, then we have:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[0] \u003d 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8d/2b/8d2b15d514dd189fa3d9018f61fbcb863e92154b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eLet F(z) be the generating function of f. That is, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fe/8a/fe8a1edc8fb669c59b3d98494a4d1409b2200d6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eAnd then let \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6a/cf/6acfe88982ad8ea8ffb8f8226a73a82202ae6461.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo we have:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) \u003d \u003ci\u003eC\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 1\u003c/span\u003e\u003c/p\u003e\u003cp\u003e``\u003cspan class\u003d\"tex-span\"\u003e + 1\u003c/span\u003e\u0027\u0027 is for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e[0] \u003d 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eSolve this equation we have:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b5/64/b56489979dcabb18b3902d15ef3a58d64f1617ca.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo the remaining question is: how to calculate the multiplication inverse of a power series and the square root of a power series?\u003c/p\u003e\u003cp\u003eThere is an interesting algorithm which calculate the inverse of a power series \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003c/span\u003e:\u003c/p\u003e\u003cp\u003eWe use \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) ≡ \u003ci\u003eg\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e to denote that the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e terms of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003c/span\u003e are the same.\u003c/p\u003e\u003cp\u003eWe can simply calculate a formal power series \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003c/span\u003e which satisfies \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) ≡ 1 (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e1\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003eNext, if we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003c/span\u003e which satisfies \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) ≡ 1 (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e, we will get:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) - 1)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e ≡ 0 (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e - 2\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) + 1 ≡ 0 (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e1 ≡ 2\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) - \u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e) ≡ 2\u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e) - \u003ci\u003eR\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003eWe can simplely use Fast Fourier Transform to deal with multiplication. Note the unusual mod \u003cspan class\u003d\"tex-span\"\u003e998244353\u003c/span\u003e (\u003cspan class\u003d\"tex-span\"\u003e7 × 17 × 2\u003csup class\u003d\"upper-index\"\u003e23\u003c/sup\u003e + 1)\u003c/span\u003e, thus we can use Number Theoretic Transform.\u003c/p\u003e\u003cp\u003eBy doubling \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e repeatedly, we can get the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e terms of the inverse of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003c/span\u003e in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ee/25/ee259b9b93864a58ef559dc68e9ce1fd4bd94c67.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time. It\u0027s because that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/91/ef/91efdcfb96c32854ea2da3b68487f35fc82fa977.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eWe can just use the idea of this algorithm to calculate the square root of a power series \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003c/span\u003e:\u003c/p\u003e\u003cp\u003eWe can simply calculate a power series \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003c/span\u003e which satisfies \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e ≡ \u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003eNext, if we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003c/span\u003e which satisfies \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e ≡ \u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e, we will get:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e - \u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e))\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e ≡ 0 (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e - 2\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) + \u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e ≡ 0 (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e - 2\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) + \u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e - 2\u003c/sup\u003e ≡ 0 (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e4\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) ≡ \u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e + 2\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) + \u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e - 2\u003c/sup\u003e (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e4\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e) ≡ (\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e) + \u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003ci\u003eS\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e(\u003ci\u003ez\u003c/i\u003e)\u003csup class\u003d\"upper-index\"\u003e - 1\u003c/sup\u003e)\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e (\u003ci\u003emod\u003c/i\u003e \u003ci\u003ez\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/36/13/3613b4d7010d58a000a7d737242316252abfb7f7.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eSo, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a2/41/a2418063fa959c67c81632946ed8e944e53f760e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eBy doubling \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e repeatedly, we can get the first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e terms of the square root of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eF\u003c/i\u003e(\u003ci\u003ez\u003c/i\u003e)\u003c/span\u003e in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ee/25/ee259b9b93864a58ef559dc68e9ce1fd4bd94c67.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e time.\u003c/p\u003e\u003cp\u003eThat\u0027s all. What I want to share with others is this beautiful doubling algorithm.\u003c/p\u003e\u003cp\u003eSo the total time complexity of the solution to the original problem is \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/04/04/040494b6aebd1e7f08c051a2d021b33f88fd6db2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/uQYLfQ\"\u003eMy code\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThere is an algorithm solving this problem using divide and conquer and Fast Fourier Transform, which runs in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f1/24/f1245f2aaab3d458d726e272fd5e540026c8f189.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. See \u003ca href\u003d\"http://ideone.com/TQ4lh8\"\u003ethe C++ code\u003c/a\u003e and \u003ca href\u003d\"http://ideone.com/BNaVHv\"\u003ethe Java code\u003c/a\u003e for details.\u003c/p\u003e\u003c/div\u003e","tags":[]}}