{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1527559689,"rating":8,"authorHandle":"k0walsk1","modificationTimeSeconds":1527559907,"id":59732,"title":"\u003cp\u003eLCS of distinct element sequences in O(nlg(n))\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003cstrong\u003eSo here´s the problem:\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eGiven two sequences of numbers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e, such that all elements from the sequences are distinct, find the longest common subsequence of both sequences.\u003c/p\u003e\u003cp\u003eNow, i know the DP solution for the general case, which is executed in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e, but in this problem i need to get as efficient as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003enlg\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e. I found an explanation on stack overflow about how to use the LIS (Longest Increasing Subsequence) algorithm to achieve this complexity, but i didn´t understand very well. So does anyone how to explain a faster than quadratic algorithm to solve this problem?\u003c/p\u003e\u003cp\u003eThanks ahead.\u003c/p\u003e\u003c/div\u003e","tags":["lcs","map","string"]}}