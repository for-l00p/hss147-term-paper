{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1504292774,"rating":0,"authorHandle":"platypus179","modificationTimeSeconds":1504436724,"id":54241,"title":"\u003cp\u003eРазбор вводного контеста\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eВ контесте изначально было 10 задач, потом добавилась ещё одна. Все задачи были математикой либо конструктивом, то есть для их решения не требовалось знать примерно ничего. Тем не менее, были как простые задачи, так и сложные. Последние были даны именно во вводном контесте, чтобы было много времени порисовать/подумать. Все задачи, кроме последней, были взяты с разных раундов на Codeforces.\u003c/p\u003e\u003cp\u003eЯ оценивал сложность задач так (жирным выделены несданные задачи):\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cstrong\u003eA. Перекладывание паркета. Hard.\u003c/strong\u003e\u003c/li\u003e   \u003cli\u003eB. Таня и игрушки. Must have.\u003c/li\u003e   \u003cli\u003eC. Три логотипа. Medium.\u003c/li\u003e   \u003cli\u003eD. Стирка, сушка, глажка. Easy.\u003c/li\u003e   \u003cli\u003e\u003cstrong\u003eE. Контрольная по арифметике. Medium.\u003c/strong\u003e\u003c/li\u003e   \u003cli\u003e\u003cstrong\u003eF. Дерево и массив. Hard.\u003c/strong\u003e\u003c/li\u003e   \u003cli\u003eG. Интересный массив. Medium.\u003c/li\u003e   \u003cli\u003eH. Санта-Клаус и его Робот. Easy.\u003c/li\u003e   \u003cli\u003eI. Тривиальная задача. Easy.\u003c/li\u003e   \u003cli\u003eJ. Шестиугольники!. Must have.\u003c/li\u003e   \u003cli\u003e\u003cstrong\u003eK. Numb. Medium.\u003c/strong\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eВ целом, результат примерно ожидаемый. Могу сказать, что вполне доволен результатом, хотя есть куда стремиться. Кроме того, нужно подумать, как бы тебе посовать в контесты побольше идейных задач, так в этом контесте проблемы возникли именно там, где надо много рисовать и придумывать.\u003c/p\u003e\u003cp\u003eПерейдём к задачам. Про мои посылки: у меня достаточно внушительный темплейт живёт уже год. Содержательный код к более-менее новым посылкам начинается после строчки \u003ccode\u003eFastIO\u0026lt;..., ...\u0026gt; IO;\u003c/code\u003e.\u003c/p\u003e\u003ch4\u003e\u003ca href\u003d\"//aishutin17.contest.codeforces.com/group/30wV5Q1WFk/contest/215182/problem/A\"\u003eA. Перекладывание паркета.\u003c/a\u003e\u003c/h4\u003e \u003cul\u003e   \u003cli\u003eМоя посылка: \u003ca href\u003d\"http://vasalf.net/cosh/00-enter/A.cpp.html\"\u003eздесь\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eВидимо, самая сложная задача из предложенных тебе на вводном контесте.\u003c/p\u003e\u003cp\u003eВ разборе мне будет удобнее пользоваться терминами доминошек. Общая идея такая: хотя бы одна из сторон чётная, будем считать, что высота, иначе повернём. Дальше научимся поворачивать доминошки в любой картинке так, чтобы получить картинку, в которой все доминошки расположены вертикально (тривиальная картинка). Если мы научимся делать так, то мы из исходной картинки сможем сначала получить тривиальную, а потом из тривиальной конечную, просто развернув те действия, который нужно было сделать, чтобы получить из конечной картинки тривиальную.\u003c/p\u003e\u003cp\u003eТеперь о том, как сделать тривиальную картинку. Будем идти слева направо и сверху вниз и поддерживать инвариант, что все пройденные клетки картинки всегда уже имеют нужное состояние. Понятно, что если все клетки в ряду с чётным в 0-индесации индеком имеют состояние \u003ccode\u003eU\u003c/code\u003e, то все клетки в следующем за ним ряду имеют состояние \u003ccode\u003eD\u003c/code\u003e, поэтому достаточно смотреть только на чётные ряды. В них нужно всем клеткам сделать состояние \u003ccode\u003eU\u003c/code\u003e. \u003c/p\u003e\u003cp\u003eОбрабатываем очередную клетку. Если у неё состояние \u003ccode\u003eU\u003c/code\u003e, то всё и так хорошо, инвариант сохранён, идём дальше. Заметим, что если у неё состояние не \u003ccode\u003eU\u003c/code\u003e, то так как инвариант выполняется для всех предыдущих клеток, её состояние может быть только \u003ccode\u003eL\u003c/code\u003e (её доминошка не может торчать ни вверх, ни влево). Чтобы не нарушать инвариант, нам придётся повернуть квадрат из доминошки, содержащей эту клетку, и следующей за ней снизу. Проблема лишь в том, что этой нижней доминошки также может не существовать. В таком случае нам придётся запуститься рекурсивно и попытаться сделать так, чтобы нижняя доминошка появилась. Внутри рекурсии мы делаем ровно то же самое, но иногда с поворотом на 90 градусов. При этом клетка, состояние которой мы хотим поменять, движется по диагонали вправо-вниз, а значит, через \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e, \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e шагов мы обязательно упрёмся в границу доски и там уже не надо будет ничего рекурсивно поворачивать (всё и так хорошо).\u003c/p\u003e\u003cp\u003eРазбор с картинками можно найти в \u003ca href\u003d\"//codeforces.com/blog/entry/50724\"\u003eразборе\u003c/a\u003e того раунда, это задача 778D. Правда, там симметричное решение, которое ставит доминошки горизонтально, а не вертикально.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//aishutin17.contest.codeforces.com/group/30wV5Q1WFk/contest/215182/problem/B\"\u003eB. Таня и игрушки.\u003c/a\u003e\u003c/h3\u003e \u003cul\u003e   \u003cli\u003eМоя посылка: \u003ca href\u003d\"http://vasalf.net/cosh/00-enter/B.py.html\"\u003eздесь\u003c/a\u003e\u003c/li\u003e   \u003cli\u003eТвоя посылка: \u003ca href\u003d\"/group/30wV5Q1WFk/contest/215182/submission/29521760\" title\u003d\"Посылка 29521760 от AIshutin\"\u003e29521760\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eНаши с тобой решения идейно совпадают, так что разбора здесь не будет.\u003c/p\u003e\u003cp\u003eЗамечание по коду. Реализация с сортировкой и двумя указателями определённо имеет право на жизнь. Я не буду спорить по поводу того, что из трёх вариантов (set, хеш-таблица или два указателя) быстрее работает, однако реализация со стандартным \u003ccode\u003eset\u003c/code\u003e\u0027ом на мой скромный взгляд выглядит попроще, а зашла даже на питоне, не сильно уступив твоей по времени.\u003c/p\u003e\u003cp\u003eА мораль: не усложнять код там, где его усложнять не надо. На ограничениях до \u003cspan class\u003d\"tex-span\"\u003e10\u003csup class\u003d\"upper-index\"\u003e5\u003c/sup\u003e\u003c/span\u003e обычно заходит любой неквадрат, а иногда и какой-нибудь хитрый квадрат.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//aishutin17.contest.codeforces.com/group/30wV5Q1WFk/contest/215182/problem/C\"\u003eC. Три логотипа.\u003c/a\u003e\u003c/h3\u003e \u003cul\u003e   \u003cli\u003eМоя посылка: \u003ca href\u003d\"http://vasalf.net/cosh/00-enter/C.py.html\"\u003eздесь\u003c/a\u003e\u003c/li\u003e   \u003cli\u003eТвоя посылка: \u003ca href\u003d\"/group/30wV5Q1WFk/contest/215182/submission/29521030\" title\u003d\"Посылка 29521030 от AIshutin\"\u003e29521030\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eОсобых замечаний по коду нет, это была мерзкая задача, в которой надо было перебрать что угодно как угодно и вывести ответ. Лично я перебирал ориентацию прямоугольников и пытался их поставить двумя способами: либо вертикально друг на друга, либо уголком: один сверху и два снизу. Что именно перебирал ты, я не очень понял. Если вдруг это сложнее чем то, что перебирал я, то знай, что можно было проще. А если ты перебирал что-то более простое, то расскажи мне, чтобы я знал, как можно было проще.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//aishutin17.contest.codeforces.com/group/30wV5Q1WFk/contest/215182/problem/D\"\u003eD. Стирка, сушка, глажка.\u003c/a\u003e\u003c/h3\u003e \u003cul\u003e   \u003cli\u003eМоя посылка: \u003ca href\u003d\"http://vasalf.net/cosh/00-enter/D.cpp.html\"\u003eздесь\u003c/a\u003e\u003c/li\u003e   \u003cli\u003eТвоя посылка: \u003ca href\u003d\"/group/30wV5Q1WFk/contest/215182/submission/29545192\" title\u003d\"Посылка 29545192 от AIshutin\"\u003e29545192\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eЗабавно, но наши с тобой решения в этой задаче кардинально различаются. Я просто промоделировал процесс, в котором вещи просто жадно пихаются туда, куда им нужно, как только это возможно, из соображений того, что если нам будет нужно, мы потом подвинем время стирки/сушки/глажки в одну из сторон. На командных олимпиадах такие задачи очень любят, точно помню три штуки только из тех, где я очно участвовал.\u003c/p\u003e\u003cp\u003eА ты, видимо, для каждой вещи сделал бинпоиск по времени, по которому мы эту вещь загружаем. Тоже имеет право на жизнь, даже чутка более прямолинейно.\u003c/p\u003e\u003cp\u003eПо коду: молодец, что заметил, что времена возрастают и можно сделать очередь вместо сета. Единственное что, по-моему, бинпоиск здесь можно было заменить на банальную формулу, разве нет?\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//aishutin17.contest.codeforces.com/group/30wV5Q1WFk/contest/215182/problem/E\"\u003eE. Контрольная по арифметике.\u003c/a\u003e\u003c/h3\u003e \u003cul\u003e   \u003cli\u003eМоя посылка: \u003ca href\u003d\"http://vasalf.net/cosh/00-enter/E.py.html\"\u003eздесь\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eВесьма неприятная задача, но ничего идейно сложного я в ней не вижу.\u003c/p\u003e\u003cp\u003eМысль такая: переберём длину ответа (это либо длина исходного числа, либо длина исходного числа \u003cspan class\u003d\"tex-span\"\u003e -  1\u003c/span\u003e). Теперь вспоминаем, как работает сложение в столбик, и пытаемся конструктивно промоделировать этот процесс. Идём по требуемому числу справа налево, а по его ревёрснутой версии слева направо, пока не встретимся. Надо сгенерировать две цифры так, чтобы их сумма в одном месте была равна понятно какой цифре, а в другом месте -- другой понятно какой цифре. Если модуль разности требуемых сумм больше единицы, мы никак не справимся, если он единица, то можно попробовать сделать за счёт переноса через разряд, а если ноль, то понятно, что точно справимся. Дальше разбор случаев, подробнее можно посмотреть у меня в решении или в \u003ca href\u003d\"//codeforces.com/blog/entry/23342\"\u003eразборе\u003c/a\u003e оригинального раунда, это задача 625D.\u003c/p\u003e\u003cp\u003eКстати, я проморгал, что раунд был по задачам позапрошлогодней Московской олимпиады 6-9, так что, возможно, ты эту задачу уже видел.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//aishutin17.contest.codeforces.com/group/30wV5Q1WFk/contest/215182/problem/F\"\u003eF. Дерево и массив.\u003c/a\u003e\u003c/h3\u003e \u003cul\u003e   \u003cli\u003eМоя посылка: \u003ca href\u003d\"http://vasalf.net/cosh/00-enter/F.cpp.html\"\u003eздесь\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eНе надо пугаться каких-то структур в моей посылке, там просто написана проверка того, что я правильно построил конструктивное решение. Содержательная часть моей посылки -- только вызовы \u003ccode\u003eadd_edge\u003c/code\u003e и \u003ccode\u003eadd_good_pair\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eВ моём решении сначала стоит костыль на случай \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 5\u003c/span\u003e, а потом разбор всех остальных. Кроме того, в случае, если \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e -- нечётное, я просто прицепляю нулевую вершину к первой.\u003c/p\u003e\u003cp\u003eКонструкция у меня такая (случай \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 8\u003c/span\u003e):\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/56/df/56df153dfdf29010628e107a94cf21c71fea1f12.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eЗдесь нижние (тонкие) рёбра имеют вес 1, \u0026quot;хорошими\u0026quot; парами вершин являются пары \u003cspan class\u003d\"tex-span\"\u003e(5, 6)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e(6, 7)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e(7, 8)\u003c/span\u003e и внезапно \u003cspan class\u003d\"tex-span\"\u003e(6, 8)\u003c/span\u003e. Верхние же (толстые) рёбра имеют вес, специально подобранный так, чтобы сумма для хороших пар сошлась (на самом деле, это нечётные числа от 1 до 5). Ну и случайно так получилось, что пара вершин \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e - 2, \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e тоже всегда хорошая. \u003c/p\u003e\u003cp\u003eПридумывается это решение манипуляциями с правильной конструкцией для \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 3\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//aishutin17.contest.codeforces.com/group/30wV5Q1WFk/contest/215182/problem/G\"\u003eG. Интересный массив.\u003c/a\u003e\u003c/h3\u003e \u003cul\u003e   \u003cli\u003eМоя посылка: \u003ca href\u003d\"http://vasalf.net/cosh/00-enter/G.cpp.html\"\u003eздесь\u003c/a\u003e\u003c/li\u003e   \u003cli\u003eТвоя посылка: \u003ca href\u003d\"/group/30wV5Q1WFk/contest/215182/submission/29576774\" title\u003d\"Посылка 29576774 от AIshutin\"\u003e29576774\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eВ принципе, наши решения почти совпадают идейно. Действительно нужно решать задачу отдельно для каждого бита и поставить единицу в тех отрезках, где в этом бите должна стоять единица. Вот только писать спарсы для проверки корректности необязательно, достаточно проверить, что на отрезках, где должен быть хоть один ноль, этот ноль есть, а это всё же делается частичными суммами.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//aishutin17.contest.codeforces.com/group/30wV5Q1WFk/contest/215182/problem/H\"\u003eH. Санта-Клаус и его Робот.\u003c/a\u003e\u003c/h3\u003e \u003cul\u003e   \u003cli\u003eМоя посылка: \u003ca href\u003d\"http://vasalf.net/cosh/00-enter/H.py.html\"\u003eздесь\u003c/a\u003e\u003c/li\u003e   \u003cli\u003eТвоя посылка: \u003ca href\u003d\"/group/30wV5Q1WFk/contest/215182/submission/29589743\" title\u003d\"Посылка 29589743 от AIshutin\"\u003e29589743\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eНу, гм, кажется, ты написал примерно то же решение, что и я, но гораздо более запарно. Нормальное описание решения: идём слева направо, поддерживаем отрезок, являющийся последним кратчайшим путём, если встретили на нём одновременно \u003ccode\u003eL\u003c/code\u003e и \u003ccode\u003eR\u003c/code\u003e или \u003ccode\u003eU\u003c/code\u003e и \u003ccode\u003eD\u003c/code\u003e, значит, надо разбить отрезок на два. Думаю, что это называется не динамика, а жадность, и пишется сильно проще, чем то, что у тебя.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//aishutin17.contest.codeforces.com/group/30wV5Q1WFk/contest/215182/problem/I\"\u003eI. Тривиальная задача.\u003c/a\u003e\u003c/h3\u003e \u003cul\u003e   \u003cli\u003eМоя посылка: \u003ca href\u003d\"http://vasalf.net/cosh/00-enter/I.cpp.html\"\u003eздесь\u003c/a\u003e\u003c/li\u003e   \u003cli\u003eТвоя посылка: \u003ca href\u003d\"/group/30wV5Q1WFk/contest/215182/submission/29590830\" title\u003d\"Посылка 29590830 от AIshutin\"\u003e29590830\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eС этой задачей всё и так понятно, никаких замечаний у меня по ней нет.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//aishutin17.contest.codeforces.com/group/30wV5Q1WFk/contest/215182/problem/J\"\u003eJ. Шестиугольники!\u003c/a\u003e\u003c/h3\u003e \u003cul\u003e   \u003cli\u003eМоя посылка: \u003ca href\u003d\"http://vasalf.net/cosh/00-enter/J.py.html\"\u003eздесь\u003c/a\u003e\u003c/li\u003e   \u003cli\u003eТвоя посылка: \u003ca href\u003d\"/group/30wV5Q1WFk/contest/215182/submission/29489127\" title\u003d\"Посылка 29489127 от AIshutin\"\u003e29489127\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eСнова с задачей всё понятно. Удивительно лишь, что наши с тобой посылки не совпадают побайтово :)\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"//aishutin17.contest.codeforces.com/group/30wV5Q1WFk/contest/215182/problem/K\"\u003eK. Numb.\u003c/a\u003e\u003c/h3\u003e \u003cul\u003e   \u003cli\u003eПосылка моего сокомандника Миши \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/hey_boris\" title\u003d\"Кандидат в мастера hey_boris\"\u003ehey_boris\u003c/a\u003e Ютмана: \u003ca href\u003d\"http://vasalf.net/cosh/00-enter/K.cpp.html\"\u003eздесь\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eВ Петрозаводске эту задачу сдали почти все, но для нас она оказалась внезапно нетривиальной, мы решали её почти весь тур и сдали уже под конец. Авторское решение, кстати, ищет какие-то Эйлеровы циклы, а у нас честный конструктив.\u003c/p\u003e\u003cp\u003eПостроим ориентированный граф на остатках от деления на \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e: из остатка \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e проведём рёбра в остатки \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/fa/da/fadaf77d9ece54b36fb4b8d43d563a2721f613c4.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e и \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/52/97/529777660368aabbc33cd45ff379aa8b185f4738.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Наша задача -- найти гамильтонов путь \u003cspan class\u003d\"tex-span\"\u003e1 → 0\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eВыделим в нём такие циклы: из остатка \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e проведём ребро в остаток \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, если \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/77/81/77818f6f8c58b5c92f96089c38198cb78982cf9c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, а иначе -- в остаток \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e. Получатся именно циклы, так как для каждой вершины мы однозначно знаем не только следующую вершину, но и предыдущую; как любезно подсказывает нам код моего сокомандника, это вершина \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/04/e1/04e1c5be80b8c5fdf18d05c0d92b9455616d0c46.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Осталось лишь склеить эти циклы. Утверждается, что достаточно для каждой \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e склеить циклы, в которых находятся вершины \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e и \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/18/9b/189b734a382941dc01b240545ab7622fe8896fa1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, вроде это можно доказать по индукции. А это мы всегда можем сделать, так как у вершин \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e и \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/18/9b/189b734a382941dc01b240545ab7622fe8896fa1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e одинаковые соседи и можно просто свопнуть их потомков.\u003c/p\u003e\u003c/div\u003e","tags":[]}}