{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1468711047,"rating":47,"authorHandle":"Edvard","modificationTimeSeconds":1472504299,"id":46075,"title":"\u003cp\u003eEditorial of Educational Codeforces Round 14\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/691/problem/A\" title\u003d\"Educational Codeforces Round 14\"\u003e691A - Fashion in Berland\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested and prepared by Arthur Jaworski \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/KingArthur\" title\u003d\"Expert KingArthur\"\u003eKingArthur\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn this problem you should simply check the conditions from the problem statement.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eС++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003econst int N \u003d 1010;\n\nint n, a[N];\n\nbool read() {\n\tif (!(cin \u0026gt;\u0026gt; n)) return false;\n\tforn(i, n) assert(cin \u0026gt;\u0026gt; a[i]);\n\treturn true;\n}\n\nvoid solve() {\n\tint cnt \u003d accumulate(a, a + n, 0);\n\tif (n \u003d\u003d 1) puts(cnt \u003d\u003d 1 ? \u0026quot;YES\u0026quot; : \u0026quot;NO\u0026quot;);\n\telse puts(cnt \u003d\u003d n - 1 ? \u0026quot;YES\u0026quot; : \u0026quot;NO\u0026quot;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/691/problem/B\" title\u003d\"Educational Codeforces Round 14\"\u003e691B - s-palindrome\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Nikita Melnikov \u003ca class\u003d\"rated-user user-green\" href\u003d\"/profile/nickmeller\" title\u003d\"Pupil nickmeller\"\u003enickmeller\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn this problem you should simply find the symmetric letters by picture and also observe that the pairs \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eb\u003c/i\u003e, \u003ci\u003ed\u003c/i\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ep\u003c/i\u003e, \u003ci\u003eq\u003c/i\u003e)\u003c/span\u003e is the symmteric reflections.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003estring s;\n\nbool read() {\n\treturn !!getline(cin, s);\n}\n\nstring symmetric \u003d \u0026quot;AHIMOoTUVvWwXxY\u0026quot;;\nmap\u0026lt;char, char\u0026gt; opposite \u003d {{\u0027p\u0027, \u0027q\u0027}, {\u0027q\u0027, \u0027p\u0027}, {\u0027d\u0027, \u0027b\u0027}, {\u0027b\u0027, \u0027d\u0027}};\n\nvoid solve() {\n\tforn(i, sz(s)) {\n\t\tif (symmetric.find(s[i]) !\u003d string::npos) {\n\t\t\tif (s[sz(s) - 1 - i] !\u003d s[i]) {\n\t\t\t\tputs(\u0026quot;NIE\u0026quot;);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (opposite.count(s[i])) {\n\t\t\tif ((sz(s) \u0026amp; 1) \u0026amp;\u0026amp; i \u003d\u003d (sz(s) \u0026gt;\u0026gt; 1)) {\n\t\t\t\tputs(\u0026quot;NIE\u0026quot;);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (s[sz(s) - 1 - i] !\u003d opposite[s[i]]) {\n\t\t\t\tputs(\u0026quot;NIE\u0026quot;);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tputs(\u0026quot;NIE\u0026quot;);\n\t\t\treturn;\n\t\t}\n\t}\n\tputs(\u0026quot;TAK\u0026quot;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/691/problem/C\" title\u003d\"Educational Codeforces Round 14\"\u003e691C - Exponential notation\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggsted by user \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/I_Had_A_Great_Time\" title\u003d\"Expert I_Had_A_Great_Time\"\u003eI_Had_A_Great_Time\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThis is an implementation problem. You should do exactly what is written in the problem statement. On my mind the simplest way is to find the position of the first not zero digit and the position of the dot. The difference between that positions is the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e (if the value is positive you should also decrease it by one).\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003estring s;\n\nbool read() {\n\treturn !!getline(cin, s);\n}\n\nvoid solve() {\n\tint pos \u003d int(find_if(all(s), [](char c) { return c !\u003d \u00270\u0027 \u0026amp;\u0026amp; c !\u003d \u0027.\u0027; }) - s.begin());;\n\tsize_t dot_pos \u003d s.find(\u0027.\u0027);\n\tif (dot_pos \u003d\u003d string::npos) {\n\t\tdot_pos \u003d s.size();\n\t} else {\n\t\ts.erase(dot_pos, 1);\n\t}\n\n\tint expv \u003d (int) dot_pos - pos;\n\tif (expv \u0026gt; 0) expv--;\n\tforn(t, 2) {\n\t\twhile (s.back() \u003d\u003d \u00270\u0027) s.pop_back();\n\t\treverse(all(s));\n\t}\n\tif (sz(s) \u0026gt; 1) s.insert(1, \u0026quot;.\u0026quot;);\n\tif (expv \u003d\u003d 0) printf(\u0026quot;%s\\n\u0026quot;, s.c_str());\n\telse printf(\u0026quot;%sE%d\\n\u0026quot;, s.c_str(), expv);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/691/problem/D\" title\u003d\"Educational Codeforces Round 14\"\u003e691D - Swaps in Permutation\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Zi Song Yeoh \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/zscoder\" title\u003d\"Candidate Master zscoder\"\u003ezscoder\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eConsider a graph with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e vertices whose edges is the pairs from the input. It\u0027s possible to swap any two values with the positions in some connected component in that graph. So we can sort the values from any component in decreasing order. Easy to see that after sorting the values of each component we will get the lexicographically maximal permutation.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003econst int N \u003d 1200300;\n\nint n, m;\nint p[N];\npti a[N];\n\nbool read() {\n\tif (!(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m)) return false;\n\tforn(i, n) {\n\t\tassert(scanf(\u0026quot;%d\u0026quot;, \u0026amp;p[i]) \u003d\u003d 1);\n\t\tp[i]--;\n\t}\n\tforn(i, m) {\n\t\tassert(scanf(\u0026quot;%d%d\u0026quot;, \u0026amp;a[i].x, \u0026amp;a[i].y) \u003d\u003d 2);\n\t\ta[i].x--, a[i].y--;\n\t}\n\treturn true;\n}\n\nbool used[N];\nvector\u0026lt;int\u0026gt; g[N];\nvector\u0026lt;int\u0026gt; perm, pos;\n\nvoid dfs(int v) {\n\tif (used[v]) return;\n\tused[v] \u003d true;\n\tpos.pb(v);\n\tperm.pb(p[v]);\n\n\tfor (auto to : g[v]) dfs(to);\n}\n\nint ans[N];\n\nvoid solve() {\n\tforn(i, n) {\n\t\tg[i].clear();\n\t\tused[i] \u003d false;\n\t}\n\n\tforn(i, m) {\n\t\tg[a[i].x].pb(a[i].y);\n\t\tg[a[i].y].pb(a[i].x);\n\t}\n\n\tint cnt \u003d 0;\n\tforn(i, n)\n\t\tif (!used[i]) {\n\t\t\tcnt++;\n\t\t\tpos.clear();\n\t\t\tperm.clear();\n\t\t\tdfs(i);\n\t\t\tsort(all(pos));\n\t\t\tsort(all(perm), greater\u0026lt;int\u0026gt;());\n\t\t\tforn(j, sz(perm))\n\t\t\t\tans[pos[j]] \u003d perm[j];\n\t\t}\n\n\tforn(i, n) {\n\t\tif (i) putchar(\u0027 \u0027);\n\t\tprintf(\u0026quot;%d\u0026quot;, ans[i] + 1);\n\t}\n\tputs(\u0026quot;\u0026quot;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/691/problem/E\" title\u003d\"Educational Codeforces Round 14\"\u003e691E - Xor-sequences\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Zi Song Yeoh \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/zscoder\" title\u003d\"Candidate Master zscoder\"\u003ezscoder\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the number of xor-sequences of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e with the last element equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be equal to one if \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6e/c0/6ec01350a3be1915b6582217834065fad725c429.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e contains the number of ones in binary presentation that is multiple of three. Otherwise let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be equal to zero. Consider a vectors \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d {\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e}\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e \u003d {\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1, \u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e}\u003c/span\u003e and a matrix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e \u003d {\u003ci\u003eg\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e}\u003c/span\u003e. Easy to see that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eG\u003c/i\u003e × \u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/sub\u003e\u003c/span\u003e. So \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003eG\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e. Let\u0027s use the associative property of matrix multiplication: at first let\u0027s calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eG\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003c/span\u003e with binary matrix exponentiation and then multiply it to the vector \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e0\u003c/sub\u003e\u003c/span\u003e.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003econst int N \u003d 101;\n\nint n;\nli k;\nli a[N];\n\nbool read() {\n\tif (!(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; k)) return false;\n\tforn(i, n) assert(cin \u0026gt;\u0026gt; a[i]);\n\treturn true;\n}\n\nconst int mod \u003d 1000 * 1000 * 1000 + 7;\n\ninline int add(int a, int b) { return a + b \u0026gt;\u003d mod ? a + b - mod : a + b; }\ninline void inc(int\u0026amp; a, int b) { a \u003d add(a, b); }\ninline int mul(int a, int b) { return int(a * 1ll * b % mod); }\n\nint count(li x) {\n\tint ans \u003d 0;\n\twhile (x) {\n\t\tans++;\n\t\tx \u0026amp;\u003d x - 1;\n\t}\n\treturn ans;\n}\n\nvoid mul(int a[N][N], int b[N][N], int n) {\n\tstatic int c[N][N];\n\tforn(i, n)\n\t\tforn(j, n) {\n\t\t\tc[i][j] \u003d 0;\n\t\t\tforn(k, n) inc(c[i][j], mul(a[i][k], b[k][j]));\n\t\t}\n\tforn(i, n) forn(j, n) a[i][j] \u003d c[i][j];\n}\n\nvoid bin_pow(int a[N][N], li b, int n) {\n\tstatic int ans[N][N];\n\tforn(i, n) forn(j, n) ans[i][j] \u003d i \u003d\u003d j;\n\n\twhile (b) {\n\t\tif (b \u0026amp; 1) mul(ans, a, n);\n\t\tmul(a, a, n);\n\t\tb \u0026gt;\u0026gt;\u003d 1;\n\t}\n\n\tforn(i, n) forn(j, n) a[i][j] \u003d ans[i][j];\n}\n\nvoid solve() {\n\tstatic int a[N][N];\n\tmemset(a, 0, sizeof(a));\n\tforn(i, n) {\n\t\tforn(j, n)\n\t\t\ta[i][j] \u003d count(::a[i] ^ ::a[j]) % 3 \u003d\u003d 0;\n\t\ta[i][n] \u003d 1;\n\t}\n\n\t//forn(i, n + 1) clog \u0026lt;\u0026lt; mp(a[i], n + 1) \u0026lt;\u0026lt; endl;\n\n\tbin_pow(a, k, n + 1);\n\n\tint ans \u003d 0;\n\tforn(i, n + 1) inc(ans, a[i][n]);\n\tcout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e\u003ci\u003elogk\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003ch3\u003e\u003ca href\u003d\"/contest/691/problem/F\" title\u003d\"Educational Codeforces Round 14\"\u003e691F - Couple Cover\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe problem was suggested by Michael Kirsche \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/mkirsche\" title\u003d\"Grandmaster mkirsche\"\u003emkirsche\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s count the number of pairs with multiple less than \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e. To get the number of not less pairs we should sumply subtract from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e·(\u003ci\u003en\u003c/i\u003e - 1)\u003c/span\u003e the number of less pairs. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the number of values in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e be the number of pairs from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e with the multiple equal to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. To calculate the values from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e we can use something like Eratosthenes sieve: let\u0027s iterate over the first multiplier \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and the multiple of it \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e \u003d \u003ci\u003eka\u003c/i\u003e\u003c/span\u003e and increment \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e by the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/sub\u003e·\u003ci\u003ecnt\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e. After calculating the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ez\u003c/i\u003e\u003c/span\u003e we should calculate the array of its partial sums and find the number of less pairs in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e time.\u003c/p\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ solution\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003econst int N \u003d 3100300;\n\nint n, m;\nint a[N], p[N];\n\nbool read() {\n\tif (!(cin \u0026gt;\u0026gt; n)) return false;\n\tforn(i, n) assert(scanf(\u0026quot;%d\u0026quot;, \u0026amp;a[i]) \u003d\u003d 1);\n\tassert(cin \u0026gt;\u0026gt; m);\n\tforn(i, m) assert(scanf(\u0026quot;%d\u0026quot;, \u0026amp;p[i]) \u003d\u003d 1);\n\treturn true;\n}\n\nint cnt[N];\nli z[N];\n\nvoid solve() {\n\tmemset(cnt, 0, sizeof(cnt));\n\n\tforn(i, n) cnt[a[i]]++;\n\n\tfore(a, 1, N) {\n\t\tif (!cnt[a]) continue;\n\t\tfor (int b \u003d a; b \u0026lt; N; b +\u003d a) {\n\t\t\tif (b / a !\u003d a) z[b] +\u003d li(cnt[a]) * cnt[b / a];\n\t\t\telse z[b] +\u003d li(cnt[a]) * (cnt[a] - 1);\n\t\t}\n\t}\n\n\tfore(i, 1, N) z[i] +\u003d z[i - 1];\n\n\tforn(i, m) {\n\t\tli ans \u003d li(n) * (n - 1) - z[p[i] - 1];\n\t\tprintf(\u0026quot;%lld\\n\u0026quot;, ans);\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cp\u003eComplexity: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003eXlogX\u003c/i\u003e)\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e\u003c/span\u003e is the maximal value in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ep\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["educational round 14","editorial"]}}