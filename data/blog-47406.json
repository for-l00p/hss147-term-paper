{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1475120247,"rating":3,"authorHandle":"brycesandlund","modificationTimeSeconds":1475120247,"id":47406,"title":"\u003cp\u003ePoint struct for geometry library\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e(This post is primarily for ACM-ICPC, since you don\u0027t need to type in code for online contests.)\u003c/p\u003e\u003cp\u003eMy current geometry library uses a Pt struct with members x and y. However, many times I just use a pair instead as this avoids needing to type the struct code and a comparator if you need sorting. However, if you\u0027re writing enough geometry functions, it\u0027s quicker to write and easier to read with .x and .y instead of .first and .second. I\u0027m now considering doing something like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypedef long long T;\ntypedef pair\u0026lt;T, T\u0026gt; Pt;\n#define x first\n#define y second\n\nPt operator - (Pt a, Pt b) { return Pt(a.x-b.x, a.y-b.y); }\n\nT dot(Pt a, Pt b) { return a.x*b.x + a.y*b.y; }\n\ndouble dist(Pt a, Pt b) {\n    return sqrt(dot(a-b,a-b));\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis kind of gives the best of both worlds; however, it has some strange side effects. I am wondering if the community has an opinion on what is the best to use, or if there is a different trick I can make use of.\u003c/p\u003e\u003c/div\u003e","tags":[]}}