{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1526989704,"rating":18,"authorHandle":"trekhleb","modificationTimeSeconds":1526989704,"id":59620,"title":"\u003cp\u003eAlgorithms and Data Structures in JavaScript\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello Readers!\u003c/p\u003e\u003cp\u003eI\u0027ve recently launched \u003ca href\u003d\"https://github.com/trekhleb/javascript-algorithms\"\u003eJavaScript Algorithms and Data Structures\u003c/a\u003e repository on GitHub with collection of classic algorithms and data-structures implemented in ES6 JavaScript with explanations and links to further readings and YouTube videos. There is also \u003ca href\u003d\"https://www.youtube.com/playlist?list\u003dPLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8\"\u003eAlgorithms and Data Structures YouTube playlist\u003c/a\u003e that contains all the videos mentioned in that repository so you may just go and take this hand-made online learning course :)\u003c/p\u003e\u003cp\u003eSo I guess you\u0027ve already grasp main idea of the project - \u003cstrong\u003e helping developers to learn and practice algorithms and do it in JavaScript\u003c/strong\u003e . To make this process even smoother I\u0027ve tried to put some \u003cstrong\u003egraphical illustrations\u003c/strong\u003e for each algorithm and data structure where it was possible just to make the idea behind those algorithms to be easily grasped and memorized.\u003c/p\u003e\u003cp\u003eYou also may find some practical information just in the root README file that may be handy while you\u0027re studying. Such information as:\u003c/p\u003e \u003cul\u003e   \u003cli\u003ebig O notation graphs - to see quickly what is worse O(n!) or, let\u0027s say, O(n²)\u003c/li\u003e   \u003cli\u003elist of some of the most used Big O notations and their performance comparisons - to get the idea how big is 10! (it is 3628800)\u003c/li\u003e   \u003cli\u003edata structures operations complexity - how fast are searches, reads or insertions for different data structures\u003c/li\u003e   \u003cli\u003ecomparative table of sorting algorithms complexity - to help you choose proper sorting algorithm in your situation\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eAll code is 100% covered with tests\u003c/strong\u003e. This is done not only to keep code working correctly but also to give you an illustration of how each algorithms or data structure works, what basic operations they have (let\u0027s say polling for heap) and what are the edge cases (what to do if graph is directed).\u003c/p\u003e\u003cp\u003eRepository also has a \u003cstrong\u003eplayground\u003c/strong\u003e. This is just small function template along with empty test case that will help you to start testing or working on algorithms just right after cloning the repo.\u003c/p\u003e\u003cp\u003eCurrently there are following data structures a covered:\u003c/p\u003e \u003cul\u003e   \u003cli\u003eLinked List\u003c/li\u003e   \u003cli\u003eQueue\u003c/li\u003e   \u003cli\u003eStack\u003c/li\u003e   \u003cli\u003eHash Table\u003c/li\u003e   \u003cli\u003eHeap\u003c/li\u003e   \u003cli\u003ePriority Queue\u003c/li\u003e   \u003cli\u003eTrie\u003c/li\u003e   \u003cli\u003eTree (Binary Search Tree, AVL Tree)\u003c/li\u003e   \u003cli\u003eGraph (both directed and undirected)\u003c/li\u003e   \u003cli\u003eDisjoint Set\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eOn top of that data structures there are more then 50 popular algorithms are implemented. Among them are sorting, searching algorithms, graph/tree/sets/string/math related algorithms. All algorithms are also categorized by theirs paradigms:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cstrong\u003eBrute Force Algorithms\u003c/strong\u003e - look at all the possibilities and selects the best solution\u003c/li\u003e   \u003cli\u003e\u003cstrong\u003eGreedy Algorithms\u003c/strong\u003e - choose the best option at the current time, without any consideration for the future\u003c/li\u003e   \u003cli\u003e\u003cstrong\u003eDivide and Conquer Algorithms \u003c/strong\u003e- divide the problem into smaller parts and then solve those parts\u003c/li\u003e   \u003cli\u003e\u003cstrong\u003eDynamic Programming Algorithms\u003c/strong\u003e - build up to a solution using previously found sub-solutions\u003c/li\u003e   \u003cli\u003e\u003cstrong\u003eBacktracking Algorithms \u003c/strong\u003e- similarly to brute force try to generate all possible solutions but each time you generate a solution test if it satisfies all conditions, and only then continue generating subsequent solutions. Otherwise backtrack and go on a different path of finding solution\u003c/li\u003e \u003c/ul\u003e\u003cp\u003e\u003ca href\u003d\"https://github.com/trekhleb/javascript-algorithms\"\u003eJavaScript Algorithms and Data Structures\u003c/a\u003e repository is still under active development and more algorithms and data-structures are yet to come. And you may also be a part of it by contributing your code and you implementations of web-known algorithms!\u003c/p\u003e\u003cp\u003eI hope this repository will be helpful for you! Enjoy coding!\u003c/p\u003e\u003c/div\u003e","tags":["#algorithms","#data structure","javascript","#sorting"]}}