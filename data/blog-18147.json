{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1432733933,"rating":33,"authorHandle":"forthright48","modificationTimeSeconds":1432753692,"id":18147,"title":"\u003cp\u003eTop Down Memoization Causing More Precision Error Than Bottom Up Approach\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI was trying to solve a problem on HackerRank, \u003ca href\u003d\"https://www.hackerrank.com/contests/101hack25/challenges/devu-and-a-journey-in-a-metro\"\u003eDevu and a Journey on Metro\u003c/a\u003e. \u003c/p\u003e\u003cp\u003eI wrote a solution using BFS and top-down memoization. Here is my submission: \u003ca href\u003d\"https://www.hackerrank.com/contests/101hack25/challenges/devu-and-a-journey-in-a-metro/submissions/code/3222777\"\u003eSubmission\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWhen I compared my output with the judge output, I found that I am getting Wrong Answer due to precision error. The 6th decimal place seems to be different on some cases. So I looked into the analysis to see if they had some trick to reduce the precision error. Well, they did the same thing but just bottom up.\u003c/p\u003e\u003cp\u003eBottom up is faster than top-down. For some cases, we can even save memory using bottom up. But I never heard about bottom-up being more precise.\u003c/p\u003e\u003cp\u003eI changed all double variables into long double later, which got more test cases correct but not all. \u003ca href\u003d\"https://www.hackerrank.com/contests/101hack25/challenges/devu-and-a-journey-in-a-metro/submissions/code/3222898\"\u003eSubmission\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAny idea what is going on? Why is this happening?\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUPD1\u003c/strong\u003e: Got my answer from \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/misof\" title\u003d\"Candidate Master misof\"\u003emisof\u003c/a\u003e\u0027s \u003ca href\u003d\"//codeforces.com/blog/entry/18147?#comment-230501\"\u003ecomment\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["dynamic programming","precision","expected value","c++ compilers"]}}