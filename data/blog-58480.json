{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1521607810,"rating":-17,"authorHandle":"rps","modificationTimeSeconds":1521607810,"id":58480,"title":"\u003cp\u003ebinary tree in python3 \u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cpre\u003e\u003ccode\u003e#!/usr/bin/python\n\nclass Node:\n    def __init__(self, val):\n        self.l \u003d None\n        self.r \u003d None\n        self.v \u003d val\n\nclass Tree:\n    def __init__(self):\n        self.root \u003d None\n\n    def getRoot(self):\n        return self.root\n\n    def add(self, val):\n        if(self.root \u003d\u003d None):\n            self.root \u003d Node(val)\n        else:\n            self._add(val, self.root)\n\n    def _add(self, val, node):\n        if(val \u0026lt; node.v):\n            if(node.l !\u003d None):\n                self._add(val, node.l)\n            else:\n                node.l \u003d Node(val)\n        else:\n            if(node.r !\u003d None):\n                self._add(val, node.r)\n            else:\n                node.r \u003d Node(val)\n\n    def find(self, val):\n        if(self.root !\u003d None):\n            return self._find(val, self.root)\n        else:\n            return None\n\n    def _find(self, val, node):\n        if(val \u003d\u003d node.v):\n            return node\n        elif(val \u0026lt; node.v and node.l !\u003d None):\n            self._find(val, node.l)\n        elif(val \u0026gt; node.v and node.r !\u003d None):\n            self._find(val, node.r)\n\n    def deleteTree(self):\n        # garbage collector will do this for us. \n        self.root \u003d None\n\n    def printTree(self):\n        if(self.root !\u003d None):\n            self._printTree(self.root)\n\n    def _printTree(self, node):\n        if(node !\u003d None):\n            self._printTree(node.l)\n            print str(node.v) + \u0027 \u0027\n            self._printTree(node.r)\n\n#     3\n# 0     4\n#   2      8\ntree \u003d Tree()\ntree.add(3)\ntree.add(4)\ntree.add(0)\ntree.add(8)\ntree.add(2)\ntree.printTree()\nprint (tree.find(3)).v\nprint tree.find(10)\ntree.deleteTree()\ntree.printTree()\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":[]}}