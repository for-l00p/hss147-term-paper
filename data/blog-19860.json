{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1439993526,"rating":-7,"authorHandle":"forcer","modificationTimeSeconds":1440042915,"id":19860,"title":"\u003cp\u003eHelp me with breadth first search.\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI\u0027ve studied programming these days, and of course, I\u0027m still a newbie. I studied breadth first search for a long time but I\u0027m still trapped in it. Who can help me with it? More formally, I want to have a brief structure of breadth first search. Here, I prepared a problem to help me to understand what the program is. Please write in C++, thanks for all replies. Follow lines describes the problem:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eI know the structure of breadth first search, but I don\u0027t know how to use it. So I ask you to write a program which: Find the farthest field(x,y) in a rectangular with size of a*b, which is farthest from the starting point(n,m). The number starting from 1.\u003c/p\u003e\u003cp\u003eBut that may not teach me breadth first search, which I can only compare the four corners. So I should change my problem.\u003c/p\u003e\u003cp\u003eIf some of the places are \u0026quot;dangerous\u0026quot;, that the route contains these places are illegal. This time, we input a map with \u0027.\u0027 and \u0027*\u0027, defines as safe places and dangerous places respectively. Find the farthest position from the starting point that the shortest route to the starting place is the longest among all safe places. Areas that have walls with \u0027*\u0027 are not allowed to reach the starting point, and should not being output. It is guaranteed that there is at least one position that can reach the starting point.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eInput\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eFirst line input a and b, the size of the field. Then input a map contains \u0027.\u0027 and \u0027*\u0027 with a rows and b columns. And finally input the position of the starting point which n and m.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eOutput\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eOutput a position that is farthest from the starting point(x,y). For multiple answers, print any.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSample test(s)\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eInput\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e2 3\u003c/p\u003e\u003cp\u003e...\u003c/p\u003e\u003cp\u003e...\u003c/p\u003e\u003cp\u003e1 1\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eOutput\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e2 3\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eInput\u003c/strong\u003e \u003c/p\u003e\u003cp\u003e//I thought that the point on the left-down(sorry for bad English) corner is (1,1). And now I changed it into the normal way. //Also note that there is no limit in size of the numbers, any size is acceptable, like 10*10 table is enough.\u003c/p\u003e\u003cp\u003e4 4\u003c/p\u003e\u003cp\u003e.*..\u003c/p\u003e\u003cp\u003e.*..\u003c/p\u003e\u003cp\u003e.***\u003c/p\u003e\u003cp\u003e....\u003c/p\u003e\u003cp\u003e1 3\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eOutput\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e2 4\u003c/p\u003e\u003cp\u003eWould you please write a program just like solving problems, or give me the brief program of bfs is also OK, thanks.\u003c/p\u003e\u003c/div\u003e","tags":["bfs","question","problem"]}}