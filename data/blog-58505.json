{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1521712448,"rating":0,"authorHandle":"strawberrry","modificationTimeSeconds":1521712448,"id":58505,"title":"\u003cp\u003eRound #238 solution\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch3\u003eA. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/405/problem/A\"\u003eGravity Flip\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e分类：\u003c/strong\u003e \u003ccode\u003esorting\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e观察发现，最终一定是非降序的，而且总滑块数量和高度都不变，因此可以理解成将整个序列重排使它非递减！\u003c/p\u003e\u003ch3\u003eB. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/405/problem/B\"\u003eDomino Effect\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e分类：\u003c/strong\u003e \u003ccode\u003eimplementation\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e因为 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e 很小，考虑模拟这个过程，注意到，当且仅当某个 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e 前面有 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e 和它配对时候，而且他们长度为奇数时候，中间才可能有一块立起来，因此 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e 扫一遍，记一下某个 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eL\u003c/i\u003e\u003c/span\u003e 前面的 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eR\u003c/i\u003e\u003c/span\u003e 位置，暴力讨论一下就好。\u003c/p\u003e\u003ch3\u003eC. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/405/problem/C\"\u003eUnusual Product\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e分类：\u003c/strong\u003e \u003ccode\u003eimplementation\u003c/code\u003e \u003ccode\u003emath\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e仔细看一下求和公式，发现对于 \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003ci\u003ei\u003c/i\u003e, \u003ci\u003ej\u003c/i\u003e \u0026gt; \u003c/span\u003e 如果 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≠ \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e 那么 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e × \u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eji\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e 将会被算两次，而且答案很特殊，需要取模 \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e 那么，讨论一下它的情况就很容易发现，不管 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003eij\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e 怎么变，对答案是不影响的！因此只有那些主对角线元素才会有影响，因此每次变化是上一答案的基础上 \u003cspan class\u003d\"tex-span\"\u003e + 1\u003c/span\u003e 并取模 \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e ！\u003c/p\u003e\u003ch3\u003eD. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/405/problem/D\"\u003eToy Sum\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e分类：\u003c/strong\u003e \u003ccode\u003egreedy\u003c/code\u003e \u003ccode\u003emath\u003c/code\u003e \u003ccode\u003econstructive algorithm\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e贪心地考虑每个元素，尽可能对每个元素满足 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e - 1 \u003d 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e - \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e 成立，也就是如果不存在 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u003d 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1\u003c/span\u003e 则贪心地让 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1\u003c/span\u003e ，剩下的都是那些 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u003d 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e - \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + 1\u003c/span\u003e 的，我们可以让它们两两一组，去构造 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sub\u003e + \u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sub\u003e \u003d \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e + \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/sub\u003e \u003d 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e + 1\u003c/span\u003e ，具体做法可以枚举 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e 获得合法的 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/sub\u003e\u003c/span\u003e ，似乎可以证明，这样保证有解。\u003c/p\u003e\u003ch3\u003eE. \u003ca href\u003d\"//codeforces.com/group/oQtXiLyxgw/contest/405/problem/E\"\u003eGraph Cutting\u003c/a\u003e\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e分类：\u003c/strong\u003e \u003ccode\u003edfs and similar\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003e根据题意，就是要边能够两两配对，只不过配对的条件是两条边有一个公共点。显然所有的边数必须是偶数。而且对于一条边 \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e \u0026gt; \u003c/span\u003e 它要么是和与 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e 相关的另一条边 \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003ci\u003eu\u003c/i\u003e, \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e \u0026gt; \u003c/span\u003e 配对，要么是和与 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e 相关的 \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003ci\u003ev\u003c/i\u003e, \u003ci\u003ew\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u0026gt; \u003c/span\u003e 配对。考虑用DFS维护这个过程。对于点 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e 和与它相邻的后继的点集 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e∈\u003ci\u003eV\u003c/i\u003e\u003c/span\u003e ，对于边 \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e \u0026gt; \u003c/span\u003e 我们尝试去找 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e 的后继中没有配对的边 \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003ci\u003ev\u003c/i\u003e, \u003ci\u003ew\u003c/i\u003e \u0026gt; \u003c/span\u003e 去与它配对组成 \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e, \u003ci\u003ew\u003c/i\u003e \u0026gt; \u003c/span\u003e ，如果找不到则说明应该找与 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e 后继组成边 \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003ci\u003eu\u003c/i\u003e, \u003ci\u003ew\u003c/i\u003e \u0026gt; \u003c/span\u003e 去与它配对组成 \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003ci\u003ew\u003c/i\u003e, \u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e \u0026gt; \u003c/span\u003e 。因此每层DFS维护关于点 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e 后继的一个栈，对于每个失败的 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e ，我们用栈把它存起来，最后回溯时候每次拿出一对 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e、\u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e\u003c/span\u003e 去与 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e 配对成 \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e \u0026gt; \u003c/span\u003e ，如果栈还有余下某个点，就说明这个点可以和 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e 的前驱 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ew\u003c/i\u003e\u003c/span\u003e 构成 \u003cspan class\u003d\"tex-span\"\u003e \u0026lt; \u003ci\u003ew\u003c/i\u003e, \u003ci\u003eu\u003c/i\u003e, \u003ci\u003ev\u003c/i\u003e \u0026gt; \u003c/span\u003e 的配对，也就是前面 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e 的情况！ \u003c/p\u003e\u003cp\u003ePS: 这题开始用\u003ccode\u003estd::map\u003c/code\u003e标记那些已经匹配的边，但是这样每次查询这条边是否已经匹配会多一个 \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003elogn\u003c/i\u003e)\u003c/span\u003e ，结果就\u003ccode\u003eTime limit exceeded on test 29\u003c/code\u003e。后来换成\u003ccode\u003estd::set\u003c/code\u003e维护每个点的后继，每次在后继的\u003ccode\u003eset\u003c/code\u003e中把前驱给\u003ccode\u003eerase\u003c/code\u003e掉就过了，嘤嘤嘤！\u003c/p\u003e\u003c/div\u003e","tags":[]}}