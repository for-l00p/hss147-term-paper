{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1434528560,"rating":1,"authorHandle":"disa","modificationTimeSeconds":1434528628,"id":18635,"title":"\u003cp\u003eДекартово дерево\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;fstream\u0026gt;\n#include \u0026lt;cstdio\u0026gt;\n#include \u0026lt;cstdlib\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;vector\u0026gt;\n#include \u0026lt;set\u0026gt;\n#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;iomanip\u0026gt;\n#include \u0026lt;map\u0026gt;\n#include \u0026lt;cmath\u0026gt;\n#include \u0026lt;queue\u0026gt;\n#include \u0026lt;time.h\u0026gt;\nusing namespace std;\n#pragma comment (linker, \u0026quot;/STACK:64000000\u0026quot;)\n\ntypedef long long ll;\n\n#if _DEBUG \nifstream cin (\u0026quot;input.txt\u0026quot;);\nofstream cout(\u0026quot;output.txt\u0026quot;);\n#else\nifstream cin (\u0026quot;bst2.in\u0026quot;);\nofstream cout(\u0026quot;bst2.out\u0026quot;);\n#endif\n\n\nstruct treap {\n\tint x, y, size;\n\ttreap *l;\n\ttreap *r;\n\ttreap (int a) {\n\t\tx \u003d a;\n\t\ty \u003d rand();\n\t\tsize \u003d 0;\n\t\tl \u003d r \u003d NULL;\n\t}\n};\n\ntypedef treap* pt;\n\nint getsize(pt p) {\n\tif(p !\u003d NULL)\n\t\treturn p -\u0026gt;size;\n\treturn 0;\n}\n\nvoid recalc(pt p) {\n\tif(p !\u003d NULL) {\n\t\tp-\u0026gt;size \u003d getsize(p-\u0026gt;l) + getsize(p-\u0026gt;r) + 1;\n\t}\n}\n\npt cur \u003d NULL;\nvoid kth(int k) {\n\twhile(cur !\u003d NULL) {\n\t\tint ans \u003d (cur-\u0026gt;l \u003d\u003d NULL ? 0 : cur-\u0026gt;l-\u0026gt;size);\n\t\tif(ans + 1 \u003d\u003d k)\n\t\t\tbreak;\n\t\telse {\n\t\t\tif(k \u0026lt; ans + 1)\n\t\t\t\tcur \u003d cur -\u0026gt;l;\n\t\t\telse {\n\t\t\t\tk -\u003d ans + 1;\n\t\t\t\tcur \u003d cur -\u0026gt;r;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nvoid merge(pt \u0026amp;t, pt pl, pt pr) {\n\tif (pl \u003d\u003d NULL) {\n\t\tt \u003d pr;\n\t\trecalc(t);\n\t\treturn;\n\t}\n\tif (pr \u003d\u003d NULL) {\n\t\tt \u003d pl;\n\t\trecalc(t);\n\t\treturn;\n\t}\n\tif (pl -\u0026gt; y \u0026gt;\u003d pr -\u0026gt; y) {\n\t\tt \u003d pl;\n\t\tmerge(t -\u0026gt; r, pl -\u0026gt; r, pr);\n\t} else {\n\t\tt \u003d pr;\n\t\tmerge(t -\u0026gt; l, pl, pr -\u0026gt; l);\n\t}\n\trecalc(t);\n}\n\nvoid split(pt T,int x, pt \u0026amp;pl, pt \u0026amp;pr) {\n\tif (T \u003d\u003d NULL) {\n\t\tpl \u003d pr \u003d NULL;\n\t\trecalc(T);\n\t\treturn;\n\t}\n\tif (x \u0026gt;\u003d T -\u0026gt; x) {\n\t\tpl \u003d T;\n\t\tsplit(T -\u0026gt; r, x, pl -\u0026gt; r, pr);\n\t} else {\n\t\tpr \u003d T;\n\t\tsplit(T -\u0026gt; l, x, pl, pr -\u0026gt; l );\n\t}\n\trecalc(T);\n}\n\n\nint main() {\n\tstring s; \n\tsrand((int)time(0));\n\tpt root \u003d NULL, tmp \u003d NULL;\n\twhile (cin \u0026gt;\u0026gt; s) { \n\t\tint x;\n\t\tcin \u0026gt;\u0026gt; x;\n\t\tif(s \u003d\u003d \u0026quot;insert\u0026quot;) {\n\t\t\tpt p1, p2, p3, p4;\n\t\t\tpt new_elem \u003d new treap(x);\n\t\t\tsplit(root, x, p1, p2);\n\t\t\tsplit(p1, x - 1, p3, p4);\n\t\t\tif (p4 !\u003d NULL) {\n\t\t\t\tmerge(p1, p3, p4);\n\t\t\t\tmerge(root, p1, p2);\n\t\t\t} else {\n\t\t\t\tmerge(p1, p3, new_elem);\n\t\t\t\tmerge(root, p1, p2);\n\t\t\t}\n\t\t}\n\t\tif (s \u003d\u003d \u0026quot;delete\u0026quot;) {\n\t\t\tpt p1, p2, p3, p4;\n\t\t\tsplit(root, x, p1, p2);\n\t\t\tsplit(p1, x - 1, p3, p4);\n\t\t\tmerge(root, p3, p2);\n\t\t}\n\t\tif (s \u003d\u003d \u0026quot;exists\u0026quot;) {\n\t\t\tpt p1, p2, p3, p4;\n\t\t\tsplit(root, x, p1, p2);\n\t\t\tsplit(p1, x - 1, p3, p4);\n\t\t\tif (p4 !\u003d NULL)\n\t\t\t\tcout \u0026lt;\u0026lt; \u0026quot;true\u0026quot; \u0026lt;\u0026lt; \u0027\\n\u0027;\n\t\t\telse\n\t\t\t\tcout \u0026lt;\u0026lt; \u0026quot;false\u0026quot; \u0026lt;\u0026lt; \u0027\\n\u0027;\n\t\t\tmerge(p1, p3, p4);\n\t\t\tmerge(root, p1, p2);\n\t\t}\n\t\tif (s \u003d\u003d \u0026quot;next\u0026quot;) {\n\t\t\tpt p1, p2;\n\t\t\tsplit(root, x - 1, p1, p2);\n\t\t\tcur \u003d p2;\n\t\t\tkth(1);\n\t\t\tif(cur \u003d\u003d NULL)\n\t\t\t\tcout \u0026lt;\u0026lt; \u0026quot;none\u0026quot; \u0026lt;\u0026lt; \u0027\\n\u0027;\n\t\t\telse\n\t\t\t\tcout \u0026lt;\u0026lt; cur-\u0026gt;x \u0026lt;\u0026lt; \u0027\\n\u0027;\n\t\t\tmerge(root, p1, p2);\n\t\t}\n\t\tif(s \u003d\u003d \u0026quot;prev\u0026quot;) {  \n\t\t\tpt p1, p2;\n\t\t\tsplit(root, x - 1, p1, p2);\n\t\t\tcur \u003d p1;\n\t\t\tkth(cur-\u0026gt;size);\n\t\t\tif(cur \u003d\u003d NULL)\n\t\t\t\tcout \u0026lt;\u0026lt; \u0026quot;none\u0026quot; \u0026lt;\u0026lt; \u0027\\n\u0027;\n\t\t\telse{\n\t\t\t\tcout \u0026lt;\u0026lt; cur-\u0026gt;x \u0026lt;\u0026lt; \u0027\\n\u0027;\n\t\t\t}\n\t\t\tmerge(root, p1, p2);\n\t\t}\n\t\tif(s \u003d\u003d \u0026quot;kth\u0026quot;) {  \n\t\t\tcur \u003d root;\n\t\t\tkth(x);\n\t\t\tif(cur \u003d\u003d NULL)\n\t\t\t\tcout \u0026lt;\u0026lt; \u0026quot;none\u0026quot; \u0026lt;\u0026lt; \u0027\\n\u0027;\n\t\t\telse\n\t\t\t\tcout \u0026lt;\u0026lt; cur-\u0026gt;x \u0026lt;\u0026lt; \u0027\\n\u0027;\n\t\t}\n\t} \n\n\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":[]}}