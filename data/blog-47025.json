{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1473430880,"rating":0,"authorHandle":"HardW3ll","modificationTimeSeconds":1473431268,"id":47025,"title":"\u003cp\u003eQualification round #3 editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem A\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eLet\u0027s fix two column i, j. Now we want to select two rows l, r. The selection part can be done using two pointers. The idea is to fix the rows that contains the maximum number of 0 cells using the row method, and the others using one by one method.\u003c/p\u003e\u003cp\u003eComplexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/c9/a6/c9a67aeab6bf6959b679b4dae1ace81d82d3d438.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/ycgbI1\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem C\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eJust get the convex hull of the points and get the distance between each two consecutive points in the hull using the method in the problem.\u003c/p\u003e\u003cp\u003eComplexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/22/95/229590595d8dba3f35d6fd84a86fce6cc6199346.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/tfonBd\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem F\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eFor each connected graph. Let\u0027s binary search for the minimum number required. If we\u0027re checking a number x, we can kill all the dragons with Ni \u0026lt; x. Otherwise we need to kill the other dragons at the first minute. So the summation of Si of them must be \u0026lt;\u003d x.\u003c/p\u003e\u003cp\u003eComplexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/87/32/87326d3b0e4529e91f297de4c0046e3464fffc2c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/M5W95B\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eProblem H\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cp\u003eDynamic programming on the tree. The state is the node we\u0027re at, a boolean whether it has an outgoing edge or not and a boolean whether it has an ingoing edge or not.\u003c/p\u003e\u003cp\u003eComplexity \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f1/98/f198ba730b50abde86962f7b8a851ec80a8f89b2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"http://ideone.com/q1SleT\"\u003eSolution\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":[]}}