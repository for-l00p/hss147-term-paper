{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1401625171,"rating":32,"authorHandle":"Enchom","modificationTimeSeconds":1401626506,"id":12512,"title":"\u003cp\u003eSome help with using Balanced Binary Trees instead of Segment Trees\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eHello everybody,\u003c/p\u003e\u003cp\u003eI was solving last year\u0027s IOI problem \u003ca href\u003d\"http://www.ioi2013.org/wp-content/uploads/tasks/day2/game/game.pdf\"\u003eGame\u003c/a\u003e. In short, you are given an initially empty grid and the problem consists of answering queries \u0026quot;Update element in cell x,y\u0026quot; and \u0026quot;Get GCD of all elements in rectangle x1,y1~x2,y2\u0026quot;. Note that the grid is huge (10^9 x 10^9)\u003c/p\u003e\u003cp\u003eIf it is solved using 2D segment tree it is pretty straightforward, however reading \u003ca href\u003d\"http://blog.brucemerry.org.za/2013/07/ioi-2013-day-2-analysis.html\"\u003eBruce Merry\u0027s post\u003c/a\u003e about it, he suggest that there is more efficient (though harder to code) implementation using balanced binary trees. Obviously 2D segment tree would take O(logR*logC) time and memory per query (R,C are the sizes of the grid), however according to his post you can do it in O(logNu*logNu) time per query (Nu is the number of update operations) and significantly less memory. \u003c/p\u003e\u003cp\u003eI can code and understand how to do it in 1D using balanced binary tree, but I can\u0027t seem to find a correct way to extend it into higher dimensions. Can anyone explain how would the given problem be solved using balanced binary trees (not segment trees) ?\u003c/p\u003e\u003cp\u003eThank you in advance,\u003c/p\u003e\u003cp\u003eEnchom\u003c/p\u003e\u003c/div\u003e","tags":["gcj","ioi","ioi 2013","balanced","tree","segment tree","binary tree","avl","2d"]}}