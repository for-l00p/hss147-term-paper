{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1476735767,"rating":63,"authorHandle":"Zlobober","modificationTimeSeconds":1476788786,"id":47840,"title":"\u003cp\u003eCodeforces Round #376 (Div. 2) editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI\u0027m sorry for a delay with publishing the editorial.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/731/problem/A\" title\u003d\"Codeforces Round 376 (Div. 2)\"\u003e731A - Night at the Museum\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author: \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/egor-belikov\" title\u003d\"Specialist egor-belikov\"\u003eegor-belikov\u003c/a\u003e, developer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/timgaripov\" title\u003d\"Candidate Master timgaripov\"\u003etimgaripov\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn this problem you have to implement exactly what is written in the statement, i. e. you should find minimum number of rotations from letter \u003ccode\u003ea\u003c/code\u003e to the first letter in the input, then to the second one and so on. The only useful knowledge that may simplify the solution is that the distance between points \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e on the circle of length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e (26 in our case) is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emin\u003c/i\u003e(|\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e|, \u003ci\u003el\u003c/i\u003e - |\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e|)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eThis solution works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(|\u003ci\u003es\u003c/i\u003e|)\u003c/span\u003e, and, of course, fits in time limit.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/731/problem/B\" title\u003d\"Codeforces Round 376 (Div. 2)\"\u003e731B - Coupons and Discounts\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author: olympiad jury, developer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/platypus179\" title\u003d\"Candidate Master platypus179\"\u003eplatypus179\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn a correct answer we may guarantee that for any two consecutive days we use no more than one coupon for bying pizzas in these days. Indeed, if we have two coupons for buying pizzas in days \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e, replace these coupons for two discounts, one for each of the days \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e + 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eConsider the first day. According to the fact above, we may uniquely find the number of coupons for buying pizzas in 1 and 2 days we are going to use: it\u0027s either 0, if there is going to be an even number of pizzas in the first day, or 1 otherwise. The remaining pizzas in the first day will be bought by using discounts. If we use 1 coupon, then we may subtract 1 from the number of pizzas in the second day, and in both cases consider the second day and repeat the same actions.\u003c/p\u003e\u003cp\u003eIf at some moment we have the odd number of pizzas and we don\u0027t need any pizzas in the following day, then it is impossible to buy all pizzas using only coupons and discounts, and we may output \u0026quot;\u003ccode\u003eNO\u003c/code\u003e\u0026quot;. If it didn\u0027t happen, then we were able to buy everything using only coupons and discounts.\u003c/p\u003e\u003cp\u003eSuch a solution works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eQuestion:\u003c/strong\u003e Prove that the answer is \u0026quot;\u003ccode\u003eYES\u003c/code\u003e\u0026quot; if and only if any maximal contiguous segment without zeroes in the input sequence has the even sum.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/731/problem/C\" title\u003d\"Codeforces Round 376 (Div. 2)\"\u003e731C - Socks\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author: \u003ca class\u003d\"rated-user user-cyan\" href\u003d\"/profile/egor-belikov\" title\u003d\"Specialist egor-belikov\"\u003eegor-belikov\u003c/a\u003e, developer: \u003ca class\u003d\"rated-user user-blue\" href\u003d\"/profile/wilwell\" title\u003d\"Expert wilwell\"\u003ewilwell\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWhen solving this problem, it is convenient to use graph interpretation of the problem. Consider the graph, whose vertices correspond to the socks and edges connect those socks that Arseniy wears on some day. By the statement, we have to make that any two vertices connected by an edge have the same color. It actually means that any connected component should share the same color.\u003c/p\u003e\u003cp\u003eFor each connected component let\u0027s find out which color should we choose for it. In order to recolor the minimum possible number of vertices, we should leave the maximum number of vertices with their original color. It means that the optimum color is the color shared by the most number of vertices in this connected component.\u003c/p\u003e\u003cp\u003eSo, we have the following solution: consider all connected components, in each component choose the most popular color and add the difference between the component size and the number of vertices of this color. In order to find the most popular color you may, for example, write all colors in an array, sort it and find the longest contiguous segment of colors.\u003c/p\u003e\u003cp\u003eSuch a solution works in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7a/cd/7acd13331998047c0fc5e8a090d2432d04384006.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eQuestion\u003c/strong\u003e: How to implement this solution so that it works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e?\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/731/problem/D\" title\u003d\"Codeforces Round 376 (Div. 2)\"\u003e731D - 80-th Level Archeology\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author: olympiad jury, developer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/Flyrise\" title\u003d\"Candidate Master Flyrise\"\u003eFlyrise\u003c/a\u003e\u003c/p\u003e\u003cp\u003eDenote as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e the number of alphabet cyclic shifts we will perform. Our goal is to formulate the statement of lexicographical order in terms of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNote that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e may be considered as an integer between \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e - 1\u003c/span\u003e, i. e., as a residue modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. Let\u0027s also consider all characters as values between \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e до \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e - 1\u003c/span\u003e as we may subtract 1 from the value of each character.\u003c/p\u003e\u003cp\u003eConsider two consecutive words in the given list. There are two possibilities corresponding two cases in the definition of lexicographical order:\u003c/p\u003e\u003cp\u003eThe first case is when there exists such a position that these words differ in this position and coincide before this position. Suppose that first word has value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e on this position, and second word has the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Then these words will follow in lexicographical order if and only if \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/29/79/29799a10169bbbb2f51aa261e32d64290ee14ddd.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. It\u0027s easy to see that if we consider all residues modulo \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e as a circle, then this inequality defines an arc of possible \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e\u0027s on this circle. So, this pair of contiguous words produces the following statement \u0026quot;\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e belongs to some arc on the circle\u0026quot;.\u003c/p\u003e\u003cp\u003eThe second case is when there is no such a position, i. e. one word is a prefix of another. If the first word is a prefix of second one then these words always follow in lexicographical order irrespective to the choice of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e. In the other case (second word is a proper prefix of the first word) we can\u0027t do anything with these to words since they will never follow in a lexicographical order, so we should print \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow we have to find a point on the circle belonging to the given set of arcs. Suppose we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e arcs. Consider a line segment from \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e - 1\u003c/span\u003e instead of a circle; each arc will transform to either one or two its subsegments.\u003c/p\u003e\u003cp\u003eNow we have to find out if there exists a point covered by exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e segments. It may be done in different ways, for example you may add 1 on each of this segment by using some data structure, or you may add \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to the left endpoint of each segment and \u003cspan class\u003d\"tex-span\"\u003e - 1\u003c/span\u003e to the point after the right endpoint of each segment, and consider prefix sums (an off-line way to handle range addition queries). Or you may write down all endpoints of all segments, sort them by a coordinate and iterate over them from left to right, keeping the number of open segments. If at some moment you have exactly \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e open segments, then the answer is \u0026quot;\u003ccode\u003eYES\u003c/code\u003e\u0026quot;.\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/731/problem/E\" title\u003d\"Codeforces Round 376 (Div. 2)\"\u003e731E - Funny Game\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author: \u003ca class\u003d\"rated-user user-red\" href\u003d\"/profile/_meshanya_\" title\u003d\"Grandmaster _meshanya_\"\u003e_meshanya_\u003c/a\u003e, developer: \u003ca class\u003d\"rated-user user-violet\" href\u003d\"/profile/ipavlov\" title\u003d\"Candidate Master ipavlov\"\u003eipavlov\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst of all, comment on such type of games. In CS the game where two players are willing to maximize the difference between their own score and the score of their opponent is called a \u0026quot;zero-sum game\u0026quot;. A useful knowledge is that problems for such a kind of games are usually solved using dynamic programming.\u003c/p\u003e\u003cp\u003eNote that at any moment the first sticker contains the sum of numbers on some prefix of an original sequence. This means that the state of a game is defined by a single number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e: the length of an original sequence prefix that were summed into a single number.\u003c/p\u003e\u003cp\u003eLet\u0027s make two observations. First of all, for any state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e the turn that current player will perform doesn\u0027t depend on scores of both players. Indeed, at any moment we may forget about the scores of both players since they add the constant factor to the resulting score difference, so we may virtually discard both players current scores. So, all we need to know about state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e is what difference there will be between the current player score and his opponent score if the game would have started from the state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e with zero scores.\u003c/p\u003e\u003cp\u003eSecond observation is that the turn chosen by a player from the state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and the final difference of scores at the end does not depend from which player is currently making a turn (Petr or Gennady), i. e. the game is symmetric.\u003c/p\u003e\u003cp\u003eDenote as \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e the difference between the first player score and the second player score if the game would have started from the state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e with zero scores.\u003c/p\u003e\u003cp\u003eIt is a convenient way to think about this game as if there were no separate scores of two players, but only a single balance value (difference) between them, and the first player is adding some numbers to the balance at his turn аnd second player subtracts some numbers from the balance. In such formulation \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e is a balance change at the end of the game if the current player is willing to maximize it and he is currently in the state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. The answer for a problem will be, as one can see, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[1]\u003c/span\u003e. Note that if the current player would be willing to minimize balance, then the final balance change from the state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e would be \u003cspan class\u003d\"tex-span\"\u003e - \u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e because the game is symmetric.\u003c/p\u003e\u003cp\u003eLet\u0027s calculate all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e using dynamic programming. At the end of the game, i. e. in the state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e the value \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e is equal to zero because the players won\u0027t be making any turns, and so the balance won\u0027t change.\u003c/p\u003e\u003cp\u003eConsider some state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e. Suppose current player will take all the stickers up to the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th (here \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e-th means the index in the original sequence). In such case he will change balance by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e (where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e is the sum of first \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e numbers in an original sequence), and game will move to the state \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e. After that his opponent will change the balance by \u003cspan class\u003d\"tex-span\"\u003e - \u003ci\u003eD\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e (note that the balance change value is added with an opposite sign since the opponent will be playing from this state).\u003c/p\u003e\u003cp\u003eSo, the final balance change when making such a turn will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] - \u003ci\u003eD\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e. In the DP definition we play for a player that is willing to maximize the balance, so \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e6/ff/e6ffc725baf0ec07cbb58c2b2b05cfcdb037117d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. \u003c/p\u003e\u003cp\u003eSuch a formula produces a solution in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e, but one may find that that it\u0027s enough to keep the maximum value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eS\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e] - \u003ci\u003eD\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e on suffix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e \u0026gt; \u003ci\u003ei\u003c/i\u003e\u003c/span\u003e, recalculating it in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e when moving from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e - 1\u003c/span\u003e. So, we have the solution that works in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eQuestion\u003c/strong\u003e: Which data type should be used for \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eD\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e (and for the answer, in particular)?\u003c/p\u003e\u003ch2\u003e\u003ca href\u003d\"/contest/731/problem/F\" title\u003d\"Codeforces Round 376 (Div. 2)\"\u003e731F - Video Cards\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eProblem author: olympiad jury, developer: \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/gritukan\" title\u003d\"International master gritukan\"\u003egritukan\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFirst observation is that if we fix the leading video card power \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, we may take all the video cards of power at least \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, as each of them brings the positive power value. So, we may sort all the cards in the ascending power order and then we will always choose some suffix of cards in such an order.\u003c/p\u003e\u003cp\u003eThe final total power equals to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/d3/e7d33a5c9896722963cf5c3dfd803a8f1b0a9a83.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e. Note that under the summation there is a number that is divisible by \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and that is no larger than \u003cspan class\u003d\"tex-span\"\u003e200 000\u003c/span\u003e at the same time. It means that there are no more than \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/32/93/32931feab1f2dbe823de5796f0084b4f59d41aa5.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e different terms in this sum. Let\u0027s calculate the value of a sum spending the operations proportional to the number of different terms in it.\u003c/p\u003e\u003cp\u003eTo do it we need to find out for each of the values \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e3\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, ..., how many video cards will have exactly such power at the end. It\u0027s easy: final power \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ekx\u003c/i\u003e\u003c/span\u003e corresponds to those video cards, which originally had the power between \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ekx\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ek\u003c/i\u003e + 1)\u003ci\u003ex\u003c/i\u003e - 1\u003c/span\u003e. Their number can be found out in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e if we build an array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eC\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e storing the number of video cards of each power and calculate prefix sums on it.\u003c/p\u003e\u003cp\u003eIt means that we got a solution that performs about \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/80/8f/808f01b0553b007897eb68394c173e583497f94d.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e operations. It\u0027s useful to know that the sum inside brackets is called a harmonic series, and that its sum is very close to the natural logarithm of the number of terms (up to a constant factor in limit).\u003c/p\u003e\u003cp\u003eIt means that we got a solution in complexity of \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/a4/0b/a40b782d7b8ff6dd14e6678882a113a7157d2f43.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e is the maximum power of a single video card.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eQuestion\u003c/strong\u003e: One may try to submit a solution assuming that the optimum power is always one of the first, let\u0027s say, \u003cspan class\u003d\"tex-span\"\u003e100\u003c/span\u003e unique video cards in an ascending power order. How to build a test where the optimum power lies between 1/4 and 3/4 of a sorted power list, i. e. a counter-test for such a solution?\u003c/p\u003e\u003c/div\u003e","tags":["editorial","codeforces round #376"]}}