{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1407585651,"rating":45,"authorHandle":"netman","modificationTimeSeconds":1408099315,"id":13336,"title":"\u003cp\u003eCodeforces Round #260 — Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eWarning: my English is very bad.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/456/problem/A\" title\u003d\"Codeforces Round 260 (Div. 2)\"\u003e456A - Laptops\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSolution: \u003ca href\u003d\"/contest/456/submission/7407613\" title\u003d\"Submission 7407613 by netman\"\u003e7407613\u003c/a\u003e;\u003c/p\u003e\u003cp\u003eIn this task you need to check the existense of such pair \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, such that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e ≠ \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u0026lt; \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u0026gt; \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e. If such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e exist, Alex is happy.\u003c/p\u003e\u003cp\u003eThere is very simple solution. Let\u0027s check that for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e. If this condition is true we should print \u0026quot;Poor Alex\u0026quot;. We can easy prove it. Let\u0027s sort arrays \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e like pair of numbers in increasing order. We can see that Alex is happy if we have at least one inversion in array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, i.e there is such pair \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ej\u003c/i\u003e\u003c/span\u003e that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e] \u0026gt; \u003ci\u003eb\u003c/i\u003e[\u003ci\u003ej\u003c/i\u003e]\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e \u0026lt; \u003ci\u003ej\u003c/i\u003e\u003c/span\u003e (\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/60/c9/60c91355debb680cde304a7248f4dbf366053745.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e). i.e it means that array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is not sorted and it\u0027s means that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e ≠ \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. \u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/456/problem/B\" title\u003d\"Codeforces Round 260 (Div. 2)\"\u003e456B - Fedya and Maths\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSolutions: \u003ca href\u003d\"/contest/456/submission/7407625\" title\u003d\"Submission 7407625 by netman\"\u003e7407625\u003c/a\u003e, \u003ca href\u003d\"/contest/456/submission/7407631\" title\u003d\"Submission 7407631 by netman\"\u003e7407631\u003c/a\u003e;\u003c/p\u003e\u003cp\u003eIn this task you need to calculate formula that given in the statement, but it\u0027s hard to calculate it with the naive way.\u003c/p\u003e\u003cp\u003eBut we can transform our formula to this:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/6a/56/6a562b1f658ec1b1e67427093eceea53748851da.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003eThis formula is right because \u003cspan class\u003d\"tex-span\"\u003e5\u003c/span\u003e is prime number and it\u0027s coprime with \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e.\u003c/p\u003e \u003ccenter\u003e\u003cspan class\u003d\"tex-span\"\u003eφ(5) \u003d 4\u003c/span\u003e\u003c/center\u003e\u003cp\u003eTo solve this task we should be able to calculate remainder of division \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e by \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e and calculate formula for small \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAsymptotics — \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/66/6c/666cc239bd9595b8818555e063d8d8b69ad0cda0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003eThere is also another solution. It uses a fast exponentiation, but not binary exponentiation. The idea of this exponentiation is the same as that of the binary exponentiation. Let we want to fast calculate \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e\u003ci\u003emodP\u003c/i\u003e\u003c/span\u003e. Algorithm is very simple. Let process digits of n moving from end to begin. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eResult\u003c/i\u003e\u003c/span\u003e — current result and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003c/span\u003e — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e(10\u003csup class\u003d\"upper-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sup\u003e)\u003c/sup\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e — number of the currently processed digit (digits are numbered from the end. Used 0-indexation). During processing of digits, we must update result: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/bd/d2/bdd2d63026a717ae08cf6d76017cf8c38aec9d81.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th digit of the number \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e (digits are numbered from the end).\u003c/p\u003e\u003cp\u003eAsymptotics — \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/66/6c/666cc239bd9595b8818555e063d8d8b69ad0cda0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/456/problem/C\" title\u003d\"Codeforces Round 260 (Div. 2)\"\u003e456C - Boredom\u003c/a\u003e / \u003ca href\u003d\"/contest/455/problem/A\" title\u003d\"Codeforces Round 260 (Div. 1)\"\u003e455A - Boredom\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSolutions: \u003ca href\u003d\"/contest/455/submission/7407649\" title\u003d\"Submission 7407649 by netman\"\u003e7407649\u003c/a\u003e, \u003ca href\u003d\"/contest/455/submission/7407655\" title\u003d\"Submission 7407655 by netman\"\u003e7407655\u003c/a\u003e;\u003c/p\u003e\u003cp\u003eIn this task we need to maximize the sum of numbers that we took. Let precalc array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e — number of integers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. Now we can easily calculate the DP:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e) \u003d \u003ci\u003emax\u003c/i\u003e(\u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 1), \u003ci\u003ef\u003c/i\u003e(\u003ci\u003ei\u003c/i\u003e - 2) + \u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]·\u003ci\u003ei\u003c/i\u003e)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e2 ≤ \u003ci\u003ei\u003c/i\u003e ≤ \u003ci\u003en\u003c/i\u003e\u003c/span\u003e;\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(1) \u003d \u003ci\u003ecnt\u003c/i\u003e[1]\u003c/span\u003e;\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(0) \u003d 0\u003c/span\u003e;\u003c/p\u003e\u003cp\u003eThe answer is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ef\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAsymptotics — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/456/problem/D\" title\u003d\"Codeforces Round 260 (Div. 2)\"\u003e456D - A Lot of Games\u003c/a\u003e / \u003ca href\u003d\"/contest/455/problem/B\" title\u003d\"Codeforces Round 260 (Div. 1)\"\u003e455B - A Lot of Games\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSolutions: \u003ca href\u003d\"/contest/455/submission/7407663\" title\u003d\"Submission 7407663 by netman\"\u003e7407663\u003c/a\u003e, \u003ca href\u003d\"/contest/455/submission/7407670\" title\u003d\"Submission 7407670 by netman\"\u003e7407670\u003c/a\u003e;\u003c/p\u003e\u003cp\u003eTo solve this problem we need the prefix tree(trie), which will have all the strings from the group. Next we will calculate the two DP: win[v] — Can player win if he makes a move now (players have word equal to prefix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e in the prefix tree(trie)). lose[v] — Can player lose if he makes a move now (players have word equal to prefix \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e in the prefix tree(trie)).\u003c/p\u003e\u003cp\u003eif \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e is leaf of trie, then win[v] \u003d false; lose[v] \u003d true;\u003c/p\u003e\u003cp\u003eElse \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ewin\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e] \u003d (\u003ci\u003ewin\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e] \u003ci\u003eor\u003c/i\u003e (\u003ci\u003enot\u003c/i\u003e \u003ci\u003ewin\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]))\u003c/span\u003e; \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elose\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e] \u003d (\u003ci\u003elose\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e] \u003ci\u003eor\u003c/i\u003e (\u003ci\u003enot\u003c/i\u003e \u003ci\u003elose\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]))\u003c/span\u003e, such \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e — children of vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eLet\u0027s look at a few cases:\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ewin\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e] \u003d \u003ci\u003efalse\u003c/i\u003e\u003c/span\u003e, then second player win (first player lose all games).\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ewin\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e] \u003d \u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e и \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elose\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e] \u003d \u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e, then first player win (he can change the state of the game in his favor).\u003c/p\u003e\u003cp\u003eIf \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ewin\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e] \u003d \u003ci\u003etrue\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003elose\u003c/i\u003e[\u003ci\u003ev\u003c/i\u003e] \u003d \u003ci\u003efalse\u003c/i\u003e\u003c/span\u003e, then if \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/2c/e0/2ce0af9564734baafbd2270250ce5ac4ff76f0ad.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, then first player win, else second player win.\u003c/p\u003e\u003cp\u003eAsymptotics — \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/8a/49/8a4916b286f11c363d71f3bc9a8fe198075f6f07.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/456/problem/E\" title\u003d\"Codeforces Round 260 (Div. 2)\"\u003e456E - Civilization\u003c/a\u003e / \u003ca href\u003d\"/contest/455/problem/C\" title\u003d\"Codeforces Round 260 (Div. 1)\"\u003e455C - Civilization\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSolutions: \u003ca href\u003d\"/contest/455/submission/7407681\" title\u003d\"Submission 7407681 by netman\"\u003e7407681\u003c/a\u003e, \u003ca href\u003d\"/contest/455/submission/7407683\" title\u003d\"Submission 7407683 by netman\"\u003e7407683\u003c/a\u003e;\u003c/p\u003e\u003cp\u003eYou can see that the road system is a forest. For efficient storage component we need to use DSU. First, we need to build the initial system of roads. For each component of the initial road system, we must find the diameter of component. This can be done using a DFS or BFS. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e — any vertex of component. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e — furthest vertex from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e. Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e — furthest vertex from vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e. Diameter equal to distance from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e\u003c/span\u003e. This algorithm for finding the diameter is correct only for tree. For each component in the DSU, we know its diameter.\u003c/p\u003e\u003cp\u003eNow it is very easy to answer the query of the $1$st type: To know the component which contains the vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e and output diameter of this component. Query of the $2$nd type also very easy to process: Let \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e\u003c/span\u003e — of component in which lie the vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ev\u003c/i\u003e\u003c/span\u003e — of component in which lie the vertex \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eu\u003c/i\u003e ≠ \u003ci\u003ev\u003c/i\u003e\u003c/span\u003e, then we can merge components: The diameter of the new component is computed as follows: \u003c/p\u003e \u003ccenter\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/67/2c/672c4e28be9df3f57d054b2061d8830ad941dfe0.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/center\u003e\u003cp\u003eAsymptotics — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e·\u003ci\u003eA\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e - 1\u003c/sup\u003e(\u003ci\u003en\u003c/i\u003e))\u003c/span\u003e, где \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e - 1\u003c/sup\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e — inverse Ackermann function.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/455/problem/D\" title\u003d\"Codeforces Round 260 (Div. 1)\"\u003e455D - Serega and Fun\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSolutions: \u003ca href\u003d\"/contest/455/submission/7407693\" title\u003d\"Submission 7407693 by netman\"\u003e7407693\u003c/a\u003e, \u003ca href\u003d\"/contest/455/submission/7407699\" title\u003d\"Submission 7407699 by netman\"\u003e7407699\u003c/a\u003e, \u003ca href\u003d\"/contest/455/submission/7407703\" title\u003d\"Submission 7407703 by netman\"\u003e7407703\u003c/a\u003e;\u003c/p\u003e\u003cp\u003eLet\u0027s change the query type \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e to two more simple requests:\u003c/p\u003e\u003cp\u003eErase a number from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e-th position. Insert this number after \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003el\u003c/i\u003e - 1)\u003c/span\u003e-th position.\u003c/p\u003e\u003cp\u003eNow let\u0027s keep our array as \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/d5/90d5a6cd550a25d4a1e92f4f6e6a222c64aa7a2e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e blocks. In each block will store the numbers themselves in such a manner as in the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e and will store an array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e[\u003ci\u003ex\u003c/i\u003e]\u003c/span\u003e — number of integers \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e in block. This requires \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e \u003ci\u003esqrtn\u003c/i\u003e)\u003c/span\u003e space.\u003c/p\u003e\u003cp\u003eNow we can fast process the queries of the \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003est type. We can erase number from \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003er\u003c/i\u003e\u003c/span\u003e-th position in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9a/f4/9af4b06f8f17d32c53609242d0543d6137721ed1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e operations. And we can insert this number after \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003el\u003c/i\u003e - 1)\u003c/span\u003e-th position in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/9a/f4/9af4b06f8f17d32c53609242d0543d6137721ed1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e operations. Also we can fast recalc \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ecnt\u003c/i\u003e\u003c/span\u003e after transformations.\u003c/p\u003e\u003cp\u003eAlso we can fast process the queries of the \u003c/p\u003e\u003cp\u003eUnable to parse markup [type\u003dCF_TEX]\u003c/p\u003e O (\\ sqrt n) $ numbers are in blocks, which are partly lie within the boundaries of the query.\u003cp\u003eTo keep the size of the blocks close to \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/90/d5/90d5a6cd550a25d4a1e92f4f6e6a222c64aa7a2e.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, we need rebuild our structure after each \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f5/b9/f5b97c52509f584c9bad37c8d280e19725f3a694.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e-th query of the \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003est type. We can rebuild structure in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e)\u003c/span\u003e operations.\u003c/p\u003e\u003cp\u003eAsymptotics — \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/f1/ab/f1ab78795841cf741db473c1781f3010d0fa5ccc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/455/problem/E\" title\u003d\"Codeforces Round 260 (Div. 1)\"\u003e455E - Function\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSolutions: \u003ca href\u003d\"/contest/455/submission/7407711\" title\u003d\"Submission 7407711 by netman\"\u003e7407711\u003c/a\u003e, \u003ca href\u003d\"/contest/455/submission/7452418\" title\u003d\"Submission 7452418 by netman\"\u003e7452418\u003c/a\u003e;\u003c/p\u003e\u003cp\u003eIn this problem you should quickly be able to compute the function described in the statement.\u003c/p\u003e\u003cp\u003eYou may notice that this task is equivalent to next task:\u003c/p\u003e\u003cp\u003eGo through the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e, starting from the position of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ey\u003c/i\u003e\u003c/span\u003e, making \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e - 1)\u003c/span\u003e step. Step might be: step to the left or to stay in place.\u003c/p\u003e\u003cp\u003eFunction is calculated as follows: \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/ff/64/ff6494b0e158a72527729ef1681f014ba09928a2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e\u003c/span\u003e — how many times we visited the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e th element of the array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor a fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e is clear, it is most optimally that a minimum on the interval \u003cspan class\u003d\"tex-span\"\u003e[\u003ci\u003el\u003c/i\u003e, \u003ci\u003ey\u003c/i\u003e]\u003c/span\u003e has been visited by \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e - (\u003ci\u003ey\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e))\u003c/span\u003e times, and all the other numbers once.\u003c/p\u003e\u003cp\u003eYou may notice that optimally to \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]\u003c/span\u003e was a minimum.\u003c/p\u003e\u003cp\u003eFrom all this we can conclude that for a fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e answer is — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e[\u003ci\u003ey\u003c/i\u003e] - \u003ci\u003esum\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e] + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]·(\u003ci\u003ex\u003c/i\u003e - (\u003ci\u003ey\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e))\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e\u003c/span\u003e — an array of prefix sums of array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAbove formula can be written as follows:\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003esum\u003c/i\u003e[\u003ci\u003ey\u003c/i\u003e] - \u003ci\u003esum\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e] + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]·(\u003ci\u003ex\u003c/i\u003e - (\u003ci\u003ey\u003c/i\u003e - \u003ci\u003el\u003c/i\u003e)) \u003d \u003ci\u003esum\u003c/i\u003e[\u003ci\u003ey\u003c/i\u003e] - \u003ci\u003esum\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e] + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]·(\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e + \u003ci\u003el\u003c/i\u003e) \u003d \u003ci\u003esum\u003c/i\u003e[\u003ci\u003ey\u003c/i\u003e] - \u003ci\u003esum\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e] + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]·\u003ci\u003el\u003c/i\u003e + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]·(\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e) \u003d \u003ci\u003esum\u003c/i\u003e[\u003ci\u003ey\u003c/i\u003e] + (\u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]·(\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e) + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]·\u003ci\u003el\u003c/i\u003e - \u003ci\u003esum\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e])\u003c/span\u003e\u003c/p\u003e\u003cp\u003eYou may notice that in brackets something like the equation of the line — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e·\u003ci\u003eX\u003c/i\u003e + \u003ci\u003eB\u003c/i\u003e\u003c/span\u003e. That\u0027s very similar to the equation of the line: \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]·(\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e) + \u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]·\u003ci\u003el\u003c/i\u003e - \u003ci\u003esum\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e \u003d \u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e \u003d (\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e \u003d \u003ci\u003ea\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]·\u003ci\u003el\u003c/i\u003e - \u003ci\u003esum\u003c/i\u003e[\u003ci\u003el\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eNow we must find minimum for all \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e and fixed \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eX\u003c/i\u003e \u003d (\u003ci\u003ex\u003c/i\u003e - \u003ci\u003ey\u003c/i\u003e)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eWe have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e lines, i. e. for every element in array \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e\u003c/span\u003e one line \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eK\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e. \u003c/p\u003e\u003cp\u003eAnswer for query equal to:\u003c/p\u003e\u003cp\u003e\u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/1e/2f/1e2fac3c3209f18db622bd9848f3718dbc887db8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, where \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003eK\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e, \u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e)\u003c/span\u003e — \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th line. \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eK\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eB\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/sub\u003e \u003d \u003ci\u003ea\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]·\u003ci\u003ei\u003c/i\u003e - \u003ci\u003esum\u003c/i\u003e[\u003ci\u003ei\u003c/i\u003e]\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eFor fast answer calculation we must use Convex Hull Trick with segment tree. In every vertex of segment tree we keep all lines for segment of this vertex. This requires \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/e7/0f/e70fbdc8079c0b9ff4f31073012937bac199bc6b.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e space, because each line lies in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/75/5c/755c0e72a8f6c5be4007a41acbae4bf024107b8c.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e vertices. And we can answer query in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/74/10/7410a69421c6ee91a5842650f56f6dd28c3fad9a.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e operations. Because we visit \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e vertices and each vertex need in \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/7c/4d/7c4d711d6db4afdaebd7dc33a74586d66f567bfc.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e operations. You can learn the theory about Convex Hull Trick \u003ca href\u003d\"http://wcipeg.com/wiki/Convex_hull_trick\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e","tags":["260","editorial"]}}