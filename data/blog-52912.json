{"status":"OK","result":{"originalLocale":"en","allowViewHistory":true,"creationTimeSeconds":1498461930,"rating":-12,"authorHandle":"ghoshsai5000","modificationTimeSeconds":1498461930,"id":52912,"title":"\u003cp\u003eAnalysis of complexity of two solutions to T-Primes\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSo, I adopted two different approaches to the problem T-Primes ...\u003c/p\u003e\u003cp\u003eIn the \u003ca href\u003d\"//codeforces.com/contest/230/submission/28051085\"\u003efirst solution\u003c/a\u003e, I maintained a set of all squares of Primes ... So, the complexity should be O(D log log D + N log S),\u003c/p\u003e\u003cp\u003eWhere D \u003d 1e6, N is the number of queries and S is the size of the set ... Each query on a set takes O(log S) time at most because it is a balanced tree.\u003c/p\u003e\u003cp\u003eIn the \u003ca href\u003d\"//codeforces.com/contest/230/submission/28051472\"\u003esecond solution\u003c/a\u003e, I only maintained a vector of primes and checked if a number is a square root and if the square root is prime.\u003c/p\u003e\u003cp\u003eHere the solution is O(D log log D + T), where T is the complexity of finding square root of T ... I am unable to analyse ...\u003c/p\u003e\u003cp\u003eI know finding N^2 is easier than finding root(N) ... Can someone explain why one solution is better than the other ?\u003c/p\u003e\u003cp\u003eHelp in understanding the complexities of the solutions would be much appreciated !\u003c/p\u003e\u003c/div\u003e","tags":["algorithm complexity","analysis","numbertheory"]}}