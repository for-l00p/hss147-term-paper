{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1405517305,"rating":9,"authorHandle":"RedLord","modificationTimeSeconds":1405517305,"id":13064,"title":"\u003cp\u003eНарвался на олимпиадную задачу при разработке приложения\u003c/p\u003e","locale":"ru","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eЗдраствуйте. Во время написания игры столкнулся с задачей, которую не могу решить. В игре у вас есть меч и им надо отбивать пули. На каждой итерации меч (для начала, я хотел бы решить, упростив его модель до отрезка) подвергается двум геометрическим преобразованиям:\u003c/p\u003e\u003cp\u003e1)Точка, относительно которой он вращается совершает перемещение на вектор v из позиции (x0;y0)\u003c/p\u003e\u003cp\u003e2)Все остальные точки меча вращаются относительно нее на угол omega.\u003c/p\u003e\u003cp\u003eНа каждой итерации пуля перемещается на вектор z. Изначально она находится в точке (m;n)\u003c/p\u003e\u003cp\u003eМеч должен отбивать пули, с которыми столкнулся. Разработка ведется в Unity3D, с физическим движком PhysX. Как оказалось, его стандартной точности не хватает для расчета этих преобразований и пули застревают в мече. \u003c/p\u003e\u003cp\u003eИспользование различных скриптов, разработанных сообществом Unity для решения этой проблемы мне не помогло. Увеличение количества итераций физического движка в секунду исправляет ошибки при столкновении, но убивает производительность. Подробнее я писал в answers.unity3d.com, но получил только решения для случая, когда движется либо меч, либо пуля, но не то и другое сразу. (\u003ca href\u003d\"http://answers.unity3d.com/questions/749102/collision-of-fast-objects-does-not-work-yes-i-goog.html\"\u003ehttp://answers.unity3d.com/questions/749102/collision-of-fast-objects-does-not-work-yes-i-goog.html\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eПоэтому, я решил написать обработку этого вида столкновений с нуля.\u003c/p\u003e\u003cp\u003e\u003cimg alt\u003d\" \" src\u003d\"/predownloaded/4d/d8/4dd8eb6c90fd6c92cb9580ddaebe4fd2b7a8b557.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e\u003c/p\u003e\u003cp\u003e(Длина меча постоянна, просто картинка не совсем точна). \u003c/p\u003e\u003cp\u003eVector2 — класс двухмерного вектора. magnitude() возвращает его длину, normalized() возвращает коллинеарный ему вектор длины 1.\u003c/p\u003e\u003cp\u003ep1 и p2 — точки пересечения траектории пули и траекторий неподвижной точки меча и точки меча, наиболее удаленной от неподвжной соответственно\u003c/p\u003e\u003cp\u003eОпределим функции\u003c/p\u003e\u003cp\u003eLine line_from_vector_and_point(Vector2 vec, Vector2 p)\u003c/p\u003e\u003cp\u003eVector2 lines_intersection(Line l1, Line l2)\u003c/p\u003e\u003cp\u003efloat points_distance(Vector2 p1, Vector2 p2)\u003c/p\u003e\u003cp\u003eсмысл которых соответствует названию.\u003c/p\u003e\u003cp\u003eДалее, можно найти Vector2 p1\u003dlines_intersection(line_from_vector_and_point(v,new Vector2(x0,y0)),line_from_vector_and_point(z,new Vector2(m,n)));\u003c/p\u003e\u003cp\u003eVector2 p2\u003dp1-z.normalized()*SWORD_LENGTH;\u003c/p\u003e\u003cp\u003eПусть tb(r) — функция, которая по расстоянию r точки отрезка p1;p2 от p1 возвращает время, за которое пуля достигнет этой точки.\u003c/p\u003e\u003cp\u003eПусть ts(r) — функция, которая по расстоянию r некоторой точки отрезка меча от оси вращения этого меча возвращает время, за которое данная точка окажется на отрезке p1;p2\u003c/p\u003e\u003cp\u003eЯ предположил, что f(r)\u003dts(r)-tb(r) — унимодальная функция, при условии, что omega всегда менее 180 градусов и попытался это доказать. Если это верно, то точку столкновения можно определить троичным поиском.\u003c/p\u003e\u003cp\u003etb(r)\u003d(points_distance(new Vector2(m,n),p1)-r)/z.magnitude()\u003c/p\u003e\u003cp\u003eК сожалению, выразить ts(r) я не смог.\u003c/p\u003e\u003cp\u003eКоординаты точки меча от радиуса и времени выражаются как \u003c/p\u003e\u003cp\u003e(x0+v.x*t+r*cos(omega*t);y0+v.y*t+r*sin(omega*t))\u003c/p\u003e\u003cp\u003ets(0) легко найти как points_distance(new Vector2(x0,y0),p1)/v.magnitude(), т.к. речь идет о точке меча, движущейся по прямой, но остальные перемещатся по кривым, длину участка и скорость прохождения которых у меня не получается определить.\u003c/p\u003e\u003cp\u003eЕсть ли способы найти ts(r), или упростить модель столкновения?\u003c/p\u003e\u003cp\u003eЗаранее благодарен.\u003c/p\u003e\u003c/div\u003e","tags":["геометрия"]}}