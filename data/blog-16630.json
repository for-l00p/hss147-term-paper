{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1424861923,"rating":245,"authorHandle":"dj3500","modificationTimeSeconds":1424890345,"id":16630,"title":"\u003cp\u003eJava and Python\u0027s sort is buggy\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSee here:\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003ca href\u003d\"http://envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/\"\u003ehttp://envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/\u003c/a\u003e\u003c/li\u003e   \u003cli\u003e\u003ca href\u003d\"https://github.com/abstools/java-timsort-bug\"\u003ehttps://github.com/abstools/java-timsort-bug\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\u003cp\u003eThe bug is also present in CF\u0027s Java 7 (I didn\u0027t test Java 8 or Python). However, it seems that this cannot be used to hack Java or Python solutions, because the minimum size of a counterexample is 67108864 (67 million), too much to give in input. I guess that\u0027s a good thing -- imagine the mess this would create!\u003c/p\u003e\u003c/div\u003e","tags":["java","python","bug","sort"]}}