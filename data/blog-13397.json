{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1408032174,"rating":37,"authorHandle":"Enchom","modificationTimeSeconds":1408196605,"id":13397,"title":"\u003cp\u003eBalkan Olympiad in Informatics 2014 Problems — Day 2\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eSo, day 2 passed and the tasks were quite good again. I\u0027m quite sad that I couldn\u0027t get the gold but it was a nice competition.\u003c/p\u003e\u003ch4\u003eProblem 1 — Ephesus\u003c/h4\u003e\u003cp\u003eYou are given a string of N letters. Let\u0027s observe a k-partitioning of this string, that is we divide it in k parts (numbered 1, 2, ... k), and each of those parts is a substring of the string. The first part starts from the beginning of the string, the second starts immediately after the end of the first and so on. Every letter of the text is in exactly one of those parts and each part has at least one letter, that is the parts are non-intersecting, not empty and all of them together exhaust the given string.\u003c/p\u003e\u003cp\u003eNow you are asking the question \u0026quot;How many are the different k-partitions such that the k parts are strictly increasing in lexicographical order\u0026quot;, that is the parts are such that the first is the smallest lexicographically, the second is the next smallest and so on. Let \u003cstrong\u003eXk\u003c/strong\u003e be the answer for k. This problem is even harder : you must calculate the sum k*Xk with k being the values 1,2..N. That is you must calculate — (1*X1)+(2*X2)+...+(N*XN).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eLet the string be mcyyak.\u003c/p\u003e\u003cp\u003eThen for k\u003d1, xk\u003d1; for k\u003d2, xk\u003d2 (_mc yyak_ and \u003cem\u003emcy yak\u003c/em\u003e); for k\u003d3, xk\u003d1 (_mc y yak_); for k\u003d4, xk\u003d0; for k\u003d5,xk\u003d0; for k\u003d6,xk\u003d0. So the answer is 1*1+2*2+3*1+4*0+5*0+6*0\u003d8\u003c/p\u003e\u003cp\u003eOutput the answer modulo 10^9+7.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eConstraints\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSubtask 1 (5 points):\u003c/p\u003e\u003cp\u003eN\u0026lt;\u003d3\u003c/p\u003e\u003cp\u003eSubtask 2 (16 points):\u003c/p\u003e\u003cp\u003eN\u0026lt;\u003d700\u003c/p\u003e\u003cp\u003eSubtask 3 (36 points):\u003c/p\u003e\u003cp\u003eN\u0026lt;\u003d5,000\u003c/p\u003e\u003cp\u003eSubtask 4 (43 points):\u003c/p\u003e\u003cp\u003eN\u0026lt;\u003d10,000\u003c/p\u003e\u003cp\u003eTime Limit \u003d 3s\u003c/p\u003e\u003cp\u003eMemory Limit \u003d 1024MB\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTest\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eInput:\u003c/p\u003e\u003cp\u003emcyyak\u003c/p\u003e\u003cp\u003eOutput:\u003c/p\u003e\u003cp\u003e8\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMy solution\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSadly I thought this would be the hardest problem and left it last, having only like 40minutes for it. I ended up with just 5 points and didn\u0027t manage to get any better solution. The real solution is some kind of DP in O(N^2) that I believe uses LCP and some tricks for fast summing and calculations.\u003c/p\u003e\u003ch4\u003eProblem 2 — Fairy Chimneys\u003c/h4\u003e\u003cp\u003eThere is a graph with N vertices. There are edges between some of the vertices. However, edges (bridges) are quite weak so once you go through an edge it is broken and can\u0027t be used further. The value of a vertex is the amount of vertices you can reach and go back to the initial vertex.\u003c/p\u003e\u003cp\u003eThere are Q queries of two types:\u003c/p\u003e\u003cp\u003eAdd \u0026quot;a x y\u0026quot; : Builds a bridge connecting x,y. Query \u0026quot;q x\u0026quot; : asks for the value of vertex x.\u003c/p\u003e\u003cp\u003eGiven N and Q queries your task is to find the answers of all queries.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eLet N\u003d5. Suppose we have the following connections — \u0026quot;a 1 2\u0026quot; ; \u0026quot;a 1 3\u0026quot; ; \u0026quot;a 1 4\u0026quot; ; \u0026quot;a 2 4\u0026quot; ; \u0026quot;a 4 5\u0026quot;. Then let\u0027s look at a few queries. Suppose we get \u0026quot;q 1\u0026quot;. The answer would be 3, since the vertex 1 can reach vertices 1,2 and 4. The query \u0026quot;q 3\u0026quot; would be 1, since 3 can reach only itself (using no bridge). Then suppose we have \u0026quot;a 3 2\u0026quot;. Now the query \u0026quot;q 3\u0026quot; would give us 4 since vertex 1 can now reach 1,2,3 and 4.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eConstraints\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSubtask 1 (14 points):\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dN\u0026lt;\u003d1,000\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dQ\u0026lt;\u003d5,000\u003c/p\u003e\u003cp\u003eSubtask 2 (18 points):\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dN\u0026lt;\u003d5,000\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dQ\u0026lt;\u003d500,000\u003c/p\u003e\u003cp\u003eSubtask 3 (23 points):\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dN\u0026lt;\u003d50,000\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dQ\u0026lt;\u003d500,000\u003c/p\u003e\u003cp\u003eSubtask 4 (10 points)\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dN\u0026lt;\u003d1,000,000\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dQ\u0026lt;\u003d5,000,000\u003c/p\u003e\u003cp\u003eAll queries of type \u0026quot;q\u0026quot; start after all bridges are built.\u003c/p\u003e\u003cp\u003eSubtask 5 (35 points)\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dN\u0026lt;\u003d1,000,000\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dQ\u0026lt;\u003d5,000,000\u003c/p\u003e\u003cp\u003eTime Limit : 3s\u003c/p\u003e\u003cp\u003eMemory Limit : 256MB\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTest\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eInput:\u003c/p\u003e\u003cp\u003e5 9\u003c/p\u003e\u003cp\u003ea 1 2\u003c/p\u003e\u003cp\u003ea 1 3\u003c/p\u003e\u003cp\u003ea 1 4\u003c/p\u003e\u003cp\u003ea 2 4\u003c/p\u003e\u003cp\u003ea 4 5\u003c/p\u003e\u003cp\u003eq 1\u003c/p\u003e\u003cp\u003eq 3\u003c/p\u003e\u003cp\u003ea 3 2\u003c/p\u003e\u003cp\u003eq 3\u003c/p\u003e\u003cp\u003eOutput:\u003c/p\u003e\u003cp\u003e3\u003c/p\u003e\u003cp\u003e1\u003c/p\u003e\u003cp\u003e4\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMy solution\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIt took my about 4 hours to solve this problem, my solution includes a few union finds, merging many vertices into one, keeping trees of connected components and my complexity is in total I believe a little bit better than O(NlogN), however in theoretical worst-case I think my solution may perform as O(N^2). During the competition I could make it worst-case O(NlogN), however I conjectured that it\u0027s really difficult to make such test that would make me solution perform badly, so I decided to try it and it got full score in 2~2.5s. I don\u0027t know the intended solution of the problem, however only me and one other person have full score on the problem.\u003c/p\u003e\u003ch4\u003eProblem 3 — Mediterranean\u003c/h4\u003e\u003cp\u003eThe path between Antalya and Iskenderun is a long straight line with adjacent cities between 1km. There are N passengers and the i-th passenger wants to get on a bus at city Bi and get off the bus at city Ei. A bus travelling from city D to city A can take passenger i only and only if D\u0026lt;\u003dBi\u0026lt;Ei\u0026lt;\u003dA.\u003c/p\u003e\u003cp\u003eYou are given the cities N people will get on and get off the bus and the routes of M buses. Your task is to find the maximum number of people can each bus can take. The task is online. You are first given the pairs of cities of the N passengers. Then for each of the buses you are given two numbers \u003cstrong\u003ed\u003c/strong\u003e and \u003cstrong\u003ea\u003c/strong\u003e. The bus travels from city \u003cstrong\u003ed+shift\u003c/strong\u003e to \u003cstrong\u003ea+shift\u003c/strong\u003e. In the beginning shift is 0, and after each query shift takes the value of the answer of the query.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eTake N\u003d5. Let the pairs \u0026lt;Bi,Ei\u0026gt; of passengers are : \u0026lt;2, 8\u0026gt;, \u0026lt;4, 5\u0026gt;, \u0026lt;0, 6\u0026gt;, \u0026lt;1, 7\u0026gt;, \u0026lt;3, 9\u0026gt;. A bus travelling from city 3 to city 7 can take only one passenger (\u0026lt;4,5\u0026gt;), and a bus travelling from city 0 to city 6 can take two passengers. (\u0026lt;0,6\u0026gt;, \u0026lt;4,5\u0026gt;).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eConstraints\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eAll Bi and Ei are unique.\u003c/p\u003e\u003cp\u003eSubtask 1 (9 points):\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dN,M\u0026lt;\u003d5,000\u003c/p\u003e\u003cp\u003e0\u0026lt;\u003dBi\u0026lt;Ei\u0026lt;\u003d400,000\u003c/p\u003e\u003cp\u003e0\u0026lt;\u003dd+shift\u0026lt;a+shift\u0026lt;\u003d400,000\u003c/p\u003e\u003cp\u003eSubtask 2 (23 points) [not sure about this subtask]:\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dN,M\u0026lt;\u003d50,000\u003c/p\u003e\u003cp\u003e0\u0026lt;\u003dBi\u0026lt;Ei\u0026lt;\u003d10^9\u003c/p\u003e\u003cp\u003e0\u0026lt;\u003dd+shift\u0026lt;a+shift\u0026lt;\u003d10^9\u003c/p\u003e\u003cp\u003eSubtask 3 (32 points):\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dN,M\u0026lt;\u003d200,000\u003c/p\u003e\u003cp\u003e0\u0026lt;\u003dBi\u0026lt;Ei\u0026lt;\u003d10^9\u003c/p\u003e\u003cp\u003e0\u0026lt;\u003dd+shift\u0026lt;a+shift\u0026lt;\u003d10^9\u003c/p\u003e\u003cp\u003eSubtask 4 (36 points):\u003c/p\u003e\u003cp\u003e1\u0026lt;\u003dN,M\u0026lt;\u003d500,000\u003c/p\u003e\u003cp\u003e0\u0026lt;\u003dBi\u0026lt;Ei\u0026lt;\u003d10^9\u003c/p\u003e\u003cp\u003e0\u0026lt;\u003dd+shift\u0026lt;a+shift\u0026lt;\u003d10^9\u003c/p\u003e\u003cp\u003eTime Limit \u003d 3s Memory Limit \u003d 256MB\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTest\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eInput:\u003c/p\u003e\u003cp\u003e5\u003c/p\u003e\u003cp\u003e2 8\u003c/p\u003e\u003cp\u003e4 5\u003c/p\u003e\u003cp\u003e0 6\u003c/p\u003e\u003cp\u003e1 7\u003c/p\u003e\u003cp\u003e3 9\u003c/p\u003e\u003cp\u003e5\u003c/p\u003e\u003cp\u003e3 7\u003c/p\u003e\u003cp\u003e-1 5\u003c/p\u003e\u003cp\u003e-1 7\u003c/p\u003e\u003cp\u003e-2 1\u003c/p\u003e\u003cp\u003e3 7\u003c/p\u003e\u003cp\u003eOutput:\u003c/p\u003e\u003cp\u003e1\u003c/p\u003e\u003cp\u003e2\u003c/p\u003e\u003cp\u003e4\u003c/p\u003e\u003cp\u003e1\u003c/p\u003e\u003cp\u003e1\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMy solution\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIn my opinion this was the easiest problem in BOI2014. It took me about 30-40 minutes to solve it and implement it. Let\u0027s imagine that we keep an array F, and when a passenger \u0026lt;B,E\u0026gt; comes we say that F[B]\u003dE. Now suppose a bus from L to R comes. What we actually want to find is the amount of numbers in F on indices between L and R that have value equal or less than R. Obviously that would give us the correct answer. Now this observation is enough for all except the last subtask since there is a known tree solution that works in O(log^2 N) per query for the described types of queries. To improve it we can use the fact that we do not have updates. Suppose we have sorted all people in increasing end of their interval, that is in increasing E. Now instead of saying that F[B]\u003dE, we will simply do F[B]++, that is increase F[B] by 1. However we will do that in a persistent segment tree that keeps sums of intervals. Now suppose a bus from L to R comes. Well then we will simply find the version of the persistent tree where only all passengers with ending less than or equal to R have been added (there will be such since we add them in increasing order of their end). We can do that by binary in O(logN). Now in that tree we will simply do a sum query in [L,R] and that is our answer. Complexity is O(logN) per query, so O(MlogN) in total. To avoid using 10^9 memory you have to either compress the input or use dynamic tree (create only vertices that you use). I used dynamic tree and passed in 247MB.\u003c/p\u003e\u003cp\u003eSo I got a total of 205 points on the second day, but sadly I was about 50 points short from the golds, and will most likely be the first silver medalist.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eP.S. They extended the golds and luckily I got gold.\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}