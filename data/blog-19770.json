{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1439493127,"rating":44,"authorHandle":"josdas","modificationTimeSeconds":1439615402,"id":19770,"title":"\u003cp\u003eCodeforces Round #316 Editorial\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/570/problem/A\" title\u003d\"Codeforces Round 315 (Div. 2)\"\u003e570А — Elections \u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe need to determine choice for each city. Then sum it for each candidate and determine the winner.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/570/submission/12523729\" title\u003d\"Codeforces Round 315 (Div. 2)\"\u003eSolutions\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/570/problem/B\" title\u003d\"Codeforces Round 315 (Div. 2)\"\u003e570B — Simple Game \u003c/a\u003e\u003c/p\u003e\u003cp\u003eLets find which variant is interesting. For Andrew is no need a variant wherein \u003cspan class\u003d\"tex-span\"\u003e|\u003ci\u003ea\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e| \u0026gt; 1\u003c/span\u003e because we can increase probability of victory if we will be closer to m. Then we consider two variants, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003ec\u003c/i\u003e - 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ea\u003c/i\u003e \u003d \u003ci\u003ec\u003c/i\u003e + 1\u003c/span\u003e. Probability of victory will be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ec\u003c/i\u003e / \u003ci\u003en\u003c/i\u003e\u003c/span\u003e for first variant and \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003en\u003c/i\u003e - \u003ci\u003ec\u003c/i\u003e + 1) / \u003ci\u003en\u003c/i\u003e\u003c/span\u003e for second. \u003c/p\u003e\u003cp\u003eWe need to choose better variant, also we must keep in mind case of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e \u003d 1\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(1)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/570/submission/12523744\" title\u003d\"Codeforces Round 315 (Div. 2)\"\u003eSolutions\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/570/problem/C\" title\u003d\"Codeforces Round 315 (Div. 2)\"\u003e570C — Replacement\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLets find how replacements occur. If we have segment of points with length \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e\u003c/span\u003e,we need \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003el\u003c/i\u003e - 1\u003c/span\u003e operations and stop replacements for this segment. If we sum lenghts of all segments and its quantity then answer will be \u003d total length of segments — quantity of segments. After change of one symbol length changes by 1.\u003c/p\u003e\u003cp\u003eQuantity of segments can be supported by array. Consider events of merging, dividing,creation and deletion of segments. For merging we need to find if both of neighbors(right and left) are points then merging occured and quantity of segments reduced by 1. Other cases can be cosidered similarly.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/570/submission/12523751\" title\u003d\"Codeforces Round 315 (Div. 2)\"\u003eSolutions\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/570/problem/D\" title\u003d\"Codeforces Round 315 (Div. 2)\"\u003e570D — Tree Requests\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe need to write vertices in DFS order and store time of enter/exit of vertices in DFS. All vertices in subtree represent a segment. Now we can get all vertices in subtree v on height h as a segment, making two binary searches.\u003c/p\u003e\u003cp\u003eWe can make a palindrome if quantity of uneven entries of each letter is less than 2.\u003c/p\u003e\u003cp\u003eThis function can be counted for each prefix in bypass for each depth.\u003c/p\u003e\u003cp\u003eFor saving the memory bit compression can be used considering that we need only parity and function is xor.\u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003em\u003c/i\u003e * (\u003ci\u003elog\u003c/i\u003e + 26) + \u003ci\u003en\u003c/i\u003e)\u003c/span\u003e\u003c/p\u003e\u003cp\u003eD had a offline solution too in \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + \u003ci\u003em\u003c/i\u003e * (26 / 32))\u003c/span\u003e time and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e * 26 / 8)\u003c/span\u003e memory\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/570/submission/12523757\" title\u003d\"Codeforces Round 315 (Div. 2)\"\u003eSolutions\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/570/problem/E\" title\u003d\"Codeforces Round 315 (Div. 2)\"\u003e570E — Pig and Palindromes\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWe need palindrome paths. Palindrome is word which reads the same backward or forward. We can use it. Count the dynamic from coordinates of 2 cells, first and latest in palindrome.\u003c/p\u003e\u003cp\u003eFrom each state exists 4 transitions (combinations: first cell down/to the right and second cell up/to the left). We need only transitions on equal symbols for making a palindrome. Note that we need a pairs of cells on equal distance from start and end for each.\u003c/p\u003e\u003cp\u003eFor saving memory we need to store two latest layers. \u003c/p\u003e\u003cp\u003e\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e3\u003c/sup\u003e)\u003c/span\u003e — time and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eO\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e\u003csup class\u003d\"upper-index\"\u003e2\u003c/sup\u003e)\u003c/span\u003e — memory\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"//codeforces.com/contest/570/submission/12523769\" title\u003d\"Codeforces Round 315 (Div. 2)\"\u003eSolutions\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e","tags":[]}}