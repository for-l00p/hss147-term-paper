{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1406047935,"rating":9,"authorHandle":"caioaao","modificationTimeSeconds":1406050645,"id":13155,"title":"\u003cp\u003eConvex hull trick, DP and UVA 12524\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003eI\u0027ve been trying to understand how to solve this problem on UVa: \u003ca href\u003d\"http://uva.onlinejudge.org/index.php?option\u003dcom_onlinejudge\u0026amp;Itemid\u003d8\u0026amp;category\u003d441\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d3969\"\u003ehttp://uva.onlinejudge.org/index.php?option\u003dcom_onlinejudge\u0026amp;Itemid\u003d8\u0026amp;category\u003d441\u0026amp;page\u003dshow_problem\u0026amp;problem\u003d3969\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAbridged problem statement: You have N piles in different heights, each pile having a weight W. You can only move a pile if the next X is bigger than the pile you are moving, and each move costs \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e * Δ \u003ci\u003eHeight\u003c/i\u003e\u003c/span\u003e. You want to turn the N piles into K piles with the minimum cost possible (you can only move one pile to another place where there was a pile). constraints: \u003cspan class\u003d\"tex-span\"\u003e1 ≤ \u003ci\u003eK\u003c/i\u003e ≤ \u003ci\u003eN\u003c/i\u003e ≤ 1000\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eW\u003c/i\u003e ≤ 10\u003csup class\u003d\"upper-index\"\u003e6\u003c/sup\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eI\u0027ve found lots of explanations (mostly in spanish and chinese), and all of them say \u0026quot;it\u0027s easy to see a DP solution of O(n*n*k), but that would TLE...\u0026quot; yeah, I can see one DP solution in O(n*n*k), but I can\u0027t understand their recursion and, more specifically, how to turn that into line equations and how to apply convex hull trick on it.\u003c/p\u003e\u003cp\u003eI\u0027ve never solved any problem that needed convex hull trick or any DP optimization at all, so I\u0027m quite a noob here. Any materials (apart from PEGWiki\u0027s article on convex hull trick), like simple problems solvable with it, are apreciated.\u003c/p\u003e\u003cp\u003eThanks!\u003c/p\u003e\u003cp\u003eReferences (didn\u0027t help me, but maybe some of you can make sense out of it):\u003c/p\u003e \u003cul\u003e   \u003cli\u003e\u003cp\u003eC++ Implementation: \u003ca href\u003d\"https://github.com/marioyc/Online-Judge-Solutions/blob/master/UVA/Contest%20Volumes/12524%20-%20Arranging%20Heaps.cpp\"\u003ehttps://github.com/marioyc/Online-Judge-Solutions/blob/master/UVA/Contest%20Volumes/12524%20-%20Arranging%20Heaps.cpp\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eExplanation in spanish: \u003ca href\u003d\"http://chococontest.wordpress.com/2012/11/25/solucionario-regional-south-america-2012/\"\u003ehttp://chococontest.wordpress.com/2012/11/25/solucionario-regional-south-america-2012/\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e   \u003cli\u003e\u003cp\u003eExplanation in chinese (according to Google translate):\u003ca href\u003d\"http://blog.csdn.net/work_freedom/article/details/8915965\"\u003ehttp://blog.csdn.net/work_freedom/article/details/8915965\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e\u003c/div\u003e","tags":["convex hull optimization","dp","uva"]}}