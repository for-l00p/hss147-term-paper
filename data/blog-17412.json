{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1429089241,"rating":8,"authorHandle":"magieNoire","modificationTimeSeconds":1429089283,"id":17412,"title":"\u003cp\u003eEulerian Graphs !\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003ch2\u003eEulerian Graphs:\u003c/h2\u003e\u003cp\u003eWe call a graph Eulerian if it has an Eulerian Tour or Path. An Eulerian Path, is a path that uses every edge of the graph exactly once -- note that vertices can be visited more than once. If the path is closed (e.g: finishing from where we have started) we call it an Eulerian Circuit.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTheorem I:\u003c/strong\u003e An undirected Graph G \u003d (V, E) has an Eulerian Circuit iff it is connected and all its vertices have an even degree.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTheorem II:\u003c/strong\u003e An undirected Graph G \u003d (V, E) has an Eulerian Path iff it is connected and exactly zero or two vertices have odd degree -- One will be the start and the other will be the end.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eProof:\u003c/strong\u003e \u003cbr /\u003e \u003d\u0026gt; An Eulerian Path exists. If there is two vertices with odd degree, pick randomly one as our start. Because there is an Eulerian Path, whenever we enter a vertex \u0027v\u0027, we must exit it from another edge. Thus the degree of all vertices must be even, except maybe the one we start with and the one we finish with.\u003c/p\u003e\u003cp\u003e\u0026lt;\u003d All vertices have even degree. To prove the converse we use induction on the number of edges. The base case is a graph with a single vertex. Now for a general graph, with all vertices have even degree. We start by choosing a starting vertex. If all vertices have even degree, then choose one randomly, otherwise choose one of the two vertices that have odd degree. From that vertex proceed as follows: go for a walk until you cannot do any move. Of course this algorithm always finishes, because we have a finite number of edges and we don\u0027t repeat visited edges. We will have two possibilities, coming back to our starting vertex, or finishing at some vertex which have an odd degree.\u003c/p\u003e\u003cp\u003eOne of the possible outcomes, is that we have traced all the Euler Path or Circuit, and thus we have finished. Otherwise, all the vertices remaining have an even degree, because whenever we visit some vertex we go out from another edge. The graph may be disconnected, but it can be connected with the cycle that we have traced at the beginning. By the induction hypothesis, those smaller components have also an Euler Circuit. Hence our original graph has an Euler Path or Circuit.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAlgorithm:\u003c/strong\u003e\u003c/p\u003e \u003col\u003e   \u003cli\u003eCheck if The graph has an Eulerian Path.\u003c/li\u003e   \u003cli\u003ePick a starting node -- If some node has odd degree choose on the two. \u003cbr /\u003e  Recurse as follows:\u003cbr /\u003e  + visit all adjacent vertices (if any) and delete those edges.\u003cbr /\u003e  + Append current node to our final path.\u003cbr /\u003e\u003c/li\u003e \u003c/ol\u003e\u003cp\u003e\u003cstrong\u003eAs Pseudo code:\u003c/strong\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edfs( node s ) {\n    \n    for all \u0027v\u0027 in Adj \u0027s\u0027 {\n        deleteEdge(s, v)\n        dfs(v);   \n    }\n    \n    Append \u0027s\u0027 to our Final Path\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eTime Complexity:\u003c/strong\u003e O(V + E)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You should traverse the final answer in reverse order to get the correct path.\u003c/p\u003e\u003cp\u003eAs for \u003cem\u003eDirected\u003c/em\u003e graphs, the task is a little bit more complex. The satisfiability is more strict. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTheorem III:\u003c/strong\u003e A directed graph has an Eulerian Circuit iff is it is connected and for all vertices the indegree is equal to its outdegree.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTheorem IV:\u003c/strong\u003e A directed graph has an Eulerian Path iff it is connected and for all vertices the indegree is equal to its outdegree, except maybe for two vertices with one has indegree bigger that its outdeegre and will be start vertex, and another one with indegree bigger than outdegree with one and is the end of the path.\u003c/p\u003e\u003cp\u003eTo get the Path or Circuit the \u003cem\u003esame\u003c/em\u003e algorithm works for \u003cem\u003eDirected\u003c/em\u003e and \u003cem\u003eUndirected\u003c/em\u003e graph.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ePractice Problems:\u003c/strong\u003e\u003cbr /\u003e -\u003ca href\u003d\"//codeforces.com/problemset/problem/508/D\"\u003eTanya And Password\u003c/a\u003e\u003cbr /\u003e -\u003ca href\u003d\"http://poj.org/problem?id\u003d2337\"\u003eCatenyms\u003c/a\u003e\u003cbr /\u003e -\u003ca href\u003d\"http://www.spoj.com/problems/WORDS1/\"\u003ePlay on Words\u003c/a\u003e\u003cbr /\u003e\u003c/p\u003e\u003c/div\u003e","tags":["euler tour","eulerian path","eulerian graph"]}}