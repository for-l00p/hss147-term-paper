{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":true,"creationTimeSeconds":1483804769,"rating":108,"authorHandle":"netman","modificationTimeSeconds":1483804820,"id":49637,"title":"\u003cp\u003eEditorial. Codeforces Round #390 (Div. 2)\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"754A\"\u003eTutorial is loading...\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n\nusing namespace std;\n\nint main() {\n\tint n;\n\tscanf(\u0026quot;%d\u0026quot;, \u0026amp;n);\n\tvector\u0026lt;int\u0026gt; a(n);\n\tlong long sum \u003d 0;\n\tfor (int \u0026amp; x : a) {\n\t\tscanf(\u0026quot;%d\u0026quot;, \u0026amp;x);\n\t\tsum +\u003d x;\n\t}\n\tif (sum !\u003d 0) {\n\t\tputs(\u0026quot;YES\u0026quot;);\n\t\tputs(\u0026quot;1\u0026quot;);\n\t\tprintf(\u0026quot;%d %d\\n\u0026quot;, 1, n);\n\t\texit(0);\n\t}\n\tsum \u003d 0;\n\tfor (int i \u003d 0; i \u0026lt; n; i++) {\n\t\tsum +\u003d a[i];\n\t\tif (sum !\u003d 0) {\n\t\t\tputs(\u0026quot;YES\u0026quot;);\n\t\t\tputs(\u0026quot;2\u0026quot;);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;, 1, i + 1);\n\t\t\tprintf(\u0026quot;%d %d\\n\u0026quot;, i + 2, n);\n\t\t\texit(0);\n\t\t}\n\t}\n\tputs(\u0026quot;NO\u0026quot;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"754B\"\u003eTutorial is loading...\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n\nusing namespace std;\n\nint main() {\n\tchar str[4][4 + 1];\n\t// cells are \u0027.\u0027, \u0027o\u0027, \u0027x\u0027\n\tfor (int i \u003d 0; i \u0026lt; 4; i++) {\n\t\tcin \u0026gt;\u0026gt; str[i];\n\t}\n\n\tauto check \u003d [\u0026amp;]() {\n\t\tfor (int i \u003d 0; i \u0026lt; 4; i++) {\n\t\t\tfor (int j \u003d 0; j \u0026lt; 4; j++) {\n\t\t\t\tfor (int dx \u003d -1; dx \u0026lt;\u003d 1; dx++) {\n\t\t\t\t\tfor (int dy \u003d -1; dy \u0026lt;\u003d 1; dy++) {\n\t\t\t\t\t\tif (dx \u003d\u003d 0 \u0026amp;\u0026amp; dy \u003d\u003d 0) continue;\n\t\t\t\t\t\tif (i + dx * 3 \u0026gt; 4 || j + dy * 3 \u0026gt; 4 || i + dx * 3 \u0026lt; -1 || j + dy * 3 \u0026lt; -1) continue;\n\t\t\t\t\t\tbool ok \u003d true;\n\t\t\t\t\t\tfor (int p \u003d 0; p \u0026lt; 3; p++) {\n\t\t\t\t\t\t\tok \u0026amp;\u003d str[i + p * dx][j + p * dy] \u003d\u003d \u0027x\u0027;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ok) return true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\tfor (int i \u003d 0; i \u0026lt; 4; i++) {\n\t\tfor (int j \u003d 0; j \u0026lt; 4; j++) {\n\t\t\tif (str[i][j] \u003d\u003d \u0027.\u0027) {\n\t\t\t\tstr[i][j] \u003d \u0027x\u0027;\n\t\t\t\tif (check()) {\n\t\t\t\t\tputs(\u0026quot;YES\u0026quot;);\n\t\t\t\t\texit(0);\n\t\t\t\t}\n\t\t\t\tstr[i][j] \u003d \u0027.\u0027;\n\t\t\t}\n\t\t}\n\t}\n\tputs(\u0026quot;NO\u0026quot;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"754C\"\u003eTutorial is loading...\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n\nusing namespace std;\n\n#define all(x) (x).begin(), (x).end()\n\nvoid solve() {\n\tint n;\n\tcin \u0026gt;\u0026gt; n;\n\tvector\u0026lt;string\u0026gt; names(n);\n\tfor (string\u0026amp; name : names) {\n\t\tcin \u0026gt;\u0026gt; name;\n\t}\n\tsort(all(names));\n\n\tauto getIdx \u003d [\u0026amp;](const string\u0026amp; s) {\n\t\tint pos \u003d lower_bound(all(names), s) - names.begin();\n\t\tif (pos \u003d\u003d (int)names.size() || names[pos] !\u003d s) return -1;\n\t\treturn pos;\n\t};\n\n\tauto splitIntoUserMessage \u003d [](const string\u0026amp; s) {\n\t\tsize_t pos \u003d s.find(\u0027:\u0027);\n\t\tassert(pos !\u003d string::npos);\n\t\treturn make_pair(s.substr(0, pos), s.substr(pos + 1));\n\t};\n\n\tauto splitIntoTokensOfLatinLetters \u003d [](const string\u0026amp; s) {\n\t\tvector\u0026lt;string\u0026gt; result;\n\t\tstring token;\n\t\tfor (char c : s) {\n\t\t\tif (isalpha(c) || isdigit(c)) {\n\t\t\t\ttoken +\u003d c;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!token.empty()) {\n\t\t\t\t\tresult.push_back(token);\n\t\t\t\t}\n\t\t\t\ttoken.clear();\n\t\t\t}\n\t\t}\n\t\tif (!token.empty()) {\n\t\t\tresult.push_back(token);\n\t\t}\n\t\treturn result;\n\t};\n\n\tint m;\n\tcin \u0026gt;\u0026gt; m;\n\tvector\u0026lt;int\u0026gt; who(m);\n\tvector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt; can(m, vector\u0026lt;char\u0026gt;(n, true));\n\n\tvector\u0026lt;string\u0026gt; messages(m);\n\n\tstring tmp;\n\tgetline(cin, tmp);\n\n\tfor (int i \u003d 0; i \u0026lt; m; i++) {\n\t\tstring cur;\n\t\tgetline(cin, cur);\n\t\tpair\u0026lt;string, string\u0026gt; p \u003d splitIntoUserMessage(cur);\n\t\tconst string\u0026amp; user \u003d p.first;\n\t\tconst string\u0026amp; message \u003d p.second;\n\t\twho[i] \u003d getIdx(user);\n\t\tif (who[i] !\u003d -1) {\n\t\t\tfill(all(can[i]), false);\n\t\t\tcan[i][who[i]] \u003d true;\n\t\t}\n\t\tmessages[i] \u003d message;\n\t\tvector\u0026lt;string\u0026gt; tokens \u003d splitIntoTokensOfLatinLetters(message);\n\t\tfor (const string\u0026amp; z : tokens) {\n\t\t\tint idx \u003d getIdx(z);\n\t\t\tif (idx !\u003d -1) {\n\t\t\t\tcan[i][idx] \u003d false;\n\t\t\t}\n\t\t}\n\t}\n\n\tvector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; par(m, vector\u0026lt;int\u0026gt;(n, -1));\n\tfor (int i \u003d 0; i \u0026lt; n; i++) {\n\t\tif (can[0][i]) par[0][i] \u003d 0;\n\t}\n\tfor (int msg \u003d 0; msg + 1 \u0026lt; m; msg++) {\n\t\tfor (int i \u003d 0; i \u0026lt; n; i++) {\n\t\t\tif (par[msg][i] \u003d\u003d -1) continue;\n\t\t\tfor (int j \u003d 0; j \u0026lt; n; j++) {\n\t\t\t\tif (i \u003d\u003d j) continue;\n\t\t\t\tif (can[msg + 1][j]) {\n\t\t\t\t\tpar[msg + 1][j] \u003d i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint msg \u003d m - 1, pos \u003d -1;\n\tfor (int i \u003d 0; i \u0026lt; n; i++) {\n\t\tif (par[msg][i] !\u003d -1) {\n\t\t\tpos \u003d i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (pos \u003d\u003d -1) {\n\t\tcout \u0026lt;\u0026lt; \u0026quot;Impossible\\n\u0026quot;;\n\t\treturn;\n\t}\n\twhile (msg \u0026gt;\u003d 0) {\n\t\twho[msg] \u003d pos;\n\t\tpos \u003d par[msg][pos];\n\t\tmsg--;\n\t}\n\tfor (int i \u003d 0; i \u0026lt; m; i++) {\n\t\tcout \u0026lt;\u0026lt; names[who[i]] \u0026lt;\u0026lt; \u0026quot;:\u0026quot; \u0026lt;\u0026lt; messages[i] \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;;\n\t}\n\treturn;\n}\n\nint main() {\n\t//freopen(\u0026quot;input.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n\tint t;\n\tcin \u0026gt;\u0026gt; t; // number of tests\n\n\twhile (t--) {\n\t\tsolve();\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"754D\"\u003eTutorial is loading...\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eCode\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n\nusing namespace std;\n\ntypedef long long ll;\n\nint nextInt() {\n\tint x \u003d 0, p \u003d 1;\n\tchar c;\n\tdo {\n\t\tc \u003d getchar();\n\t} while (c \u0026lt;\u003d 32);\n\tif (c \u003d\u003d \u0027-\u0027) {\n\t\tp \u003d -1;\n\t\tc \u003d getchar();\n\t}\n\twhile (c \u0026gt;\u003d \u00270\u0027 \u0026amp;\u0026amp; c \u0026lt;\u003d \u00279\u0027) {\n\t\tx \u003d x * 10 + c - \u00270\u0027;\n\t\tc \u003d getchar();\n\t}\n\treturn x * p;\n}\n\n#define all(x) (x).begin(), (x).end()\n\nconst int N \u003d (int)3e5 + 5;\nconst int MAX_VAL \u003d (int)1e9;\n\nint n;\nll l[N], r[N];\n\nstruct event {\n\tll x;\n\tint c;\n\tevent() {}\n\tevent(ll x, int c) : x(x), c(c) {}\n};\n\npair\u0026lt;ll, int\u0026gt; check(ll len) {\n\tif (len \u003d\u003d 0) return make_pair(0LL, n);\n\tstatic vector\u0026lt;event\u0026gt; evs;\n\tevs.resize(0);\n\tfor (int i \u003d 1; i \u0026lt;\u003d n; i++) {\n\t\tif (r[i] - len \u0026gt; l[i]) {\n\t\t\tevs.push_back(event(l[i], 1));\n\t\t\tevs.push_back(event(r[i] - len, -1));\n\t\t}\n\t}\n\tsort(all(evs), [](const event \u0026amp; a, const event \u0026amp; b) { return a.x \u0026lt; b.x; });\n\treverse(all(evs));\n\tint cnt \u003d 0, maxiCnt \u003d 0;\n\tll bestPos \u003d 0;\n\twhile (evs.size() \u0026gt; 0) {\n\t\tll x \u003d evs.back().x;\n\t\twhile (evs.size() \u0026gt; 0 \u0026amp;\u0026amp; evs.back().x \u003d\u003d x) {\n\t\t\tcnt +\u003d evs.back().c;\n\t\t\tevs.pop_back();\n\t\t}\n\t\tif (cnt \u0026gt; maxiCnt) {\n\t\t\tmaxiCnt \u003d cnt;\n\t\t\tbestPos \u003d x;\n\t\t}\n\t}\n\treturn make_pair(bestPos, maxiCnt);\n}\n\nvector\u0026lt;int\u0026gt; getAns(ll len) {\n\tif (len \u003d\u003d 0) {\n\t\tvector\u0026lt;int\u0026gt; res(n);\n\t\tiota(all(res), 1);\n\t\treturn res;\n\t}\n\tll pos \u003d check(len).first;\n\tvector\u0026lt;int\u0026gt; res;\n\tfor (int i \u003d 1; i \u0026lt;\u003d n; i++) {\n\t\tif (pos \u0026gt;\u003d l[i] \u0026amp;\u0026amp; pos \u0026lt; r[i] - len) {\n\t\t\tres.push_back(i);\n\t\t}\n\t}\n\treturn res;\n}\n\nint main() {\n\tn \u003d nextInt();\n\tint k \u003d nextInt();\n\tfor (int i \u003d 1; i \u0026lt;\u003d n; i++) {\n\t\tl[i] \u003d nextInt();\n\t\tr[i] \u003d nextInt() + 2;\n\t}\n\tll l \u003d 0, r \u003d MAX_VAL + MAX_VAL + 5;\n\twhile (r - l \u0026gt; 1) {\n\t\tll mid \u003d (l + r) \u0026gt;\u0026gt; 1;\n\t\tif (check(mid).second \u0026gt;\u003d k) l \u003d mid;\n\t\telse r \u003d mid;\n\t}\n\n\tvector\u0026lt;int\u0026gt; ans \u003d getAns(l);\n\n\tcout \u0026lt;\u0026lt; l \u0026lt;\u0026lt; endl;\n\tassert((int)ans.size() \u0026gt;\u003d k);\n\tans.resize(k);\n\tfor (int i : ans) {\n\t\tprintf(\u0026quot;%d \u0026quot;, i);\n\t}\n\tputs(\u0026quot;\u0026quot;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"problemTutorial\" problemcode\u003d\"754E\"\u003eTutorial is loading...\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eC++ code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003e#include \u0026lt;bits/stdc++.h\u0026gt;\n\nusing namespace std;\n\nconst int N \u003d (int)404;\nconst int ALPHA \u003d 26;\n\nbitset\u0026lt;N\u0026gt; b[ALPHA][N];\nchar patt[N][N];\nbitset\u0026lt;N\u0026gt; result[N];\n\nbitset\u0026lt;N\u0026gt; getShifted(const bitset\u0026lt;N\u0026gt;\u0026amp; b, int len, int shift) {\n\tassert(0 \u0026lt;\u003d shift \u0026amp;\u0026amp; shift \u0026lt; len);\n\treturn (b \u0026gt;\u0026gt; shift) | (b \u0026lt;\u0026lt; (len - shift));\n}\n\nint main() {\n#ifdef LOCAL\n\tfreopen(\u0026quot;input.txt\u0026quot;, \u0026quot;r\u0026quot;, stdin);\n#endif\n\tint n, m, r, c;\n\tscanf(\u0026quot;%d%d\u0026quot;, \u0026amp;n, \u0026amp;m);\n\n\tfor (int i \u003d 0; i \u0026lt; n; i++) {\n\t\tstatic char str[N];\n\t\tscanf(\u0026quot;%s\u0026quot;, str);\n\t\tfor (int j \u003d 0; j \u0026lt; m; j++) {\n\t\t\tb[(int)(str[j] - \u0027a\u0027)][i][j] \u003d true;\n\t\t}\n\t}\n\t\n\tscanf(\u0026quot;%d%d\u0026quot;, \u0026amp;r, \u0026amp;c);\n\n\tfor (int i \u003d 0; i \u0026lt; n; i++) {\n\t\tresult[i] \u003d ~result[i];\n\t}\n\n\tfor (int i \u003d 0; i \u0026lt; r; i++) {\n\t\tscanf(\u0026quot;%s\u0026quot;, patt[i]);\n\t\tfor (int j \u003d 0; j \u0026lt; c; j++) {\n\t\t\tif (patt[i][j] \u003d\u003d \u0027?\u0027) continue;\n\t\t\tint c \u003d patt[i][j] - \u0027a\u0027;\n\t\t\tint shiftByX \u003d (((-i) % n) + n) % n;\n\t\t\tint shiftByY \u003d (((j) % m) + m) % m;\n\t\t\tfor (int x \u003d 0; x \u0026lt; n; x++) {\n\t\t\t\tint nx \u003d (x + shiftByX);\n\t\t\t\tif (nx \u0026gt;\u003d n) nx -\u003d n;\n\t\t\t\tresult[nx] \u0026amp;\u003d getShifted(b[c][x], m, shiftByY);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (int i \u003d 0; i \u0026lt; n; i++) {\n\t\tfor (int j \u003d 0; j \u0026lt; m; j++) {\n\t\t\tputchar(result[i][j] ? \u00271\u0027 : \u00270\u0027);\n\t\t}\n\t\tputs(\u0026quot;\u0026quot;);\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv class\u003d\"spoiler\"\u003e\u003cb class\u003d\"spoiler-title\"\u003eJava code\u003c/b\u003e\u003cdiv class\u003d\"spoiler-content\" style\u003d\"display: none;\"\u003e\u003cpre\u003e\u003ccode\u003eimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static class InputReader {\n        BufferedReader bufferedReader;\n        StringTokenizer stringTokenizer;\n        InputReader(InputStream inputStream) {\n            bufferedReader \u003d new BufferedReader(new InputStreamReader(inputStream), 32768);\n            stringTokenizer \u003d null;\n        }\n        String next() {\n            while (stringTokenizer \u003d\u003d null || !stringTokenizer.hasMoreTokens()) {\n                try {\n                    stringTokenizer \u003d new StringTokenizer(bufferedReader.readLine());\n                } catch (IOException ex) {\n                    ex.printStackTrace();\n                    throw new RuntimeException(ex);\n                }\n            }\n            return stringTokenizer.nextToken();\n        }\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n    }\n\n    static int[] newBitSet(int n) {\n        return new int[(n + 31) / 32];\n    }\n\n    static void setBit(int[] a, int pos) {\n        a[pos \u0026gt;\u0026gt;\u0026gt; 5] |\u003d (1 \u0026lt;\u0026lt; (pos \u0026amp; 31));\n    }\n\n    static boolean getBit(int[] a, int pos) {\n        return ((a[pos \u0026gt;\u0026gt;\u0026gt; 5]) \u0026amp; (1 \u0026lt;\u0026lt; (pos \u0026amp; 31))) !\u003d 0;\n    }\n\n    static void setAll(int[] a) {\n        for (int i \u003d 0; i \u0026lt; a.length; i++) {\n            a[i] \u003d ~0;\n        }\n    }\n\n    static void resetAll(int[] a) {\n        for (int i \u003d 0; i \u0026lt; a.length; i++) {\n            a[i] \u003d 0;\n        }\n    }\n\n    static void andXYtoX(int[] x, int[] y) {\n        for (int i \u003d 0; i \u0026lt; x.length; i++) {\n            x[i] \u0026amp;\u003d y[i];\n        }\n    }\n\n    static void leftShiftAndOr(int ch, int shift, int x, int[][][][] shl, int[] to) {\n        int[] z \u003d shl[ch][shift \u0026amp; 31][x];\n        int delta \u003d (shift \u0026gt;\u0026gt;\u0026gt; 5);\n        for (int i \u003d delta; i \u0026lt; to.length; i++) {\n            to[i - delta] |\u003d z[i];\n        }\n    }\n\n    static void rightShiftAndOr(int ch, int shift, int x, int[][][][] shr, int[] to) {\n        int[] z \u003d shr[ch][shift \u0026amp; 31][x];\n        int delta \u003d (shift \u0026gt;\u0026gt;\u0026gt; 5);\n        for (int i \u003d 0; i + delta \u0026lt; to.length; i++) {\n            to[i + delta] |\u003d z[i];\n        }\n    }\n\n    static void printBitset(int a[], int l, int r) {\n        for (int i \u003d l; i \u0026lt;\u003d r; i++) {\n            System.err.print(getBit(a, i) ? \u00271\u0027 : \u00270\u0027);\n        }\n        System.err.println();\n    }\n\n    static final int ALPHA \u003d 26;\n\n    public static void main(String[] args) {\n        InputReader in \u003d new InputReader(System.in);\n        PrintWriter out \u003d new PrintWriter(System.out);\n\n        int n \u003d in.nextInt();\n        int m \u003d in.nextInt();\n\n        int[][][][] shl \u003d new int[ALPHA][32][n][];\n        int[][][][] shr \u003d new int[ALPHA][32][n][];\n\n        for (int c \u003d 0; c \u0026lt; ALPHA; c++) {\n            for (int sh \u003d 0; sh \u0026lt; 32; sh++) {\n                for (int i \u003d 0; i \u0026lt; n; i++) {\n                    shl[c][sh][i] \u003d newBitSet(m);\n                    shr[c][sh][i] \u003d newBitSet(m);\n                }\n            }\n        }\n\n        String[] s \u003d new String[n];\n\n        for (int i \u003d 0; i \u0026lt; n; i++) {\n            s[i] \u003d in.next();\n            for (int j \u003d 0; j \u0026lt; m; j++) {\n                int c \u003d s[i].charAt(j) - \u0027a\u0027;\n                for (int sh \u003d 0; sh \u0026lt; 32; sh++) {\n                    if (j - sh \u0026gt;\u003d 0) {\n                        setBit(shl[c][sh][i], j - sh);\n                    }\n                    if (j + sh \u0026lt; m) {\n                        setBit(shr[c][sh][i], j + sh);\n                    }\n                }\n            }\n        }\n\n        int r \u003d in.nextInt();\n        int c \u003d in.nextInt();\n\n        String[] patt \u003d new String[r];\n\n        int[][] res \u003d new int[n][];\n\n        for (int i \u003d 0; i \u0026lt; n; i++) {\n            res[i] \u003d newBitSet(m);\n            setAll(res[i]);\n        }\n\n        int[] tmp \u003d newBitSet(m);\n\n        for (int i \u003d 0; i \u0026lt; r; i++) {\n            patt[i] \u003d in.next();\n            for (int j \u003d 0; j \u0026lt; c; j++) {\n                if (patt[i].charAt(j) \u003d\u003d \u0027?\u0027) continue;\n                int cur \u003d patt[i].charAt(j) - \u0027a\u0027;\n                int shiftByX \u003d (((-i) % n) + n) % n;\n                int shiftByY \u003d (((j) % m) + m) % m;\n\n                for (int x \u003d 0; x \u0026lt; n; x++) {\n                    int nx \u003d x + shiftByX;\n                    if (nx \u0026gt;\u003d n) nx -\u003d n;\n                    resetAll(tmp);\n                    leftShiftAndOr(cur, shiftByY, x, shl, tmp);\n                    rightShiftAndOr(cur, m - shiftByY, x, shr, tmp);\n                    andXYtoX(res[nx], tmp);\n                }\n            }\n        }\n\n        for (int i \u003d 0; i \u0026lt; n; i++) {\n            for (int j \u003d 0; j \u0026lt; m; j++) {\n                out.print(getBit(res[i], j) ? \u00271\u0027 : \u00270\u0027);\n            }\n            out.println();\n        }\n\n        out.close();\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e","tags":["edirorial","analysis","390"]}}