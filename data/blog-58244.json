{"status":"OK","result":{"originalLocale":"en","allowViewHistory":false,"creationTimeSeconds":1520526488,"rating":3,"authorHandle":"Unlimited_Time","modificationTimeSeconds":1520526488,"id":58244,"title":"\u003cp\u003eNotes on Codeforces Beta Round #122, Div2- A, B, C, D, E\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003e\u003ca href\u003d\"/contest/194/problem/A\" title\u003d\"Codeforces Round 122 (Div. 2)\"\u003e194A - Exams\u003c/a\u003e\u003c/p\u003e\u003cp\u003eSuppose that we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e exams with value \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e. Then, we have \u003cspan class\u003d\"tex-span\"\u003e2\u003ci\u003em\u003c/i\u003e + 3(\u003ci\u003en\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e) ≤ \u003ci\u003ek\u003c/i\u003e ≤ 2\u003ci\u003em\u003c/i\u003e + 5(\u003ci\u003en\u003c/i\u003e - \u003ci\u003em\u003c/i\u003e)\u003c/span\u003e. As the problem guarantees that there is at least one reasonable answer, we have \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e ≥ 3\u003ci\u003en\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. Therefore, the answer should be \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003emax\u003c/i\u003e(3\u003ci\u003en\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e, 0)\u003c/span\u003e.\u003c/p\u003e\u003cp\u003eAn intuitive understanding of the above result is that we can first assign \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e to all the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003en\u003c/i\u003e\u003c/span\u003e exams. If \u003cspan class\u003d\"tex-span\"\u003e3\u003ci\u003en\u003c/i\u003e ≤ \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, it means that we can assign the extra \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e - 3\u003ci\u003en\u003c/i\u003e\u003c/span\u003e values to some exams and we have zero \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003es. On the other hand, we have \u003cspan class\u003d\"tex-span\"\u003e3\u003ci\u003en\u003c/i\u003e \u0026gt; \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e, and thus we have to “set” at least \u003cspan class\u003d\"tex-span\"\u003e3\u003ci\u003en\u003c/i\u003e - \u003ci\u003ek\u003c/i\u003e\u003c/span\u003e exams from \u003cspan class\u003d\"tex-span\"\u003e3\u003c/span\u003e to \u003cspan class\u003d\"tex-span\"\u003e2\u003c/span\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/194/problem/B\" title\u003d\"Codeforces Round 122 (Div. 2)\"\u003e194B - Square\u003c/a\u003e\u003c/p\u003e\u003cp\u003eBy some simple induction, one can see that we should find the minimum positive integer \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e so that \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e(\u003ci\u003en\u003c/i\u003e + 1)\u003c/span\u003e is a multiple of \u003cspan class\u003d\"tex-span\"\u003e4\u003ci\u003en\u003c/i\u003e\u003c/span\u003e. The result is that \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/5c/af/5cafd4bf6fd382372b5288bce9cd3ef3be4674b1.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/194/problem/C\" title\u003d\"Codeforces Round 122 (Div. 2)\"\u003e194C - Cutting Figure\u003c/a\u003e\u003c/p\u003e\u003cp\u003eLet the number of “#” is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e. If \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e ≤ 2\u003c/span\u003e, the answer is “impossible” (check the problem description). Otherwise, we check whether there is at least one cut point or not. If yes, the answer is obviously \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e since we can remove the cut point. If no, it suffices to remove two points to break the connectivity (this result seems quite intuitive and one can check the tutorials for proof). We can use tarjan\u0027s algorithm to find the cut point if there is any.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/194/problem/D\" title\u003d\"Codeforces Round 122 (Div. 2)\"\u003e194D - Xor\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe trick is that any \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e consecutive “xor” operations is equivalent to either one single (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is odd) or zero “xor” operation (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ek\u003c/i\u003e\u003c/span\u003e is even).\u003c/p\u003e\u003cp\u003eThus, we can use dfs to solve this. We build a dfs function with input \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eres\u003c/i\u003e\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eflag\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eres\u003c/i\u003e\u003c/span\u003e denotes the total number of operations that we still can implement, and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eflag\u003c/i\u003e\u003c/span\u003e denotes whether the last operation is a single (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eflag\u003c/i\u003e \u003d 1\u003c/span\u003e) or zero (\u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eflag\u003c/i\u003e \u003d 0\u003c/span\u003e) “xor” operation. Whenever we enter the dfs function, we first set all the remaining \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eres\u003c/i\u003e\u003c/span\u003e operations as “xor” and calculate a value and update the maximum answer. Then, we check the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eflag\u003c/i\u003e\u003c/span\u003e and if \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eflag\u003c/i\u003e \u003d 0\u003c/span\u003e, we can implement one single “xor” operation and recursively call this dfs function with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eres\u003c/i\u003e - 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eflag\u003c/i\u003e \u003d 1\u003c/span\u003e. However, no matter what the value of \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eflag\u003c/i\u003e\u003c/span\u003e is, we should always call dfs once again with \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eres\u003c/i\u003e - 1\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eflag\u003c/i\u003e \u003d 0\u003c/span\u003e. Be careful that, as usually done in dfs with backtracing, we should record the “state” before we call dfs again, while after calling, we should restore the state.\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"/contest/194/problem/E\" title\u003d\"Codeforces Round 122 (Div. 2)\"\u003e194E - Hamming Distance\u003c/a\u003e\u003c/p\u003e\u003cp\u003eI learned from the turotials.\u003c/p\u003e\u003cp\u003eSupoose that we write the first sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e in the first row, the second sequence \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e[\u003ci\u003en\u003c/i\u003e]\u003c/span\u003e in the second row, and so on, which finally forms a matrix (this is straightfoward). For each column, it can be viewed as a sequence of length \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e, consisting of \u003cspan class\u003d\"tex-span\"\u003e0\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e1\u003c/span\u003e. We first give an intuitive example to show how the tutorials work. For a column (1 0 1 1), i.e., \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 0\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e3\u003c/sub\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 1\u003c/span\u003e, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003es\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e4\u003c/sub\u003e[\u003ci\u003ei\u003c/i\u003e] \u003d 1\u003c/span\u003e, after six “xor” operations (according to the order), it gives (1 0 0 1 1 0), i.e., \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/71/f1/71f1162841dbc2f12c721dd34182c19f581ac2b8.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, \u003cimg align\u003d\"middle\" class\u003d\"tex-formula\" src\u003d\"/predownloaded/b1/38/b13896d2acd967be1a0b3a3af5b71ffaad4891e2.png\" style\u003d\"max-width: 100.0%;max-height: 100.0%;\" /\u003e, and so on. Similarly, for a column (0 1 1 0), it gives (1 1 0 0 1 1). Based on the above examples, we can see that the column can have \u003cspan class\u003d\"tex-span\"\u003e2\u003csup class\u003d\"upper-index\"\u003e4\u003c/sup\u003e \u003d 16\u003c/span\u003e different sequences, which correspond to \u003cspan class\u003d\"tex-span\"\u003e16\u003c/span\u003e “xor operation sequence”. Thus, as the final matrix has \u003cspan class\u003d\"tex-span\"\u003e4\u003c/span\u003e rows and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e columns, each column must be one of the \u003cspan class\u003d\"tex-span\"\u003e16\u003c/span\u003e sequences, and we can further build another matrix with \u003cspan class\u003d\"tex-span\"\u003e6\u003c/span\u003e rows and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003em\u003c/i\u003e\u003c/span\u003e column, and the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th column is just the “xor operation sequence” of the \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ei\u003c/i\u003e\u003c/span\u003e-th column in the \u003cspan class\u003d\"tex-span\"\u003e4 × \u003ci\u003em\u003c/i\u003e\u003c/span\u003e matrix. Next, suppose that the number of each “xor operation sequence” involved in the \u003cspan class\u003d\"tex-span\"\u003e6 × \u003ci\u003em\u003c/i\u003e\u003c/span\u003e matrix is \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e16\u003c/sub\u003e\u003c/span\u003e. Then, we can build an equation \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eAx\u003c/i\u003e \u003d \u003ci\u003eb\u003c/i\u003e\u003c/span\u003e, where \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eA\u003c/i\u003e\u003c/span\u003e is a \u003cspan class\u003d\"tex-span\"\u003e6 × 16\u003c/span\u003e matrix consisting of the 16 “xor operation sequence”, \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/span\u003e is just the vector \u003cspan class\u003d\"tex-span\"\u003e(\u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e1\u003c/sub\u003e, \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e2\u003c/sub\u003e, ..., \u003ci\u003ex\u003c/i\u003e\u003csub class\u003d\"lower-index\"\u003e16\u003c/sub\u003e)\u003c/span\u003e and \u003cspan class\u003d\"tex-span\"\u003e\u003ci\u003eb\u003c/i\u003e\u003c/span\u003e is a vector of length \u003cspan class\u003d\"tex-span\"\u003e6\u003c/span\u003e, just the given six values in the problem. Now, the problem is reduced to solving such a linear equation with 16 variables and 6 equations.\u003c/p\u003e\u003cp\u003eNevertheless, some of these \u003cspan class\u003d\"tex-span\"\u003e16\u003c/span\u003e “xor operation sequence” are the same. For instance, one can check that both (0 1 1 0) and (1 0 0 1) will give (1 1 0 0 1 1). Therefore, some of the variables can be combined to one single variable. After some simple compution (or write extra codes to accomplish this), the original equation can be further reduced to 7 variables and 6 equations. To solve this, we can enumerate the value of any one of the 7 variables, while solving the remaining 6 ones by gaussian elimination, and find out the optimal answer.\u003c/p\u003e\u003c/div\u003e","tags":[]}}