{"status":"OK","result":{"originalLocale":"ru","allowViewHistory":false,"creationTimeSeconds":1402709601,"rating":263,"authorHandle":"Nickolas","modificationTimeSeconds":1402850974,"id":12683,"title":"\u003cp\u003eProblemsetter\u0027s Memoir\u003c/p\u003e","locale":"en","content":"\u003cdiv class\u003d\"ttypography\"\u003e\u003cp\u003ePreparing a contest is not as popular a topic as the perennial question of \u0026quot;how to become red in three months\u0026quot;, but still it stirs some interest in Codeforces community now and then. Earlier I\u0027ve written about \u003ca href\u003d\"//codeforces.com/blog/entry/4290\"\u003epreparing Surprise Language Round\u003c/a\u003e and about \u003ca href\u003d\"//codeforces.com/blog/entry/3857\"\u003eemotional aspect of problemsetting\u003c/a\u003e; now it\u0027s time to share some facts about running regular contests. \u003c/p\u003e\u003ch3\u003eProblems\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003eHow much time does it take to prepare, select, recall or find problem ideas?\u003c/p\u003e\u003cp\u003eHow much experience solving competitive programming problems is necessary to be confident about inventing problems of your own?\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003eIdea generation is a long-term, nearly continuous process. A couple of years ago when I was still an active problemsetter I used to create ideas from literally everything (a squirrel running... hey, this could be a great problem! — seriously, the problem is still there in my drafts, and a pretty complicated one) and to write them down. Then when I had time and inspiration to run a contest, I went through the drafts looking for ideas which would be 1) solvable and 2) nice and unusual enough, and combined them in a problem set. The drawback of this approach is that I can\u0027t invent problems based on \u0026quot;we need a problem on DP\u0026quot; here, I can only start with the legend and solve it, but not the other way around.\u003c/p\u003e\u003cp\u003eInventing complicated problem ideas totally requires lots of experience solving them during the contests — at least if you aim to invent a good idea. You can always take a standard algorithm with a long dreary implementation, add some geometry, a couple of corner cases to taste, shake and polish with a not-so-clear statement. But creating a problem that nobody can solve is hardly a problemsetter\u0027s virtue. A virtue is creating a problem with a cool idea, hard but possible to solve, and last but not least — a joyful problem which would give a \u0026quot;spend an hour thinking, couldn\u0027t figure it out, read the editorial, what an amazing idea!\u0026quot; feeling, not a \u0026quot;spent an hour coding, failed test 89, urgh!\u0026quot; one. The more experience one has competing, the more interesting and unusual their problems are.\u003c/p\u003e\u003cp\u003eFirst 4 of my contests (TC High School — problems for high school students, a bit easier than Div2) 1000pt problems were almost the same — breadth-first search, with a twist of geometry or a non-square grid. It was fine for a high-school contest in 2007, but it\u0027s certainly too boring for a Div2 contest in 2014 :-)\u003c/p\u003e\u003cp\u003eAnd if we talk about Div1 problems, in all my years as a problemsetter I\u0027ve created only 4 problems which were harder than what I could typically solve: two Div1 1000pts on TC (\u003ca href\u003d\"http://community.topcoder.com/stat?c\u003dproblem_statement\u0026amp;pm\u003d7832\"\u003e1\u003c/a\u003e, \u003ca href\u003d\"http://community.topcoder.com/stat?c\u003dproblem_statement\u0026amp;pm\u003d10419\"\u003e2\u003c/a\u003e) and Div1 \u003ca href\u003d\"/contest/132/problem/D\" title\u003d\"Codeforces Beta Round 96 (Div. 1)\"\u003e132D - Constants in the language of Shakespeare\u003c/a\u003e and \u003ca href\u003d\"/contest/132/problem/E\" title\u003d\"Codeforces Beta Round 96 (Div. 1)\"\u003e132E - Bits of merry old England\u003c/a\u003e on CF. One of them was geometry + graph theory (i.e. cruel implementation), and for the other three I used some red people\u0027s help.\u003c/p\u003e\u003cp\u003eThere also were easier problems in which testers challenged my author\u0027s solution (and sometimes with tests I didn\u0027t quite understand), so we had to switch to their solutions as reference ones; for example, in \u003ca href\u003d\"/contest/345/problem/E\" title\u003d\"Friday the 13th, Programmers Day\"\u003e345E - Black Cat Rush\u003c/a\u003e my pure geometry solution was wrong, and we had to use a ternary search instead. A lot of problems were ruled out by more experienced problem coordinators/coauthors for being boring or standard, though they felt like new and complex to me. And even more problems are still in drafts, because I still have no idea how to solve them. I can\u0027t speak for all yellow/violet members, but personally I need help of redder members to create a Div1 round.\u003c/p\u003e \u003cblockquote\u003e\u003cp\u003eHow much time does it take you to prepare a round?\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003eA lot. It is known that a problem \u003d idea + statement + reference solution + infrastructure (checker, test validator, test generator, tests for special cases etc.). And while it might take 60 seconds to get an idea, everything else takes time, a lot of time, and the harder the problem is, the more time implementation takes. Even entertaining problems for special rounds with trivial solutions couple lines long and standard tests (several integers from certain range or a string of certain characters — no fancy restrictions) take at least an hour from creating the problem in Polygon to first version check-in. Infrastructure reuse helps a bit — you can borrow validators and generators from old problems with similar test structure, and sometimes you can even borrow the problems themselves (for SLR, for example). All in all contest preparation can take anything from 3-4 days (if it\u0027s a weekend and the contest is simple) to several weeks. Last couple of days before the contest I often have to stay up well after midnight — for some reason preparing problems always takes longer than I\u0027ve planned.\u003c/p\u003e\u003cp\u003eTests are a separate nightmare. I\u0027ve vowed against writing problems with graphs and mazes a long time ago, because the fun of solving them is trumped by the pain of creating a strict validator (can take several days). Besides, the more complicated the input data is, the easier it is to make a mistake generating or validating it. My model bug in this area is problem \u003ca href\u003d\"http://community.topcoder.com/stat?c\u003dproblem_statement\u0026amp;pm\u003d7902\"\u003eTrianglesBoard\u003c/a\u003e; you can try to find it if you wish before reading on.\u003c/p\u003e\u003cp\u003e\u003cem\u003eHint: TC Arena prohibits entering lines over 50 characters long in test.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eAnswer: \u0026quot;board will contain between 1 and 50 elements, inclusive.\u0026quot; + \u0026quot;Element i of board will contain exactly 2*i+1 characters.\u0026quot; means that max test has 50 lines, and last line has 99 characters — and such test will be impossible to enter during Challenge phase. Alas, that contest had crippled Challenge phase, and that was really embarrassing.\u003c/p\u003e\u003ch3\u003ePeople\u003c/h3\u003e \u003cblockquote\u003e\u003cp\u003eHow do you communicate with CF admins? How fast is the process?\u003c/p\u003e\u003cp\u003eHow many iterations can it take for everyone to agree on the problem ideas before starting to prepare the contest?\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003eWe communicate via email and google talk. For the last 18 months the time zone difference between me and CF headquarters is around 11 hours, so the process is not exactly fast :-) For regular contests (not the ones \u0026quot;I want to write an SLR, please set up COBOL compiler and give me a date, and I\u0027ll do everything else myself\u0026quot;) problem discussion can take a week or more, especially for harder problems in which I have only a vague idea and no certainty about how to solve it. On the other hand, approximately 24-48 hours before the contest communication becomes swift and intense — unlike TC, which has a lockdown 24 hours prior to the SRM, and you can modify the problems in lockdown only in case of a great need.\u003c/p\u003e \u003cblockquote\u003e\u003cp\u003eWho can help if I don\u0027t have enough problems or their quality is not as high as I\u0027d like? Do CF headquarters help here?\u003c/p\u003e\u003cp\u003eHow are testers chosen and what is their contribution to the process?\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003eTC appoints testers officially from a very limited pool, and the problem writer doesn\u0027t have a say in the matter. On CF testers are whoever the writer invited to help (well, except for \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/Gerald\" title\u003d\"Master Gerald\"\u003eGerald\u003c/a\u003e). Same goes for missing problems — they will be contributed by whoever you can persuade to contribute. I think CF has a concept of \u0026quot;coauthor\u0026quot; rather than \u0026quot;tester\u0026quot; — a coauthor can help compose the problem set, criticize some ideas and offer others, they can even provide reference solution and infrastructure for a problem if the writer doesn\u0027t have time for this (although this is a very optimistic scenario), and everything else as agreed. There are two extremities here — I write Surprise Language Rounds pretty much alone, and April Fools contest 2012 was prepared by \u003ca class\u003d\"rated-user user-orange\" href\u003d\"/profile/maksay\" title\u003d\"Master maksay\"\u003emaksay\u003c/a\u003e (who btw is a total saint!), I just invented the contest concept and problem ideas and then looked through problems when they were ready. Most cases are something in between.\u003c/p\u003e \u003cblockquote\u003e\u003cp\u003eIs author\u0027s presence and participation necessary during the contest itself?\u003c/p\u003e \u003c/blockquote\u003e\u003cp\u003eYes, sure. Each contest has admin interface with participants\u0027 questions which need answering. This is a kind of automated feedback — if you wrote a bad statement, please answer a hundred questions with clarifications; if you have written an SLR, please explain that you really can submit in only one language, and no, C++ is not available. And if all is well and quiet — well, enjoy and writing the editorial to publish it as soon as possible (I believe I\u0027ve never yet managed to write an editorial beforehand).\u003c/p\u003e\u003cp\u003eAnd that\u0027s how a contest looks from inside.\u003c/p\u003e\u003c/div\u003e","tags":["author","problem setting"]}}